ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"mpu6050.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	devAddr,1,1
  18              		.comm	buffer,22,4
  19              		.section	.text.MPU6050_init,"ax",%progbits
  20              		.align	2
  21              		.global	MPU6050_init
  22              		.code	16
  23              		.thumb_func
  24              		.type	MPU6050_init, %function
  25              	MPU6050_init:
  26              	.LFB0:
  27              		.file 1 ".\\mpu6050.c"
   1:.\mpu6050.c   **** // I2Cdev library collection - MPU6050 I2C device class
   2:.\mpu6050.c   **** // Based on InvenSense MPU-6050 register map document rev. 2.0, 5/19/2011 (RM-MPU-6000A-00)
   3:.\mpu6050.c   **** // 8/24/2011 by Jeff Rowberg <jeff@rowberg.net>
   4:.\mpu6050.c   **** // Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib
   5:.\mpu6050.c   **** //
   6:.\mpu6050.c   **** // Changelog:
   7:.\mpu6050.c   **** // 26/May/2014: C version to be used on PSoC Creator (www.cypress.com) by Hernán Sánchez
   8:.\mpu6050.c   **** //     ... - ongoing debug release
   9:.\mpu6050.c   **** 
  10:.\mpu6050.c   **** // NOTE: THIS IS ONLY A PARIAL RELEASE. THIS DEVICE CLASS IS CURRENTLY UNDERGOING ACTIVE
  11:.\mpu6050.c   **** // DEVELOPMENT AND IS STILL MISSING SOME IMPORTANT FEATURES. PLEASE KEEP THIS IN MIND IF
  12:.\mpu6050.c   **** // YOU DECIDE TO USE THIS PARTICULAR CODE FOR ANYTHING.
  13:.\mpu6050.c   **** 
  14:.\mpu6050.c   **** /* ============================================
  15:.\mpu6050.c   **** I2Cdev device library code is placed under the MIT license
  16:.\mpu6050.c   **** Copyright (c) 2012 Jeff Rowberg
  17:.\mpu6050.c   **** 
  18:.\mpu6050.c   **** Permission is hereby granted, free of charge, to any person obtaining a copy
  19:.\mpu6050.c   **** of this software and associated documentation files (the "Software"), to deal
  20:.\mpu6050.c   **** in the Software without restriction, including without limitation the rights
  21:.\mpu6050.c   **** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  22:.\mpu6050.c   **** copies of the Software, and to permit persons to whom the Software is
  23:.\mpu6050.c   **** furnished to do so, subject to the following conditions:
  24:.\mpu6050.c   **** 
  25:.\mpu6050.c   **** The above copyright notice and this permission notice shall be included in
  26:.\mpu6050.c   **** all copies or substantial portions of the Software.
  27:.\mpu6050.c   **** 
  28:.\mpu6050.c   **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:.\mpu6050.c   **** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:.\mpu6050.c   **** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 2


  31:.\mpu6050.c   **** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  32:.\mpu6050.c   **** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  33:.\mpu6050.c   **** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  34:.\mpu6050.c   **** THE SOFTWARE.
  35:.\mpu6050.c   **** ===============================================
  36:.\mpu6050.c   **** */
  37:.\mpu6050.c   **** 
  38:.\mpu6050.c   **** 
  39:.\mpu6050.c   **** #include <stdint.h>
  40:.\mpu6050.c   **** #include "mpu6050.h"
  41:.\mpu6050.c   **** 
  42:.\mpu6050.c   **** /** Default constructor, uses default I2C address.
  43:.\mpu6050.c   ****  * @see MPU6050_DEFAULT_ADDRESS
  44:.\mpu6050.c   ****  */
  45:.\mpu6050.c   **** void MPU6050_init() {
  28              		.loc 1 45 0
  29              		.cfi_startproc
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  46:.\mpu6050.c   ****     devAddr = MPU6050_DEFAULT_ADDRESS;
  36              		.loc 1 46 0
  37 0004 024B     		ldr	r3, .L2
  38 0006 6822     		mov	r2, #104
  39 0008 1A70     		strb	r2, [r3]
  47:.\mpu6050.c   **** }
  40              		.loc 1 47 0
  41 000a BD46     		mov	sp, r7
  42              		@ sp needed
  43 000c 80BD     		pop	{r7, pc}
  44              	.L3:
  45 000e C046     		.align	2
  46              	.L2:
  47 0010 00000000 		.word	devAddr
  48              		.cfi_endproc
  49              	.LFE0:
  50              		.size	MPU6050_init, .-MPU6050_init
  51              		.section	.text.I2C_MPU6050_I2CAddress,"ax",%progbits
  52              		.align	2
  53              		.global	I2C_MPU6050_I2CAddress
  54              		.code	16
  55              		.thumb_func
  56              		.type	I2C_MPU6050_I2CAddress, %function
  57              	I2C_MPU6050_I2CAddress:
  58              	.LFB1:
  48:.\mpu6050.c   **** 
  49:.\mpu6050.c   **** /** Specific address constructor.
  50:.\mpu6050.c   ****  * @param address I2C address
  51:.\mpu6050.c   ****  * @see MPU6050_DEFAULT_ADDRESS
  52:.\mpu6050.c   ****  * @see MPU6050_ADDRESS_AD0_LOW
  53:.\mpu6050.c   ****  * @see MPU6050_ADDRESS_AD0_HIGH
  54:.\mpu6050.c   ****  */
  55:.\mpu6050.c   **** void I2C_MPU6050_I2CAddress(uint8_t address) {
  59              		.loc 1 55 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 3


  60              		.cfi_startproc
  61 0000 80B5     		push	{r7, lr}
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 7, -8
  64              		.cfi_offset 14, -4
  65 0002 82B0     		sub	sp, sp, #8
  66              		.cfi_def_cfa_offset 16
  67 0004 00AF     		add	r7, sp, #0
  68              		.cfi_def_cfa_register 7
  69 0006 021C     		mov	r2, r0
  70 0008 FB1D     		add	r3, r7, #7
  71 000a 1A70     		strb	r2, [r3]
  56:.\mpu6050.c   ****     devAddr = address;
  72              		.loc 1 56 0
  73 000c 034B     		ldr	r3, .L5
  74 000e FA1D     		add	r2, r7, #7
  75 0010 1278     		ldrb	r2, [r2]
  76 0012 1A70     		strb	r2, [r3]
  57:.\mpu6050.c   **** }
  77              		.loc 1 57 0
  78 0014 BD46     		mov	sp, r7
  79 0016 02B0     		add	sp, sp, #8
  80              		@ sp needed
  81 0018 80BD     		pop	{r7, pc}
  82              	.L6:
  83 001a C046     		.align	2
  84              	.L5:
  85 001c 00000000 		.word	devAddr
  86              		.cfi_endproc
  87              	.LFE1:
  88              		.size	I2C_MPU6050_I2CAddress, .-I2C_MPU6050_I2CAddress
  89              		.section	.text.MPU6050_initialize,"ax",%progbits
  90              		.align	2
  91              		.global	MPU6050_initialize
  92              		.code	16
  93              		.thumb_func
  94              		.type	MPU6050_initialize, %function
  95              	MPU6050_initialize:
  96              	.LFB2:
  58:.\mpu6050.c   **** 
  59:.\mpu6050.c   **** /** Power on and prepare for general usage.
  60:.\mpu6050.c   ****  * This will activate the device and take it out of sleep mode (which must be done
  61:.\mpu6050.c   ****  * after start-up). This function also sets both the accelerometer and the gyroscope
  62:.\mpu6050.c   ****  * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
  63:.\mpu6050.c   ****  * the clock source to use the X Gyro for reference, which is slightly better than
  64:.\mpu6050.c   ****  * the default internal clock source.
  65:.\mpu6050.c   ****  */
  66:.\mpu6050.c   **** void MPU6050_initialize() {
  97              		.loc 1 66 0
  98              		.cfi_startproc
  99 0000 80B5     		push	{r7, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 00AF     		add	r7, sp, #0
 104              		.cfi_def_cfa_register 7
  67:.\mpu6050.c   ****     MPU6050_setClockSource(MPU6050_CLOCK_PLL_XGYRO);
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 4


 105              		.loc 1 67 0
 106 0004 0120     		mov	r0, #1
 107 0006 FFF7FEFF 		bl	MPU6050_setClockSource
  68:.\mpu6050.c   ****     MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 108              		.loc 1 68 0
 109 000a 0020     		mov	r0, #0
 110 000c FFF7FEFF 		bl	MPU6050_setFullScaleGyroRange
  69:.\mpu6050.c   ****     MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 111              		.loc 1 69 0
 112 0010 0020     		mov	r0, #0
 113 0012 FFF7FEFF 		bl	MPU6050_setFullScaleAccelRange
  70:.\mpu6050.c   ****     MPU6050_setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 114              		.loc 1 70 0
 115 0016 0020     		mov	r0, #0
 116 0018 FFF7FEFF 		bl	MPU6050_setSleepEnabled
  71:.\mpu6050.c   **** }
 117              		.loc 1 71 0
 118 001c BD46     		mov	sp, r7
 119              		@ sp needed
 120 001e 80BD     		pop	{r7, pc}
 121              		.cfi_endproc
 122              	.LFE2:
 123              		.size	MPU6050_initialize, .-MPU6050_initialize
 124              		.section	.text.MPU6050_testConnection,"ax",%progbits
 125              		.align	2
 126              		.global	MPU6050_testConnection
 127              		.code	16
 128              		.thumb_func
 129              		.type	MPU6050_testConnection, %function
 130              	MPU6050_testConnection:
 131              	.LFB3:
  72:.\mpu6050.c   **** 
  73:.\mpu6050.c   **** /** Verify the I2C connection.
  74:.\mpu6050.c   ****  * Make sure the device is connected and responds as expected.
  75:.\mpu6050.c   ****  * @return True if connection is valid, false otherwise
  76:.\mpu6050.c   ****  */
  77:.\mpu6050.c   **** bool MPU6050_testConnection() {
 132              		.loc 1 77 0
 133              		.cfi_startproc
 134 0000 80B5     		push	{r7, lr}
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 7, -8
 137              		.cfi_offset 14, -4
 138 0002 00AF     		add	r7, sp, #0
 139              		.cfi_def_cfa_register 7
  78:.\mpu6050.c   ****     return MPU6050_getDeviceID() == 0x34;
 140              		.loc 1 78 0
 141 0004 FFF7FEFF 		bl	MPU6050_getDeviceID
 142 0008 031C     		mov	r3, r0
 143 000a 343B     		sub	r3, r3, #52
 144 000c 5A42     		neg	r2, r3
 145 000e 5341     		adc	r3, r3, r2
 146 0010 DBB2     		uxtb	r3, r3
  79:.\mpu6050.c   **** }
 147              		.loc 1 79 0
 148 0012 181C     		mov	r0, r3
 149 0014 BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 5


 150              		@ sp needed
 151 0016 80BD     		pop	{r7, pc}
 152              		.cfi_endproc
 153              	.LFE3:
 154              		.size	MPU6050_testConnection, .-MPU6050_testConnection
 155              		.section	.text.MPU6050_getAuxVDDIOLevel,"ax",%progbits
 156              		.align	2
 157              		.global	MPU6050_getAuxVDDIOLevel
 158              		.code	16
 159              		.thumb_func
 160              		.type	MPU6050_getAuxVDDIOLevel, %function
 161              	MPU6050_getAuxVDDIOLevel:
 162              	.LFB4:
  80:.\mpu6050.c   **** 
  81:.\mpu6050.c   **** // AUX_VDDIO register (InvenSense demo code calls this RA_*G_OFFS_TC)
  82:.\mpu6050.c   **** 
  83:.\mpu6050.c   **** /** Get the auxiliary I2C supply voltage level.
  84:.\mpu6050.c   ****  * When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to
  85:.\mpu6050.c   ****  * 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to
  86:.\mpu6050.c   ****  * the MPU-6000, which does not have a VLOGIC pin.
  87:.\mpu6050.c   ****  * @return I2C supply voltage level (0=VLOGIC, 1=VDD)
  88:.\mpu6050.c   ****  */
  89:.\mpu6050.c   **** uint8_t MPU6050_getAuxVDDIOLevel() {
 163              		.loc 1 89 0
 164              		.cfi_startproc
 165 0000 80B5     		push	{r7, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0002 00AF     		add	r7, sp, #0
 170              		.cfi_def_cfa_register 7
  90:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_PWR_MODE_BIT, buffer);
 171              		.loc 1 90 0
 172 0004 064B     		ldr	r3, .L12
 173 0006 1A78     		ldrb	r2, [r3]
 174 0008 064B     		ldr	r3, .L12+4
 175 000a 101C     		mov	r0, r2
 176 000c 0121     		mov	r1, #1
 177 000e 0722     		mov	r2, #7
 178 0010 FFF7FEFF 		bl	I2CReadBit
  91:.\mpu6050.c   ****     return buffer[0];
 179              		.loc 1 91 0
 180 0014 034B     		ldr	r3, .L12+4
 181 0016 1B78     		ldrb	r3, [r3]
  92:.\mpu6050.c   **** }
 182              		.loc 1 92 0
 183 0018 181C     		mov	r0, r3
 184 001a BD46     		mov	sp, r7
 185              		@ sp needed
 186 001c 80BD     		pop	{r7, pc}
 187              	.L13:
 188 001e C046     		.align	2
 189              	.L12:
 190 0020 00000000 		.word	devAddr
 191 0024 00000000 		.word	buffer
 192              		.cfi_endproc
 193              	.LFE4:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 6


 194              		.size	MPU6050_getAuxVDDIOLevel, .-MPU6050_getAuxVDDIOLevel
 195              		.section	.text.MPU6050_setAuxVDDIOLevel,"ax",%progbits
 196              		.align	2
 197              		.global	MPU6050_setAuxVDDIOLevel
 198              		.code	16
 199              		.thumb_func
 200              		.type	MPU6050_setAuxVDDIOLevel, %function
 201              	MPU6050_setAuxVDDIOLevel:
 202              	.LFB5:
  93:.\mpu6050.c   **** /** Set the auxiliary I2C supply voltage level.
  94:.\mpu6050.c   ****  * When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to
  95:.\mpu6050.c   ****  * 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to
  96:.\mpu6050.c   ****  * the MPU-6000, which does not have a VLOGIC pin.
  97:.\mpu6050.c   ****  * @param level I2C supply voltage level (0=VLOGIC, 1=VDD)
  98:.\mpu6050.c   ****  */
  99:.\mpu6050.c   **** void MPU6050_setAuxVDDIOLevel(uint8_t level) {
 203              		.loc 1 99 0
 204              		.cfi_startproc
 205 0000 80B5     		push	{r7, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 82B0     		sub	sp, sp, #8
 210              		.cfi_def_cfa_offset 16
 211 0004 00AF     		add	r7, sp, #0
 212              		.cfi_def_cfa_register 7
 213 0006 021C     		mov	r2, r0
 214 0008 FB1D     		add	r3, r7, #7
 215 000a 1A70     		strb	r2, [r3]
 100:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_PWR_MODE_BIT, level);
 216              		.loc 1 100 0
 217 000c 054B     		ldr	r3, .L15
 218 000e 1A78     		ldrb	r2, [r3]
 219 0010 FB1D     		add	r3, r7, #7
 220 0012 1B78     		ldrb	r3, [r3]
 221 0014 101C     		mov	r0, r2
 222 0016 0121     		mov	r1, #1
 223 0018 0722     		mov	r2, #7
 224 001a FFF7FEFF 		bl	I2CWriteBit
 101:.\mpu6050.c   **** }
 225              		.loc 1 101 0
 226 001e BD46     		mov	sp, r7
 227 0020 02B0     		add	sp, sp, #8
 228              		@ sp needed
 229 0022 80BD     		pop	{r7, pc}
 230              	.L16:
 231              		.align	2
 232              	.L15:
 233 0024 00000000 		.word	devAddr
 234              		.cfi_endproc
 235              	.LFE5:
 236              		.size	MPU6050_setAuxVDDIOLevel, .-MPU6050_setAuxVDDIOLevel
 237              		.section	.text.MPU6050_getRate,"ax",%progbits
 238              		.align	2
 239              		.global	MPU6050_getRate
 240              		.code	16
 241              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 7


 242              		.type	MPU6050_getRate, %function
 243              	MPU6050_getRate:
 244              	.LFB6:
 102:.\mpu6050.c   **** 
 103:.\mpu6050.c   **** // SMPLRT_DIV register
 104:.\mpu6050.c   **** 
 105:.\mpu6050.c   **** /** Get gyroscope output rate divider.
 106:.\mpu6050.c   ****  * The sensor register output, FIFO output, DMP sampling, Motion detection, Zero
 107:.\mpu6050.c   ****  * Motion detection, and Free Fall detection are all based on the Sample Rate.
 108:.\mpu6050.c   ****  * The Sample Rate is generated by dividing the gyroscope output rate by
 109:.\mpu6050.c   ****  * SMPLRT_DIV:
 110:.\mpu6050.c   ****  *
 111:.\mpu6050.c   ****  * Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 112:.\mpu6050.c   ****  *
 113:.\mpu6050.c   ****  * where Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or
 114:.\mpu6050.c   ****  * 7), and 1kHz when the DLPF is enabled (see Register 26).
 115:.\mpu6050.c   ****  *
 116:.\mpu6050.c   ****  * Note: The accelerometer output rate is 1kHz. This means that for a Sample
 117:.\mpu6050.c   ****  * Rate greater than 1kHz, the same accelerometer sample may be output to the
 118:.\mpu6050.c   ****  * FIFO, DMP, and sensor registers more than once.
 119:.\mpu6050.c   ****  *
 120:.\mpu6050.c   ****  * For a diagram of the gyroscope and accelerometer signal paths, see Section 8
 121:.\mpu6050.c   ****  * of the MPU-6000/MPU-6050 Product Specification document.
 122:.\mpu6050.c   ****  *
 123:.\mpu6050.c   ****  * @return Current sample rate
 124:.\mpu6050.c   ****  * @see MPU6050_RA_SMPLRT_DIV
 125:.\mpu6050.c   ****  */
 126:.\mpu6050.c   **** uint8_t MPU6050_getRate() {
 245              		.loc 1 126 0
 246              		.cfi_startproc
 247 0000 80B5     		push	{r7, lr}
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 00AF     		add	r7, sp, #0
 252              		.cfi_def_cfa_register 7
 127:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_SMPLRT_DIV, buffer);
 253              		.loc 1 127 0
 254 0004 064B     		ldr	r3, .L19
 255 0006 1A78     		ldrb	r2, [r3]
 256 0008 064B     		ldr	r3, .L19+4
 257 000a 101C     		mov	r0, r2
 258 000c 1921     		mov	r1, #25
 259 000e 1A1C     		mov	r2, r3
 260 0010 FFF7FEFF 		bl	I2CReadByte
 128:.\mpu6050.c   ****     return buffer[0];
 261              		.loc 1 128 0
 262 0014 034B     		ldr	r3, .L19+4
 263 0016 1B78     		ldrb	r3, [r3]
 129:.\mpu6050.c   **** }
 264              		.loc 1 129 0
 265 0018 181C     		mov	r0, r3
 266 001a BD46     		mov	sp, r7
 267              		@ sp needed
 268 001c 80BD     		pop	{r7, pc}
 269              	.L20:
 270 001e C046     		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 8


 271              	.L19:
 272 0020 00000000 		.word	devAddr
 273 0024 00000000 		.word	buffer
 274              		.cfi_endproc
 275              	.LFE6:
 276              		.size	MPU6050_getRate, .-MPU6050_getRate
 277              		.section	.text.MPU6050_setRate,"ax",%progbits
 278              		.align	2
 279              		.global	MPU6050_setRate
 280              		.code	16
 281              		.thumb_func
 282              		.type	MPU6050_setRate, %function
 283              	MPU6050_setRate:
 284              	.LFB7:
 130:.\mpu6050.c   **** /** Set gyroscope sample rate divider.
 131:.\mpu6050.c   ****  * @param rate New sample rate divider
 132:.\mpu6050.c   ****  * @see getRate()
 133:.\mpu6050.c   ****  * @see MPU6050_RA_SMPLRT_DIV
 134:.\mpu6050.c   ****  */
 135:.\mpu6050.c   **** void MPU6050_setRate(uint8_t rate) {
 285              		.loc 1 135 0
 286              		.cfi_startproc
 287 0000 80B5     		push	{r7, lr}
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 7, -8
 290              		.cfi_offset 14, -4
 291 0002 82B0     		sub	sp, sp, #8
 292              		.cfi_def_cfa_offset 16
 293 0004 00AF     		add	r7, sp, #0
 294              		.cfi_def_cfa_register 7
 295 0006 021C     		mov	r2, r0
 296 0008 FB1D     		add	r3, r7, #7
 297 000a 1A70     		strb	r2, [r3]
 136:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 298              		.loc 1 136 0
 299 000c 054B     		ldr	r3, .L22
 300 000e 1A78     		ldrb	r2, [r3]
 301 0010 FB1D     		add	r3, r7, #7
 302 0012 1B78     		ldrb	r3, [r3]
 303 0014 101C     		mov	r0, r2
 304 0016 1921     		mov	r1, #25
 305 0018 1A1C     		mov	r2, r3
 306 001a FFF7FEFF 		bl	I2CWriteByte
 137:.\mpu6050.c   **** }
 307              		.loc 1 137 0
 308 001e BD46     		mov	sp, r7
 309 0020 02B0     		add	sp, sp, #8
 310              		@ sp needed
 311 0022 80BD     		pop	{r7, pc}
 312              	.L23:
 313              		.align	2
 314              	.L22:
 315 0024 00000000 		.word	devAddr
 316              		.cfi_endproc
 317              	.LFE7:
 318              		.size	MPU6050_setRate, .-MPU6050_setRate
 319              		.section	.text.MPU6050_getExternalFrameSync,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 9


 320              		.align	2
 321              		.global	MPU6050_getExternalFrameSync
 322              		.code	16
 323              		.thumb_func
 324              		.type	MPU6050_getExternalFrameSync, %function
 325              	MPU6050_getExternalFrameSync:
 326              	.LFB8:
 138:.\mpu6050.c   **** 
 139:.\mpu6050.c   **** // CONFIG register
 140:.\mpu6050.c   **** 
 141:.\mpu6050.c   **** /** Get external FSYNC configuration.
 142:.\mpu6050.c   ****  * Configures the external Frame Synchronization (FSYNC) pin sampling. An
 143:.\mpu6050.c   ****  * external signal connected to the FSYNC pin can be sampled by configuring
 144:.\mpu6050.c   ****  * EXT_SYNC_SET. Signal changes to the FSYNC pin are latched so that short
 145:.\mpu6050.c   ****  * strobes may be captured. The latched FSYNC signal will be sampled at the
 146:.\mpu6050.c   ****  * Sampling Rate, as defined in register 25. After sampling, the latch will
 147:.\mpu6050.c   ****  * reset to the current FSYNC signal state.
 148:.\mpu6050.c   ****  *
 149:.\mpu6050.c   ****  * The sampled value will be reported in place of the least significant bit in
 150:.\mpu6050.c   ****  * a sensor data register determined by the value of EXT_SYNC_SET according to
 151:.\mpu6050.c   ****  * the following table.
 152:.\mpu6050.c   ****  *
 153:.\mpu6050.c   ****  * <pre>
 154:.\mpu6050.c   ****  * EXT_SYNC_SET | FSYNC Bit Location
 155:.\mpu6050.c   ****  * -------------+-------------------
 156:.\mpu6050.c   ****  * 0            | Input disabled
 157:.\mpu6050.c   ****  * 1            | TEMP_OUT_L[0]
 158:.\mpu6050.c   ****  * 2            | GYRO_XOUT_L[0]
 159:.\mpu6050.c   ****  * 3            | GYRO_YOUT_L[0]
 160:.\mpu6050.c   ****  * 4            | GYRO_ZOUT_L[0]
 161:.\mpu6050.c   ****  * 5            | ACCEL_XOUT_L[0]
 162:.\mpu6050.c   ****  * 6            | ACCEL_YOUT_L[0]
 163:.\mpu6050.c   ****  * 7            | ACCEL_ZOUT_L[0]
 164:.\mpu6050.c   ****  * </pre>
 165:.\mpu6050.c   ****  *
 166:.\mpu6050.c   ****  * @return FSYNC configuration value
 167:.\mpu6050.c   ****  */
 168:.\mpu6050.c   **** uint8_t MPU6050_getExternalFrameSync() {
 327              		.loc 1 168 0
 328              		.cfi_startproc
 329 0000 80B5     		push	{r7, lr}
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 7, -8
 332              		.cfi_offset 14, -4
 333 0002 82B0     		sub	sp, sp, #8
 334              		.cfi_def_cfa_offset 16
 335 0004 02AF     		add	r7, sp, #8
 336              		.cfi_def_cfa 7, 8
 169:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_
 337              		.loc 1 169 0
 338 0006 074B     		ldr	r3, .L26
 339 0008 1A78     		ldrb	r2, [r3]
 340 000a 074B     		ldr	r3, .L26+4
 341 000c 0093     		str	r3, [sp]
 342 000e 101C     		mov	r0, r2
 343 0010 1A21     		mov	r1, #26
 344 0012 0522     		mov	r2, #5
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 10


 345 0014 0323     		mov	r3, #3
 346 0016 FFF7FEFF 		bl	I2CReadBits
 170:.\mpu6050.c   ****     return buffer[0];
 347              		.loc 1 170 0
 348 001a 034B     		ldr	r3, .L26+4
 349 001c 1B78     		ldrb	r3, [r3]
 171:.\mpu6050.c   **** }
 350              		.loc 1 171 0
 351 001e 181C     		mov	r0, r3
 352 0020 BD46     		mov	sp, r7
 353              		@ sp needed
 354 0022 80BD     		pop	{r7, pc}
 355              	.L27:
 356              		.align	2
 357              	.L26:
 358 0024 00000000 		.word	devAddr
 359 0028 00000000 		.word	buffer
 360              		.cfi_endproc
 361              	.LFE8:
 362              		.size	MPU6050_getExternalFrameSync, .-MPU6050_getExternalFrameSync
 363              		.section	.text.MPU6050_setExternalFrameSync,"ax",%progbits
 364              		.align	2
 365              		.global	MPU6050_setExternalFrameSync
 366              		.code	16
 367              		.thumb_func
 368              		.type	MPU6050_setExternalFrameSync, %function
 369              	MPU6050_setExternalFrameSync:
 370              	.LFB9:
 172:.\mpu6050.c   **** /** Set external FSYNC configuration.
 173:.\mpu6050.c   ****  * @see getExternalFrameSync()
 174:.\mpu6050.c   ****  * @see MPU6050_RA_CONFIG
 175:.\mpu6050.c   ****  * @param sync New FSYNC configuration value
 176:.\mpu6050.c   ****  */
 177:.\mpu6050.c   **** void MPU6050_setExternalFrameSync(uint8_t sync) {
 371              		.loc 1 177 0
 372              		.cfi_startproc
 373 0000 80B5     		push	{r7, lr}
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 7, -8
 376              		.cfi_offset 14, -4
 377 0002 84B0     		sub	sp, sp, #16
 378              		.cfi_def_cfa_offset 24
 379 0004 02AF     		add	r7, sp, #8
 380              		.cfi_def_cfa 7, 16
 381 0006 021C     		mov	r2, r0
 382 0008 FB1D     		add	r3, r7, #7
 383 000a 1A70     		strb	r2, [r3]
 178:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET
 384              		.loc 1 178 0
 385 000c 064B     		ldr	r3, .L29
 386 000e 1A78     		ldrb	r2, [r3]
 387 0010 FB1D     		add	r3, r7, #7
 388 0012 1B78     		ldrb	r3, [r3]
 389 0014 0093     		str	r3, [sp]
 390 0016 101C     		mov	r0, r2
 391 0018 1A21     		mov	r1, #26
 392 001a 0522     		mov	r2, #5
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 11


 393 001c 0323     		mov	r3, #3
 394 001e FFF7FEFF 		bl	I2CWriteBits
 179:.\mpu6050.c   **** }
 395              		.loc 1 179 0
 396 0022 BD46     		mov	sp, r7
 397 0024 02B0     		add	sp, sp, #8
 398              		@ sp needed
 399 0026 80BD     		pop	{r7, pc}
 400              	.L30:
 401              		.align	2
 402              	.L29:
 403 0028 00000000 		.word	devAddr
 404              		.cfi_endproc
 405              	.LFE9:
 406              		.size	MPU6050_setExternalFrameSync, .-MPU6050_setExternalFrameSync
 407              		.section	.text.MPU6050_getDLPFMode,"ax",%progbits
 408              		.align	2
 409              		.global	MPU6050_getDLPFMode
 410              		.code	16
 411              		.thumb_func
 412              		.type	MPU6050_getDLPFMode, %function
 413              	MPU6050_getDLPFMode:
 414              	.LFB10:
 180:.\mpu6050.c   **** /** Get digital low-pass filter configuration.
 181:.\mpu6050.c   ****  * The DLPF_CFG parameter sets the digital low pass filter configuration. It
 182:.\mpu6050.c   ****  * also determines the internal sampling rate used by the device as shown in
 183:.\mpu6050.c   ****  * the table below.
 184:.\mpu6050.c   ****  *
 185:.\mpu6050.c   ****  * Note: The accelerometer output rate is 1kHz. This means that for a Sample
 186:.\mpu6050.c   ****  * Rate greater than 1kHz, the same accelerometer sample may be output to the
 187:.\mpu6050.c   ****  * FIFO, DMP, and sensor registers more than once.
 188:.\mpu6050.c   ****  *
 189:.\mpu6050.c   ****  * <pre>
 190:.\mpu6050.c   ****  *          |   ACCELEROMETER    |           GYROSCOPE
 191:.\mpu6050.c   ****  * DLPF_CFG | Bandwidth | Delay  | Bandwidth | Delay  | Sample Rate
 192:.\mpu6050.c   ****  * ---------+-----------+--------+-----------+--------+-------------
 193:.\mpu6050.c   ****  * 0        | 260Hz     | 0ms    | 256Hz     | 0.98ms | 8kHz
 194:.\mpu6050.c   ****  * 1        | 184Hz     | 2.0ms  | 188Hz     | 1.9ms  | 1kHz
 195:.\mpu6050.c   ****  * 2        | 94Hz      | 3.0ms  | 98Hz      | 2.8ms  | 1kHz
 196:.\mpu6050.c   ****  * 3        | 44Hz      | 4.9ms  | 42Hz      | 4.8ms  | 1kHz
 197:.\mpu6050.c   ****  * 4        | 21Hz      | 8.5ms  | 20Hz      | 8.3ms  | 1kHz
 198:.\mpu6050.c   ****  * 5        | 10Hz      | 13.8ms | 10Hz      | 13.4ms | 1kHz
 199:.\mpu6050.c   ****  * 6        | 5Hz       | 19.0ms | 5Hz       | 18.6ms | 1kHz
 200:.\mpu6050.c   ****  * 7        |   -- Reserved --   |   -- Reserved --   | Reserved
 201:.\mpu6050.c   ****  * </pre>
 202:.\mpu6050.c   ****  *
 203:.\mpu6050.c   ****  * @return DLFP configuration
 204:.\mpu6050.c   ****  * @see MPU6050_RA_CONFIG
 205:.\mpu6050.c   ****  * @see MPU6050_CFG_DLPF_CFG_BIT
 206:.\mpu6050.c   ****  * @see MPU6050_CFG_DLPF_CFG_LENGTH
 207:.\mpu6050.c   ****  */
 208:.\mpu6050.c   **** uint8_t MPU6050_getDLPFMode() {
 415              		.loc 1 208 0
 416              		.cfi_startproc
 417 0000 80B5     		push	{r7, lr}
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 12


 420              		.cfi_offset 14, -4
 421 0002 82B0     		sub	sp, sp, #8
 422              		.cfi_def_cfa_offset 16
 423 0004 02AF     		add	r7, sp, #8
 424              		.cfi_def_cfa 7, 8
 209:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, 
 425              		.loc 1 209 0
 426 0006 074B     		ldr	r3, .L33
 427 0008 1A78     		ldrb	r2, [r3]
 428 000a 074B     		ldr	r3, .L33+4
 429 000c 0093     		str	r3, [sp]
 430 000e 101C     		mov	r0, r2
 431 0010 1A21     		mov	r1, #26
 432 0012 0222     		mov	r2, #2
 433 0014 0323     		mov	r3, #3
 434 0016 FFF7FEFF 		bl	I2CReadBits
 210:.\mpu6050.c   ****     return buffer[0];
 435              		.loc 1 210 0
 436 001a 034B     		ldr	r3, .L33+4
 437 001c 1B78     		ldrb	r3, [r3]
 211:.\mpu6050.c   **** }
 438              		.loc 1 211 0
 439 001e 181C     		mov	r0, r3
 440 0020 BD46     		mov	sp, r7
 441              		@ sp needed
 442 0022 80BD     		pop	{r7, pc}
 443              	.L34:
 444              		.align	2
 445              	.L33:
 446 0024 00000000 		.word	devAddr
 447 0028 00000000 		.word	buffer
 448              		.cfi_endproc
 449              	.LFE10:
 450              		.size	MPU6050_getDLPFMode, .-MPU6050_getDLPFMode
 451              		.section	.text.MPU6050_setDLPFMode,"ax",%progbits
 452              		.align	2
 453              		.global	MPU6050_setDLPFMode
 454              		.code	16
 455              		.thumb_func
 456              		.type	MPU6050_setDLPFMode, %function
 457              	MPU6050_setDLPFMode:
 458              	.LFB11:
 212:.\mpu6050.c   **** /** Set digital low-pass filter configuration.
 213:.\mpu6050.c   ****  * @param mode New DLFP configuration setting
 214:.\mpu6050.c   ****  * @see getDLPFBandwidth()
 215:.\mpu6050.c   ****  * @see MPU6050_DLPF_BW_256
 216:.\mpu6050.c   ****  * @see MPU6050_RA_CONFIG
 217:.\mpu6050.c   ****  * @see MPU6050_CFG_DLPF_CFG_BIT
 218:.\mpu6050.c   ****  * @see MPU6050_CFG_DLPF_CFG_LENGTH
 219:.\mpu6050.c   ****  */
 220:.\mpu6050.c   **** void MPU6050_setDLPFMode(uint8_t mode) {
 459              		.loc 1 220 0
 460              		.cfi_startproc
 461 0000 80B5     		push	{r7, lr}
 462              		.cfi_def_cfa_offset 8
 463              		.cfi_offset 7, -8
 464              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 13


 465 0002 84B0     		sub	sp, sp, #16
 466              		.cfi_def_cfa_offset 24
 467 0004 02AF     		add	r7, sp, #8
 468              		.cfi_def_cfa 7, 16
 469 0006 021C     		mov	r2, r0
 470 0008 FB1D     		add	r3, r7, #7
 471 000a 1A70     		strb	r2, [r3]
 221:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH,
 472              		.loc 1 221 0
 473 000c 064B     		ldr	r3, .L36
 474 000e 1A78     		ldrb	r2, [r3]
 475 0010 FB1D     		add	r3, r7, #7
 476 0012 1B78     		ldrb	r3, [r3]
 477 0014 0093     		str	r3, [sp]
 478 0016 101C     		mov	r0, r2
 479 0018 1A21     		mov	r1, #26
 480 001a 0222     		mov	r2, #2
 481 001c 0323     		mov	r3, #3
 482 001e FFF7FEFF 		bl	I2CWriteBits
 222:.\mpu6050.c   **** }
 483              		.loc 1 222 0
 484 0022 BD46     		mov	sp, r7
 485 0024 02B0     		add	sp, sp, #8
 486              		@ sp needed
 487 0026 80BD     		pop	{r7, pc}
 488              	.L37:
 489              		.align	2
 490              	.L36:
 491 0028 00000000 		.word	devAddr
 492              		.cfi_endproc
 493              	.LFE11:
 494              		.size	MPU6050_setDLPFMode, .-MPU6050_setDLPFMode
 495              		.section	.text.MPU6050_getFullScaleGyroRange,"ax",%progbits
 496              		.align	2
 497              		.global	MPU6050_getFullScaleGyroRange
 498              		.code	16
 499              		.thumb_func
 500              		.type	MPU6050_getFullScaleGyroRange, %function
 501              	MPU6050_getFullScaleGyroRange:
 502              	.LFB12:
 223:.\mpu6050.c   **** 
 224:.\mpu6050.c   **** // GYRO_CONFIG register
 225:.\mpu6050.c   **** 
 226:.\mpu6050.c   **** /** Get full-scale gyroscope range.
 227:.\mpu6050.c   ****  * The FS_SEL parameter allows setting the full-scale range of the gyro sensors,
 228:.\mpu6050.c   ****  * as described in the table below.
 229:.\mpu6050.c   ****  *
 230:.\mpu6050.c   ****  * <pre>
 231:.\mpu6050.c   ****  * 0 = +/- 250 degrees/sec
 232:.\mpu6050.c   ****  * 1 = +/- 500 degrees/sec
 233:.\mpu6050.c   ****  * 2 = +/- 1000 degrees/sec
 234:.\mpu6050.c   ****  * 3 = +/- 2000 degrees/sec
 235:.\mpu6050.c   ****  * </pre>
 236:.\mpu6050.c   ****  *
 237:.\mpu6050.c   ****  * @return Current full-scale gyroscope range setting
 238:.\mpu6050.c   ****  * @see MPU6050_GYRO_FS_250
 239:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_CONFIG
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 14


 240:.\mpu6050.c   ****  * @see MPU6050_GCONFIG_FS_SEL_BIT
 241:.\mpu6050.c   ****  * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 242:.\mpu6050.c   ****  */
 243:.\mpu6050.c   **** uint8_t MPU6050_getFullScaleGyroRange() {
 503              		.loc 1 243 0
 504              		.cfi_startproc
 505 0000 80B5     		push	{r7, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 7, -8
 508              		.cfi_offset 14, -4
 509 0002 82B0     		sub	sp, sp, #8
 510              		.cfi_def_cfa_offset 16
 511 0004 02AF     		add	r7, sp, #8
 512              		.cfi_def_cfa 7, 8
 244:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL
 513              		.loc 1 244 0
 514 0006 074B     		ldr	r3, .L40
 515 0008 1A78     		ldrb	r2, [r3]
 516 000a 074B     		ldr	r3, .L40+4
 517 000c 0093     		str	r3, [sp]
 518 000e 101C     		mov	r0, r2
 519 0010 1B21     		mov	r1, #27
 520 0012 0422     		mov	r2, #4
 521 0014 0223     		mov	r3, #2
 522 0016 FFF7FEFF 		bl	I2CReadBits
 245:.\mpu6050.c   ****     return buffer[0];
 523              		.loc 1 245 0
 524 001a 034B     		ldr	r3, .L40+4
 525 001c 1B78     		ldrb	r3, [r3]
 246:.\mpu6050.c   **** }
 526              		.loc 1 246 0
 527 001e 181C     		mov	r0, r3
 528 0020 BD46     		mov	sp, r7
 529              		@ sp needed
 530 0022 80BD     		pop	{r7, pc}
 531              	.L41:
 532              		.align	2
 533              	.L40:
 534 0024 00000000 		.word	devAddr
 535 0028 00000000 		.word	buffer
 536              		.cfi_endproc
 537              	.LFE12:
 538              		.size	MPU6050_getFullScaleGyroRange, .-MPU6050_getFullScaleGyroRange
 539              		.section	.text.MPU6050_setFullScaleGyroRange,"ax",%progbits
 540              		.align	2
 541              		.global	MPU6050_setFullScaleGyroRange
 542              		.code	16
 543              		.thumb_func
 544              		.type	MPU6050_setFullScaleGyroRange, %function
 545              	MPU6050_setFullScaleGyroRange:
 546              	.LFB13:
 247:.\mpu6050.c   **** /** Set full-scale gyroscope range.
 248:.\mpu6050.c   ****  * @param range New full-scale gyroscope range value
 249:.\mpu6050.c   ****  * @see getFullScaleRange()
 250:.\mpu6050.c   ****  * @see MPU6050_GYRO_FS_250
 251:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_CONFIG
 252:.\mpu6050.c   ****  * @see MPU6050_GCONFIG_FS_SEL_BIT
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 15


 253:.\mpu6050.c   ****  * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 254:.\mpu6050.c   ****  */
 255:.\mpu6050.c   **** void MPU6050_setFullScaleGyroRange(uint8_t range) {
 547              		.loc 1 255 0
 548              		.cfi_startproc
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 84B0     		sub	sp, sp, #16
 554              		.cfi_def_cfa_offset 24
 555 0004 02AF     		add	r7, sp, #8
 556              		.cfi_def_cfa 7, 16
 557 0006 021C     		mov	r2, r0
 558 0008 FB1D     		add	r3, r7, #7
 559 000a 1A70     		strb	r2, [r3]
 256:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SE
 560              		.loc 1 256 0
 561 000c 064B     		ldr	r3, .L43
 562 000e 1A78     		ldrb	r2, [r3]
 563 0010 FB1D     		add	r3, r7, #7
 564 0012 1B78     		ldrb	r3, [r3]
 565 0014 0093     		str	r3, [sp]
 566 0016 101C     		mov	r0, r2
 567 0018 1B21     		mov	r1, #27
 568 001a 0422     		mov	r2, #4
 569 001c 0223     		mov	r3, #2
 570 001e FFF7FEFF 		bl	I2CWriteBits
 257:.\mpu6050.c   **** }
 571              		.loc 1 257 0
 572 0022 BD46     		mov	sp, r7
 573 0024 02B0     		add	sp, sp, #8
 574              		@ sp needed
 575 0026 80BD     		pop	{r7, pc}
 576              	.L44:
 577              		.align	2
 578              	.L43:
 579 0028 00000000 		.word	devAddr
 580              		.cfi_endproc
 581              	.LFE13:
 582              		.size	MPU6050_setFullScaleGyroRange, .-MPU6050_setFullScaleGyroRange
 583              		.section	.text.MPU6050_getAccelXSelfTest,"ax",%progbits
 584              		.align	2
 585              		.global	MPU6050_getAccelXSelfTest
 586              		.code	16
 587              		.thumb_func
 588              		.type	MPU6050_getAccelXSelfTest, %function
 589              	MPU6050_getAccelXSelfTest:
 590              	.LFB14:
 258:.\mpu6050.c   **** 
 259:.\mpu6050.c   **** // ACCEL_CONFIG register
 260:.\mpu6050.c   **** 
 261:.\mpu6050.c   **** /** Get self-test enabled setting for accelerometer X axis.
 262:.\mpu6050.c   ****  * @return Self-test enabled value
 263:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 264:.\mpu6050.c   ****  */
 265:.\mpu6050.c   **** bool MPU6050_getAccelXSelfTest() {
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 16


 591              		.loc 1 265 0
 592              		.cfi_startproc
 593 0000 80B5     		push	{r7, lr}
 594              		.cfi_def_cfa_offset 8
 595              		.cfi_offset 7, -8
 596              		.cfi_offset 14, -4
 597 0002 00AF     		add	r7, sp, #0
 598              		.cfi_def_cfa_register 7
 266:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_XA_ST_BIT, buffer);
 599              		.loc 1 266 0
 600 0004 074B     		ldr	r3, .L47
 601 0006 1A78     		ldrb	r2, [r3]
 602 0008 074B     		ldr	r3, .L47+4
 603 000a 101C     		mov	r0, r2
 604 000c 1C21     		mov	r1, #28
 605 000e 0722     		mov	r2, #7
 606 0010 FFF7FEFF 		bl	I2CReadBit
 267:.\mpu6050.c   ****     return buffer[0];
 607              		.loc 1 267 0
 608 0014 044B     		ldr	r3, .L47+4
 609 0016 1B78     		ldrb	r3, [r3]
 610 0018 5A1E     		sub	r2, r3, #1
 611 001a 9341     		sbc	r3, r3, r2
 612 001c DBB2     		uxtb	r3, r3
 268:.\mpu6050.c   **** }
 613              		.loc 1 268 0
 614 001e 181C     		mov	r0, r3
 615 0020 BD46     		mov	sp, r7
 616              		@ sp needed
 617 0022 80BD     		pop	{r7, pc}
 618              	.L48:
 619              		.align	2
 620              	.L47:
 621 0024 00000000 		.word	devAddr
 622 0028 00000000 		.word	buffer
 623              		.cfi_endproc
 624              	.LFE14:
 625              		.size	MPU6050_getAccelXSelfTest, .-MPU6050_getAccelXSelfTest
 626              		.section	.text.MPU6050_setAccelXSelfTest,"ax",%progbits
 627              		.align	2
 628              		.global	MPU6050_setAccelXSelfTest
 629              		.code	16
 630              		.thumb_func
 631              		.type	MPU6050_setAccelXSelfTest, %function
 632              	MPU6050_setAccelXSelfTest:
 633              	.LFB15:
 269:.\mpu6050.c   **** /** Set self-test enabled setting for accelerometer X axis.
 270:.\mpu6050.c   ****  * @param enabled Self-test enabled value
 271:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 272:.\mpu6050.c   ****  */
 273:.\mpu6050.c   **** void MPU6050_setAccelXSelfTest(bool enabled) {
 634              		.loc 1 273 0
 635              		.cfi_startproc
 636 0000 80B5     		push	{r7, lr}
 637              		.cfi_def_cfa_offset 8
 638              		.cfi_offset 7, -8
 639              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 17


 640 0002 82B0     		sub	sp, sp, #8
 641              		.cfi_def_cfa_offset 16
 642 0004 00AF     		add	r7, sp, #0
 643              		.cfi_def_cfa_register 7
 644 0006 021C     		mov	r2, r0
 645 0008 FB1D     		add	r3, r7, #7
 646 000a 1A70     		strb	r2, [r3]
 274:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_XA_ST_BIT, enabled);
 647              		.loc 1 274 0
 648 000c 054B     		ldr	r3, .L50
 649 000e 1A78     		ldrb	r2, [r3]
 650 0010 FB1D     		add	r3, r7, #7
 651 0012 1B78     		ldrb	r3, [r3]
 652 0014 101C     		mov	r0, r2
 653 0016 1C21     		mov	r1, #28
 654 0018 0722     		mov	r2, #7
 655 001a FFF7FEFF 		bl	I2CWriteBit
 275:.\mpu6050.c   **** }
 656              		.loc 1 275 0
 657 001e BD46     		mov	sp, r7
 658 0020 02B0     		add	sp, sp, #8
 659              		@ sp needed
 660 0022 80BD     		pop	{r7, pc}
 661              	.L51:
 662              		.align	2
 663              	.L50:
 664 0024 00000000 		.word	devAddr
 665              		.cfi_endproc
 666              	.LFE15:
 667              		.size	MPU6050_setAccelXSelfTest, .-MPU6050_setAccelXSelfTest
 668              		.section	.text.MPU6050_getAccelYSelfTest,"ax",%progbits
 669              		.align	2
 670              		.global	MPU6050_getAccelYSelfTest
 671              		.code	16
 672              		.thumb_func
 673              		.type	MPU6050_getAccelYSelfTest, %function
 674              	MPU6050_getAccelYSelfTest:
 675              	.LFB16:
 276:.\mpu6050.c   **** /** Get self-test enabled value for accelerometer Y axis.
 277:.\mpu6050.c   ****  * @return Self-test enabled value
 278:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 279:.\mpu6050.c   ****  */
 280:.\mpu6050.c   **** bool MPU6050_getAccelYSelfTest() {
 676              		.loc 1 280 0
 677              		.cfi_startproc
 678 0000 80B5     		push	{r7, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 00AF     		add	r7, sp, #0
 683              		.cfi_def_cfa_register 7
 281:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_YA_ST_BIT, buffer);
 684              		.loc 1 281 0
 685 0004 074B     		ldr	r3, .L54
 686 0006 1A78     		ldrb	r2, [r3]
 687 0008 074B     		ldr	r3, .L54+4
 688 000a 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 18


 689 000c 1C21     		mov	r1, #28
 690 000e 0622     		mov	r2, #6
 691 0010 FFF7FEFF 		bl	I2CReadBit
 282:.\mpu6050.c   ****     return buffer[0];
 692              		.loc 1 282 0
 693 0014 044B     		ldr	r3, .L54+4
 694 0016 1B78     		ldrb	r3, [r3]
 695 0018 5A1E     		sub	r2, r3, #1
 696 001a 9341     		sbc	r3, r3, r2
 697 001c DBB2     		uxtb	r3, r3
 283:.\mpu6050.c   **** }
 698              		.loc 1 283 0
 699 001e 181C     		mov	r0, r3
 700 0020 BD46     		mov	sp, r7
 701              		@ sp needed
 702 0022 80BD     		pop	{r7, pc}
 703              	.L55:
 704              		.align	2
 705              	.L54:
 706 0024 00000000 		.word	devAddr
 707 0028 00000000 		.word	buffer
 708              		.cfi_endproc
 709              	.LFE16:
 710              		.size	MPU6050_getAccelYSelfTest, .-MPU6050_getAccelYSelfTest
 711              		.section	.text.MPU6050_setAccelYSelfTest,"ax",%progbits
 712              		.align	2
 713              		.global	MPU6050_setAccelYSelfTest
 714              		.code	16
 715              		.thumb_func
 716              		.type	MPU6050_setAccelYSelfTest, %function
 717              	MPU6050_setAccelYSelfTest:
 718              	.LFB17:
 284:.\mpu6050.c   **** /** Set self-test enabled value for accelerometer Y axis.
 285:.\mpu6050.c   ****  * @param enabled Self-test enabled value
 286:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 287:.\mpu6050.c   ****  */
 288:.\mpu6050.c   **** void MPU6050_setAccelYSelfTest(bool enabled) {
 719              		.loc 1 288 0
 720              		.cfi_startproc
 721 0000 80B5     		push	{r7, lr}
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 7, -8
 724              		.cfi_offset 14, -4
 725 0002 82B0     		sub	sp, sp, #8
 726              		.cfi_def_cfa_offset 16
 727 0004 00AF     		add	r7, sp, #0
 728              		.cfi_def_cfa_register 7
 729 0006 021C     		mov	r2, r0
 730 0008 FB1D     		add	r3, r7, #7
 731 000a 1A70     		strb	r2, [r3]
 289:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_YA_ST_BIT, enabled);
 732              		.loc 1 289 0
 733 000c 054B     		ldr	r3, .L57
 734 000e 1A78     		ldrb	r2, [r3]
 735 0010 FB1D     		add	r3, r7, #7
 736 0012 1B78     		ldrb	r3, [r3]
 737 0014 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 19


 738 0016 1C21     		mov	r1, #28
 739 0018 0622     		mov	r2, #6
 740 001a FFF7FEFF 		bl	I2CWriteBit
 290:.\mpu6050.c   **** }
 741              		.loc 1 290 0
 742 001e BD46     		mov	sp, r7
 743 0020 02B0     		add	sp, sp, #8
 744              		@ sp needed
 745 0022 80BD     		pop	{r7, pc}
 746              	.L58:
 747              		.align	2
 748              	.L57:
 749 0024 00000000 		.word	devAddr
 750              		.cfi_endproc
 751              	.LFE17:
 752              		.size	MPU6050_setAccelYSelfTest, .-MPU6050_setAccelYSelfTest
 753              		.section	.text.MPU6050_getAccelZSelfTest,"ax",%progbits
 754              		.align	2
 755              		.global	MPU6050_getAccelZSelfTest
 756              		.code	16
 757              		.thumb_func
 758              		.type	MPU6050_getAccelZSelfTest, %function
 759              	MPU6050_getAccelZSelfTest:
 760              	.LFB18:
 291:.\mpu6050.c   **** /** Get self-test enabled value for accelerometer Z axis.
 292:.\mpu6050.c   ****  * @return Self-test enabled value
 293:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 294:.\mpu6050.c   ****  */
 295:.\mpu6050.c   **** bool MPU6050_getAccelZSelfTest() {
 761              		.loc 1 295 0
 762              		.cfi_startproc
 763 0000 80B5     		push	{r7, lr}
 764              		.cfi_def_cfa_offset 8
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 00AF     		add	r7, sp, #0
 768              		.cfi_def_cfa_register 7
 296:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ZA_ST_BIT, buffer);
 769              		.loc 1 296 0
 770 0004 074B     		ldr	r3, .L61
 771 0006 1A78     		ldrb	r2, [r3]
 772 0008 074B     		ldr	r3, .L61+4
 773 000a 101C     		mov	r0, r2
 774 000c 1C21     		mov	r1, #28
 775 000e 0522     		mov	r2, #5
 776 0010 FFF7FEFF 		bl	I2CReadBit
 297:.\mpu6050.c   ****     return buffer[0];
 777              		.loc 1 297 0
 778 0014 044B     		ldr	r3, .L61+4
 779 0016 1B78     		ldrb	r3, [r3]
 780 0018 5A1E     		sub	r2, r3, #1
 781 001a 9341     		sbc	r3, r3, r2
 782 001c DBB2     		uxtb	r3, r3
 298:.\mpu6050.c   **** }
 783              		.loc 1 298 0
 784 001e 181C     		mov	r0, r3
 785 0020 BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 20


 786              		@ sp needed
 787 0022 80BD     		pop	{r7, pc}
 788              	.L62:
 789              		.align	2
 790              	.L61:
 791 0024 00000000 		.word	devAddr
 792 0028 00000000 		.word	buffer
 793              		.cfi_endproc
 794              	.LFE18:
 795              		.size	MPU6050_getAccelZSelfTest, .-MPU6050_getAccelZSelfTest
 796              		.section	.text.MPU6050_setAccelZSelfTest,"ax",%progbits
 797              		.align	2
 798              		.global	MPU6050_setAccelZSelfTest
 799              		.code	16
 800              		.thumb_func
 801              		.type	MPU6050_setAccelZSelfTest, %function
 802              	MPU6050_setAccelZSelfTest:
 803              	.LFB19:
 299:.\mpu6050.c   **** /** Set self-test enabled value for accelerometer Z axis.
 300:.\mpu6050.c   ****  * @param enabled Self-test enabled value
 301:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 302:.\mpu6050.c   ****  */
 303:.\mpu6050.c   **** void MPU6050_setAccelZSelfTest(bool enabled) {
 804              		.loc 1 303 0
 805              		.cfi_startproc
 806 0000 80B5     		push	{r7, lr}
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 7, -8
 809              		.cfi_offset 14, -4
 810 0002 82B0     		sub	sp, sp, #8
 811              		.cfi_def_cfa_offset 16
 812 0004 00AF     		add	r7, sp, #0
 813              		.cfi_def_cfa_register 7
 814 0006 021C     		mov	r2, r0
 815 0008 FB1D     		add	r3, r7, #7
 816 000a 1A70     		strb	r2, [r3]
 304:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ZA_ST_BIT, enabled);
 817              		.loc 1 304 0
 818 000c 054B     		ldr	r3, .L64
 819 000e 1A78     		ldrb	r2, [r3]
 820 0010 FB1D     		add	r3, r7, #7
 821 0012 1B78     		ldrb	r3, [r3]
 822 0014 101C     		mov	r0, r2
 823 0016 1C21     		mov	r1, #28
 824 0018 0522     		mov	r2, #5
 825 001a FFF7FEFF 		bl	I2CWriteBit
 305:.\mpu6050.c   **** }
 826              		.loc 1 305 0
 827 001e BD46     		mov	sp, r7
 828 0020 02B0     		add	sp, sp, #8
 829              		@ sp needed
 830 0022 80BD     		pop	{r7, pc}
 831              	.L65:
 832              		.align	2
 833              	.L64:
 834 0024 00000000 		.word	devAddr
 835              		.cfi_endproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 21


 836              	.LFE19:
 837              		.size	MPU6050_setAccelZSelfTest, .-MPU6050_setAccelZSelfTest
 838              		.section	.text.MPU6050_getFullScaleAccelRange,"ax",%progbits
 839              		.align	2
 840              		.global	MPU6050_getFullScaleAccelRange
 841              		.code	16
 842              		.thumb_func
 843              		.type	MPU6050_getFullScaleAccelRange, %function
 844              	MPU6050_getFullScaleAccelRange:
 845              	.LFB20:
 306:.\mpu6050.c   **** /** Get full-scale accelerometer range.
 307:.\mpu6050.c   ****  * The FS_SEL parameter allows setting the full-scale range of the accelerometer
 308:.\mpu6050.c   ****  * sensors, as described in the table below.
 309:.\mpu6050.c   ****  *
 310:.\mpu6050.c   ****  * <pre>
 311:.\mpu6050.c   ****  * 0 = +/- 2g
 312:.\mpu6050.c   ****  * 1 = +/- 4g
 313:.\mpu6050.c   ****  * 2 = +/- 8g
 314:.\mpu6050.c   ****  * 3 = +/- 16g
 315:.\mpu6050.c   ****  * </pre>
 316:.\mpu6050.c   ****  *
 317:.\mpu6050.c   ****  * @return Current full-scale accelerometer range setting
 318:.\mpu6050.c   ****  * @see MPU6050_ACCEL_FS_2
 319:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 320:.\mpu6050.c   ****  * @see MPU6050_ACONFIG_AFS_SEL_BIT
 321:.\mpu6050.c   ****  * @see MPU6050_ACONFIG_AFS_SEL_LENGTH
 322:.\mpu6050.c   ****  */
 323:.\mpu6050.c   **** uint8_t MPU6050_getFullScaleAccelRange() {
 846              		.loc 1 323 0
 847              		.cfi_startproc
 848 0000 80B5     		push	{r7, lr}
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 0002 82B0     		sub	sp, sp, #8
 853              		.cfi_def_cfa_offset 16
 854 0004 02AF     		add	r7, sp, #8
 855              		.cfi_def_cfa 7, 8
 324:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_
 856              		.loc 1 324 0
 857 0006 074B     		ldr	r3, .L68
 858 0008 1A78     		ldrb	r2, [r3]
 859 000a 074B     		ldr	r3, .L68+4
 860 000c 0093     		str	r3, [sp]
 861 000e 101C     		mov	r0, r2
 862 0010 1C21     		mov	r1, #28
 863 0012 0422     		mov	r2, #4
 864 0014 0223     		mov	r3, #2
 865 0016 FFF7FEFF 		bl	I2CReadBits
 325:.\mpu6050.c   ****     return buffer[0];
 866              		.loc 1 325 0
 867 001a 034B     		ldr	r3, .L68+4
 868 001c 1B78     		ldrb	r3, [r3]
 326:.\mpu6050.c   **** }
 869              		.loc 1 326 0
 870 001e 181C     		mov	r0, r3
 871 0020 BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 22


 872              		@ sp needed
 873 0022 80BD     		pop	{r7, pc}
 874              	.L69:
 875              		.align	2
 876              	.L68:
 877 0024 00000000 		.word	devAddr
 878 0028 00000000 		.word	buffer
 879              		.cfi_endproc
 880              	.LFE20:
 881              		.size	MPU6050_getFullScaleAccelRange, .-MPU6050_getFullScaleAccelRange
 882              		.section	.text.MPU6050_setFullScaleAccelRange,"ax",%progbits
 883              		.align	2
 884              		.global	MPU6050_setFullScaleAccelRange
 885              		.code	16
 886              		.thumb_func
 887              		.type	MPU6050_setFullScaleAccelRange, %function
 888              	MPU6050_setFullScaleAccelRange:
 889              	.LFB21:
 327:.\mpu6050.c   **** /** Set full-scale accelerometer range.
 328:.\mpu6050.c   ****  * @param range New full-scale accelerometer range setting
 329:.\mpu6050.c   ****  * @see getFullScaleAccelRange()
 330:.\mpu6050.c   ****  */
 331:.\mpu6050.c   **** void MPU6050_setFullScaleAccelRange(uint8_t range) {
 890              		.loc 1 331 0
 891              		.cfi_startproc
 892 0000 80B5     		push	{r7, lr}
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 7, -8
 895              		.cfi_offset 14, -4
 896 0002 84B0     		sub	sp, sp, #16
 897              		.cfi_def_cfa_offset 24
 898 0004 02AF     		add	r7, sp, #8
 899              		.cfi_def_cfa 7, 16
 900 0006 021C     		mov	r2, r0
 901 0008 FB1D     		add	r3, r7, #7
 902 000a 1A70     		strb	r2, [r3]
 332:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS
 903              		.loc 1 332 0
 904 000c 064B     		ldr	r3, .L71
 905 000e 1A78     		ldrb	r2, [r3]
 906 0010 FB1D     		add	r3, r7, #7
 907 0012 1B78     		ldrb	r3, [r3]
 908 0014 0093     		str	r3, [sp]
 909 0016 101C     		mov	r0, r2
 910 0018 1C21     		mov	r1, #28
 911 001a 0422     		mov	r2, #4
 912 001c 0223     		mov	r3, #2
 913 001e FFF7FEFF 		bl	I2CWriteBits
 333:.\mpu6050.c   **** }
 914              		.loc 1 333 0
 915 0022 BD46     		mov	sp, r7
 916 0024 02B0     		add	sp, sp, #8
 917              		@ sp needed
 918 0026 80BD     		pop	{r7, pc}
 919              	.L72:
 920              		.align	2
 921              	.L71:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 23


 922 0028 00000000 		.word	devAddr
 923              		.cfi_endproc
 924              	.LFE21:
 925              		.size	MPU6050_setFullScaleAccelRange, .-MPU6050_setFullScaleAccelRange
 926              		.section	.text.MPU6050_getDHPFMode,"ax",%progbits
 927              		.align	2
 928              		.global	MPU6050_getDHPFMode
 929              		.code	16
 930              		.thumb_func
 931              		.type	MPU6050_getDHPFMode, %function
 932              	MPU6050_getDHPFMode:
 933              	.LFB22:
 334:.\mpu6050.c   **** /** Get the high-pass filter configuration.
 335:.\mpu6050.c   ****  * The DHPF is a filter module in the path leading to motion detectors (Free
 336:.\mpu6050.c   ****  * Fall, Motion threshold, and Zero Motion). The high pass filter output is not
 337:.\mpu6050.c   ****  * available to the data registers (see Figure in Section 8 of the MPU-6000/
 338:.\mpu6050.c   ****  * MPU-6050 Product Specification document).
 339:.\mpu6050.c   ****  *
 340:.\mpu6050.c   ****  * The high pass filter has three modes:
 341:.\mpu6050.c   ****  *
 342:.\mpu6050.c   ****  * <pre>
 343:.\mpu6050.c   ****  *    Reset: The filter output settles to zero within one sample. This
 344:.\mpu6050.c   ****  *           effectively disables the high pass filter. This mode may be toggled
 345:.\mpu6050.c   ****  *           to quickly settle the filter.
 346:.\mpu6050.c   ****  *
 347:.\mpu6050.c   ****  *    On:    The high pass filter will pass signals above the cut off frequency.
 348:.\mpu6050.c   ****  *
 349:.\mpu6050.c   ****  *    Hold:  When triggered, the filter holds the present sample. The filter
 350:.\mpu6050.c   ****  *           output will be the difference between the input sample and the held
 351:.\mpu6050.c   ****  *           sample.
 352:.\mpu6050.c   ****  * </pre>
 353:.\mpu6050.c   ****  *
 354:.\mpu6050.c   ****  * <pre>
 355:.\mpu6050.c   ****  * ACCEL_HPF | Filter Mode | Cut-off Frequency
 356:.\mpu6050.c   ****  * ----------+-------------+------------------
 357:.\mpu6050.c   ****  * 0         | Reset       | None
 358:.\mpu6050.c   ****  * 1         | On          | 5Hz
 359:.\mpu6050.c   ****  * 2         | On          | 2.5Hz
 360:.\mpu6050.c   ****  * 3         | On          | 1.25Hz
 361:.\mpu6050.c   ****  * 4         | On          | 0.63Hz
 362:.\mpu6050.c   ****  * 7         | Hold        | None
 363:.\mpu6050.c   ****  * </pre>
 364:.\mpu6050.c   ****  *
 365:.\mpu6050.c   ****  * @return Current high-pass filter configuration
 366:.\mpu6050.c   ****  * @see MPU6050_DHPF_RESET
 367:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 368:.\mpu6050.c   ****  */
 369:.\mpu6050.c   **** uint8_t MPU6050_getDHPFMode() {
 934              		.loc 1 369 0
 935              		.cfi_startproc
 936 0000 80B5     		push	{r7, lr}
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 7, -8
 939              		.cfi_offset 14, -4
 940 0002 82B0     		sub	sp, sp, #8
 941              		.cfi_def_cfa_offset 16
 942 0004 02AF     		add	r7, sp, #8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 24


 943              		.cfi_def_cfa 7, 8
 370:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_AC
 944              		.loc 1 370 0
 945 0006 074B     		ldr	r3, .L75
 946 0008 1A78     		ldrb	r2, [r3]
 947 000a 074B     		ldr	r3, .L75+4
 948 000c 0093     		str	r3, [sp]
 949 000e 101C     		mov	r0, r2
 950 0010 1C21     		mov	r1, #28
 951 0012 0222     		mov	r2, #2
 952 0014 0323     		mov	r3, #3
 953 0016 FFF7FEFF 		bl	I2CReadBits
 371:.\mpu6050.c   ****     return buffer[0];
 954              		.loc 1 371 0
 955 001a 034B     		ldr	r3, .L75+4
 956 001c 1B78     		ldrb	r3, [r3]
 372:.\mpu6050.c   **** }
 957              		.loc 1 372 0
 958 001e 181C     		mov	r0, r3
 959 0020 BD46     		mov	sp, r7
 960              		@ sp needed
 961 0022 80BD     		pop	{r7, pc}
 962              	.L76:
 963              		.align	2
 964              	.L75:
 965 0024 00000000 		.word	devAddr
 966 0028 00000000 		.word	buffer
 967              		.cfi_endproc
 968              	.LFE22:
 969              		.size	MPU6050_getDHPFMode, .-MPU6050_getDHPFMode
 970              		.section	.text.MPU6050_setDHPFMode,"ax",%progbits
 971              		.align	2
 972              		.global	MPU6050_setDHPFMode
 973              		.code	16
 974              		.thumb_func
 975              		.type	MPU6050_setDHPFMode, %function
 976              	MPU6050_setDHPFMode:
 977              	.LFB23:
 373:.\mpu6050.c   **** /** Set the high-pass filter configuration.
 374:.\mpu6050.c   ****  * @param bandwidth New high-pass filter configuration
 375:.\mpu6050.c   ****  * @see setDHPFMode()
 376:.\mpu6050.c   ****  * @see MPU6050_DHPF_RESET
 377:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 378:.\mpu6050.c   ****  */
 379:.\mpu6050.c   **** void MPU6050_setDHPFMode(uint8_t bandwidth) {
 978              		.loc 1 379 0
 979              		.cfi_startproc
 980 0000 80B5     		push	{r7, lr}
 981              		.cfi_def_cfa_offset 8
 982              		.cfi_offset 7, -8
 983              		.cfi_offset 14, -4
 984 0002 84B0     		sub	sp, sp, #16
 985              		.cfi_def_cfa_offset 24
 986 0004 02AF     		add	r7, sp, #8
 987              		.cfi_def_cfa 7, 16
 988 0006 021C     		mov	r2, r0
 989 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 25


 990 000a 1A70     		strb	r2, [r3]
 380:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_A
 991              		.loc 1 380 0
 992 000c 064B     		ldr	r3, .L78
 993 000e 1A78     		ldrb	r2, [r3]
 994 0010 FB1D     		add	r3, r7, #7
 995 0012 1B78     		ldrb	r3, [r3]
 996 0014 0093     		str	r3, [sp]
 997 0016 101C     		mov	r0, r2
 998 0018 1C21     		mov	r1, #28
 999 001a 0222     		mov	r2, #2
 1000 001c 0323     		mov	r3, #3
 1001 001e FFF7FEFF 		bl	I2CWriteBits
 381:.\mpu6050.c   **** }
 1002              		.loc 1 381 0
 1003 0022 BD46     		mov	sp, r7
 1004 0024 02B0     		add	sp, sp, #8
 1005              		@ sp needed
 1006 0026 80BD     		pop	{r7, pc}
 1007              	.L79:
 1008              		.align	2
 1009              	.L78:
 1010 0028 00000000 		.word	devAddr
 1011              		.cfi_endproc
 1012              	.LFE23:
 1013              		.size	MPU6050_setDHPFMode, .-MPU6050_setDHPFMode
 1014              		.section	.text.MPU6050_getFreefallDetectionThreshold,"ax",%progbits
 1015              		.align	2
 1016              		.global	MPU6050_getFreefallDetectionThreshold
 1017              		.code	16
 1018              		.thumb_func
 1019              		.type	MPU6050_getFreefallDetectionThreshold, %function
 1020              	MPU6050_getFreefallDetectionThreshold:
 1021              	.LFB24:
 382:.\mpu6050.c   **** 
 383:.\mpu6050.c   **** // FF_THR register
 384:.\mpu6050.c   **** 
 385:.\mpu6050.c   **** /** Get free-fall event acceleration threshold.
 386:.\mpu6050.c   ****  * This register configures the detection threshold for Free Fall event
 387:.\mpu6050.c   ****  * detection. The unit of FF_THR is 1LSB = 2mg. Free Fall is detected when the
 388:.\mpu6050.c   ****  * absolute value of the accelerometer measurements for the three axes are each
 389:.\mpu6050.c   ****  * less than the detection threshold. This condition increments the Free Fall
 390:.\mpu6050.c   ****  * duration counter (Register 30). The Free Fall interrupt is triggered when the
 391:.\mpu6050.c   ****  * Free Fall duration counter reaches the time specified in FF_DUR.
 392:.\mpu6050.c   ****  *
 393:.\mpu6050.c   ****  * For more details on the Free Fall detection interrupt, see Section 8.2 of the
 394:.\mpu6050.c   ****  * MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and
 395:.\mpu6050.c   ****  * 58 of this document.
 396:.\mpu6050.c   ****  *
 397:.\mpu6050.c   ****  * @return Current free-fall acceleration threshold value (LSB = 2mg)
 398:.\mpu6050.c   ****  * @see MPU6050_RA_FF_THR
 399:.\mpu6050.c   ****  */
 400:.\mpu6050.c   **** uint8_t MPU6050_getFreefallDetectionThreshold() {
 1022              		.loc 1 400 0
 1023              		.cfi_startproc
 1024 0000 80B5     		push	{r7, lr}
 1025              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 26


 1026              		.cfi_offset 7, -8
 1027              		.cfi_offset 14, -4
 1028 0002 00AF     		add	r7, sp, #0
 1029              		.cfi_def_cfa_register 7
 401:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_FF_THR, buffer);
 1030              		.loc 1 401 0
 1031 0004 064B     		ldr	r3, .L82
 1032 0006 1A78     		ldrb	r2, [r3]
 1033 0008 064B     		ldr	r3, .L82+4
 1034 000a 101C     		mov	r0, r2
 1035 000c 1D21     		mov	r1, #29
 1036 000e 1A1C     		mov	r2, r3
 1037 0010 FFF7FEFF 		bl	I2CReadByte
 402:.\mpu6050.c   ****     return buffer[0];
 1038              		.loc 1 402 0
 1039 0014 034B     		ldr	r3, .L82+4
 1040 0016 1B78     		ldrb	r3, [r3]
 403:.\mpu6050.c   **** }
 1041              		.loc 1 403 0
 1042 0018 181C     		mov	r0, r3
 1043 001a BD46     		mov	sp, r7
 1044              		@ sp needed
 1045 001c 80BD     		pop	{r7, pc}
 1046              	.L83:
 1047 001e C046     		.align	2
 1048              	.L82:
 1049 0020 00000000 		.word	devAddr
 1050 0024 00000000 		.word	buffer
 1051              		.cfi_endproc
 1052              	.LFE24:
 1053              		.size	MPU6050_getFreefallDetectionThreshold, .-MPU6050_getFreefallDetectionThreshold
 1054              		.section	.text.MPU6050_setFreefallDetectionThreshold,"ax",%progbits
 1055              		.align	2
 1056              		.global	MPU6050_setFreefallDetectionThreshold
 1057              		.code	16
 1058              		.thumb_func
 1059              		.type	MPU6050_setFreefallDetectionThreshold, %function
 1060              	MPU6050_setFreefallDetectionThreshold:
 1061              	.LFB25:
 404:.\mpu6050.c   **** /** Get free-fall event acceleration threshold.
 405:.\mpu6050.c   ****  * @param threshold New free-fall acceleration threshold value (LSB = 2mg)
 406:.\mpu6050.c   ****  * @see getFreefallDetectionThreshold()
 407:.\mpu6050.c   ****  * @see MPU6050_RA_FF_THR
 408:.\mpu6050.c   ****  */
 409:.\mpu6050.c   **** void MPU6050_setFreefallDetectionThreshold(uint8_t threshold) {
 1062              		.loc 1 409 0
 1063              		.cfi_startproc
 1064 0000 80B5     		push	{r7, lr}
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 7, -8
 1067              		.cfi_offset 14, -4
 1068 0002 82B0     		sub	sp, sp, #8
 1069              		.cfi_def_cfa_offset 16
 1070 0004 00AF     		add	r7, sp, #0
 1071              		.cfi_def_cfa_register 7
 1072 0006 021C     		mov	r2, r0
 1073 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 27


 1074 000a 1A70     		strb	r2, [r3]
 410:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_FF_THR, threshold);
 1075              		.loc 1 410 0
 1076 000c 054B     		ldr	r3, .L85
 1077 000e 1A78     		ldrb	r2, [r3]
 1078 0010 FB1D     		add	r3, r7, #7
 1079 0012 1B78     		ldrb	r3, [r3]
 1080 0014 101C     		mov	r0, r2
 1081 0016 1D21     		mov	r1, #29
 1082 0018 1A1C     		mov	r2, r3
 1083 001a FFF7FEFF 		bl	I2CWriteByte
 411:.\mpu6050.c   **** }
 1084              		.loc 1 411 0
 1085 001e BD46     		mov	sp, r7
 1086 0020 02B0     		add	sp, sp, #8
 1087              		@ sp needed
 1088 0022 80BD     		pop	{r7, pc}
 1089              	.L86:
 1090              		.align	2
 1091              	.L85:
 1092 0024 00000000 		.word	devAddr
 1093              		.cfi_endproc
 1094              	.LFE25:
 1095              		.size	MPU6050_setFreefallDetectionThreshold, .-MPU6050_setFreefallDetectionThreshold
 1096              		.section	.text.MPU6050_getFreefallDetectionDuration,"ax",%progbits
 1097              		.align	2
 1098              		.global	MPU6050_getFreefallDetectionDuration
 1099              		.code	16
 1100              		.thumb_func
 1101              		.type	MPU6050_getFreefallDetectionDuration, %function
 1102              	MPU6050_getFreefallDetectionDuration:
 1103              	.LFB26:
 412:.\mpu6050.c   **** 
 413:.\mpu6050.c   **** // FF_DUR register
 414:.\mpu6050.c   **** 
 415:.\mpu6050.c   **** /** Get free-fall event duration threshold.
 416:.\mpu6050.c   ****  * This register configures the duration counter threshold for Free Fall event
 417:.\mpu6050.c   ****  * detection. The duration counter ticks at 1kHz, therefore FF_DUR has a unit
 418:.\mpu6050.c   ****  * of 1 LSB = 1 ms.
 419:.\mpu6050.c   ****  *
 420:.\mpu6050.c   ****  * The Free Fall duration counter increments while the absolute value of the
 421:.\mpu6050.c   ****  * accelerometer measurements are each less than the detection threshold
 422:.\mpu6050.c   ****  * (Register 29). The Free Fall interrupt is triggered when the Free Fall
 423:.\mpu6050.c   ****  * duration counter reaches the time specified in this register.
 424:.\mpu6050.c   ****  *
 425:.\mpu6050.c   ****  * For more details on the Free Fall detection interrupt, see Section 8.2 of
 426:.\mpu6050.c   ****  * the MPU-6000/MPU-6050 Product Specification document as well as Registers 56
 427:.\mpu6050.c   ****  * and 58 of this document.
 428:.\mpu6050.c   ****  *
 429:.\mpu6050.c   ****  * @return Current free-fall duration threshold value (LSB = 1ms)
 430:.\mpu6050.c   ****  * @see MPU6050_RA_FF_DUR
 431:.\mpu6050.c   ****  */
 432:.\mpu6050.c   **** uint8_t MPU6050_getFreefallDetectionDuration() {
 1104              		.loc 1 432 0
 1105              		.cfi_startproc
 1106 0000 80B5     		push	{r7, lr}
 1107              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 28


 1108              		.cfi_offset 7, -8
 1109              		.cfi_offset 14, -4
 1110 0002 00AF     		add	r7, sp, #0
 1111              		.cfi_def_cfa_register 7
 433:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_FF_DUR, buffer);
 1112              		.loc 1 433 0
 1113 0004 064B     		ldr	r3, .L89
 1114 0006 1A78     		ldrb	r2, [r3]
 1115 0008 064B     		ldr	r3, .L89+4
 1116 000a 101C     		mov	r0, r2
 1117 000c 1E21     		mov	r1, #30
 1118 000e 1A1C     		mov	r2, r3
 1119 0010 FFF7FEFF 		bl	I2CReadByte
 434:.\mpu6050.c   ****     return buffer[0];
 1120              		.loc 1 434 0
 1121 0014 034B     		ldr	r3, .L89+4
 1122 0016 1B78     		ldrb	r3, [r3]
 435:.\mpu6050.c   **** }
 1123              		.loc 1 435 0
 1124 0018 181C     		mov	r0, r3
 1125 001a BD46     		mov	sp, r7
 1126              		@ sp needed
 1127 001c 80BD     		pop	{r7, pc}
 1128              	.L90:
 1129 001e C046     		.align	2
 1130              	.L89:
 1131 0020 00000000 		.word	devAddr
 1132 0024 00000000 		.word	buffer
 1133              		.cfi_endproc
 1134              	.LFE26:
 1135              		.size	MPU6050_getFreefallDetectionDuration, .-MPU6050_getFreefallDetectionDuration
 1136              		.section	.text.MPU6050_setFreefallDetectionDuration,"ax",%progbits
 1137              		.align	2
 1138              		.global	MPU6050_setFreefallDetectionDuration
 1139              		.code	16
 1140              		.thumb_func
 1141              		.type	MPU6050_setFreefallDetectionDuration, %function
 1142              	MPU6050_setFreefallDetectionDuration:
 1143              	.LFB27:
 436:.\mpu6050.c   **** /** Get free-fall event duration threshold.
 437:.\mpu6050.c   ****  * @param duration New free-fall duration threshold value (LSB = 1ms)
 438:.\mpu6050.c   ****  * @see getFreefallDetectionDuration()
 439:.\mpu6050.c   ****  * @see MPU6050_RA_FF_DUR
 440:.\mpu6050.c   ****  */
 441:.\mpu6050.c   **** void MPU6050_setFreefallDetectionDuration(uint8_t duration) {
 1144              		.loc 1 441 0
 1145              		.cfi_startproc
 1146 0000 80B5     		push	{r7, lr}
 1147              		.cfi_def_cfa_offset 8
 1148              		.cfi_offset 7, -8
 1149              		.cfi_offset 14, -4
 1150 0002 82B0     		sub	sp, sp, #8
 1151              		.cfi_def_cfa_offset 16
 1152 0004 00AF     		add	r7, sp, #0
 1153              		.cfi_def_cfa_register 7
 1154 0006 021C     		mov	r2, r0
 1155 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 29


 1156 000a 1A70     		strb	r2, [r3]
 442:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_FF_DUR, duration);
 1157              		.loc 1 442 0
 1158 000c 054B     		ldr	r3, .L92
 1159 000e 1A78     		ldrb	r2, [r3]
 1160 0010 FB1D     		add	r3, r7, #7
 1161 0012 1B78     		ldrb	r3, [r3]
 1162 0014 101C     		mov	r0, r2
 1163 0016 1E21     		mov	r1, #30
 1164 0018 1A1C     		mov	r2, r3
 1165 001a FFF7FEFF 		bl	I2CWriteByte
 443:.\mpu6050.c   **** }
 1166              		.loc 1 443 0
 1167 001e BD46     		mov	sp, r7
 1168 0020 02B0     		add	sp, sp, #8
 1169              		@ sp needed
 1170 0022 80BD     		pop	{r7, pc}
 1171              	.L93:
 1172              		.align	2
 1173              	.L92:
 1174 0024 00000000 		.word	devAddr
 1175              		.cfi_endproc
 1176              	.LFE27:
 1177              		.size	MPU6050_setFreefallDetectionDuration, .-MPU6050_setFreefallDetectionDuration
 1178              		.section	.text.MPU6050_getMotionDetectionThreshold,"ax",%progbits
 1179              		.align	2
 1180              		.global	MPU6050_getMotionDetectionThreshold
 1181              		.code	16
 1182              		.thumb_func
 1183              		.type	MPU6050_getMotionDetectionThreshold, %function
 1184              	MPU6050_getMotionDetectionThreshold:
 1185              	.LFB28:
 444:.\mpu6050.c   **** 
 445:.\mpu6050.c   **** // MOT_THR register
 446:.\mpu6050.c   **** 
 447:.\mpu6050.c   **** /** Get motion detection event acceleration threshold.
 448:.\mpu6050.c   ****  * This register configures the detection threshold for Motion interrupt
 449:.\mpu6050.c   ****  * generation. The unit of MOT_THR is 1LSB = 2mg. Motion is detected when the
 450:.\mpu6050.c   ****  * absolute value of any of the accelerometer measurements exceeds this Motion
 451:.\mpu6050.c   ****  * detection threshold. This condition increments the Motion detection duration
 452:.\mpu6050.c   ****  * counter (Register 32). The Motion detection interrupt is triggered when the
 453:.\mpu6050.c   ****  * Motion Detection counter reaches the time count specified in MOT_DUR
 454:.\mpu6050.c   ****  * (Register 32).
 455:.\mpu6050.c   ****  *
 456:.\mpu6050.c   ****  * The Motion interrupt will indicate the axis and polarity of detected motion
 457:.\mpu6050.c   ****  * in MOT_DETECT_STATUS (Register 97).
 458:.\mpu6050.c   ****  *
 459:.\mpu6050.c   ****  * For more details on the Motion detection interrupt, see Section 8.3 of the
 460:.\mpu6050.c   ****  * MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and
 461:.\mpu6050.c   ****  * 58 of this document.
 462:.\mpu6050.c   ****  *
 463:.\mpu6050.c   ****  * @return Current motion detection acceleration threshold value (LSB = 2mg)
 464:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_THR
 465:.\mpu6050.c   ****  */
 466:.\mpu6050.c   **** uint8_t MPU6050_getMotionDetectionThreshold() {
 1186              		.loc 1 466 0
 1187              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 30


 1188 0000 80B5     		push	{r7, lr}
 1189              		.cfi_def_cfa_offset 8
 1190              		.cfi_offset 7, -8
 1191              		.cfi_offset 14, -4
 1192 0002 00AF     		add	r7, sp, #0
 1193              		.cfi_def_cfa_register 7
 467:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_MOT_THR, buffer);
 1194              		.loc 1 467 0
 1195 0004 064B     		ldr	r3, .L96
 1196 0006 1A78     		ldrb	r2, [r3]
 1197 0008 064B     		ldr	r3, .L96+4
 1198 000a 101C     		mov	r0, r2
 1199 000c 1F21     		mov	r1, #31
 1200 000e 1A1C     		mov	r2, r3
 1201 0010 FFF7FEFF 		bl	I2CReadByte
 468:.\mpu6050.c   ****     return buffer[0];
 1202              		.loc 1 468 0
 1203 0014 034B     		ldr	r3, .L96+4
 1204 0016 1B78     		ldrb	r3, [r3]
 469:.\mpu6050.c   **** }
 1205              		.loc 1 469 0
 1206 0018 181C     		mov	r0, r3
 1207 001a BD46     		mov	sp, r7
 1208              		@ sp needed
 1209 001c 80BD     		pop	{r7, pc}
 1210              	.L97:
 1211 001e C046     		.align	2
 1212              	.L96:
 1213 0020 00000000 		.word	devAddr
 1214 0024 00000000 		.word	buffer
 1215              		.cfi_endproc
 1216              	.LFE28:
 1217              		.size	MPU6050_getMotionDetectionThreshold, .-MPU6050_getMotionDetectionThreshold
 1218              		.section	.text.MPU6050_setMotionDetectionThreshold,"ax",%progbits
 1219              		.align	2
 1220              		.global	MPU6050_setMotionDetectionThreshold
 1221              		.code	16
 1222              		.thumb_func
 1223              		.type	MPU6050_setMotionDetectionThreshold, %function
 1224              	MPU6050_setMotionDetectionThreshold:
 1225              	.LFB29:
 470:.\mpu6050.c   **** /** Set free-fall event acceleration threshold.
 471:.\mpu6050.c   ****  * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 472:.\mpu6050.c   ****  * @see getMotionDetectionThreshold()
 473:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_THR
 474:.\mpu6050.c   ****  */
 475:.\mpu6050.c   **** void MPU6050_setMotionDetectionThreshold(uint8_t threshold) {
 1226              		.loc 1 475 0
 1227              		.cfi_startproc
 1228 0000 80B5     		push	{r7, lr}
 1229              		.cfi_def_cfa_offset 8
 1230              		.cfi_offset 7, -8
 1231              		.cfi_offset 14, -4
 1232 0002 82B0     		sub	sp, sp, #8
 1233              		.cfi_def_cfa_offset 16
 1234 0004 00AF     		add	r7, sp, #0
 1235              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 31


 1236 0006 021C     		mov	r2, r0
 1237 0008 FB1D     		add	r3, r7, #7
 1238 000a 1A70     		strb	r2, [r3]
 476:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 1239              		.loc 1 476 0
 1240 000c 054B     		ldr	r3, .L99
 1241 000e 1A78     		ldrb	r2, [r3]
 1242 0010 FB1D     		add	r3, r7, #7
 1243 0012 1B78     		ldrb	r3, [r3]
 1244 0014 101C     		mov	r0, r2
 1245 0016 1F21     		mov	r1, #31
 1246 0018 1A1C     		mov	r2, r3
 1247 001a FFF7FEFF 		bl	I2CWriteByte
 477:.\mpu6050.c   **** }
 1248              		.loc 1 477 0
 1249 001e BD46     		mov	sp, r7
 1250 0020 02B0     		add	sp, sp, #8
 1251              		@ sp needed
 1252 0022 80BD     		pop	{r7, pc}
 1253              	.L100:
 1254              		.align	2
 1255              	.L99:
 1256 0024 00000000 		.word	devAddr
 1257              		.cfi_endproc
 1258              	.LFE29:
 1259              		.size	MPU6050_setMotionDetectionThreshold, .-MPU6050_setMotionDetectionThreshold
 1260              		.section	.text.MPU6050_getMotionDetectionDuration,"ax",%progbits
 1261              		.align	2
 1262              		.global	MPU6050_getMotionDetectionDuration
 1263              		.code	16
 1264              		.thumb_func
 1265              		.type	MPU6050_getMotionDetectionDuration, %function
 1266              	MPU6050_getMotionDetectionDuration:
 1267              	.LFB30:
 478:.\mpu6050.c   **** 
 479:.\mpu6050.c   **** // MOT_DUR register
 480:.\mpu6050.c   **** 
 481:.\mpu6050.c   **** /** Get motion detection event duration threshold.
 482:.\mpu6050.c   ****  * This register configures the duration counter threshold for Motion interrupt
 483:.\mpu6050.c   ****  * generation. The duration counter ticks at 1 kHz, therefore MOT_DUR has a unit
 484:.\mpu6050.c   ****  * of 1LSB = 1ms. The Motion detection duration counter increments when the
 485:.\mpu6050.c   ****  * absolute value of any of the accelerometer measurements exceeds the Motion
 486:.\mpu6050.c   ****  * detection threshold (Register 31). The Motion detection interrupt is
 487:.\mpu6050.c   ****  * triggered when the Motion detection counter reaches the time count specified
 488:.\mpu6050.c   ****  * in this register.
 489:.\mpu6050.c   ****  *
 490:.\mpu6050.c   ****  * For more details on the Motion detection interrupt, see Section 8.3 of the
 491:.\mpu6050.c   ****  * MPU-6000/MPU-6050 Product Specification document.
 492:.\mpu6050.c   ****  *
 493:.\mpu6050.c   ****  * @return Current motion detection duration threshold value (LSB = 1ms)
 494:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DUR
 495:.\mpu6050.c   ****  */
 496:.\mpu6050.c   **** uint8_t MPU6050_getMotionDetectionDuration() {
 1268              		.loc 1 496 0
 1269              		.cfi_startproc
 1270 0000 80B5     		push	{r7, lr}
 1271              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 32


 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0002 00AF     		add	r7, sp, #0
 1275              		.cfi_def_cfa_register 7
 497:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_MOT_DUR, buffer);
 1276              		.loc 1 497 0
 1277 0004 064B     		ldr	r3, .L103
 1278 0006 1A78     		ldrb	r2, [r3]
 1279 0008 064B     		ldr	r3, .L103+4
 1280 000a 101C     		mov	r0, r2
 1281 000c 2021     		mov	r1, #32
 1282 000e 1A1C     		mov	r2, r3
 1283 0010 FFF7FEFF 		bl	I2CReadByte
 498:.\mpu6050.c   ****     return buffer[0];
 1284              		.loc 1 498 0
 1285 0014 034B     		ldr	r3, .L103+4
 1286 0016 1B78     		ldrb	r3, [r3]
 499:.\mpu6050.c   **** }
 1287              		.loc 1 499 0
 1288 0018 181C     		mov	r0, r3
 1289 001a BD46     		mov	sp, r7
 1290              		@ sp needed
 1291 001c 80BD     		pop	{r7, pc}
 1292              	.L104:
 1293 001e C046     		.align	2
 1294              	.L103:
 1295 0020 00000000 		.word	devAddr
 1296 0024 00000000 		.word	buffer
 1297              		.cfi_endproc
 1298              	.LFE30:
 1299              		.size	MPU6050_getMotionDetectionDuration, .-MPU6050_getMotionDetectionDuration
 1300              		.section	.text.MPU6050_setMotionDetectionDuration,"ax",%progbits
 1301              		.align	2
 1302              		.global	MPU6050_setMotionDetectionDuration
 1303              		.code	16
 1304              		.thumb_func
 1305              		.type	MPU6050_setMotionDetectionDuration, %function
 1306              	MPU6050_setMotionDetectionDuration:
 1307              	.LFB31:
 500:.\mpu6050.c   **** /** Set motion detection event duration threshold.
 501:.\mpu6050.c   ****  * @param duration New motion detection duration threshold value (LSB = 1ms)
 502:.\mpu6050.c   ****  * @see getMotionDetectionDuration()
 503:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DUR
 504:.\mpu6050.c   ****  */
 505:.\mpu6050.c   **** void MPU6050_setMotionDetectionDuration(uint8_t duration) {
 1308              		.loc 1 505 0
 1309              		.cfi_startproc
 1310 0000 80B5     		push	{r7, lr}
 1311              		.cfi_def_cfa_offset 8
 1312              		.cfi_offset 7, -8
 1313              		.cfi_offset 14, -4
 1314 0002 82B0     		sub	sp, sp, #8
 1315              		.cfi_def_cfa_offset 16
 1316 0004 00AF     		add	r7, sp, #0
 1317              		.cfi_def_cfa_register 7
 1318 0006 021C     		mov	r2, r0
 1319 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 33


 1320 000a 1A70     		strb	r2, [r3]
 506:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 1321              		.loc 1 506 0
 1322 000c 054B     		ldr	r3, .L106
 1323 000e 1A78     		ldrb	r2, [r3]
 1324 0010 FB1D     		add	r3, r7, #7
 1325 0012 1B78     		ldrb	r3, [r3]
 1326 0014 101C     		mov	r0, r2
 1327 0016 2021     		mov	r1, #32
 1328 0018 1A1C     		mov	r2, r3
 1329 001a FFF7FEFF 		bl	I2CWriteByte
 507:.\mpu6050.c   **** }
 1330              		.loc 1 507 0
 1331 001e BD46     		mov	sp, r7
 1332 0020 02B0     		add	sp, sp, #8
 1333              		@ sp needed
 1334 0022 80BD     		pop	{r7, pc}
 1335              	.L107:
 1336              		.align	2
 1337              	.L106:
 1338 0024 00000000 		.word	devAddr
 1339              		.cfi_endproc
 1340              	.LFE31:
 1341              		.size	MPU6050_setMotionDetectionDuration, .-MPU6050_setMotionDetectionDuration
 1342              		.section	.text.MPU6050_getZeroMotionDetectionThreshold,"ax",%progbits
 1343              		.align	2
 1344              		.global	MPU6050_getZeroMotionDetectionThreshold
 1345              		.code	16
 1346              		.thumb_func
 1347              		.type	MPU6050_getZeroMotionDetectionThreshold, %function
 1348              	MPU6050_getZeroMotionDetectionThreshold:
 1349              	.LFB32:
 508:.\mpu6050.c   **** 
 509:.\mpu6050.c   **** // ZRMOT_THR register
 510:.\mpu6050.c   **** 
 511:.\mpu6050.c   **** /** Get zero motion detection event acceleration threshold.
 512:.\mpu6050.c   ****  * This register configures the detection threshold for Zero Motion interrupt
 513:.\mpu6050.c   ****  * generation. The unit of ZRMOT_THR is 1LSB = 2mg. Zero Motion is detected when
 514:.\mpu6050.c   ****  * the absolute value of the accelerometer measurements for the 3 axes are each
 515:.\mpu6050.c   ****  * less than the detection threshold. This condition increments the Zero Motion
 516:.\mpu6050.c   ****  * duration counter (Register 34). The Zero Motion interrupt is triggered when
 517:.\mpu6050.c   ****  * the Zero Motion duration counter reaches the time count specified in
 518:.\mpu6050.c   ****  * ZRMOT_DUR (Register 34).
 519:.\mpu6050.c   ****  *
 520:.\mpu6050.c   ****  * Unlike Free Fall or Motion detection, Zero Motion detection triggers an
 521:.\mpu6050.c   ****  * interrupt both when Zero Motion is first detected and when Zero Motion is no
 522:.\mpu6050.c   ****  * longer detected.
 523:.\mpu6050.c   ****  *
 524:.\mpu6050.c   ****  * When a zero motion event is detected, a Zero Motion Status will be indicated
 525:.\mpu6050.c   ****  * in the MOT_DETECT_STATUS register (Register 97). When a motion-to-zero-motion
 526:.\mpu6050.c   ****  * condition is detected, the status bit is set to 1. When a zero-motion-to-
 527:.\mpu6050.c   ****  * motion condition is detected, the status bit is set to 0.
 528:.\mpu6050.c   ****  *
 529:.\mpu6050.c   ****  * For more details on the Zero Motion detection interrupt, see Section 8.4 of
 530:.\mpu6050.c   ****  * the MPU-6000/MPU-6050 Product Specification document as well as Registers 56
 531:.\mpu6050.c   ****  * and 58 of this document.
 532:.\mpu6050.c   ****  *
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 34


 533:.\mpu6050.c   ****  * @return Current zero motion detection acceleration threshold value (LSB = 2mg)
 534:.\mpu6050.c   ****  * @see MPU6050_RA_ZRMOT_THR
 535:.\mpu6050.c   ****  */
 536:.\mpu6050.c   **** uint8_t MPU6050_getZeroMotionDetectionThreshold() {
 1350              		.loc 1 536 0
 1351              		.cfi_startproc
 1352 0000 80B5     		push	{r7, lr}
 1353              		.cfi_def_cfa_offset 8
 1354              		.cfi_offset 7, -8
 1355              		.cfi_offset 14, -4
 1356 0002 00AF     		add	r7, sp, #0
 1357              		.cfi_def_cfa_register 7
 537:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_ZRMOT_THR, buffer);
 1358              		.loc 1 537 0
 1359 0004 064B     		ldr	r3, .L110
 1360 0006 1A78     		ldrb	r2, [r3]
 1361 0008 064B     		ldr	r3, .L110+4
 1362 000a 101C     		mov	r0, r2
 1363 000c 2121     		mov	r1, #33
 1364 000e 1A1C     		mov	r2, r3
 1365 0010 FFF7FEFF 		bl	I2CReadByte
 538:.\mpu6050.c   ****     return buffer[0];
 1366              		.loc 1 538 0
 1367 0014 034B     		ldr	r3, .L110+4
 1368 0016 1B78     		ldrb	r3, [r3]
 539:.\mpu6050.c   **** }
 1369              		.loc 1 539 0
 1370 0018 181C     		mov	r0, r3
 1371 001a BD46     		mov	sp, r7
 1372              		@ sp needed
 1373 001c 80BD     		pop	{r7, pc}
 1374              	.L111:
 1375 001e C046     		.align	2
 1376              	.L110:
 1377 0020 00000000 		.word	devAddr
 1378 0024 00000000 		.word	buffer
 1379              		.cfi_endproc
 1380              	.LFE32:
 1381              		.size	MPU6050_getZeroMotionDetectionThreshold, .-MPU6050_getZeroMotionDetectionThreshold
 1382              		.section	.text.MPU6050_setZeroMotionDetectionThreshold,"ax",%progbits
 1383              		.align	2
 1384              		.global	MPU6050_setZeroMotionDetectionThreshold
 1385              		.code	16
 1386              		.thumb_func
 1387              		.type	MPU6050_setZeroMotionDetectionThreshold, %function
 1388              	MPU6050_setZeroMotionDetectionThreshold:
 1389              	.LFB33:
 540:.\mpu6050.c   **** /** Set zero motion detection event acceleration threshold.
 541:.\mpu6050.c   ****  * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 542:.\mpu6050.c   ****  * @see getZeroMotionDetectionThreshold()
 543:.\mpu6050.c   ****  * @see MPU6050_RA_ZRMOT_THR
 544:.\mpu6050.c   ****  */
 545:.\mpu6050.c   **** void MPU6050_setZeroMotionDetectionThreshold(uint8_t threshold) {
 1390              		.loc 1 545 0
 1391              		.cfi_startproc
 1392 0000 80B5     		push	{r7, lr}
 1393              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 35


 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
 1396 0002 82B0     		sub	sp, sp, #8
 1397              		.cfi_def_cfa_offset 16
 1398 0004 00AF     		add	r7, sp, #0
 1399              		.cfi_def_cfa_register 7
 1400 0006 021C     		mov	r2, r0
 1401 0008 FB1D     		add	r3, r7, #7
 1402 000a 1A70     		strb	r2, [r3]
 546:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 1403              		.loc 1 546 0
 1404 000c 054B     		ldr	r3, .L113
 1405 000e 1A78     		ldrb	r2, [r3]
 1406 0010 FB1D     		add	r3, r7, #7
 1407 0012 1B78     		ldrb	r3, [r3]
 1408 0014 101C     		mov	r0, r2
 1409 0016 2121     		mov	r1, #33
 1410 0018 1A1C     		mov	r2, r3
 1411 001a FFF7FEFF 		bl	I2CWriteByte
 547:.\mpu6050.c   **** }
 1412              		.loc 1 547 0
 1413 001e BD46     		mov	sp, r7
 1414 0020 02B0     		add	sp, sp, #8
 1415              		@ sp needed
 1416 0022 80BD     		pop	{r7, pc}
 1417              	.L114:
 1418              		.align	2
 1419              	.L113:
 1420 0024 00000000 		.word	devAddr
 1421              		.cfi_endproc
 1422              	.LFE33:
 1423              		.size	MPU6050_setZeroMotionDetectionThreshold, .-MPU6050_setZeroMotionDetectionThreshold
 1424              		.section	.text.MPU6050_getZeroMotionDetectionDuration,"ax",%progbits
 1425              		.align	2
 1426              		.global	MPU6050_getZeroMotionDetectionDuration
 1427              		.code	16
 1428              		.thumb_func
 1429              		.type	MPU6050_getZeroMotionDetectionDuration, %function
 1430              	MPU6050_getZeroMotionDetectionDuration:
 1431              	.LFB34:
 548:.\mpu6050.c   **** 
 549:.\mpu6050.c   **** // ZRMOT_DUR register
 550:.\mpu6050.c   **** 
 551:.\mpu6050.c   **** /** Get zero motion detection event duration threshold.
 552:.\mpu6050.c   ****  * This register configures the duration counter threshold for Zero Motion
 553:.\mpu6050.c   ****  * interrupt generation. The duration counter ticks at 16 Hz, therefore
 554:.\mpu6050.c   ****  * ZRMOT_DUR has a unit of 1 LSB = 64 ms. The Zero Motion duration counter
 555:.\mpu6050.c   ****  * increments while the absolute value of the accelerometer measurements are
 556:.\mpu6050.c   ****  * each less than the detection threshold (Register 33). The Zero Motion
 557:.\mpu6050.c   ****  * interrupt is triggered when the Zero Motion duration counter reaches the time
 558:.\mpu6050.c   ****  * count specified in this register.
 559:.\mpu6050.c   ****  *
 560:.\mpu6050.c   ****  * For more details on the Zero Motion detection interrupt, see Section 8.4 of
 561:.\mpu6050.c   ****  * the MPU-6000/MPU-6050 Product Specification document, as well as Registers 56
 562:.\mpu6050.c   ****  * and 58 of this document.
 563:.\mpu6050.c   ****  *
 564:.\mpu6050.c   ****  * @return Current zero motion detection duration threshold value (LSB = 64ms)
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 36


 565:.\mpu6050.c   ****  * @see MPU6050_RA_ZRMOT_DUR
 566:.\mpu6050.c   ****  */
 567:.\mpu6050.c   **** uint8_t MPU6050_getZeroMotionDetectionDuration() {
 1432              		.loc 1 567 0
 1433              		.cfi_startproc
 1434 0000 80B5     		push	{r7, lr}
 1435              		.cfi_def_cfa_offset 8
 1436              		.cfi_offset 7, -8
 1437              		.cfi_offset 14, -4
 1438 0002 00AF     		add	r7, sp, #0
 1439              		.cfi_def_cfa_register 7
 568:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_ZRMOT_DUR, buffer);
 1440              		.loc 1 568 0
 1441 0004 064B     		ldr	r3, .L117
 1442 0006 1A78     		ldrb	r2, [r3]
 1443 0008 064B     		ldr	r3, .L117+4
 1444 000a 101C     		mov	r0, r2
 1445 000c 2221     		mov	r1, #34
 1446 000e 1A1C     		mov	r2, r3
 1447 0010 FFF7FEFF 		bl	I2CReadByte
 569:.\mpu6050.c   ****     return buffer[0];
 1448              		.loc 1 569 0
 1449 0014 034B     		ldr	r3, .L117+4
 1450 0016 1B78     		ldrb	r3, [r3]
 570:.\mpu6050.c   **** }
 1451              		.loc 1 570 0
 1452 0018 181C     		mov	r0, r3
 1453 001a BD46     		mov	sp, r7
 1454              		@ sp needed
 1455 001c 80BD     		pop	{r7, pc}
 1456              	.L118:
 1457 001e C046     		.align	2
 1458              	.L117:
 1459 0020 00000000 		.word	devAddr
 1460 0024 00000000 		.word	buffer
 1461              		.cfi_endproc
 1462              	.LFE34:
 1463              		.size	MPU6050_getZeroMotionDetectionDuration, .-MPU6050_getZeroMotionDetectionDuration
 1464              		.section	.text.MPU6050_setZeroMotionDetectionDuration,"ax",%progbits
 1465              		.align	2
 1466              		.global	MPU6050_setZeroMotionDetectionDuration
 1467              		.code	16
 1468              		.thumb_func
 1469              		.type	MPU6050_setZeroMotionDetectionDuration, %function
 1470              	MPU6050_setZeroMotionDetectionDuration:
 1471              	.LFB35:
 571:.\mpu6050.c   **** /** Set zero motion detection event duration threshold.
 572:.\mpu6050.c   ****  * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 573:.\mpu6050.c   ****  * @see getZeroMotionDetectionDuration()
 574:.\mpu6050.c   ****  * @see MPU6050_RA_ZRMOT_DUR
 575:.\mpu6050.c   ****  */
 576:.\mpu6050.c   **** void MPU6050_setZeroMotionDetectionDuration(uint8_t duration) {
 1472              		.loc 1 576 0
 1473              		.cfi_startproc
 1474 0000 80B5     		push	{r7, lr}
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 37


 1477              		.cfi_offset 14, -4
 1478 0002 82B0     		sub	sp, sp, #8
 1479              		.cfi_def_cfa_offset 16
 1480 0004 00AF     		add	r7, sp, #0
 1481              		.cfi_def_cfa_register 7
 1482 0006 021C     		mov	r2, r0
 1483 0008 FB1D     		add	r3, r7, #7
 1484 000a 1A70     		strb	r2, [r3]
 577:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 1485              		.loc 1 577 0
 1486 000c 054B     		ldr	r3, .L120
 1487 000e 1A78     		ldrb	r2, [r3]
 1488 0010 FB1D     		add	r3, r7, #7
 1489 0012 1B78     		ldrb	r3, [r3]
 1490 0014 101C     		mov	r0, r2
 1491 0016 2221     		mov	r1, #34
 1492 0018 1A1C     		mov	r2, r3
 1493 001a FFF7FEFF 		bl	I2CWriteByte
 578:.\mpu6050.c   **** }
 1494              		.loc 1 578 0
 1495 001e BD46     		mov	sp, r7
 1496 0020 02B0     		add	sp, sp, #8
 1497              		@ sp needed
 1498 0022 80BD     		pop	{r7, pc}
 1499              	.L121:
 1500              		.align	2
 1501              	.L120:
 1502 0024 00000000 		.word	devAddr
 1503              		.cfi_endproc
 1504              	.LFE35:
 1505              		.size	MPU6050_setZeroMotionDetectionDuration, .-MPU6050_setZeroMotionDetectionDuration
 1506              		.section	.text.MPU6050_getTempFIFOEnabled,"ax",%progbits
 1507              		.align	2
 1508              		.global	MPU6050_getTempFIFOEnabled
 1509              		.code	16
 1510              		.thumb_func
 1511              		.type	MPU6050_getTempFIFOEnabled, %function
 1512              	MPU6050_getTempFIFOEnabled:
 1513              	.LFB36:
 579:.\mpu6050.c   **** 
 580:.\mpu6050.c   **** // FIFO_EN register
 581:.\mpu6050.c   **** 
 582:.\mpu6050.c   **** /** Get temperature FIFO enabled value.
 583:.\mpu6050.c   ****  * When set to 1, this bit enables TEMP_OUT_H and TEMP_OUT_L (Registers 65 and
 584:.\mpu6050.c   ****  * 66) to be written into the FIFO buffer.
 585:.\mpu6050.c   ****  * @return Current temperature FIFO enabled value
 586:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 587:.\mpu6050.c   ****  */
 588:.\mpu6050.c   **** bool MPU6050_getTempFIFOEnabled() {
 1514              		.loc 1 588 0
 1515              		.cfi_startproc
 1516 0000 80B5     		push	{r7, lr}
 1517              		.cfi_def_cfa_offset 8
 1518              		.cfi_offset 7, -8
 1519              		.cfi_offset 14, -4
 1520 0002 00AF     		add	r7, sp, #0
 1521              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 38


 589:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_TEMP_FIFO_EN_BIT, buffer);
 1522              		.loc 1 589 0
 1523 0004 074B     		ldr	r3, .L124
 1524 0006 1A78     		ldrb	r2, [r3]
 1525 0008 074B     		ldr	r3, .L124+4
 1526 000a 101C     		mov	r0, r2
 1527 000c 2321     		mov	r1, #35
 1528 000e 0722     		mov	r2, #7
 1529 0010 FFF7FEFF 		bl	I2CReadBit
 590:.\mpu6050.c   ****     return buffer[0];
 1530              		.loc 1 590 0
 1531 0014 044B     		ldr	r3, .L124+4
 1532 0016 1B78     		ldrb	r3, [r3]
 1533 0018 5A1E     		sub	r2, r3, #1
 1534 001a 9341     		sbc	r3, r3, r2
 1535 001c DBB2     		uxtb	r3, r3
 591:.\mpu6050.c   **** }
 1536              		.loc 1 591 0
 1537 001e 181C     		mov	r0, r3
 1538 0020 BD46     		mov	sp, r7
 1539              		@ sp needed
 1540 0022 80BD     		pop	{r7, pc}
 1541              	.L125:
 1542              		.align	2
 1543              	.L124:
 1544 0024 00000000 		.word	devAddr
 1545 0028 00000000 		.word	buffer
 1546              		.cfi_endproc
 1547              	.LFE36:
 1548              		.size	MPU6050_getTempFIFOEnabled, .-MPU6050_getTempFIFOEnabled
 1549              		.section	.text.MPU6050_setTempFIFOEnabled,"ax",%progbits
 1550              		.align	2
 1551              		.global	MPU6050_setTempFIFOEnabled
 1552              		.code	16
 1553              		.thumb_func
 1554              		.type	MPU6050_setTempFIFOEnabled, %function
 1555              	MPU6050_setTempFIFOEnabled:
 1556              	.LFB37:
 592:.\mpu6050.c   **** /** Set temperature FIFO enabled value.
 593:.\mpu6050.c   ****  * @param enabled New temperature FIFO enabled value
 594:.\mpu6050.c   ****  * @see getTempFIFOEnabled()
 595:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 596:.\mpu6050.c   ****  */
 597:.\mpu6050.c   **** void MPU6050_setTempFIFOEnabled(bool enabled) {
 1557              		.loc 1 597 0
 1558              		.cfi_startproc
 1559 0000 80B5     		push	{r7, lr}
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 7, -8
 1562              		.cfi_offset 14, -4
 1563 0002 82B0     		sub	sp, sp, #8
 1564              		.cfi_def_cfa_offset 16
 1565 0004 00AF     		add	r7, sp, #0
 1566              		.cfi_def_cfa_register 7
 1567 0006 021C     		mov	r2, r0
 1568 0008 FB1D     		add	r3, r7, #7
 1569 000a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 39


 598:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_TEMP_FIFO_EN_BIT, enabled);
 1570              		.loc 1 598 0
 1571 000c 054B     		ldr	r3, .L127
 1572 000e 1A78     		ldrb	r2, [r3]
 1573 0010 FB1D     		add	r3, r7, #7
 1574 0012 1B78     		ldrb	r3, [r3]
 1575 0014 101C     		mov	r0, r2
 1576 0016 2321     		mov	r1, #35
 1577 0018 0722     		mov	r2, #7
 1578 001a FFF7FEFF 		bl	I2CWriteBit
 599:.\mpu6050.c   **** }
 1579              		.loc 1 599 0
 1580 001e BD46     		mov	sp, r7
 1581 0020 02B0     		add	sp, sp, #8
 1582              		@ sp needed
 1583 0022 80BD     		pop	{r7, pc}
 1584              	.L128:
 1585              		.align	2
 1586              	.L127:
 1587 0024 00000000 		.word	devAddr
 1588              		.cfi_endproc
 1589              	.LFE37:
 1590              		.size	MPU6050_setTempFIFOEnabled, .-MPU6050_setTempFIFOEnabled
 1591              		.section	.text.MPU6050_getXGyroFIFOEnabled,"ax",%progbits
 1592              		.align	2
 1593              		.global	MPU6050_getXGyroFIFOEnabled
 1594              		.code	16
 1595              		.thumb_func
 1596              		.type	MPU6050_getXGyroFIFOEnabled, %function
 1597              	MPU6050_getXGyroFIFOEnabled:
 1598              	.LFB38:
 600:.\mpu6050.c   **** /** Get gyroscope X-axis FIFO enabled value.
 601:.\mpu6050.c   ****  * When set to 1, this bit enables GYRO_XOUT_H and GYRO_XOUT_L (Registers 67 and
 602:.\mpu6050.c   ****  * 68) to be written into the FIFO buffer.
 603:.\mpu6050.c   ****  * @return Current gyroscope X-axis FIFO enabled value
 604:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 605:.\mpu6050.c   ****  */
 606:.\mpu6050.c   **** bool MPU6050_getXGyroFIFOEnabled() {
 1599              		.loc 1 606 0
 1600              		.cfi_startproc
 1601 0000 80B5     		push	{r7, lr}
 1602              		.cfi_def_cfa_offset 8
 1603              		.cfi_offset 7, -8
 1604              		.cfi_offset 14, -4
 1605 0002 00AF     		add	r7, sp, #0
 1606              		.cfi_def_cfa_register 7
 607:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, buffer);
 1607              		.loc 1 607 0
 1608 0004 074B     		ldr	r3, .L131
 1609 0006 1A78     		ldrb	r2, [r3]
 1610 0008 074B     		ldr	r3, .L131+4
 1611 000a 101C     		mov	r0, r2
 1612 000c 2321     		mov	r1, #35
 1613 000e 0622     		mov	r2, #6
 1614 0010 FFF7FEFF 		bl	I2CReadBit
 608:.\mpu6050.c   ****     return buffer[0];
 1615              		.loc 1 608 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 40


 1616 0014 044B     		ldr	r3, .L131+4
 1617 0016 1B78     		ldrb	r3, [r3]
 1618 0018 5A1E     		sub	r2, r3, #1
 1619 001a 9341     		sbc	r3, r3, r2
 1620 001c DBB2     		uxtb	r3, r3
 609:.\mpu6050.c   **** }
 1621              		.loc 1 609 0
 1622 001e 181C     		mov	r0, r3
 1623 0020 BD46     		mov	sp, r7
 1624              		@ sp needed
 1625 0022 80BD     		pop	{r7, pc}
 1626              	.L132:
 1627              		.align	2
 1628              	.L131:
 1629 0024 00000000 		.word	devAddr
 1630 0028 00000000 		.word	buffer
 1631              		.cfi_endproc
 1632              	.LFE38:
 1633              		.size	MPU6050_getXGyroFIFOEnabled, .-MPU6050_getXGyroFIFOEnabled
 1634              		.section	.text.MPU6050_setXGyroFIFOEnabled,"ax",%progbits
 1635              		.align	2
 1636              		.global	MPU6050_setXGyroFIFOEnabled
 1637              		.code	16
 1638              		.thumb_func
 1639              		.type	MPU6050_setXGyroFIFOEnabled, %function
 1640              	MPU6050_setXGyroFIFOEnabled:
 1641              	.LFB39:
 610:.\mpu6050.c   **** /** Set gyroscope X-axis FIFO enabled value.
 611:.\mpu6050.c   ****  * @param enabled New gyroscope X-axis FIFO enabled value
 612:.\mpu6050.c   ****  * @see getXGyroFIFOEnabled()
 613:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 614:.\mpu6050.c   ****  */
 615:.\mpu6050.c   **** void MPU6050_setXGyroFIFOEnabled(bool enabled) {
 1642              		.loc 1 615 0
 1643              		.cfi_startproc
 1644 0000 80B5     		push	{r7, lr}
 1645              		.cfi_def_cfa_offset 8
 1646              		.cfi_offset 7, -8
 1647              		.cfi_offset 14, -4
 1648 0002 82B0     		sub	sp, sp, #8
 1649              		.cfi_def_cfa_offset 16
 1650 0004 00AF     		add	r7, sp, #0
 1651              		.cfi_def_cfa_register 7
 1652 0006 021C     		mov	r2, r0
 1653 0008 FB1D     		add	r3, r7, #7
 1654 000a 1A70     		strb	r2, [r3]
 616:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, enabled);
 1655              		.loc 1 616 0
 1656 000c 054B     		ldr	r3, .L134
 1657 000e 1A78     		ldrb	r2, [r3]
 1658 0010 FB1D     		add	r3, r7, #7
 1659 0012 1B78     		ldrb	r3, [r3]
 1660 0014 101C     		mov	r0, r2
 1661 0016 2321     		mov	r1, #35
 1662 0018 0622     		mov	r2, #6
 1663 001a FFF7FEFF 		bl	I2CWriteBit
 617:.\mpu6050.c   **** }
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 41


 1664              		.loc 1 617 0
 1665 001e BD46     		mov	sp, r7
 1666 0020 02B0     		add	sp, sp, #8
 1667              		@ sp needed
 1668 0022 80BD     		pop	{r7, pc}
 1669              	.L135:
 1670              		.align	2
 1671              	.L134:
 1672 0024 00000000 		.word	devAddr
 1673              		.cfi_endproc
 1674              	.LFE39:
 1675              		.size	MPU6050_setXGyroFIFOEnabled, .-MPU6050_setXGyroFIFOEnabled
 1676              		.section	.text.MPU6050_getYGyroFIFOEnabled,"ax",%progbits
 1677              		.align	2
 1678              		.global	MPU6050_getYGyroFIFOEnabled
 1679              		.code	16
 1680              		.thumb_func
 1681              		.type	MPU6050_getYGyroFIFOEnabled, %function
 1682              	MPU6050_getYGyroFIFOEnabled:
 1683              	.LFB40:
 618:.\mpu6050.c   **** /** Get gyroscope Y-axis FIFO enabled value.
 619:.\mpu6050.c   ****  * When set to 1, this bit enables GYRO_YOUT_H and GYRO_YOUT_L (Registers 69 and
 620:.\mpu6050.c   ****  * 70) to be written into the FIFO buffer.
 621:.\mpu6050.c   ****  * @return Current gyroscope Y-axis FIFO enabled value
 622:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 623:.\mpu6050.c   ****  */
 624:.\mpu6050.c   **** bool MPU6050_getYGyroFIFOEnabled() {
 1684              		.loc 1 624 0
 1685              		.cfi_startproc
 1686 0000 80B5     		push	{r7, lr}
 1687              		.cfi_def_cfa_offset 8
 1688              		.cfi_offset 7, -8
 1689              		.cfi_offset 14, -4
 1690 0002 00AF     		add	r7, sp, #0
 1691              		.cfi_def_cfa_register 7
 625:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, buffer);
 1692              		.loc 1 625 0
 1693 0004 074B     		ldr	r3, .L138
 1694 0006 1A78     		ldrb	r2, [r3]
 1695 0008 074B     		ldr	r3, .L138+4
 1696 000a 101C     		mov	r0, r2
 1697 000c 2321     		mov	r1, #35
 1698 000e 0522     		mov	r2, #5
 1699 0010 FFF7FEFF 		bl	I2CReadBit
 626:.\mpu6050.c   ****     return buffer[0];
 1700              		.loc 1 626 0
 1701 0014 044B     		ldr	r3, .L138+4
 1702 0016 1B78     		ldrb	r3, [r3]
 1703 0018 5A1E     		sub	r2, r3, #1
 1704 001a 9341     		sbc	r3, r3, r2
 1705 001c DBB2     		uxtb	r3, r3
 627:.\mpu6050.c   **** }
 1706              		.loc 1 627 0
 1707 001e 181C     		mov	r0, r3
 1708 0020 BD46     		mov	sp, r7
 1709              		@ sp needed
 1710 0022 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 42


 1711              	.L139:
 1712              		.align	2
 1713              	.L138:
 1714 0024 00000000 		.word	devAddr
 1715 0028 00000000 		.word	buffer
 1716              		.cfi_endproc
 1717              	.LFE40:
 1718              		.size	MPU6050_getYGyroFIFOEnabled, .-MPU6050_getYGyroFIFOEnabled
 1719              		.section	.text.MPU6050_setYGyroFIFOEnabled,"ax",%progbits
 1720              		.align	2
 1721              		.global	MPU6050_setYGyroFIFOEnabled
 1722              		.code	16
 1723              		.thumb_func
 1724              		.type	MPU6050_setYGyroFIFOEnabled, %function
 1725              	MPU6050_setYGyroFIFOEnabled:
 1726              	.LFB41:
 628:.\mpu6050.c   **** /** Set gyroscope Y-axis FIFO enabled value.
 629:.\mpu6050.c   ****  * @param enabled New gyroscope Y-axis FIFO enabled value
 630:.\mpu6050.c   ****  * @see getYGyroFIFOEnabled()
 631:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 632:.\mpu6050.c   ****  */
 633:.\mpu6050.c   **** void MPU6050_setYGyroFIFOEnabled(bool enabled) {
 1727              		.loc 1 633 0
 1728              		.cfi_startproc
 1729 0000 80B5     		push	{r7, lr}
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 7, -8
 1732              		.cfi_offset 14, -4
 1733 0002 82B0     		sub	sp, sp, #8
 1734              		.cfi_def_cfa_offset 16
 1735 0004 00AF     		add	r7, sp, #0
 1736              		.cfi_def_cfa_register 7
 1737 0006 021C     		mov	r2, r0
 1738 0008 FB1D     		add	r3, r7, #7
 1739 000a 1A70     		strb	r2, [r3]
 634:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, enabled);
 1740              		.loc 1 634 0
 1741 000c 054B     		ldr	r3, .L141
 1742 000e 1A78     		ldrb	r2, [r3]
 1743 0010 FB1D     		add	r3, r7, #7
 1744 0012 1B78     		ldrb	r3, [r3]
 1745 0014 101C     		mov	r0, r2
 1746 0016 2321     		mov	r1, #35
 1747 0018 0522     		mov	r2, #5
 1748 001a FFF7FEFF 		bl	I2CWriteBit
 635:.\mpu6050.c   **** }
 1749              		.loc 1 635 0
 1750 001e BD46     		mov	sp, r7
 1751 0020 02B0     		add	sp, sp, #8
 1752              		@ sp needed
 1753 0022 80BD     		pop	{r7, pc}
 1754              	.L142:
 1755              		.align	2
 1756              	.L141:
 1757 0024 00000000 		.word	devAddr
 1758              		.cfi_endproc
 1759              	.LFE41:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 43


 1760              		.size	MPU6050_setYGyroFIFOEnabled, .-MPU6050_setYGyroFIFOEnabled
 1761              		.section	.text.MPU6050_getZGyroFIFOEnabled,"ax",%progbits
 1762              		.align	2
 1763              		.global	MPU6050_getZGyroFIFOEnabled
 1764              		.code	16
 1765              		.thumb_func
 1766              		.type	MPU6050_getZGyroFIFOEnabled, %function
 1767              	MPU6050_getZGyroFIFOEnabled:
 1768              	.LFB42:
 636:.\mpu6050.c   **** /** Get gyroscope Z-axis FIFO enabled value.
 637:.\mpu6050.c   ****  * When set to 1, this bit enables GYRO_ZOUT_H and GYRO_ZOUT_L (Registers 71 and
 638:.\mpu6050.c   ****  * 72) to be written into the FIFO buffer.
 639:.\mpu6050.c   ****  * @return Current gyroscope Z-axis FIFO enabled value
 640:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 641:.\mpu6050.c   ****  */
 642:.\mpu6050.c   **** bool MPU6050_getZGyroFIFOEnabled() {
 1769              		.loc 1 642 0
 1770              		.cfi_startproc
 1771 0000 80B5     		push	{r7, lr}
 1772              		.cfi_def_cfa_offset 8
 1773              		.cfi_offset 7, -8
 1774              		.cfi_offset 14, -4
 1775 0002 00AF     		add	r7, sp, #0
 1776              		.cfi_def_cfa_register 7
 643:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, buffer);
 1777              		.loc 1 643 0
 1778 0004 074B     		ldr	r3, .L145
 1779 0006 1A78     		ldrb	r2, [r3]
 1780 0008 074B     		ldr	r3, .L145+4
 1781 000a 101C     		mov	r0, r2
 1782 000c 2321     		mov	r1, #35
 1783 000e 0422     		mov	r2, #4
 1784 0010 FFF7FEFF 		bl	I2CReadBit
 644:.\mpu6050.c   ****     return buffer[0];
 1785              		.loc 1 644 0
 1786 0014 044B     		ldr	r3, .L145+4
 1787 0016 1B78     		ldrb	r3, [r3]
 1788 0018 5A1E     		sub	r2, r3, #1
 1789 001a 9341     		sbc	r3, r3, r2
 1790 001c DBB2     		uxtb	r3, r3
 645:.\mpu6050.c   **** }
 1791              		.loc 1 645 0
 1792 001e 181C     		mov	r0, r3
 1793 0020 BD46     		mov	sp, r7
 1794              		@ sp needed
 1795 0022 80BD     		pop	{r7, pc}
 1796              	.L146:
 1797              		.align	2
 1798              	.L145:
 1799 0024 00000000 		.word	devAddr
 1800 0028 00000000 		.word	buffer
 1801              		.cfi_endproc
 1802              	.LFE42:
 1803              		.size	MPU6050_getZGyroFIFOEnabled, .-MPU6050_getZGyroFIFOEnabled
 1804              		.section	.text.MPU6050_setZGyroFIFOEnabled,"ax",%progbits
 1805              		.align	2
 1806              		.global	MPU6050_setZGyroFIFOEnabled
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 44


 1807              		.code	16
 1808              		.thumb_func
 1809              		.type	MPU6050_setZGyroFIFOEnabled, %function
 1810              	MPU6050_setZGyroFIFOEnabled:
 1811              	.LFB43:
 646:.\mpu6050.c   **** /** Set gyroscope Z-axis FIFO enabled value.
 647:.\mpu6050.c   ****  * @param enabled New gyroscope Z-axis FIFO enabled value
 648:.\mpu6050.c   ****  * @see getZGyroFIFOEnabled()
 649:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 650:.\mpu6050.c   ****  */
 651:.\mpu6050.c   **** void MPU6050_setZGyroFIFOEnabled(bool enabled) {
 1812              		.loc 1 651 0
 1813              		.cfi_startproc
 1814 0000 80B5     		push	{r7, lr}
 1815              		.cfi_def_cfa_offset 8
 1816              		.cfi_offset 7, -8
 1817              		.cfi_offset 14, -4
 1818 0002 82B0     		sub	sp, sp, #8
 1819              		.cfi_def_cfa_offset 16
 1820 0004 00AF     		add	r7, sp, #0
 1821              		.cfi_def_cfa_register 7
 1822 0006 021C     		mov	r2, r0
 1823 0008 FB1D     		add	r3, r7, #7
 1824 000a 1A70     		strb	r2, [r3]
 652:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, enabled);
 1825              		.loc 1 652 0
 1826 000c 054B     		ldr	r3, .L148
 1827 000e 1A78     		ldrb	r2, [r3]
 1828 0010 FB1D     		add	r3, r7, #7
 1829 0012 1B78     		ldrb	r3, [r3]
 1830 0014 101C     		mov	r0, r2
 1831 0016 2321     		mov	r1, #35
 1832 0018 0422     		mov	r2, #4
 1833 001a FFF7FEFF 		bl	I2CWriteBit
 653:.\mpu6050.c   **** }
 1834              		.loc 1 653 0
 1835 001e BD46     		mov	sp, r7
 1836 0020 02B0     		add	sp, sp, #8
 1837              		@ sp needed
 1838 0022 80BD     		pop	{r7, pc}
 1839              	.L149:
 1840              		.align	2
 1841              	.L148:
 1842 0024 00000000 		.word	devAddr
 1843              		.cfi_endproc
 1844              	.LFE43:
 1845              		.size	MPU6050_setZGyroFIFOEnabled, .-MPU6050_setZGyroFIFOEnabled
 1846              		.section	.text.MPU6050_getAccelFIFOEnabled,"ax",%progbits
 1847              		.align	2
 1848              		.global	MPU6050_getAccelFIFOEnabled
 1849              		.code	16
 1850              		.thumb_func
 1851              		.type	MPU6050_getAccelFIFOEnabled, %function
 1852              	MPU6050_getAccelFIFOEnabled:
 1853              	.LFB44:
 654:.\mpu6050.c   **** /** Get accelerometer FIFO enabled value.
 655:.\mpu6050.c   ****  * When set to 1, this bit enables ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H,
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 45


 656:.\mpu6050.c   ****  * ACCEL_YOUT_L, ACCEL_ZOUT_H, and ACCEL_ZOUT_L (Registers 59 to 64) to be
 657:.\mpu6050.c   ****  * written into the FIFO buffer.
 658:.\mpu6050.c   ****  * @return Current accelerometer FIFO enabled value
 659:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 660:.\mpu6050.c   ****  */
 661:.\mpu6050.c   **** bool MPU6050_getAccelFIFOEnabled() {
 1854              		.loc 1 661 0
 1855              		.cfi_startproc
 1856 0000 80B5     		push	{r7, lr}
 1857              		.cfi_def_cfa_offset 8
 1858              		.cfi_offset 7, -8
 1859              		.cfi_offset 14, -4
 1860 0002 00AF     		add	r7, sp, #0
 1861              		.cfi_def_cfa_register 7
 662:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, buffer);
 1862              		.loc 1 662 0
 1863 0004 074B     		ldr	r3, .L152
 1864 0006 1A78     		ldrb	r2, [r3]
 1865 0008 074B     		ldr	r3, .L152+4
 1866 000a 101C     		mov	r0, r2
 1867 000c 2321     		mov	r1, #35
 1868 000e 0322     		mov	r2, #3
 1869 0010 FFF7FEFF 		bl	I2CReadBit
 663:.\mpu6050.c   ****     return buffer[0];
 1870              		.loc 1 663 0
 1871 0014 044B     		ldr	r3, .L152+4
 1872 0016 1B78     		ldrb	r3, [r3]
 1873 0018 5A1E     		sub	r2, r3, #1
 1874 001a 9341     		sbc	r3, r3, r2
 1875 001c DBB2     		uxtb	r3, r3
 664:.\mpu6050.c   **** }
 1876              		.loc 1 664 0
 1877 001e 181C     		mov	r0, r3
 1878 0020 BD46     		mov	sp, r7
 1879              		@ sp needed
 1880 0022 80BD     		pop	{r7, pc}
 1881              	.L153:
 1882              		.align	2
 1883              	.L152:
 1884 0024 00000000 		.word	devAddr
 1885 0028 00000000 		.word	buffer
 1886              		.cfi_endproc
 1887              	.LFE44:
 1888              		.size	MPU6050_getAccelFIFOEnabled, .-MPU6050_getAccelFIFOEnabled
 1889              		.section	.text.MPU6050_setAccelFIFOEnabled,"ax",%progbits
 1890              		.align	2
 1891              		.global	MPU6050_setAccelFIFOEnabled
 1892              		.code	16
 1893              		.thumb_func
 1894              		.type	MPU6050_setAccelFIFOEnabled, %function
 1895              	MPU6050_setAccelFIFOEnabled:
 1896              	.LFB45:
 665:.\mpu6050.c   **** /** Set accelerometer FIFO enabled value.
 666:.\mpu6050.c   ****  * @param enabled New accelerometer FIFO enabled value
 667:.\mpu6050.c   ****  * @see getAccelFIFOEnabled()
 668:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 669:.\mpu6050.c   ****  */
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 46


 670:.\mpu6050.c   **** void MPU6050_setAccelFIFOEnabled(bool enabled) {
 1897              		.loc 1 670 0
 1898              		.cfi_startproc
 1899 0000 80B5     		push	{r7, lr}
 1900              		.cfi_def_cfa_offset 8
 1901              		.cfi_offset 7, -8
 1902              		.cfi_offset 14, -4
 1903 0002 82B0     		sub	sp, sp, #8
 1904              		.cfi_def_cfa_offset 16
 1905 0004 00AF     		add	r7, sp, #0
 1906              		.cfi_def_cfa_register 7
 1907 0006 021C     		mov	r2, r0
 1908 0008 FB1D     		add	r3, r7, #7
 1909 000a 1A70     		strb	r2, [r3]
 671:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, enabled);
 1910              		.loc 1 671 0
 1911 000c 054B     		ldr	r3, .L155
 1912 000e 1A78     		ldrb	r2, [r3]
 1913 0010 FB1D     		add	r3, r7, #7
 1914 0012 1B78     		ldrb	r3, [r3]
 1915 0014 101C     		mov	r0, r2
 1916 0016 2321     		mov	r1, #35
 1917 0018 0322     		mov	r2, #3
 1918 001a FFF7FEFF 		bl	I2CWriteBit
 672:.\mpu6050.c   **** }
 1919              		.loc 1 672 0
 1920 001e BD46     		mov	sp, r7
 1921 0020 02B0     		add	sp, sp, #8
 1922              		@ sp needed
 1923 0022 80BD     		pop	{r7, pc}
 1924              	.L156:
 1925              		.align	2
 1926              	.L155:
 1927 0024 00000000 		.word	devAddr
 1928              		.cfi_endproc
 1929              	.LFE45:
 1930              		.size	MPU6050_setAccelFIFOEnabled, .-MPU6050_setAccelFIFOEnabled
 1931              		.section	.text.MPU6050_getSlave2FIFOEnabled,"ax",%progbits
 1932              		.align	2
 1933              		.global	MPU6050_getSlave2FIFOEnabled
 1934              		.code	16
 1935              		.thumb_func
 1936              		.type	MPU6050_getSlave2FIFOEnabled, %function
 1937              	MPU6050_getSlave2FIFOEnabled:
 1938              	.LFB46:
 673:.\mpu6050.c   **** /** Get Slave 2 FIFO enabled value.
 674:.\mpu6050.c   ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 675:.\mpu6050.c   ****  * associated with Slave 2 to be written into the FIFO buffer.
 676:.\mpu6050.c   ****  * @return Current Slave 2 FIFO enabled value
 677:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 678:.\mpu6050.c   ****  */
 679:.\mpu6050.c   **** bool MPU6050_getSlave2FIFOEnabled() {
 1939              		.loc 1 679 0
 1940              		.cfi_startproc
 1941 0000 80B5     		push	{r7, lr}
 1942              		.cfi_def_cfa_offset 8
 1943              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 47


 1944              		.cfi_offset 14, -4
 1945 0002 00AF     		add	r7, sp, #0
 1946              		.cfi_def_cfa_register 7
 680:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV2_FIFO_EN_BIT, buffer);
 1947              		.loc 1 680 0
 1948 0004 074B     		ldr	r3, .L159
 1949 0006 1A78     		ldrb	r2, [r3]
 1950 0008 074B     		ldr	r3, .L159+4
 1951 000a 101C     		mov	r0, r2
 1952 000c 2321     		mov	r1, #35
 1953 000e 0222     		mov	r2, #2
 1954 0010 FFF7FEFF 		bl	I2CReadBit
 681:.\mpu6050.c   ****     return buffer[0];
 1955              		.loc 1 681 0
 1956 0014 044B     		ldr	r3, .L159+4
 1957 0016 1B78     		ldrb	r3, [r3]
 1958 0018 5A1E     		sub	r2, r3, #1
 1959 001a 9341     		sbc	r3, r3, r2
 1960 001c DBB2     		uxtb	r3, r3
 682:.\mpu6050.c   **** }
 1961              		.loc 1 682 0
 1962 001e 181C     		mov	r0, r3
 1963 0020 BD46     		mov	sp, r7
 1964              		@ sp needed
 1965 0022 80BD     		pop	{r7, pc}
 1966              	.L160:
 1967              		.align	2
 1968              	.L159:
 1969 0024 00000000 		.word	devAddr
 1970 0028 00000000 		.word	buffer
 1971              		.cfi_endproc
 1972              	.LFE46:
 1973              		.size	MPU6050_getSlave2FIFOEnabled, .-MPU6050_getSlave2FIFOEnabled
 1974              		.section	.text.MPU6050_setSlave2FIFOEnabled,"ax",%progbits
 1975              		.align	2
 1976              		.global	MPU6050_setSlave2FIFOEnabled
 1977              		.code	16
 1978              		.thumb_func
 1979              		.type	MPU6050_setSlave2FIFOEnabled, %function
 1980              	MPU6050_setSlave2FIFOEnabled:
 1981              	.LFB47:
 683:.\mpu6050.c   **** /** Set Slave 2 FIFO enabled value.
 684:.\mpu6050.c   ****  * @param enabled New Slave 2 FIFO enabled value
 685:.\mpu6050.c   ****  * @see getSlave2FIFOEnabled()
 686:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 687:.\mpu6050.c   ****  */
 688:.\mpu6050.c   **** void MPU6050_setSlave2FIFOEnabled(bool enabled) {
 1982              		.loc 1 688 0
 1983              		.cfi_startproc
 1984 0000 80B5     		push	{r7, lr}
 1985              		.cfi_def_cfa_offset 8
 1986              		.cfi_offset 7, -8
 1987              		.cfi_offset 14, -4
 1988 0002 82B0     		sub	sp, sp, #8
 1989              		.cfi_def_cfa_offset 16
 1990 0004 00AF     		add	r7, sp, #0
 1991              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 48


 1992 0006 021C     		mov	r2, r0
 1993 0008 FB1D     		add	r3, r7, #7
 1994 000a 1A70     		strb	r2, [r3]
 689:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV2_FIFO_EN_BIT, enabled);
 1995              		.loc 1 689 0
 1996 000c 054B     		ldr	r3, .L162
 1997 000e 1A78     		ldrb	r2, [r3]
 1998 0010 FB1D     		add	r3, r7, #7
 1999 0012 1B78     		ldrb	r3, [r3]
 2000 0014 101C     		mov	r0, r2
 2001 0016 2321     		mov	r1, #35
 2002 0018 0222     		mov	r2, #2
 2003 001a FFF7FEFF 		bl	I2CWriteBit
 690:.\mpu6050.c   **** }
 2004              		.loc 1 690 0
 2005 001e BD46     		mov	sp, r7
 2006 0020 02B0     		add	sp, sp, #8
 2007              		@ sp needed
 2008 0022 80BD     		pop	{r7, pc}
 2009              	.L163:
 2010              		.align	2
 2011              	.L162:
 2012 0024 00000000 		.word	devAddr
 2013              		.cfi_endproc
 2014              	.LFE47:
 2015              		.size	MPU6050_setSlave2FIFOEnabled, .-MPU6050_setSlave2FIFOEnabled
 2016              		.section	.text.MPU6050_getSlave1FIFOEnabled,"ax",%progbits
 2017              		.align	2
 2018              		.global	MPU6050_getSlave1FIFOEnabled
 2019              		.code	16
 2020              		.thumb_func
 2021              		.type	MPU6050_getSlave1FIFOEnabled, %function
 2022              	MPU6050_getSlave1FIFOEnabled:
 2023              	.LFB48:
 691:.\mpu6050.c   **** /** Get Slave 1 FIFO enabled value.
 692:.\mpu6050.c   ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 693:.\mpu6050.c   ****  * associated with Slave 1 to be written into the FIFO buffer.
 694:.\mpu6050.c   ****  * @return Current Slave 1 FIFO enabled value
 695:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 696:.\mpu6050.c   ****  */
 697:.\mpu6050.c   **** bool MPU6050_getSlave1FIFOEnabled() {
 2024              		.loc 1 697 0
 2025              		.cfi_startproc
 2026 0000 80B5     		push	{r7, lr}
 2027              		.cfi_def_cfa_offset 8
 2028              		.cfi_offset 7, -8
 2029              		.cfi_offset 14, -4
 2030 0002 00AF     		add	r7, sp, #0
 2031              		.cfi_def_cfa_register 7
 698:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV1_FIFO_EN_BIT, buffer);
 2032              		.loc 1 698 0
 2033 0004 074B     		ldr	r3, .L166
 2034 0006 1A78     		ldrb	r2, [r3]
 2035 0008 074B     		ldr	r3, .L166+4
 2036 000a 101C     		mov	r0, r2
 2037 000c 2321     		mov	r1, #35
 2038 000e 0122     		mov	r2, #1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 49


 2039 0010 FFF7FEFF 		bl	I2CReadBit
 699:.\mpu6050.c   ****     return buffer[0];
 2040              		.loc 1 699 0
 2041 0014 044B     		ldr	r3, .L166+4
 2042 0016 1B78     		ldrb	r3, [r3]
 2043 0018 5A1E     		sub	r2, r3, #1
 2044 001a 9341     		sbc	r3, r3, r2
 2045 001c DBB2     		uxtb	r3, r3
 700:.\mpu6050.c   **** }
 2046              		.loc 1 700 0
 2047 001e 181C     		mov	r0, r3
 2048 0020 BD46     		mov	sp, r7
 2049              		@ sp needed
 2050 0022 80BD     		pop	{r7, pc}
 2051              	.L167:
 2052              		.align	2
 2053              	.L166:
 2054 0024 00000000 		.word	devAddr
 2055 0028 00000000 		.word	buffer
 2056              		.cfi_endproc
 2057              	.LFE48:
 2058              		.size	MPU6050_getSlave1FIFOEnabled, .-MPU6050_getSlave1FIFOEnabled
 2059              		.section	.text.MPU6050_setSlave1FIFOEnabled,"ax",%progbits
 2060              		.align	2
 2061              		.global	MPU6050_setSlave1FIFOEnabled
 2062              		.code	16
 2063              		.thumb_func
 2064              		.type	MPU6050_setSlave1FIFOEnabled, %function
 2065              	MPU6050_setSlave1FIFOEnabled:
 2066              	.LFB49:
 701:.\mpu6050.c   **** /** Set Slave 1 FIFO enabled value.
 702:.\mpu6050.c   ****  * @param enabled New Slave 1 FIFO enabled value
 703:.\mpu6050.c   ****  * @see getSlave1FIFOEnabled()
 704:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 705:.\mpu6050.c   ****  */
 706:.\mpu6050.c   **** void MPU6050_setSlave1FIFOEnabled(bool enabled) {
 2067              		.loc 1 706 0
 2068              		.cfi_startproc
 2069 0000 80B5     		push	{r7, lr}
 2070              		.cfi_def_cfa_offset 8
 2071              		.cfi_offset 7, -8
 2072              		.cfi_offset 14, -4
 2073 0002 82B0     		sub	sp, sp, #8
 2074              		.cfi_def_cfa_offset 16
 2075 0004 00AF     		add	r7, sp, #0
 2076              		.cfi_def_cfa_register 7
 2077 0006 021C     		mov	r2, r0
 2078 0008 FB1D     		add	r3, r7, #7
 2079 000a 1A70     		strb	r2, [r3]
 707:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV1_FIFO_EN_BIT, enabled);
 2080              		.loc 1 707 0
 2081 000c 054B     		ldr	r3, .L169
 2082 000e 1A78     		ldrb	r2, [r3]
 2083 0010 FB1D     		add	r3, r7, #7
 2084 0012 1B78     		ldrb	r3, [r3]
 2085 0014 101C     		mov	r0, r2
 2086 0016 2321     		mov	r1, #35
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 50


 2087 0018 0122     		mov	r2, #1
 2088 001a FFF7FEFF 		bl	I2CWriteBit
 708:.\mpu6050.c   **** }
 2089              		.loc 1 708 0
 2090 001e BD46     		mov	sp, r7
 2091 0020 02B0     		add	sp, sp, #8
 2092              		@ sp needed
 2093 0022 80BD     		pop	{r7, pc}
 2094              	.L170:
 2095              		.align	2
 2096              	.L169:
 2097 0024 00000000 		.word	devAddr
 2098              		.cfi_endproc
 2099              	.LFE49:
 2100              		.size	MPU6050_setSlave1FIFOEnabled, .-MPU6050_setSlave1FIFOEnabled
 2101              		.section	.text.MPU6050_getSlave0FIFOEnabled,"ax",%progbits
 2102              		.align	2
 2103              		.global	MPU6050_getSlave0FIFOEnabled
 2104              		.code	16
 2105              		.thumb_func
 2106              		.type	MPU6050_getSlave0FIFOEnabled, %function
 2107              	MPU6050_getSlave0FIFOEnabled:
 2108              	.LFB50:
 709:.\mpu6050.c   **** /** Get Slave 0 FIFO enabled value.
 710:.\mpu6050.c   ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 711:.\mpu6050.c   ****  * associated with Slave 0 to be written into the FIFO buffer.
 712:.\mpu6050.c   ****  * @return Current Slave 0 FIFO enabled value
 713:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 714:.\mpu6050.c   ****  */
 715:.\mpu6050.c   **** bool MPU6050_getSlave0FIFOEnabled() {
 2109              		.loc 1 715 0
 2110              		.cfi_startproc
 2111 0000 80B5     		push	{r7, lr}
 2112              		.cfi_def_cfa_offset 8
 2113              		.cfi_offset 7, -8
 2114              		.cfi_offset 14, -4
 2115 0002 00AF     		add	r7, sp, #0
 2116              		.cfi_def_cfa_register 7
 716:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV0_FIFO_EN_BIT, buffer);
 2117              		.loc 1 716 0
 2118 0004 074B     		ldr	r3, .L173
 2119 0006 1A78     		ldrb	r2, [r3]
 2120 0008 074B     		ldr	r3, .L173+4
 2121 000a 101C     		mov	r0, r2
 2122 000c 2321     		mov	r1, #35
 2123 000e 0022     		mov	r2, #0
 2124 0010 FFF7FEFF 		bl	I2CReadBit
 717:.\mpu6050.c   ****     return buffer[0];
 2125              		.loc 1 717 0
 2126 0014 044B     		ldr	r3, .L173+4
 2127 0016 1B78     		ldrb	r3, [r3]
 2128 0018 5A1E     		sub	r2, r3, #1
 2129 001a 9341     		sbc	r3, r3, r2
 2130 001c DBB2     		uxtb	r3, r3
 718:.\mpu6050.c   **** }
 2131              		.loc 1 718 0
 2132 001e 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 51


 2133 0020 BD46     		mov	sp, r7
 2134              		@ sp needed
 2135 0022 80BD     		pop	{r7, pc}
 2136              	.L174:
 2137              		.align	2
 2138              	.L173:
 2139 0024 00000000 		.word	devAddr
 2140 0028 00000000 		.word	buffer
 2141              		.cfi_endproc
 2142              	.LFE50:
 2143              		.size	MPU6050_getSlave0FIFOEnabled, .-MPU6050_getSlave0FIFOEnabled
 2144              		.section	.text.MPU6050_setSlave0FIFOEnabled,"ax",%progbits
 2145              		.align	2
 2146              		.global	MPU6050_setSlave0FIFOEnabled
 2147              		.code	16
 2148              		.thumb_func
 2149              		.type	MPU6050_setSlave0FIFOEnabled, %function
 2150              	MPU6050_setSlave0FIFOEnabled:
 2151              	.LFB51:
 719:.\mpu6050.c   **** /** Set Slave 0 FIFO enabled value.
 720:.\mpu6050.c   ****  * @param enabled New Slave 0 FIFO enabled value
 721:.\mpu6050.c   ****  * @see getSlave0FIFOEnabled()
 722:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 723:.\mpu6050.c   ****  */
 724:.\mpu6050.c   **** void MPU6050_setSlave0FIFOEnabled(bool enabled) {
 2152              		.loc 1 724 0
 2153              		.cfi_startproc
 2154 0000 80B5     		push	{r7, lr}
 2155              		.cfi_def_cfa_offset 8
 2156              		.cfi_offset 7, -8
 2157              		.cfi_offset 14, -4
 2158 0002 82B0     		sub	sp, sp, #8
 2159              		.cfi_def_cfa_offset 16
 2160 0004 00AF     		add	r7, sp, #0
 2161              		.cfi_def_cfa_register 7
 2162 0006 021C     		mov	r2, r0
 2163 0008 FB1D     		add	r3, r7, #7
 2164 000a 1A70     		strb	r2, [r3]
 725:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV0_FIFO_EN_BIT, enabled);
 2165              		.loc 1 725 0
 2166 000c 054B     		ldr	r3, .L176
 2167 000e 1A78     		ldrb	r2, [r3]
 2168 0010 FB1D     		add	r3, r7, #7
 2169 0012 1B78     		ldrb	r3, [r3]
 2170 0014 101C     		mov	r0, r2
 2171 0016 2321     		mov	r1, #35
 2172 0018 0022     		mov	r2, #0
 2173 001a FFF7FEFF 		bl	I2CWriteBit
 726:.\mpu6050.c   **** }
 2174              		.loc 1 726 0
 2175 001e BD46     		mov	sp, r7
 2176 0020 02B0     		add	sp, sp, #8
 2177              		@ sp needed
 2178 0022 80BD     		pop	{r7, pc}
 2179              	.L177:
 2180              		.align	2
 2181              	.L176:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 52


 2182 0024 00000000 		.word	devAddr
 2183              		.cfi_endproc
 2184              	.LFE51:
 2185              		.size	MPU6050_setSlave0FIFOEnabled, .-MPU6050_setSlave0FIFOEnabled
 2186              		.section	.text.MPU6050_getMultiMasterEnabled,"ax",%progbits
 2187              		.align	2
 2188              		.global	MPU6050_getMultiMasterEnabled
 2189              		.code	16
 2190              		.thumb_func
 2191              		.type	MPU6050_getMultiMasterEnabled, %function
 2192              	MPU6050_getMultiMasterEnabled:
 2193              	.LFB52:
 727:.\mpu6050.c   **** 
 728:.\mpu6050.c   **** // I2C_MST_CTRL register
 729:.\mpu6050.c   **** 
 730:.\mpu6050.c   **** /** Get multi-master enabled value.
 731:.\mpu6050.c   ****  * Multi-master capability allows multiple I2C masters to operate on the same
 732:.\mpu6050.c   ****  * bus. In circuits where multi-master capability is required, set MULT_MST_EN
 733:.\mpu6050.c   ****  * to 1. This will increase current drawn by approximately 30uA.
 734:.\mpu6050.c   ****  *
 735:.\mpu6050.c   ****  * In circuits where multi-master capability is required, the state of the I2C
 736:.\mpu6050.c   ****  * bus must always be monitored by each separate I2C Master. Before an I2C
 737:.\mpu6050.c   ****  * Master can assume arbitration of the bus, it must first confirm that no other
 738:.\mpu6050.c   ****  * I2C Master has arbitration of the bus. When MULT_MST_EN is set to 1, the
 739:.\mpu6050.c   ****  * MPU-60X0's bus arbitration detection logic is turned on, enabling it to
 740:.\mpu6050.c   ****  * detect when the bus is available.
 741:.\mpu6050.c   ****  *
 742:.\mpu6050.c   ****  * @return Current multi-master enabled value
 743:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 744:.\mpu6050.c   ****  */
 745:.\mpu6050.c   **** bool MPU6050_getMultiMasterEnabled() {
 2194              		.loc 1 745 0
 2195              		.cfi_startproc
 2196 0000 80B5     		push	{r7, lr}
 2197              		.cfi_def_cfa_offset 8
 2198              		.cfi_offset 7, -8
 2199              		.cfi_offset 14, -4
 2200 0002 00AF     		add	r7, sp, #0
 2201              		.cfi_def_cfa_register 7
 746:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_MULT_MST_EN_BIT, buffer);
 2202              		.loc 1 746 0
 2203 0004 074B     		ldr	r3, .L180
 2204 0006 1A78     		ldrb	r2, [r3]
 2205 0008 074B     		ldr	r3, .L180+4
 2206 000a 101C     		mov	r0, r2
 2207 000c 2421     		mov	r1, #36
 2208 000e 0722     		mov	r2, #7
 2209 0010 FFF7FEFF 		bl	I2CReadBit
 747:.\mpu6050.c   ****     return buffer[0];
 2210              		.loc 1 747 0
 2211 0014 044B     		ldr	r3, .L180+4
 2212 0016 1B78     		ldrb	r3, [r3]
 2213 0018 5A1E     		sub	r2, r3, #1
 2214 001a 9341     		sbc	r3, r3, r2
 2215 001c DBB2     		uxtb	r3, r3
 748:.\mpu6050.c   **** }
 2216              		.loc 1 748 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 53


 2217 001e 181C     		mov	r0, r3
 2218 0020 BD46     		mov	sp, r7
 2219              		@ sp needed
 2220 0022 80BD     		pop	{r7, pc}
 2221              	.L181:
 2222              		.align	2
 2223              	.L180:
 2224 0024 00000000 		.word	devAddr
 2225 0028 00000000 		.word	buffer
 2226              		.cfi_endproc
 2227              	.LFE52:
 2228              		.size	MPU6050_getMultiMasterEnabled, .-MPU6050_getMultiMasterEnabled
 2229              		.section	.text.MPU6050_setMultiMasterEnabled,"ax",%progbits
 2230              		.align	2
 2231              		.global	MPU6050_setMultiMasterEnabled
 2232              		.code	16
 2233              		.thumb_func
 2234              		.type	MPU6050_setMultiMasterEnabled, %function
 2235              	MPU6050_setMultiMasterEnabled:
 2236              	.LFB53:
 749:.\mpu6050.c   **** /** Set multi-master enabled value.
 750:.\mpu6050.c   ****  * @param enabled New multi-master enabled value
 751:.\mpu6050.c   ****  * @see getMultiMasterEnabled()
 752:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 753:.\mpu6050.c   ****  */
 754:.\mpu6050.c   **** void MPU6050_setMultiMasterEnabled(bool enabled) {
 2237              		.loc 1 754 0
 2238              		.cfi_startproc
 2239 0000 80B5     		push	{r7, lr}
 2240              		.cfi_def_cfa_offset 8
 2241              		.cfi_offset 7, -8
 2242              		.cfi_offset 14, -4
 2243 0002 82B0     		sub	sp, sp, #8
 2244              		.cfi_def_cfa_offset 16
 2245 0004 00AF     		add	r7, sp, #0
 2246              		.cfi_def_cfa_register 7
 2247 0006 021C     		mov	r2, r0
 2248 0008 FB1D     		add	r3, r7, #7
 2249 000a 1A70     		strb	r2, [r3]
 755:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_MULT_MST_EN_BIT, enabled);
 2250              		.loc 1 755 0
 2251 000c 054B     		ldr	r3, .L183
 2252 000e 1A78     		ldrb	r2, [r3]
 2253 0010 FB1D     		add	r3, r7, #7
 2254 0012 1B78     		ldrb	r3, [r3]
 2255 0014 101C     		mov	r0, r2
 2256 0016 2421     		mov	r1, #36
 2257 0018 0722     		mov	r2, #7
 2258 001a FFF7FEFF 		bl	I2CWriteBit
 756:.\mpu6050.c   **** }
 2259              		.loc 1 756 0
 2260 001e BD46     		mov	sp, r7
 2261 0020 02B0     		add	sp, sp, #8
 2262              		@ sp needed
 2263 0022 80BD     		pop	{r7, pc}
 2264              	.L184:
 2265              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 54


 2266              	.L183:
 2267 0024 00000000 		.word	devAddr
 2268              		.cfi_endproc
 2269              	.LFE53:
 2270              		.size	MPU6050_setMultiMasterEnabled, .-MPU6050_setMultiMasterEnabled
 2271              		.section	.text.MPU6050_getWaitForExternalSensorEnabled,"ax",%progbits
 2272              		.align	2
 2273              		.global	MPU6050_getWaitForExternalSensorEnabled
 2274              		.code	16
 2275              		.thumb_func
 2276              		.type	MPU6050_getWaitForExternalSensorEnabled, %function
 2277              	MPU6050_getWaitForExternalSensorEnabled:
 2278              	.LFB54:
 757:.\mpu6050.c   **** /** Get wait-for-external-sensor-data enabled value.
 758:.\mpu6050.c   ****  * When the WAIT_FOR_ES bit is set to 1, the Data Ready interrupt will be
 759:.\mpu6050.c   ****  * delayed until External Sensor data from the Slave Devices are loaded into the
 760:.\mpu6050.c   ****  * EXT_SENS_DATA registers. This is used to ensure that both the internal sensor
 761:.\mpu6050.c   ****  * data (i.e. from gyro and accel) and external sensor data have been loaded to
 762:.\mpu6050.c   ****  * their respective data registers (i.e. the data is synced) when the Data Ready
 763:.\mpu6050.c   ****  * interrupt is triggered.
 764:.\mpu6050.c   ****  *
 765:.\mpu6050.c   ****  * @return Current wait-for-external-sensor-data enabled value
 766:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 767:.\mpu6050.c   ****  */
 768:.\mpu6050.c   **** bool MPU6050_getWaitForExternalSensorEnabled() {
 2279              		.loc 1 768 0
 2280              		.cfi_startproc
 2281 0000 80B5     		push	{r7, lr}
 2282              		.cfi_def_cfa_offset 8
 2283              		.cfi_offset 7, -8
 2284              		.cfi_offset 14, -4
 2285 0002 00AF     		add	r7, sp, #0
 2286              		.cfi_def_cfa_register 7
 769:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_WAIT_FOR_ES_BIT, buffer);
 2287              		.loc 1 769 0
 2288 0004 074B     		ldr	r3, .L187
 2289 0006 1A78     		ldrb	r2, [r3]
 2290 0008 074B     		ldr	r3, .L187+4
 2291 000a 101C     		mov	r0, r2
 2292 000c 2421     		mov	r1, #36
 2293 000e 0622     		mov	r2, #6
 2294 0010 FFF7FEFF 		bl	I2CReadBit
 770:.\mpu6050.c   ****     return buffer[0];
 2295              		.loc 1 770 0
 2296 0014 044B     		ldr	r3, .L187+4
 2297 0016 1B78     		ldrb	r3, [r3]
 2298 0018 5A1E     		sub	r2, r3, #1
 2299 001a 9341     		sbc	r3, r3, r2
 2300 001c DBB2     		uxtb	r3, r3
 771:.\mpu6050.c   **** }
 2301              		.loc 1 771 0
 2302 001e 181C     		mov	r0, r3
 2303 0020 BD46     		mov	sp, r7
 2304              		@ sp needed
 2305 0022 80BD     		pop	{r7, pc}
 2306              	.L188:
 2307              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 55


 2308              	.L187:
 2309 0024 00000000 		.word	devAddr
 2310 0028 00000000 		.word	buffer
 2311              		.cfi_endproc
 2312              	.LFE54:
 2313              		.size	MPU6050_getWaitForExternalSensorEnabled, .-MPU6050_getWaitForExternalSensorEnabled
 2314              		.section	.text.MPU6050_setWaitForExternalSensorEnabled,"ax",%progbits
 2315              		.align	2
 2316              		.global	MPU6050_setWaitForExternalSensorEnabled
 2317              		.code	16
 2318              		.thumb_func
 2319              		.type	MPU6050_setWaitForExternalSensorEnabled, %function
 2320              	MPU6050_setWaitForExternalSensorEnabled:
 2321              	.LFB55:
 772:.\mpu6050.c   **** /** Set wait-for-external-sensor-data enabled value.
 773:.\mpu6050.c   ****  * @param enabled New wait-for-external-sensor-data enabled value
 774:.\mpu6050.c   ****  * @see getWaitForExternalSensorEnabled()
 775:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 776:.\mpu6050.c   ****  */
 777:.\mpu6050.c   **** void MPU6050_setWaitForExternalSensorEnabled(bool enabled) {
 2322              		.loc 1 777 0
 2323              		.cfi_startproc
 2324 0000 80B5     		push	{r7, lr}
 2325              		.cfi_def_cfa_offset 8
 2326              		.cfi_offset 7, -8
 2327              		.cfi_offset 14, -4
 2328 0002 82B0     		sub	sp, sp, #8
 2329              		.cfi_def_cfa_offset 16
 2330 0004 00AF     		add	r7, sp, #0
 2331              		.cfi_def_cfa_register 7
 2332 0006 021C     		mov	r2, r0
 2333 0008 FB1D     		add	r3, r7, #7
 2334 000a 1A70     		strb	r2, [r3]
 778:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_WAIT_FOR_ES_BIT, enabled);
 2335              		.loc 1 778 0
 2336 000c 054B     		ldr	r3, .L190
 2337 000e 1A78     		ldrb	r2, [r3]
 2338 0010 FB1D     		add	r3, r7, #7
 2339 0012 1B78     		ldrb	r3, [r3]
 2340 0014 101C     		mov	r0, r2
 2341 0016 2421     		mov	r1, #36
 2342 0018 0622     		mov	r2, #6
 2343 001a FFF7FEFF 		bl	I2CWriteBit
 779:.\mpu6050.c   **** }
 2344              		.loc 1 779 0
 2345 001e BD46     		mov	sp, r7
 2346 0020 02B0     		add	sp, sp, #8
 2347              		@ sp needed
 2348 0022 80BD     		pop	{r7, pc}
 2349              	.L191:
 2350              		.align	2
 2351              	.L190:
 2352 0024 00000000 		.word	devAddr
 2353              		.cfi_endproc
 2354              	.LFE55:
 2355              		.size	MPU6050_setWaitForExternalSensorEnabled, .-MPU6050_setWaitForExternalSensorEnabled
 2356              		.section	.text.MPU6050_getSlave3FIFOEnabled,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 56


 2357              		.align	2
 2358              		.global	MPU6050_getSlave3FIFOEnabled
 2359              		.code	16
 2360              		.thumb_func
 2361              		.type	MPU6050_getSlave3FIFOEnabled, %function
 2362              	MPU6050_getSlave3FIFOEnabled:
 2363              	.LFB56:
 780:.\mpu6050.c   **** /** Get Slave 3 FIFO enabled value.
 781:.\mpu6050.c   ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 782:.\mpu6050.c   ****  * associated with Slave 3 to be written into the FIFO buffer.
 783:.\mpu6050.c   ****  * @return Current Slave 3 FIFO enabled value
 784:.\mpu6050.c   ****  * @see MPU6050_RA_MST_CTRL
 785:.\mpu6050.c   ****  */
 786:.\mpu6050.c   **** bool MPU6050_getSlave3FIFOEnabled() {
 2364              		.loc 1 786 0
 2365              		.cfi_startproc
 2366 0000 80B5     		push	{r7, lr}
 2367              		.cfi_def_cfa_offset 8
 2368              		.cfi_offset 7, -8
 2369              		.cfi_offset 14, -4
 2370 0002 00AF     		add	r7, sp, #0
 2371              		.cfi_def_cfa_register 7
 787:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_SLV_3_FIFO_EN_BIT, buffer);
 2372              		.loc 1 787 0
 2373 0004 074B     		ldr	r3, .L194
 2374 0006 1A78     		ldrb	r2, [r3]
 2375 0008 074B     		ldr	r3, .L194+4
 2376 000a 101C     		mov	r0, r2
 2377 000c 2421     		mov	r1, #36
 2378 000e 0522     		mov	r2, #5
 2379 0010 FFF7FEFF 		bl	I2CReadBit
 788:.\mpu6050.c   ****     return buffer[0];
 2380              		.loc 1 788 0
 2381 0014 044B     		ldr	r3, .L194+4
 2382 0016 1B78     		ldrb	r3, [r3]
 2383 0018 5A1E     		sub	r2, r3, #1
 2384 001a 9341     		sbc	r3, r3, r2
 2385 001c DBB2     		uxtb	r3, r3
 789:.\mpu6050.c   **** }
 2386              		.loc 1 789 0
 2387 001e 181C     		mov	r0, r3
 2388 0020 BD46     		mov	sp, r7
 2389              		@ sp needed
 2390 0022 80BD     		pop	{r7, pc}
 2391              	.L195:
 2392              		.align	2
 2393              	.L194:
 2394 0024 00000000 		.word	devAddr
 2395 0028 00000000 		.word	buffer
 2396              		.cfi_endproc
 2397              	.LFE56:
 2398              		.size	MPU6050_getSlave3FIFOEnabled, .-MPU6050_getSlave3FIFOEnabled
 2399              		.section	.text.MPU6050_setSlave3FIFOEnabled,"ax",%progbits
 2400              		.align	2
 2401              		.global	MPU6050_setSlave3FIFOEnabled
 2402              		.code	16
 2403              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 57


 2404              		.type	MPU6050_setSlave3FIFOEnabled, %function
 2405              	MPU6050_setSlave3FIFOEnabled:
 2406              	.LFB57:
 790:.\mpu6050.c   **** /** Set Slave 3 FIFO enabled value.
 791:.\mpu6050.c   ****  * @param enabled New Slave 3 FIFO enabled value
 792:.\mpu6050.c   ****  * @see getSlave3FIFOEnabled()
 793:.\mpu6050.c   ****  * @see MPU6050_RA_MST_CTRL
 794:.\mpu6050.c   ****  */
 795:.\mpu6050.c   **** void MPU6050_setSlave3FIFOEnabled(bool enabled) {
 2407              		.loc 1 795 0
 2408              		.cfi_startproc
 2409 0000 80B5     		push	{r7, lr}
 2410              		.cfi_def_cfa_offset 8
 2411              		.cfi_offset 7, -8
 2412              		.cfi_offset 14, -4
 2413 0002 82B0     		sub	sp, sp, #8
 2414              		.cfi_def_cfa_offset 16
 2415 0004 00AF     		add	r7, sp, #0
 2416              		.cfi_def_cfa_register 7
 2417 0006 021C     		mov	r2, r0
 2418 0008 FB1D     		add	r3, r7, #7
 2419 000a 1A70     		strb	r2, [r3]
 796:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_SLV_3_FIFO_EN_BIT, enabled);
 2420              		.loc 1 796 0
 2421 000c 054B     		ldr	r3, .L197
 2422 000e 1A78     		ldrb	r2, [r3]
 2423 0010 FB1D     		add	r3, r7, #7
 2424 0012 1B78     		ldrb	r3, [r3]
 2425 0014 101C     		mov	r0, r2
 2426 0016 2421     		mov	r1, #36
 2427 0018 0522     		mov	r2, #5
 2428 001a FFF7FEFF 		bl	I2CWriteBit
 797:.\mpu6050.c   **** }
 2429              		.loc 1 797 0
 2430 001e BD46     		mov	sp, r7
 2431 0020 02B0     		add	sp, sp, #8
 2432              		@ sp needed
 2433 0022 80BD     		pop	{r7, pc}
 2434              	.L198:
 2435              		.align	2
 2436              	.L197:
 2437 0024 00000000 		.word	devAddr
 2438              		.cfi_endproc
 2439              	.LFE57:
 2440              		.size	MPU6050_setSlave3FIFOEnabled, .-MPU6050_setSlave3FIFOEnabled
 2441              		.section	.text.MPU6050_getSlaveReadWriteTransitionEnabled,"ax",%progbits
 2442              		.align	2
 2443              		.global	MPU6050_getSlaveReadWriteTransitionEnabled
 2444              		.code	16
 2445              		.thumb_func
 2446              		.type	MPU6050_getSlaveReadWriteTransitionEnabled, %function
 2447              	MPU6050_getSlaveReadWriteTransitionEnabled:
 2448              	.LFB58:
 798:.\mpu6050.c   **** /** Get slave read/write transition enabled value.
 799:.\mpu6050.c   ****  * The I2C_MST_P_NSR bit configures the I2C Master's transition from one slave
 800:.\mpu6050.c   ****  * read to the next slave read. If the bit equals 0, there will be a restart
 801:.\mpu6050.c   ****  * between reads. If the bit equals 1, there will be a stop followed by a start
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 58


 802:.\mpu6050.c   ****  * of the following read. When a write transaction follows a read transaction,
 803:.\mpu6050.c   ****  * the stop followed by a start of the successive write will be always used.
 804:.\mpu6050.c   ****  *
 805:.\mpu6050.c   ****  * @return Current slave read/write transition enabled value
 806:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 807:.\mpu6050.c   ****  */
 808:.\mpu6050.c   **** bool MPU6050_getSlaveReadWriteTransitionEnabled() {
 2449              		.loc 1 808 0
 2450              		.cfi_startproc
 2451 0000 80B5     		push	{r7, lr}
 2452              		.cfi_def_cfa_offset 8
 2453              		.cfi_offset 7, -8
 2454              		.cfi_offset 14, -4
 2455 0002 00AF     		add	r7, sp, #0
 2456              		.cfi_def_cfa_register 7
 809:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_P_NSR_BIT, buffer);
 2457              		.loc 1 809 0
 2458 0004 074B     		ldr	r3, .L201
 2459 0006 1A78     		ldrb	r2, [r3]
 2460 0008 074B     		ldr	r3, .L201+4
 2461 000a 101C     		mov	r0, r2
 2462 000c 2421     		mov	r1, #36
 2463 000e 0422     		mov	r2, #4
 2464 0010 FFF7FEFF 		bl	I2CReadBit
 810:.\mpu6050.c   ****     return buffer[0];
 2465              		.loc 1 810 0
 2466 0014 044B     		ldr	r3, .L201+4
 2467 0016 1B78     		ldrb	r3, [r3]
 2468 0018 5A1E     		sub	r2, r3, #1
 2469 001a 9341     		sbc	r3, r3, r2
 2470 001c DBB2     		uxtb	r3, r3
 811:.\mpu6050.c   **** }
 2471              		.loc 1 811 0
 2472 001e 181C     		mov	r0, r3
 2473 0020 BD46     		mov	sp, r7
 2474              		@ sp needed
 2475 0022 80BD     		pop	{r7, pc}
 2476              	.L202:
 2477              		.align	2
 2478              	.L201:
 2479 0024 00000000 		.word	devAddr
 2480 0028 00000000 		.word	buffer
 2481              		.cfi_endproc
 2482              	.LFE58:
 2483              		.size	MPU6050_getSlaveReadWriteTransitionEnabled, .-MPU6050_getSlaveReadWriteTransitionEnabled
 2484              		.section	.text.MPU6050_setSlaveReadWriteTransitionEnabled,"ax",%progbits
 2485              		.align	2
 2486              		.global	MPU6050_setSlaveReadWriteTransitionEnabled
 2487              		.code	16
 2488              		.thumb_func
 2489              		.type	MPU6050_setSlaveReadWriteTransitionEnabled, %function
 2490              	MPU6050_setSlaveReadWriteTransitionEnabled:
 2491              	.LFB59:
 812:.\mpu6050.c   **** /** Set slave read/write transition enabled value.
 813:.\mpu6050.c   ****  * @param enabled New slave read/write transition enabled value
 814:.\mpu6050.c   ****  * @see getSlaveReadWriteTransitionEnabled()
 815:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 59


 816:.\mpu6050.c   ****  */
 817:.\mpu6050.c   **** void MPU6050_setSlaveReadWriteTransitionEnabled(bool enabled) {
 2492              		.loc 1 817 0
 2493              		.cfi_startproc
 2494 0000 80B5     		push	{r7, lr}
 2495              		.cfi_def_cfa_offset 8
 2496              		.cfi_offset 7, -8
 2497              		.cfi_offset 14, -4
 2498 0002 82B0     		sub	sp, sp, #8
 2499              		.cfi_def_cfa_offset 16
 2500 0004 00AF     		add	r7, sp, #0
 2501              		.cfi_def_cfa_register 7
 2502 0006 021C     		mov	r2, r0
 2503 0008 FB1D     		add	r3, r7, #7
 2504 000a 1A70     		strb	r2, [r3]
 818:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_P_NSR_BIT, enabled);
 2505              		.loc 1 818 0
 2506 000c 054B     		ldr	r3, .L204
 2507 000e 1A78     		ldrb	r2, [r3]
 2508 0010 FB1D     		add	r3, r7, #7
 2509 0012 1B78     		ldrb	r3, [r3]
 2510 0014 101C     		mov	r0, r2
 2511 0016 2421     		mov	r1, #36
 2512 0018 0422     		mov	r2, #4
 2513 001a FFF7FEFF 		bl	I2CWriteBit
 819:.\mpu6050.c   **** }
 2514              		.loc 1 819 0
 2515 001e BD46     		mov	sp, r7
 2516 0020 02B0     		add	sp, sp, #8
 2517              		@ sp needed
 2518 0022 80BD     		pop	{r7, pc}
 2519              	.L205:
 2520              		.align	2
 2521              	.L204:
 2522 0024 00000000 		.word	devAddr
 2523              		.cfi_endproc
 2524              	.LFE59:
 2525              		.size	MPU6050_setSlaveReadWriteTransitionEnabled, .-MPU6050_setSlaveReadWriteTransitionEnabled
 2526              		.section	.text.MPU6050_getMasterClockSpeed,"ax",%progbits
 2527              		.align	2
 2528              		.global	MPU6050_getMasterClockSpeed
 2529              		.code	16
 2530              		.thumb_func
 2531              		.type	MPU6050_getMasterClockSpeed, %function
 2532              	MPU6050_getMasterClockSpeed:
 2533              	.LFB60:
 820:.\mpu6050.c   **** /** Get I2C master clock speed.
 821:.\mpu6050.c   ****  * I2C_MST_CLK is a 4 bit unsigned value which configures a divider on the
 822:.\mpu6050.c   ****  * MPU-60X0 internal 8MHz clock. It sets the I2C master clock speed according to
 823:.\mpu6050.c   ****  * the following table:
 824:.\mpu6050.c   ****  *
 825:.\mpu6050.c   ****  * <pre>
 826:.\mpu6050.c   ****  * I2C_MST_CLK | I2C Master Clock Speed | 8MHz Clock Divider
 827:.\mpu6050.c   ****  * ------------+------------------------+-------------------
 828:.\mpu6050.c   ****  * 0           | 348kHz                 | 23
 829:.\mpu6050.c   ****  * 1           | 333kHz                 | 24
 830:.\mpu6050.c   ****  * 2           | 320kHz                 | 25
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 60


 831:.\mpu6050.c   ****  * 3           | 308kHz                 | 26
 832:.\mpu6050.c   ****  * 4           | 296kHz                 | 27
 833:.\mpu6050.c   ****  * 5           | 286kHz                 | 28
 834:.\mpu6050.c   ****  * 6           | 276kHz                 | 29
 835:.\mpu6050.c   ****  * 7           | 267kHz                 | 30
 836:.\mpu6050.c   ****  * 8           | 258kHz                 | 31
 837:.\mpu6050.c   ****  * 9           | 500kHz                 | 16
 838:.\mpu6050.c   ****  * 10          | 471kHz                 | 17
 839:.\mpu6050.c   ****  * 11          | 444kHz                 | 18
 840:.\mpu6050.c   ****  * 12          | 421kHz                 | 19
 841:.\mpu6050.c   ****  * 13          | 400kHz                 | 20
 842:.\mpu6050.c   ****  * 14          | 381kHz                 | 21
 843:.\mpu6050.c   ****  * 15          | 364kHz                 | 22
 844:.\mpu6050.c   ****  * </pre>
 845:.\mpu6050.c   ****  *
 846:.\mpu6050.c   ****  * @return Current I2C master clock speed
 847:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 848:.\mpu6050.c   ****  */
 849:.\mpu6050.c   **** uint8_t MPU6050_getMasterClockSpeed() {
 2534              		.loc 1 849 0
 2535              		.cfi_startproc
 2536 0000 80B5     		push	{r7, lr}
 2537              		.cfi_def_cfa_offset 8
 2538              		.cfi_offset 7, -8
 2539              		.cfi_offset 14, -4
 2540 0002 82B0     		sub	sp, sp, #8
 2541              		.cfi_def_cfa_offset 16
 2542 0004 02AF     		add	r7, sp, #8
 2543              		.cfi_def_cfa 7, 8
 850:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_CLK_BIT, I2C_MPU6050_I2C_MST_
 2544              		.loc 1 850 0
 2545 0006 074B     		ldr	r3, .L208
 2546 0008 1A78     		ldrb	r2, [r3]
 2547 000a 074B     		ldr	r3, .L208+4
 2548 000c 0093     		str	r3, [sp]
 2549 000e 101C     		mov	r0, r2
 2550 0010 2421     		mov	r1, #36
 2551 0012 0322     		mov	r2, #3
 2552 0014 0423     		mov	r3, #4
 2553 0016 FFF7FEFF 		bl	I2CReadBits
 851:.\mpu6050.c   ****     return buffer[0];
 2554              		.loc 1 851 0
 2555 001a 034B     		ldr	r3, .L208+4
 2556 001c 1B78     		ldrb	r3, [r3]
 852:.\mpu6050.c   **** }
 2557              		.loc 1 852 0
 2558 001e 181C     		mov	r0, r3
 2559 0020 BD46     		mov	sp, r7
 2560              		@ sp needed
 2561 0022 80BD     		pop	{r7, pc}
 2562              	.L209:
 2563              		.align	2
 2564              	.L208:
 2565 0024 00000000 		.word	devAddr
 2566 0028 00000000 		.word	buffer
 2567              		.cfi_endproc
 2568              	.LFE60:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 61


 2569              		.size	MPU6050_getMasterClockSpeed, .-MPU6050_getMasterClockSpeed
 2570              		.section	.text.MPU6050_setMasterClockSpeed,"ax",%progbits
 2571              		.align	2
 2572              		.global	MPU6050_setMasterClockSpeed
 2573              		.code	16
 2574              		.thumb_func
 2575              		.type	MPU6050_setMasterClockSpeed, %function
 2576              	MPU6050_setMasterClockSpeed:
 2577              	.LFB61:
 853:.\mpu6050.c   **** /** Set I2C master clock speed.
 854:.\mpu6050.c   ****  * @reparam speed Current I2C master clock speed
 855:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 856:.\mpu6050.c   ****  */
 857:.\mpu6050.c   **** void MPU6050_setMasterClockSpeed(uint8_t speed) {
 2578              		.loc 1 857 0
 2579              		.cfi_startproc
 2580 0000 80B5     		push	{r7, lr}
 2581              		.cfi_def_cfa_offset 8
 2582              		.cfi_offset 7, -8
 2583              		.cfi_offset 14, -4
 2584 0002 84B0     		sub	sp, sp, #16
 2585              		.cfi_def_cfa_offset 24
 2586 0004 02AF     		add	r7, sp, #8
 2587              		.cfi_def_cfa 7, 16
 2588 0006 021C     		mov	r2, r0
 2589 0008 FB1D     		add	r3, r7, #7
 2590 000a 1A70     		strb	r2, [r3]
 858:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_CLK_BIT, I2C_MPU6050_I2C_MST
 2591              		.loc 1 858 0
 2592 000c 064B     		ldr	r3, .L211
 2593 000e 1A78     		ldrb	r2, [r3]
 2594 0010 FB1D     		add	r3, r7, #7
 2595 0012 1B78     		ldrb	r3, [r3]
 2596 0014 0093     		str	r3, [sp]
 2597 0016 101C     		mov	r0, r2
 2598 0018 2421     		mov	r1, #36
 2599 001a 0322     		mov	r2, #3
 2600 001c 0423     		mov	r3, #4
 2601 001e FFF7FEFF 		bl	I2CWriteBits
 859:.\mpu6050.c   **** }
 2602              		.loc 1 859 0
 2603 0022 BD46     		mov	sp, r7
 2604 0024 02B0     		add	sp, sp, #8
 2605              		@ sp needed
 2606 0026 80BD     		pop	{r7, pc}
 2607              	.L212:
 2608              		.align	2
 2609              	.L211:
 2610 0028 00000000 		.word	devAddr
 2611              		.cfi_endproc
 2612              	.LFE61:
 2613              		.size	MPU6050_setMasterClockSpeed, .-MPU6050_setMasterClockSpeed
 2614              		.section	.text.MPU6050_getSlaveAddress,"ax",%progbits
 2615              		.align	2
 2616              		.global	MPU6050_getSlaveAddress
 2617              		.code	16
 2618              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 62


 2619              		.type	MPU6050_getSlaveAddress, %function
 2620              	MPU6050_getSlaveAddress:
 2621              	.LFB62:
 860:.\mpu6050.c   **** 
 861:.\mpu6050.c   **** // I2C_SLV* registers (Slave 0-3)
 862:.\mpu6050.c   **** 
 863:.\mpu6050.c   **** /** Get the I2C address of the specified slave (0-3).
 864:.\mpu6050.c   ****  * Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it's a read
 865:.\mpu6050.c   ****  * operation, and if it is cleared, then it's a write operation. The remaining
 866:.\mpu6050.c   ****  * bits (6-0) are the 7-bit device address of the slave device.
 867:.\mpu6050.c   ****  *
 868:.\mpu6050.c   ****  * In read mode, the result of the read is placed in the lowest available 
 869:.\mpu6050.c   ****  * EXT_SENS_DATA register. For further information regarding the allocation of
 870:.\mpu6050.c   ****  * read results, please refer to the EXT_SENS_DATA register description
 871:.\mpu6050.c   ****  * (Registers 73 - 96).
 872:.\mpu6050.c   ****  *
 873:.\mpu6050.c   ****  * The MPU-6050 supports a total of five slaves, but Slave 4 has unique
 874:.\mpu6050.c   ****  * characteristics, and so it has its own functions (getSlave4* and setSlave4*).
 875:.\mpu6050.c   ****  *
 876:.\mpu6050.c   ****  * I2C data transactions are performed at the Sample Rate, as defined in
 877:.\mpu6050.c   ****  * Register 25. The user is responsible for ensuring that I2C data transactions
 878:.\mpu6050.c   ****  * to and from each enabled Slave can be completed within a single period of the
 879:.\mpu6050.c   ****  * Sample Rate.
 880:.\mpu6050.c   ****  *
 881:.\mpu6050.c   ****  * The I2C slave access rate can be reduced relative to the Sample Rate. This
 882:.\mpu6050.c   ****  * reduced access rate is determined by I2C_MST_DLY (Register 52). Whether a
 883:.\mpu6050.c   ****  * slave's access rate is reduced relative to the Sample Rate is determined by
 884:.\mpu6050.c   ****  * I2C_MST_DELAY_CTRL (Register 103).
 885:.\mpu6050.c   ****  *
 886:.\mpu6050.c   ****  * The processing order for the slaves is fixed. The sequence followed for
 887:.\mpu6050.c   ****  * processing the slaves is Slave 0, Slave 1, Slave 2, Slave 3 and Slave 4. If a
 888:.\mpu6050.c   ****  * particular Slave is disabled it will be skipped.
 889:.\mpu6050.c   ****  *
 890:.\mpu6050.c   ****  * Each slave can either be accessed at the sample rate or at a reduced sample
 891:.\mpu6050.c   ****  * rate. In a case where some slaves are accessed at the Sample Rate and some
 892:.\mpu6050.c   ****  * slaves are accessed at the reduced rate, the sequence of accessing the slaves
 893:.\mpu6050.c   ****  * (Slave 0 to Slave 4) is still followed. However, the reduced rate slaves will
 894:.\mpu6050.c   ****  * be skipped if their access rate dictates that they should not be accessed
 895:.\mpu6050.c   ****  * during that particular cycle. For further information regarding the reduced
 896:.\mpu6050.c   ****  * access rate, please refer to Register 52. Whether a slave is accessed at the
 897:.\mpu6050.c   ****  * Sample Rate or at the reduced rate is determined by the Delay Enable bits in
 898:.\mpu6050.c   ****  * Register 103.
 899:.\mpu6050.c   ****  *
 900:.\mpu6050.c   ****  * @param num Slave number (0-3)
 901:.\mpu6050.c   ****  * @return Current address for specified slave
 902:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_ADDR
 903:.\mpu6050.c   ****  */
 904:.\mpu6050.c   **** uint8_t MPU6050_getSlaveAddress(uint8_t num) {
 2622              		.loc 1 904 0
 2623              		.cfi_startproc
 2624 0000 80B5     		push	{r7, lr}
 2625              		.cfi_def_cfa_offset 8
 2626              		.cfi_offset 7, -8
 2627              		.cfi_offset 14, -4
 2628 0002 82B0     		sub	sp, sp, #8
 2629              		.cfi_def_cfa_offset 16
 2630 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 63


 2631              		.cfi_def_cfa_register 7
 2632 0006 021C     		mov	r2, r0
 2633 0008 FB1D     		add	r3, r7, #7
 2634 000a 1A70     		strb	r2, [r3]
 905:.\mpu6050.c   ****     if (num > 3) return 0;
 2635              		.loc 1 905 0
 2636 000c FB1D     		add	r3, r7, #7
 2637 000e 1B78     		ldrb	r3, [r3]
 2638 0010 032B     		cmp	r3, #3
 2639 0012 01D9     		bls	.L214
 2640              		.loc 1 905 0 is_stmt 0 discriminator 1
 2641 0014 0023     		mov	r3, #0
 2642 0016 11E0     		b	.L215
 2643              	.L214:
 906:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, buffer);
 2644              		.loc 1 906 0 is_stmt 1
 2645 0018 0A4B     		ldr	r3, .L216
 2646 001a 1978     		ldrb	r1, [r3]
 2647 001c FB1D     		add	r3, r7, #7
 2648 001e 1B78     		ldrb	r3, [r3]
 2649 0020 1A1C     		add	r2, r3, #0
 2650 0022 9218     		add	r2, r2, r2
 2651 0024 D318     		add	r3, r2, r3
 2652 0026 DBB2     		uxtb	r3, r3
 2653 0028 2533     		add	r3, r3, #37
 2654 002a DAB2     		uxtb	r2, r3
 2655 002c 064B     		ldr	r3, .L216+4
 2656 002e 081C     		mov	r0, r1
 2657 0030 111C     		mov	r1, r2
 2658 0032 1A1C     		mov	r2, r3
 2659 0034 FFF7FEFF 		bl	I2CReadByte
 907:.\mpu6050.c   ****     return buffer[0];
 2660              		.loc 1 907 0
 2661 0038 034B     		ldr	r3, .L216+4
 2662 003a 1B78     		ldrb	r3, [r3]
 2663              	.L215:
 908:.\mpu6050.c   **** }
 2664              		.loc 1 908 0
 2665 003c 181C     		mov	r0, r3
 2666 003e BD46     		mov	sp, r7
 2667 0040 02B0     		add	sp, sp, #8
 2668              		@ sp needed
 2669 0042 80BD     		pop	{r7, pc}
 2670              	.L217:
 2671              		.align	2
 2672              	.L216:
 2673 0044 00000000 		.word	devAddr
 2674 0048 00000000 		.word	buffer
 2675              		.cfi_endproc
 2676              	.LFE62:
 2677              		.size	MPU6050_getSlaveAddress, .-MPU6050_getSlaveAddress
 2678              		.section	.text.MPU6050_setSlaveAddress,"ax",%progbits
 2679              		.align	2
 2680              		.global	MPU6050_setSlaveAddress
 2681              		.code	16
 2682              		.thumb_func
 2683              		.type	MPU6050_setSlaveAddress, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 64


 2684              	MPU6050_setSlaveAddress:
 2685              	.LFB63:
 909:.\mpu6050.c   **** /** Set the I2C address of the specified slave (0-3).
 910:.\mpu6050.c   ****  * @param num Slave number (0-3)
 911:.\mpu6050.c   ****  * @param address New address for specified slave
 912:.\mpu6050.c   ****  * @see getSlaveAddress()
 913:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_ADDR
 914:.\mpu6050.c   ****  */
 915:.\mpu6050.c   **** void MPU6050_setSlaveAddress(uint8_t num, uint8_t address) {
 2686              		.loc 1 915 0
 2687              		.cfi_startproc
 2688 0000 80B5     		push	{r7, lr}
 2689              		.cfi_def_cfa_offset 8
 2690              		.cfi_offset 7, -8
 2691              		.cfi_offset 14, -4
 2692 0002 82B0     		sub	sp, sp, #8
 2693              		.cfi_def_cfa_offset 16
 2694 0004 00AF     		add	r7, sp, #0
 2695              		.cfi_def_cfa_register 7
 2696 0006 021C     		mov	r2, r0
 2697 0008 FB1D     		add	r3, r7, #7
 2698 000a 1A70     		strb	r2, [r3]
 2699 000c BB1D     		add	r3, r7, #6
 2700 000e 0A1C     		add	r2, r1, #0
 2701 0010 1A70     		strb	r2, [r3]
 916:.\mpu6050.c   ****     if (num > 3) return;
 2702              		.loc 1 916 0
 2703 0012 FB1D     		add	r3, r7, #7
 2704 0014 1B78     		ldrb	r3, [r3]
 2705 0016 032B     		cmp	r3, #3
 2706 0018 00D9     		bls	.L219
 2707 001a 10E0     		b	.L218
 2708              	.L219:
 917:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 2709              		.loc 1 917 0
 2710 001c 094B     		ldr	r3, .L221
 2711 001e 1978     		ldrb	r1, [r3]
 2712 0020 FB1D     		add	r3, r7, #7
 2713 0022 1B78     		ldrb	r3, [r3]
 2714 0024 1A1C     		add	r2, r3, #0
 2715 0026 9218     		add	r2, r2, r2
 2716 0028 D318     		add	r3, r2, r3
 2717 002a DBB2     		uxtb	r3, r3
 2718 002c 2533     		add	r3, r3, #37
 2719 002e DAB2     		uxtb	r2, r3
 2720 0030 BB1D     		add	r3, r7, #6
 2721 0032 1B78     		ldrb	r3, [r3]
 2722 0034 081C     		mov	r0, r1
 2723 0036 111C     		mov	r1, r2
 2724 0038 1A1C     		mov	r2, r3
 2725 003a FFF7FEFF 		bl	I2CWriteByte
 2726              	.L218:
 918:.\mpu6050.c   **** }
 2727              		.loc 1 918 0
 2728 003e BD46     		mov	sp, r7
 2729 0040 02B0     		add	sp, sp, #8
 2730              		@ sp needed
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 65


 2731 0042 80BD     		pop	{r7, pc}
 2732              	.L222:
 2733              		.align	2
 2734              	.L221:
 2735 0044 00000000 		.word	devAddr
 2736              		.cfi_endproc
 2737              	.LFE63:
 2738              		.size	MPU6050_setSlaveAddress, .-MPU6050_setSlaveAddress
 2739              		.section	.text.MPU6050_getSlaveRegister,"ax",%progbits
 2740              		.align	2
 2741              		.global	MPU6050_getSlaveRegister
 2742              		.code	16
 2743              		.thumb_func
 2744              		.type	MPU6050_getSlaveRegister, %function
 2745              	MPU6050_getSlaveRegister:
 2746              	.LFB64:
 919:.\mpu6050.c   **** /** Get the active internal register for the specified slave (0-3).
 920:.\mpu6050.c   ****  * Read/write operations for this slave will be done to whatever internal
 921:.\mpu6050.c   ****  * register address is stored in this MPU register.
 922:.\mpu6050.c   ****  *
 923:.\mpu6050.c   ****  * The MPU-6050 supports a total of five slaves, but Slave 4 has unique
 924:.\mpu6050.c   ****  * characteristics, and so it has its own functions.
 925:.\mpu6050.c   ****  *
 926:.\mpu6050.c   ****  * @param num Slave number (0-3)
 927:.\mpu6050.c   ****  * @return Current active register for specified slave
 928:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_REG
 929:.\mpu6050.c   ****  */
 930:.\mpu6050.c   **** uint8_t MPU6050_getSlaveRegister(uint8_t num) {
 2747              		.loc 1 930 0
 2748              		.cfi_startproc
 2749 0000 80B5     		push	{r7, lr}
 2750              		.cfi_def_cfa_offset 8
 2751              		.cfi_offset 7, -8
 2752              		.cfi_offset 14, -4
 2753 0002 82B0     		sub	sp, sp, #8
 2754              		.cfi_def_cfa_offset 16
 2755 0004 00AF     		add	r7, sp, #0
 2756              		.cfi_def_cfa_register 7
 2757 0006 021C     		mov	r2, r0
 2758 0008 FB1D     		add	r3, r7, #7
 2759 000a 1A70     		strb	r2, [r3]
 931:.\mpu6050.c   ****     if (num > 3) return 0;
 2760              		.loc 1 931 0
 2761 000c FB1D     		add	r3, r7, #7
 2762 000e 1B78     		ldrb	r3, [r3]
 2763 0010 032B     		cmp	r3, #3
 2764 0012 01D9     		bls	.L224
 2765              		.loc 1 931 0 is_stmt 0 discriminator 1
 2766 0014 0023     		mov	r3, #0
 2767 0016 11E0     		b	.L225
 2768              	.L224:
 932:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV0_REG + num*3, buffer);
 2769              		.loc 1 932 0 is_stmt 1
 2770 0018 0A4B     		ldr	r3, .L226
 2771 001a 1978     		ldrb	r1, [r3]
 2772 001c FB1D     		add	r3, r7, #7
 2773 001e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 66


 2774 0020 1A1C     		add	r2, r3, #0
 2775 0022 9218     		add	r2, r2, r2
 2776 0024 D318     		add	r3, r2, r3
 2777 0026 DBB2     		uxtb	r3, r3
 2778 0028 2633     		add	r3, r3, #38
 2779 002a DAB2     		uxtb	r2, r3
 2780 002c 064B     		ldr	r3, .L226+4
 2781 002e 081C     		mov	r0, r1
 2782 0030 111C     		mov	r1, r2
 2783 0032 1A1C     		mov	r2, r3
 2784 0034 FFF7FEFF 		bl	I2CReadByte
 933:.\mpu6050.c   ****     return buffer[0];
 2785              		.loc 1 933 0
 2786 0038 034B     		ldr	r3, .L226+4
 2787 003a 1B78     		ldrb	r3, [r3]
 2788              	.L225:
 934:.\mpu6050.c   **** }
 2789              		.loc 1 934 0
 2790 003c 181C     		mov	r0, r3
 2791 003e BD46     		mov	sp, r7
 2792 0040 02B0     		add	sp, sp, #8
 2793              		@ sp needed
 2794 0042 80BD     		pop	{r7, pc}
 2795              	.L227:
 2796              		.align	2
 2797              	.L226:
 2798 0044 00000000 		.word	devAddr
 2799 0048 00000000 		.word	buffer
 2800              		.cfi_endproc
 2801              	.LFE64:
 2802              		.size	MPU6050_getSlaveRegister, .-MPU6050_getSlaveRegister
 2803              		.section	.text.MPU6050_setSlaveRegister,"ax",%progbits
 2804              		.align	2
 2805              		.global	MPU6050_setSlaveRegister
 2806              		.code	16
 2807              		.thumb_func
 2808              		.type	MPU6050_setSlaveRegister, %function
 2809              	MPU6050_setSlaveRegister:
 2810              	.LFB65:
 935:.\mpu6050.c   **** /** Set the active internal register for the specified slave (0-3).
 936:.\mpu6050.c   ****  * @param num Slave number (0-3)
 937:.\mpu6050.c   ****  * @param reg New active register for specified slave
 938:.\mpu6050.c   ****  * @see getSlaveRegister()
 939:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_REG
 940:.\mpu6050.c   ****  */
 941:.\mpu6050.c   **** void MPU6050_setSlaveRegister(uint8_t num, uint8_t reg) {
 2811              		.loc 1 941 0
 2812              		.cfi_startproc
 2813 0000 80B5     		push	{r7, lr}
 2814              		.cfi_def_cfa_offset 8
 2815              		.cfi_offset 7, -8
 2816              		.cfi_offset 14, -4
 2817 0002 82B0     		sub	sp, sp, #8
 2818              		.cfi_def_cfa_offset 16
 2819 0004 00AF     		add	r7, sp, #0
 2820              		.cfi_def_cfa_register 7
 2821 0006 021C     		mov	r2, r0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 67


 2822 0008 FB1D     		add	r3, r7, #7
 2823 000a 1A70     		strb	r2, [r3]
 2824 000c BB1D     		add	r3, r7, #6
 2825 000e 0A1C     		add	r2, r1, #0
 2826 0010 1A70     		strb	r2, [r3]
 942:.\mpu6050.c   ****     if (num > 3) return;
 2827              		.loc 1 942 0
 2828 0012 FB1D     		add	r3, r7, #7
 2829 0014 1B78     		ldrb	r3, [r3]
 2830 0016 032B     		cmp	r3, #3
 2831 0018 00D9     		bls	.L229
 2832 001a 10E0     		b	.L228
 2833              	.L229:
 943:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV0_REG + num*3, reg);
 2834              		.loc 1 943 0
 2835 001c 094B     		ldr	r3, .L231
 2836 001e 1978     		ldrb	r1, [r3]
 2837 0020 FB1D     		add	r3, r7, #7
 2838 0022 1B78     		ldrb	r3, [r3]
 2839 0024 1A1C     		add	r2, r3, #0
 2840 0026 9218     		add	r2, r2, r2
 2841 0028 D318     		add	r3, r2, r3
 2842 002a DBB2     		uxtb	r3, r3
 2843 002c 2633     		add	r3, r3, #38
 2844 002e DAB2     		uxtb	r2, r3
 2845 0030 BB1D     		add	r3, r7, #6
 2846 0032 1B78     		ldrb	r3, [r3]
 2847 0034 081C     		mov	r0, r1
 2848 0036 111C     		mov	r1, r2
 2849 0038 1A1C     		mov	r2, r3
 2850 003a FFF7FEFF 		bl	I2CWriteByte
 2851              	.L228:
 944:.\mpu6050.c   **** }
 2852              		.loc 1 944 0
 2853 003e BD46     		mov	sp, r7
 2854 0040 02B0     		add	sp, sp, #8
 2855              		@ sp needed
 2856 0042 80BD     		pop	{r7, pc}
 2857              	.L232:
 2858              		.align	2
 2859              	.L231:
 2860 0044 00000000 		.word	devAddr
 2861              		.cfi_endproc
 2862              	.LFE65:
 2863              		.size	MPU6050_setSlaveRegister, .-MPU6050_setSlaveRegister
 2864              		.section	.text.MPU6050_getSlaveEnabled,"ax",%progbits
 2865              		.align	2
 2866              		.global	MPU6050_getSlaveEnabled
 2867              		.code	16
 2868              		.thumb_func
 2869              		.type	MPU6050_getSlaveEnabled, %function
 2870              	MPU6050_getSlaveEnabled:
 2871              	.LFB66:
 945:.\mpu6050.c   **** /** Get the enabled value for the specified slave (0-3).
 946:.\mpu6050.c   ****  * When set to 1, this bit enables Slave 0 for data transfer operations. When
 947:.\mpu6050.c   ****  * cleared to 0, this bit disables Slave 0 from data transfer operations.
 948:.\mpu6050.c   ****  * @param num Slave number (0-3)
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 68


 949:.\mpu6050.c   ****  * @return Current enabled value for specified slave
 950:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 951:.\mpu6050.c   ****  */
 952:.\mpu6050.c   **** bool MPU6050_getSlaveEnabled(uint8_t num) {
 2872              		.loc 1 952 0
 2873              		.cfi_startproc
 2874 0000 80B5     		push	{r7, lr}
 2875              		.cfi_def_cfa_offset 8
 2876              		.cfi_offset 7, -8
 2877              		.cfi_offset 14, -4
 2878 0002 82B0     		sub	sp, sp, #8
 2879              		.cfi_def_cfa_offset 16
 2880 0004 00AF     		add	r7, sp, #0
 2881              		.cfi_def_cfa_register 7
 2882 0006 021C     		mov	r2, r0
 2883 0008 FB1D     		add	r3, r7, #7
 2884 000a 1A70     		strb	r2, [r3]
 953:.\mpu6050.c   ****     if (num > 3) return 0;
 2885              		.loc 1 953 0
 2886 000c FB1D     		add	r3, r7, #7
 2887 000e 1B78     		ldrb	r3, [r3]
 2888 0010 032B     		cmp	r3, #3
 2889 0012 01D9     		bls	.L234
 2890              		.loc 1 953 0 is_stmt 0 discriminator 1
 2891 0014 0023     		mov	r3, #0
 2892 0016 14E0     		b	.L235
 2893              	.L234:
 954:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_EN_BIT, buffer);
 2894              		.loc 1 954 0 is_stmt 1
 2895 0018 0C4B     		ldr	r3, .L236
 2896 001a 1978     		ldrb	r1, [r3]
 2897 001c FB1D     		add	r3, r7, #7
 2898 001e 1B78     		ldrb	r3, [r3]
 2899 0020 1A1C     		add	r2, r3, #0
 2900 0022 9218     		add	r2, r2, r2
 2901 0024 D318     		add	r3, r2, r3
 2902 0026 DBB2     		uxtb	r3, r3
 2903 0028 2733     		add	r3, r3, #39
 2904 002a DAB2     		uxtb	r2, r3
 2905 002c 084B     		ldr	r3, .L236+4
 2906 002e 081C     		mov	r0, r1
 2907 0030 111C     		mov	r1, r2
 2908 0032 0722     		mov	r2, #7
 2909 0034 FFF7FEFF 		bl	I2CReadBit
 955:.\mpu6050.c   ****     return buffer[0];
 2910              		.loc 1 955 0
 2911 0038 054B     		ldr	r3, .L236+4
 2912 003a 1B78     		ldrb	r3, [r3]
 2913 003c 5A1E     		sub	r2, r3, #1
 2914 003e 9341     		sbc	r3, r3, r2
 2915 0040 DBB2     		uxtb	r3, r3
 2916              	.L235:
 956:.\mpu6050.c   **** }
 2917              		.loc 1 956 0
 2918 0042 181C     		mov	r0, r3
 2919 0044 BD46     		mov	sp, r7
 2920 0046 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 69


 2921              		@ sp needed
 2922 0048 80BD     		pop	{r7, pc}
 2923              	.L237:
 2924 004a C046     		.align	2
 2925              	.L236:
 2926 004c 00000000 		.word	devAddr
 2927 0050 00000000 		.word	buffer
 2928              		.cfi_endproc
 2929              	.LFE66:
 2930              		.size	MPU6050_getSlaveEnabled, .-MPU6050_getSlaveEnabled
 2931              		.section	.text.MPU6050_setSlaveEnabled,"ax",%progbits
 2932              		.align	2
 2933              		.global	MPU6050_setSlaveEnabled
 2934              		.code	16
 2935              		.thumb_func
 2936              		.type	MPU6050_setSlaveEnabled, %function
 2937              	MPU6050_setSlaveEnabled:
 2938              	.LFB67:
 957:.\mpu6050.c   **** /** Set the enabled value for the specified slave (0-3).
 958:.\mpu6050.c   ****  * @param num Slave number (0-3)
 959:.\mpu6050.c   ****  * @param enabled New enabled value for specified slave
 960:.\mpu6050.c   ****  * @see getSlaveEnabled()
 961:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 962:.\mpu6050.c   ****  */
 963:.\mpu6050.c   **** void MPU6050_setSlaveEnabled(uint8_t num, bool enabled) {
 2939              		.loc 1 963 0
 2940              		.cfi_startproc
 2941 0000 80B5     		push	{r7, lr}
 2942              		.cfi_def_cfa_offset 8
 2943              		.cfi_offset 7, -8
 2944              		.cfi_offset 14, -4
 2945 0002 82B0     		sub	sp, sp, #8
 2946              		.cfi_def_cfa_offset 16
 2947 0004 00AF     		add	r7, sp, #0
 2948              		.cfi_def_cfa_register 7
 2949 0006 021C     		mov	r2, r0
 2950 0008 FB1D     		add	r3, r7, #7
 2951 000a 1A70     		strb	r2, [r3]
 2952 000c BB1D     		add	r3, r7, #6
 2953 000e 0A1C     		add	r2, r1, #0
 2954 0010 1A70     		strb	r2, [r3]
 964:.\mpu6050.c   ****     if (num > 3) return;
 2955              		.loc 1 964 0
 2956 0012 FB1D     		add	r3, r7, #7
 2957 0014 1B78     		ldrb	r3, [r3]
 2958 0016 032B     		cmp	r3, #3
 2959 0018 00D9     		bls	.L239
 2960 001a 10E0     		b	.L238
 2961              	.L239:
 965:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_EN_BIT, enabled);
 2962              		.loc 1 965 0
 2963 001c 094B     		ldr	r3, .L241
 2964 001e 1978     		ldrb	r1, [r3]
 2965 0020 FB1D     		add	r3, r7, #7
 2966 0022 1B78     		ldrb	r3, [r3]
 2967 0024 1A1C     		add	r2, r3, #0
 2968 0026 9218     		add	r2, r2, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 70


 2969 0028 D318     		add	r3, r2, r3
 2970 002a DBB2     		uxtb	r3, r3
 2971 002c 2733     		add	r3, r3, #39
 2972 002e DAB2     		uxtb	r2, r3
 2973 0030 BB1D     		add	r3, r7, #6
 2974 0032 1B78     		ldrb	r3, [r3]
 2975 0034 081C     		mov	r0, r1
 2976 0036 111C     		mov	r1, r2
 2977 0038 0722     		mov	r2, #7
 2978 003a FFF7FEFF 		bl	I2CWriteBit
 2979              	.L238:
 966:.\mpu6050.c   **** }
 2980              		.loc 1 966 0
 2981 003e BD46     		mov	sp, r7
 2982 0040 02B0     		add	sp, sp, #8
 2983              		@ sp needed
 2984 0042 80BD     		pop	{r7, pc}
 2985              	.L242:
 2986              		.align	2
 2987              	.L241:
 2988 0044 00000000 		.word	devAddr
 2989              		.cfi_endproc
 2990              	.LFE67:
 2991              		.size	MPU6050_setSlaveEnabled, .-MPU6050_setSlaveEnabled
 2992              		.section	.text.MPU6050_getSlaveWordByteSwap,"ax",%progbits
 2993              		.align	2
 2994              		.global	MPU6050_getSlaveWordByteSwap
 2995              		.code	16
 2996              		.thumb_func
 2997              		.type	MPU6050_getSlaveWordByteSwap, %function
 2998              	MPU6050_getSlaveWordByteSwap:
 2999              	.LFB68:
 967:.\mpu6050.c   **** /** Get word pair byte-swapping enabled for the specified slave (0-3).
 968:.\mpu6050.c   ****  * When set to 1, this bit enables byte swapping. When byte swapping is enabled,
 969:.\mpu6050.c   ****  * the high and low bytes of a word pair are swapped. Please refer to
 970:.\mpu6050.c   ****  * I2C_SLV0_GRP for the pairing convention of the word pairs. When cleared to 0,
 971:.\mpu6050.c   ****  * bytes transferred to and from Slave 0 will be written to EXT_SENS_DATA
 972:.\mpu6050.c   ****  * registers in the order they were transferred.
 973:.\mpu6050.c   ****  *
 974:.\mpu6050.c   ****  * @param num Slave number (0-3)
 975:.\mpu6050.c   ****  * @return Current word pair byte-swapping enabled value for specified slave
 976:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 977:.\mpu6050.c   ****  */
 978:.\mpu6050.c   **** bool MPU6050_getSlaveWordByteSwap(uint8_t num) {
 3000              		.loc 1 978 0
 3001              		.cfi_startproc
 3002 0000 80B5     		push	{r7, lr}
 3003              		.cfi_def_cfa_offset 8
 3004              		.cfi_offset 7, -8
 3005              		.cfi_offset 14, -4
 3006 0002 82B0     		sub	sp, sp, #8
 3007              		.cfi_def_cfa_offset 16
 3008 0004 00AF     		add	r7, sp, #0
 3009              		.cfi_def_cfa_register 7
 3010 0006 021C     		mov	r2, r0
 3011 0008 FB1D     		add	r3, r7, #7
 3012 000a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 71


 979:.\mpu6050.c   ****     if (num > 3) return 0;
 3013              		.loc 1 979 0
 3014 000c FB1D     		add	r3, r7, #7
 3015 000e 1B78     		ldrb	r3, [r3]
 3016 0010 032B     		cmp	r3, #3
 3017 0012 01D9     		bls	.L244
 3018              		.loc 1 979 0 is_stmt 0 discriminator 1
 3019 0014 0023     		mov	r3, #0
 3020 0016 14E0     		b	.L245
 3021              	.L244:
 980:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_BYTE_SW_BIT, buffer);
 3022              		.loc 1 980 0 is_stmt 1
 3023 0018 0C4B     		ldr	r3, .L246
 3024 001a 1978     		ldrb	r1, [r3]
 3025 001c FB1D     		add	r3, r7, #7
 3026 001e 1B78     		ldrb	r3, [r3]
 3027 0020 1A1C     		add	r2, r3, #0
 3028 0022 9218     		add	r2, r2, r2
 3029 0024 D318     		add	r3, r2, r3
 3030 0026 DBB2     		uxtb	r3, r3
 3031 0028 2733     		add	r3, r3, #39
 3032 002a DAB2     		uxtb	r2, r3
 3033 002c 084B     		ldr	r3, .L246+4
 3034 002e 081C     		mov	r0, r1
 3035 0030 111C     		mov	r1, r2
 3036 0032 0622     		mov	r2, #6
 3037 0034 FFF7FEFF 		bl	I2CReadBit
 981:.\mpu6050.c   ****     return buffer[0];
 3038              		.loc 1 981 0
 3039 0038 054B     		ldr	r3, .L246+4
 3040 003a 1B78     		ldrb	r3, [r3]
 3041 003c 5A1E     		sub	r2, r3, #1
 3042 003e 9341     		sbc	r3, r3, r2
 3043 0040 DBB2     		uxtb	r3, r3
 3044              	.L245:
 982:.\mpu6050.c   **** }
 3045              		.loc 1 982 0
 3046 0042 181C     		mov	r0, r3
 3047 0044 BD46     		mov	sp, r7
 3048 0046 02B0     		add	sp, sp, #8
 3049              		@ sp needed
 3050 0048 80BD     		pop	{r7, pc}
 3051              	.L247:
 3052 004a C046     		.align	2
 3053              	.L246:
 3054 004c 00000000 		.word	devAddr
 3055 0050 00000000 		.word	buffer
 3056              		.cfi_endproc
 3057              	.LFE68:
 3058              		.size	MPU6050_getSlaveWordByteSwap, .-MPU6050_getSlaveWordByteSwap
 3059              		.section	.text.MPU6050_setSlaveWordByteSwap,"ax",%progbits
 3060              		.align	2
 3061              		.global	MPU6050_setSlaveWordByteSwap
 3062              		.code	16
 3063              		.thumb_func
 3064              		.type	MPU6050_setSlaveWordByteSwap, %function
 3065              	MPU6050_setSlaveWordByteSwap:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 72


 3066              	.LFB69:
 983:.\mpu6050.c   **** /** Set word pair byte-swapping enabled for the specified slave (0-3).
 984:.\mpu6050.c   ****  * @param num Slave number (0-3)
 985:.\mpu6050.c   ****  * @param enabled New word pair byte-swapping enabled value for specified slave
 986:.\mpu6050.c   ****  * @see getSlaveWordByteSwap()
 987:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 988:.\mpu6050.c   ****  */
 989:.\mpu6050.c   **** void MPU6050_setSlaveWordByteSwap(uint8_t num, bool enabled) {
 3067              		.loc 1 989 0
 3068              		.cfi_startproc
 3069 0000 80B5     		push	{r7, lr}
 3070              		.cfi_def_cfa_offset 8
 3071              		.cfi_offset 7, -8
 3072              		.cfi_offset 14, -4
 3073 0002 82B0     		sub	sp, sp, #8
 3074              		.cfi_def_cfa_offset 16
 3075 0004 00AF     		add	r7, sp, #0
 3076              		.cfi_def_cfa_register 7
 3077 0006 021C     		mov	r2, r0
 3078 0008 FB1D     		add	r3, r7, #7
 3079 000a 1A70     		strb	r2, [r3]
 3080 000c BB1D     		add	r3, r7, #6
 3081 000e 0A1C     		add	r2, r1, #0
 3082 0010 1A70     		strb	r2, [r3]
 990:.\mpu6050.c   ****     if (num > 3) return;
 3083              		.loc 1 990 0
 3084 0012 FB1D     		add	r3, r7, #7
 3085 0014 1B78     		ldrb	r3, [r3]
 3086 0016 032B     		cmp	r3, #3
 3087 0018 00D9     		bls	.L249
 3088 001a 10E0     		b	.L248
 3089              	.L249:
 991:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_BYTE_SW_BIT, enabled
 3090              		.loc 1 991 0
 3091 001c 094B     		ldr	r3, .L251
 3092 001e 1978     		ldrb	r1, [r3]
 3093 0020 FB1D     		add	r3, r7, #7
 3094 0022 1B78     		ldrb	r3, [r3]
 3095 0024 1A1C     		add	r2, r3, #0
 3096 0026 9218     		add	r2, r2, r2
 3097 0028 D318     		add	r3, r2, r3
 3098 002a DBB2     		uxtb	r3, r3
 3099 002c 2733     		add	r3, r3, #39
 3100 002e DAB2     		uxtb	r2, r3
 3101 0030 BB1D     		add	r3, r7, #6
 3102 0032 1B78     		ldrb	r3, [r3]
 3103 0034 081C     		mov	r0, r1
 3104 0036 111C     		mov	r1, r2
 3105 0038 0622     		mov	r2, #6
 3106 003a FFF7FEFF 		bl	I2CWriteBit
 3107              	.L248:
 992:.\mpu6050.c   **** }
 3108              		.loc 1 992 0
 3109 003e BD46     		mov	sp, r7
 3110 0040 02B0     		add	sp, sp, #8
 3111              		@ sp needed
 3112 0042 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 73


 3113              	.L252:
 3114              		.align	2
 3115              	.L251:
 3116 0044 00000000 		.word	devAddr
 3117              		.cfi_endproc
 3118              	.LFE69:
 3119              		.size	MPU6050_setSlaveWordByteSwap, .-MPU6050_setSlaveWordByteSwap
 3120              		.section	.text.MPU6050_getSlaveWriteMode,"ax",%progbits
 3121              		.align	2
 3122              		.global	MPU6050_getSlaveWriteMode
 3123              		.code	16
 3124              		.thumb_func
 3125              		.type	MPU6050_getSlaveWriteMode, %function
 3126              	MPU6050_getSlaveWriteMode:
 3127              	.LFB70:
 993:.\mpu6050.c   **** /** Get write mode for the specified slave (0-3).
 994:.\mpu6050.c   ****  * When set to 1, the transaction will read or write data only. When cleared to
 995:.\mpu6050.c   ****  * 0, the transaction will write a register address prior to reading or writing
 996:.\mpu6050.c   ****  * data. This should equal 0 when specifying the register address within the
 997:.\mpu6050.c   ****  * Slave device to/from which the ensuing data transaction will take place.
 998:.\mpu6050.c   ****  *
 999:.\mpu6050.c   ****  * @param num Slave number (0-3)
1000:.\mpu6050.c   ****  * @return Current write mode for specified slave (0 = register address + data, 1 = data only)
1001:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1002:.\mpu6050.c   ****  */
1003:.\mpu6050.c   **** bool MPU6050_getSlaveWriteMode(uint8_t num) {
 3128              		.loc 1 1003 0
 3129              		.cfi_startproc
 3130 0000 80B5     		push	{r7, lr}
 3131              		.cfi_def_cfa_offset 8
 3132              		.cfi_offset 7, -8
 3133              		.cfi_offset 14, -4
 3134 0002 82B0     		sub	sp, sp, #8
 3135              		.cfi_def_cfa_offset 16
 3136 0004 00AF     		add	r7, sp, #0
 3137              		.cfi_def_cfa_register 7
 3138 0006 021C     		mov	r2, r0
 3139 0008 FB1D     		add	r3, r7, #7
 3140 000a 1A70     		strb	r2, [r3]
1004:.\mpu6050.c   ****     if (num > 3) return 0;
 3141              		.loc 1 1004 0
 3142 000c FB1D     		add	r3, r7, #7
 3143 000e 1B78     		ldrb	r3, [r3]
 3144 0010 032B     		cmp	r3, #3
 3145 0012 01D9     		bls	.L254
 3146              		.loc 1 1004 0 is_stmt 0 discriminator 1
 3147 0014 0023     		mov	r3, #0
 3148 0016 14E0     		b	.L255
 3149              	.L254:
1005:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_REG_DIS_BIT, buffer);
 3150              		.loc 1 1005 0 is_stmt 1
 3151 0018 0C4B     		ldr	r3, .L256
 3152 001a 1978     		ldrb	r1, [r3]
 3153 001c FB1D     		add	r3, r7, #7
 3154 001e 1B78     		ldrb	r3, [r3]
 3155 0020 1A1C     		add	r2, r3, #0
 3156 0022 9218     		add	r2, r2, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 74


 3157 0024 D318     		add	r3, r2, r3
 3158 0026 DBB2     		uxtb	r3, r3
 3159 0028 2733     		add	r3, r3, #39
 3160 002a DAB2     		uxtb	r2, r3
 3161 002c 084B     		ldr	r3, .L256+4
 3162 002e 081C     		mov	r0, r1
 3163 0030 111C     		mov	r1, r2
 3164 0032 0522     		mov	r2, #5
 3165 0034 FFF7FEFF 		bl	I2CReadBit
1006:.\mpu6050.c   ****     return buffer[0];
 3166              		.loc 1 1006 0
 3167 0038 054B     		ldr	r3, .L256+4
 3168 003a 1B78     		ldrb	r3, [r3]
 3169 003c 5A1E     		sub	r2, r3, #1
 3170 003e 9341     		sbc	r3, r3, r2
 3171 0040 DBB2     		uxtb	r3, r3
 3172              	.L255:
1007:.\mpu6050.c   **** }
 3173              		.loc 1 1007 0
 3174 0042 181C     		mov	r0, r3
 3175 0044 BD46     		mov	sp, r7
 3176 0046 02B0     		add	sp, sp, #8
 3177              		@ sp needed
 3178 0048 80BD     		pop	{r7, pc}
 3179              	.L257:
 3180 004a C046     		.align	2
 3181              	.L256:
 3182 004c 00000000 		.word	devAddr
 3183 0050 00000000 		.word	buffer
 3184              		.cfi_endproc
 3185              	.LFE70:
 3186              		.size	MPU6050_getSlaveWriteMode, .-MPU6050_getSlaveWriteMode
 3187              		.section	.text.MPU6050_setSlaveWriteMode,"ax",%progbits
 3188              		.align	2
 3189              		.global	MPU6050_setSlaveWriteMode
 3190              		.code	16
 3191              		.thumb_func
 3192              		.type	MPU6050_setSlaveWriteMode, %function
 3193              	MPU6050_setSlaveWriteMode:
 3194              	.LFB71:
1008:.\mpu6050.c   **** /** Set write mode for the specified slave (0-3).
1009:.\mpu6050.c   ****  * @param num Slave number (0-3)
1010:.\mpu6050.c   ****  * @param mode New write mode for specified slave (0 = register address + data, 1 = data only)
1011:.\mpu6050.c   ****  * @see getSlaveWriteMode()
1012:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1013:.\mpu6050.c   ****  */
1014:.\mpu6050.c   **** void MPU6050_setSlaveWriteMode(uint8_t num, bool mode) {
 3195              		.loc 1 1014 0
 3196              		.cfi_startproc
 3197 0000 80B5     		push	{r7, lr}
 3198              		.cfi_def_cfa_offset 8
 3199              		.cfi_offset 7, -8
 3200              		.cfi_offset 14, -4
 3201 0002 82B0     		sub	sp, sp, #8
 3202              		.cfi_def_cfa_offset 16
 3203 0004 00AF     		add	r7, sp, #0
 3204              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 75


 3205 0006 021C     		mov	r2, r0
 3206 0008 FB1D     		add	r3, r7, #7
 3207 000a 1A70     		strb	r2, [r3]
 3208 000c BB1D     		add	r3, r7, #6
 3209 000e 0A1C     		add	r2, r1, #0
 3210 0010 1A70     		strb	r2, [r3]
1015:.\mpu6050.c   ****     if (num > 3) return;
 3211              		.loc 1 1015 0
 3212 0012 FB1D     		add	r3, r7, #7
 3213 0014 1B78     		ldrb	r3, [r3]
 3214 0016 032B     		cmp	r3, #3
 3215 0018 00D9     		bls	.L259
 3216 001a 10E0     		b	.L258
 3217              	.L259:
1016:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_REG_DIS_BIT, mode);
 3218              		.loc 1 1016 0
 3219 001c 094B     		ldr	r3, .L261
 3220 001e 1978     		ldrb	r1, [r3]
 3221 0020 FB1D     		add	r3, r7, #7
 3222 0022 1B78     		ldrb	r3, [r3]
 3223 0024 1A1C     		add	r2, r3, #0
 3224 0026 9218     		add	r2, r2, r2
 3225 0028 D318     		add	r3, r2, r3
 3226 002a DBB2     		uxtb	r3, r3
 3227 002c 2733     		add	r3, r3, #39
 3228 002e DAB2     		uxtb	r2, r3
 3229 0030 BB1D     		add	r3, r7, #6
 3230 0032 1B78     		ldrb	r3, [r3]
 3231 0034 081C     		mov	r0, r1
 3232 0036 111C     		mov	r1, r2
 3233 0038 0522     		mov	r2, #5
 3234 003a FFF7FEFF 		bl	I2CWriteBit
 3235              	.L258:
1017:.\mpu6050.c   **** }
 3236              		.loc 1 1017 0
 3237 003e BD46     		mov	sp, r7
 3238 0040 02B0     		add	sp, sp, #8
 3239              		@ sp needed
 3240 0042 80BD     		pop	{r7, pc}
 3241              	.L262:
 3242              		.align	2
 3243              	.L261:
 3244 0044 00000000 		.word	devAddr
 3245              		.cfi_endproc
 3246              	.LFE71:
 3247              		.size	MPU6050_setSlaveWriteMode, .-MPU6050_setSlaveWriteMode
 3248              		.section	.text.MPU6050_getSlaveWordGroupOffset,"ax",%progbits
 3249              		.align	2
 3250              		.global	MPU6050_getSlaveWordGroupOffset
 3251              		.code	16
 3252              		.thumb_func
 3253              		.type	MPU6050_getSlaveWordGroupOffset, %function
 3254              	MPU6050_getSlaveWordGroupOffset:
 3255              	.LFB72:
1018:.\mpu6050.c   **** /** Get word pair grouping order offset for the specified slave (0-3).
1019:.\mpu6050.c   ****  * This sets specifies the grouping order of word pairs received from registers.
1020:.\mpu6050.c   ****  * When cleared to 0, bytes from register addresses 0 and 1, 2 and 3, etc (even,
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 76


1021:.\mpu6050.c   ****  * then odd register addresses) are paired to form a word. When set to 1, bytes
1022:.\mpu6050.c   ****  * from register addresses are paired 1 and 2, 3 and 4, etc. (odd, then even
1023:.\mpu6050.c   ****  * register addresses) are paired to form a word.
1024:.\mpu6050.c   ****  *
1025:.\mpu6050.c   ****  * @param num Slave number (0-3)
1026:.\mpu6050.c   ****  * @return Current word pair grouping order offset for specified slave
1027:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1028:.\mpu6050.c   ****  */
1029:.\mpu6050.c   **** bool MPU6050_getSlaveWordGroupOffset(uint8_t num) {
 3256              		.loc 1 1029 0
 3257              		.cfi_startproc
 3258 0000 80B5     		push	{r7, lr}
 3259              		.cfi_def_cfa_offset 8
 3260              		.cfi_offset 7, -8
 3261              		.cfi_offset 14, -4
 3262 0002 82B0     		sub	sp, sp, #8
 3263              		.cfi_def_cfa_offset 16
 3264 0004 00AF     		add	r7, sp, #0
 3265              		.cfi_def_cfa_register 7
 3266 0006 021C     		mov	r2, r0
 3267 0008 FB1D     		add	r3, r7, #7
 3268 000a 1A70     		strb	r2, [r3]
1030:.\mpu6050.c   ****     if (num > 3) return 0;
 3269              		.loc 1 1030 0
 3270 000c FB1D     		add	r3, r7, #7
 3271 000e 1B78     		ldrb	r3, [r3]
 3272 0010 032B     		cmp	r3, #3
 3273 0012 01D9     		bls	.L264
 3274              		.loc 1 1030 0 is_stmt 0 discriminator 1
 3275 0014 0023     		mov	r3, #0
 3276 0016 14E0     		b	.L265
 3277              	.L264:
1031:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_GRP_BIT, buffer);
 3278              		.loc 1 1031 0 is_stmt 1
 3279 0018 0C4B     		ldr	r3, .L266
 3280 001a 1978     		ldrb	r1, [r3]
 3281 001c FB1D     		add	r3, r7, #7
 3282 001e 1B78     		ldrb	r3, [r3]
 3283 0020 1A1C     		add	r2, r3, #0
 3284 0022 9218     		add	r2, r2, r2
 3285 0024 D318     		add	r3, r2, r3
 3286 0026 DBB2     		uxtb	r3, r3
 3287 0028 2733     		add	r3, r3, #39
 3288 002a DAB2     		uxtb	r2, r3
 3289 002c 084B     		ldr	r3, .L266+4
 3290 002e 081C     		mov	r0, r1
 3291 0030 111C     		mov	r1, r2
 3292 0032 0422     		mov	r2, #4
 3293 0034 FFF7FEFF 		bl	I2CReadBit
1032:.\mpu6050.c   ****     return buffer[0];
 3294              		.loc 1 1032 0
 3295 0038 054B     		ldr	r3, .L266+4
 3296 003a 1B78     		ldrb	r3, [r3]
 3297 003c 5A1E     		sub	r2, r3, #1
 3298 003e 9341     		sbc	r3, r3, r2
 3299 0040 DBB2     		uxtb	r3, r3
 3300              	.L265:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 77


1033:.\mpu6050.c   **** }
 3301              		.loc 1 1033 0
 3302 0042 181C     		mov	r0, r3
 3303 0044 BD46     		mov	sp, r7
 3304 0046 02B0     		add	sp, sp, #8
 3305              		@ sp needed
 3306 0048 80BD     		pop	{r7, pc}
 3307              	.L267:
 3308 004a C046     		.align	2
 3309              	.L266:
 3310 004c 00000000 		.word	devAddr
 3311 0050 00000000 		.word	buffer
 3312              		.cfi_endproc
 3313              	.LFE72:
 3314              		.size	MPU6050_getSlaveWordGroupOffset, .-MPU6050_getSlaveWordGroupOffset
 3315              		.section	.text.MPU6050_setSlaveWordGroupOffset,"ax",%progbits
 3316              		.align	2
 3317              		.global	MPU6050_setSlaveWordGroupOffset
 3318              		.code	16
 3319              		.thumb_func
 3320              		.type	MPU6050_setSlaveWordGroupOffset, %function
 3321              	MPU6050_setSlaveWordGroupOffset:
 3322              	.LFB73:
1034:.\mpu6050.c   **** /** Set word pair grouping order offset for the specified slave (0-3).
1035:.\mpu6050.c   ****  * @param num Slave number (0-3)
1036:.\mpu6050.c   ****  * @param enabled New word pair grouping order offset for specified slave
1037:.\mpu6050.c   ****  * @see getSlaveWordGroupOffset()
1038:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1039:.\mpu6050.c   ****  */
1040:.\mpu6050.c   **** void MPU6050_setSlaveWordGroupOffset(uint8_t num, bool enabled) {
 3323              		.loc 1 1040 0
 3324              		.cfi_startproc
 3325 0000 80B5     		push	{r7, lr}
 3326              		.cfi_def_cfa_offset 8
 3327              		.cfi_offset 7, -8
 3328              		.cfi_offset 14, -4
 3329 0002 82B0     		sub	sp, sp, #8
 3330              		.cfi_def_cfa_offset 16
 3331 0004 00AF     		add	r7, sp, #0
 3332              		.cfi_def_cfa_register 7
 3333 0006 021C     		mov	r2, r0
 3334 0008 FB1D     		add	r3, r7, #7
 3335 000a 1A70     		strb	r2, [r3]
 3336 000c BB1D     		add	r3, r7, #6
 3337 000e 0A1C     		add	r2, r1, #0
 3338 0010 1A70     		strb	r2, [r3]
1041:.\mpu6050.c   ****     if (num > 3) return;
 3339              		.loc 1 1041 0
 3340 0012 FB1D     		add	r3, r7, #7
 3341 0014 1B78     		ldrb	r3, [r3]
 3342 0016 032B     		cmp	r3, #3
 3343 0018 00D9     		bls	.L269
 3344 001a 10E0     		b	.L268
 3345              	.L269:
1042:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_GRP_BIT, enabled);
 3346              		.loc 1 1042 0
 3347 001c 094B     		ldr	r3, .L271
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 78


 3348 001e 1978     		ldrb	r1, [r3]
 3349 0020 FB1D     		add	r3, r7, #7
 3350 0022 1B78     		ldrb	r3, [r3]
 3351 0024 1A1C     		add	r2, r3, #0
 3352 0026 9218     		add	r2, r2, r2
 3353 0028 D318     		add	r3, r2, r3
 3354 002a DBB2     		uxtb	r3, r3
 3355 002c 2733     		add	r3, r3, #39
 3356 002e DAB2     		uxtb	r2, r3
 3357 0030 BB1D     		add	r3, r7, #6
 3358 0032 1B78     		ldrb	r3, [r3]
 3359 0034 081C     		mov	r0, r1
 3360 0036 111C     		mov	r1, r2
 3361 0038 0422     		mov	r2, #4
 3362 003a FFF7FEFF 		bl	I2CWriteBit
 3363              	.L268:
1043:.\mpu6050.c   **** }
 3364              		.loc 1 1043 0
 3365 003e BD46     		mov	sp, r7
 3366 0040 02B0     		add	sp, sp, #8
 3367              		@ sp needed
 3368 0042 80BD     		pop	{r7, pc}
 3369              	.L272:
 3370              		.align	2
 3371              	.L271:
 3372 0044 00000000 		.word	devAddr
 3373              		.cfi_endproc
 3374              	.LFE73:
 3375              		.size	MPU6050_setSlaveWordGroupOffset, .-MPU6050_setSlaveWordGroupOffset
 3376              		.section	.text.MPU6050_getSlaveDataLength,"ax",%progbits
 3377              		.align	2
 3378              		.global	MPU6050_getSlaveDataLength
 3379              		.code	16
 3380              		.thumb_func
 3381              		.type	MPU6050_getSlaveDataLength, %function
 3382              	MPU6050_getSlaveDataLength:
 3383              	.LFB74:
1044:.\mpu6050.c   **** /** Get number of bytes to read for the specified slave (0-3).
1045:.\mpu6050.c   ****  * Specifies the number of bytes transferred to and from Slave 0. Clearing this
1046:.\mpu6050.c   ****  * bit to 0 is equivalent to disabling the register by writing 0 to I2C_SLV0_EN.
1047:.\mpu6050.c   ****  * @param num Slave number (0-3)
1048:.\mpu6050.c   ****  * @return Number of bytes to read for specified slave
1049:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1050:.\mpu6050.c   ****  */
1051:.\mpu6050.c   **** uint8_t MPU6050_getSlaveDataLength(uint8_t num) {
 3384              		.loc 1 1051 0
 3385              		.cfi_startproc
 3386 0000 80B5     		push	{r7, lr}
 3387              		.cfi_def_cfa_offset 8
 3388              		.cfi_offset 7, -8
 3389              		.cfi_offset 14, -4
 3390 0002 84B0     		sub	sp, sp, #16
 3391              		.cfi_def_cfa_offset 24
 3392 0004 02AF     		add	r7, sp, #8
 3393              		.cfi_def_cfa 7, 16
 3394 0006 021C     		mov	r2, r0
 3395 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 79


 3396 000a 1A70     		strb	r2, [r3]
1052:.\mpu6050.c   ****     if (num > 3) return 0;
 3397              		.loc 1 1052 0
 3398 000c FB1D     		add	r3, r7, #7
 3399 000e 1B78     		ldrb	r3, [r3]
 3400 0010 032B     		cmp	r3, #3
 3401 0012 01D9     		bls	.L274
 3402              		.loc 1 1052 0 is_stmt 0 discriminator 1
 3403 0014 0023     		mov	r3, #0
 3404 0016 13E0     		b	.L275
 3405              	.L274:
1053:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_LEN_BIT, I2C_MPU6050
 3406              		.loc 1 1053 0 is_stmt 1
 3407 0018 0B4B     		ldr	r3, .L276
 3408 001a 1978     		ldrb	r1, [r3]
 3409 001c FB1D     		add	r3, r7, #7
 3410 001e 1B78     		ldrb	r3, [r3]
 3411 0020 1A1C     		add	r2, r3, #0
 3412 0022 9218     		add	r2, r2, r2
 3413 0024 D318     		add	r3, r2, r3
 3414 0026 DBB2     		uxtb	r3, r3
 3415 0028 2733     		add	r3, r3, #39
 3416 002a DAB2     		uxtb	r2, r3
 3417 002c 074B     		ldr	r3, .L276+4
 3418 002e 0093     		str	r3, [sp]
 3419 0030 081C     		mov	r0, r1
 3420 0032 111C     		mov	r1, r2
 3421 0034 0322     		mov	r2, #3
 3422 0036 0423     		mov	r3, #4
 3423 0038 FFF7FEFF 		bl	I2CReadBits
1054:.\mpu6050.c   ****     return buffer[0];
 3424              		.loc 1 1054 0
 3425 003c 034B     		ldr	r3, .L276+4
 3426 003e 1B78     		ldrb	r3, [r3]
 3427              	.L275:
1055:.\mpu6050.c   **** }
 3428              		.loc 1 1055 0
 3429 0040 181C     		mov	r0, r3
 3430 0042 BD46     		mov	sp, r7
 3431 0044 02B0     		add	sp, sp, #8
 3432              		@ sp needed
 3433 0046 80BD     		pop	{r7, pc}
 3434              	.L277:
 3435              		.align	2
 3436              	.L276:
 3437 0048 00000000 		.word	devAddr
 3438 004c 00000000 		.word	buffer
 3439              		.cfi_endproc
 3440              	.LFE74:
 3441              		.size	MPU6050_getSlaveDataLength, .-MPU6050_getSlaveDataLength
 3442              		.section	.text.MPU6050_setSlaveDataLength,"ax",%progbits
 3443              		.align	2
 3444              		.global	MPU6050_setSlaveDataLength
 3445              		.code	16
 3446              		.thumb_func
 3447              		.type	MPU6050_setSlaveDataLength, %function
 3448              	MPU6050_setSlaveDataLength:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 80


 3449              	.LFB75:
1056:.\mpu6050.c   **** /** Set number of bytes to read for the specified slave (0-3).
1057:.\mpu6050.c   ****  * @param num Slave number (0-3)
1058:.\mpu6050.c   ****  * @param length Number of bytes to read for specified slave
1059:.\mpu6050.c   ****  * @see getSlaveDataLength()
1060:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1061:.\mpu6050.c   ****  */
1062:.\mpu6050.c   **** void MPU6050_setSlaveDataLength(uint8_t num, uint8_t length) {
 3450              		.loc 1 1062 0
 3451              		.cfi_startproc
 3452 0000 80B5     		push	{r7, lr}
 3453              		.cfi_def_cfa_offset 8
 3454              		.cfi_offset 7, -8
 3455              		.cfi_offset 14, -4
 3456 0002 84B0     		sub	sp, sp, #16
 3457              		.cfi_def_cfa_offset 24
 3458 0004 02AF     		add	r7, sp, #8
 3459              		.cfi_def_cfa 7, 16
 3460 0006 021C     		mov	r2, r0
 3461 0008 FB1D     		add	r3, r7, #7
 3462 000a 1A70     		strb	r2, [r3]
 3463 000c BB1D     		add	r3, r7, #6
 3464 000e 0A1C     		add	r2, r1, #0
 3465 0010 1A70     		strb	r2, [r3]
1063:.\mpu6050.c   ****     if (num > 3) return;
 3466              		.loc 1 1063 0
 3467 0012 FB1D     		add	r3, r7, #7
 3468 0014 1B78     		ldrb	r3, [r3]
 3469 0016 032B     		cmp	r3, #3
 3470 0018 00D9     		bls	.L279
 3471 001a 12E0     		b	.L278
 3472              	.L279:
1064:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_LEN_BIT, I2C_MPU605
 3473              		.loc 1 1064 0
 3474 001c 0A4B     		ldr	r3, .L281
 3475 001e 1978     		ldrb	r1, [r3]
 3476 0020 FB1D     		add	r3, r7, #7
 3477 0022 1B78     		ldrb	r3, [r3]
 3478 0024 1A1C     		add	r2, r3, #0
 3479 0026 9218     		add	r2, r2, r2
 3480 0028 D318     		add	r3, r2, r3
 3481 002a DBB2     		uxtb	r3, r3
 3482 002c 2733     		add	r3, r3, #39
 3483 002e DAB2     		uxtb	r2, r3
 3484 0030 BB1D     		add	r3, r7, #6
 3485 0032 1B78     		ldrb	r3, [r3]
 3486 0034 0093     		str	r3, [sp]
 3487 0036 081C     		mov	r0, r1
 3488 0038 111C     		mov	r1, r2
 3489 003a 0322     		mov	r2, #3
 3490 003c 0423     		mov	r3, #4
 3491 003e FFF7FEFF 		bl	I2CWriteBits
 3492              	.L278:
1065:.\mpu6050.c   **** }
 3493              		.loc 1 1065 0
 3494 0042 BD46     		mov	sp, r7
 3495 0044 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 81


 3496              		@ sp needed
 3497 0046 80BD     		pop	{r7, pc}
 3498              	.L282:
 3499              		.align	2
 3500              	.L281:
 3501 0048 00000000 		.word	devAddr
 3502              		.cfi_endproc
 3503              	.LFE75:
 3504              		.size	MPU6050_setSlaveDataLength, .-MPU6050_setSlaveDataLength
 3505              		.section	.text.MPU6050_getSlave4Address,"ax",%progbits
 3506              		.align	2
 3507              		.global	MPU6050_getSlave4Address
 3508              		.code	16
 3509              		.thumb_func
 3510              		.type	MPU6050_getSlave4Address, %function
 3511              	MPU6050_getSlave4Address:
 3512              	.LFB76:
1066:.\mpu6050.c   **** 
1067:.\mpu6050.c   **** // I2C_SLV* registers (Slave 4)
1068:.\mpu6050.c   **** 
1069:.\mpu6050.c   **** /** Get the I2C address of Slave 4.
1070:.\mpu6050.c   ****  * Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it's a read
1071:.\mpu6050.c   ****  * operation, and if it is cleared, then it's a write operation. The remaining
1072:.\mpu6050.c   ****  * bits (6-0) are the 7-bit device address of the slave device.
1073:.\mpu6050.c   ****  *
1074:.\mpu6050.c   ****  * @return Current address for Slave 4
1075:.\mpu6050.c   ****  * @see getSlaveAddress()
1076:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_ADDR
1077:.\mpu6050.c   ****  */
1078:.\mpu6050.c   **** uint8_t MPU6050_getSlave4Address() {
 3513              		.loc 1 1078 0
 3514              		.cfi_startproc
 3515 0000 80B5     		push	{r7, lr}
 3516              		.cfi_def_cfa_offset 8
 3517              		.cfi_offset 7, -8
 3518              		.cfi_offset 14, -4
 3519 0002 00AF     		add	r7, sp, #0
 3520              		.cfi_def_cfa_register 7
1079:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV4_ADDR, buffer);
 3521              		.loc 1 1079 0
 3522 0004 064B     		ldr	r3, .L285
 3523 0006 1A78     		ldrb	r2, [r3]
 3524 0008 064B     		ldr	r3, .L285+4
 3525 000a 101C     		mov	r0, r2
 3526 000c 3121     		mov	r1, #49
 3527 000e 1A1C     		mov	r2, r3
 3528 0010 FFF7FEFF 		bl	I2CReadByte
1080:.\mpu6050.c   ****     return buffer[0];
 3529              		.loc 1 1080 0
 3530 0014 034B     		ldr	r3, .L285+4
 3531 0016 1B78     		ldrb	r3, [r3]
1081:.\mpu6050.c   **** }
 3532              		.loc 1 1081 0
 3533 0018 181C     		mov	r0, r3
 3534 001a BD46     		mov	sp, r7
 3535              		@ sp needed
 3536 001c 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 82


 3537              	.L286:
 3538 001e C046     		.align	2
 3539              	.L285:
 3540 0020 00000000 		.word	devAddr
 3541 0024 00000000 		.word	buffer
 3542              		.cfi_endproc
 3543              	.LFE76:
 3544              		.size	MPU6050_getSlave4Address, .-MPU6050_getSlave4Address
 3545              		.section	.text.MPU6050_setSlave4Address,"ax",%progbits
 3546              		.align	2
 3547              		.global	MPU6050_setSlave4Address
 3548              		.code	16
 3549              		.thumb_func
 3550              		.type	MPU6050_setSlave4Address, %function
 3551              	MPU6050_setSlave4Address:
 3552              	.LFB77:
1082:.\mpu6050.c   **** /** Set the I2C address of Slave 4.
1083:.\mpu6050.c   ****  * @param address New address for Slave 4
1084:.\mpu6050.c   ****  * @see getSlave4Address()
1085:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_ADDR
1086:.\mpu6050.c   ****  */
1087:.\mpu6050.c   **** void MPU6050_setSlave4Address(uint8_t address) {
 3553              		.loc 1 1087 0
 3554              		.cfi_startproc
 3555 0000 80B5     		push	{r7, lr}
 3556              		.cfi_def_cfa_offset 8
 3557              		.cfi_offset 7, -8
 3558              		.cfi_offset 14, -4
 3559 0002 82B0     		sub	sp, sp, #8
 3560              		.cfi_def_cfa_offset 16
 3561 0004 00AF     		add	r7, sp, #0
 3562              		.cfi_def_cfa_register 7
 3563 0006 021C     		mov	r2, r0
 3564 0008 FB1D     		add	r3, r7, #7
 3565 000a 1A70     		strb	r2, [r3]
1088:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV4_ADDR, address);
 3566              		.loc 1 1088 0
 3567 000c 054B     		ldr	r3, .L288
 3568 000e 1A78     		ldrb	r2, [r3]
 3569 0010 FB1D     		add	r3, r7, #7
 3570 0012 1B78     		ldrb	r3, [r3]
 3571 0014 101C     		mov	r0, r2
 3572 0016 3121     		mov	r1, #49
 3573 0018 1A1C     		mov	r2, r3
 3574 001a FFF7FEFF 		bl	I2CWriteByte
1089:.\mpu6050.c   **** }
 3575              		.loc 1 1089 0
 3576 001e BD46     		mov	sp, r7
 3577 0020 02B0     		add	sp, sp, #8
 3578              		@ sp needed
 3579 0022 80BD     		pop	{r7, pc}
 3580              	.L289:
 3581              		.align	2
 3582              	.L288:
 3583 0024 00000000 		.word	devAddr
 3584              		.cfi_endproc
 3585              	.LFE77:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 83


 3586              		.size	MPU6050_setSlave4Address, .-MPU6050_setSlave4Address
 3587              		.section	.text.MPU6050_getSlave4Register,"ax",%progbits
 3588              		.align	2
 3589              		.global	MPU6050_getSlave4Register
 3590              		.code	16
 3591              		.thumb_func
 3592              		.type	MPU6050_getSlave4Register, %function
 3593              	MPU6050_getSlave4Register:
 3594              	.LFB78:
1090:.\mpu6050.c   **** /** Get the active internal register for the Slave 4.
1091:.\mpu6050.c   ****  * Read/write operations for this slave will be done to whatever internal
1092:.\mpu6050.c   ****  * register address is stored in this MPU register.
1093:.\mpu6050.c   ****  *
1094:.\mpu6050.c   ****  * @return Current active register for Slave 4
1095:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_REG
1096:.\mpu6050.c   ****  */
1097:.\mpu6050.c   **** uint8_t MPU6050_getSlave4Register() {
 3595              		.loc 1 1097 0
 3596              		.cfi_startproc
 3597 0000 80B5     		push	{r7, lr}
 3598              		.cfi_def_cfa_offset 8
 3599              		.cfi_offset 7, -8
 3600              		.cfi_offset 14, -4
 3601 0002 00AF     		add	r7, sp, #0
 3602              		.cfi_def_cfa_register 7
1098:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV4_REG, buffer);
 3603              		.loc 1 1098 0
 3604 0004 064B     		ldr	r3, .L292
 3605 0006 1A78     		ldrb	r2, [r3]
 3606 0008 064B     		ldr	r3, .L292+4
 3607 000a 101C     		mov	r0, r2
 3608 000c 3221     		mov	r1, #50
 3609 000e 1A1C     		mov	r2, r3
 3610 0010 FFF7FEFF 		bl	I2CReadByte
1099:.\mpu6050.c   ****     return buffer[0];
 3611              		.loc 1 1099 0
 3612 0014 034B     		ldr	r3, .L292+4
 3613 0016 1B78     		ldrb	r3, [r3]
1100:.\mpu6050.c   **** }
 3614              		.loc 1 1100 0
 3615 0018 181C     		mov	r0, r3
 3616 001a BD46     		mov	sp, r7
 3617              		@ sp needed
 3618 001c 80BD     		pop	{r7, pc}
 3619              	.L293:
 3620 001e C046     		.align	2
 3621              	.L292:
 3622 0020 00000000 		.word	devAddr
 3623 0024 00000000 		.word	buffer
 3624              		.cfi_endproc
 3625              	.LFE78:
 3626              		.size	MPU6050_getSlave4Register, .-MPU6050_getSlave4Register
 3627              		.section	.text.MPU6050_setSlave4Register,"ax",%progbits
 3628              		.align	2
 3629              		.global	MPU6050_setSlave4Register
 3630              		.code	16
 3631              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 84


 3632              		.type	MPU6050_setSlave4Register, %function
 3633              	MPU6050_setSlave4Register:
 3634              	.LFB79:
1101:.\mpu6050.c   **** /** Set the active internal register for Slave 4.
1102:.\mpu6050.c   ****  * @param reg New active register for Slave 4
1103:.\mpu6050.c   ****  * @see getSlave4Register()
1104:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_REG
1105:.\mpu6050.c   ****  */
1106:.\mpu6050.c   **** void MPU6050_setSlave4Register(uint8_t reg) {
 3635              		.loc 1 1106 0
 3636              		.cfi_startproc
 3637 0000 80B5     		push	{r7, lr}
 3638              		.cfi_def_cfa_offset 8
 3639              		.cfi_offset 7, -8
 3640              		.cfi_offset 14, -4
 3641 0002 82B0     		sub	sp, sp, #8
 3642              		.cfi_def_cfa_offset 16
 3643 0004 00AF     		add	r7, sp, #0
 3644              		.cfi_def_cfa_register 7
 3645 0006 021C     		mov	r2, r0
 3646 0008 FB1D     		add	r3, r7, #7
 3647 000a 1A70     		strb	r2, [r3]
1107:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV4_REG, reg);
 3648              		.loc 1 1107 0
 3649 000c 054B     		ldr	r3, .L295
 3650 000e 1A78     		ldrb	r2, [r3]
 3651 0010 FB1D     		add	r3, r7, #7
 3652 0012 1B78     		ldrb	r3, [r3]
 3653 0014 101C     		mov	r0, r2
 3654 0016 3221     		mov	r1, #50
 3655 0018 1A1C     		mov	r2, r3
 3656 001a FFF7FEFF 		bl	I2CWriteByte
1108:.\mpu6050.c   **** }
 3657              		.loc 1 1108 0
 3658 001e BD46     		mov	sp, r7
 3659 0020 02B0     		add	sp, sp, #8
 3660              		@ sp needed
 3661 0022 80BD     		pop	{r7, pc}
 3662              	.L296:
 3663              		.align	2
 3664              	.L295:
 3665 0024 00000000 		.word	devAddr
 3666              		.cfi_endproc
 3667              	.LFE79:
 3668              		.size	MPU6050_setSlave4Register, .-MPU6050_setSlave4Register
 3669              		.section	.text.MPU6050_setSlave4OutputByte,"ax",%progbits
 3670              		.align	2
 3671              		.global	MPU6050_setSlave4OutputByte
 3672              		.code	16
 3673              		.thumb_func
 3674              		.type	MPU6050_setSlave4OutputByte, %function
 3675              	MPU6050_setSlave4OutputByte:
 3676              	.LFB80:
1109:.\mpu6050.c   **** /** Set new byte to write to Slave 4.
1110:.\mpu6050.c   ****  * This register stores the data to be written into the Slave 4. If I2C_SLV4_RW
1111:.\mpu6050.c   ****  * is set 1 (set to read), this register has no effect.
1112:.\mpu6050.c   ****  * @param data New byte to write to Slave 4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 85


1113:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_DO
1114:.\mpu6050.c   ****  */
1115:.\mpu6050.c   **** void MPU6050_setSlave4OutputByte(uint8_t data) {
 3677              		.loc 1 1115 0
 3678              		.cfi_startproc
 3679 0000 80B5     		push	{r7, lr}
 3680              		.cfi_def_cfa_offset 8
 3681              		.cfi_offset 7, -8
 3682              		.cfi_offset 14, -4
 3683 0002 82B0     		sub	sp, sp, #8
 3684              		.cfi_def_cfa_offset 16
 3685 0004 00AF     		add	r7, sp, #0
 3686              		.cfi_def_cfa_register 7
 3687 0006 021C     		mov	r2, r0
 3688 0008 FB1D     		add	r3, r7, #7
 3689 000a 1A70     		strb	r2, [r3]
1116:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV4_DO, data);
 3690              		.loc 1 1116 0
 3691 000c 054B     		ldr	r3, .L298
 3692 000e 1A78     		ldrb	r2, [r3]
 3693 0010 FB1D     		add	r3, r7, #7
 3694 0012 1B78     		ldrb	r3, [r3]
 3695 0014 101C     		mov	r0, r2
 3696 0016 3321     		mov	r1, #51
 3697 0018 1A1C     		mov	r2, r3
 3698 001a FFF7FEFF 		bl	I2CWriteByte
1117:.\mpu6050.c   **** }
 3699              		.loc 1 1117 0
 3700 001e BD46     		mov	sp, r7
 3701 0020 02B0     		add	sp, sp, #8
 3702              		@ sp needed
 3703 0022 80BD     		pop	{r7, pc}
 3704              	.L299:
 3705              		.align	2
 3706              	.L298:
 3707 0024 00000000 		.word	devAddr
 3708              		.cfi_endproc
 3709              	.LFE80:
 3710              		.size	MPU6050_setSlave4OutputByte, .-MPU6050_setSlave4OutputByte
 3711              		.section	.text.MPU6050_getSlave4Enabled,"ax",%progbits
 3712              		.align	2
 3713              		.global	MPU6050_getSlave4Enabled
 3714              		.code	16
 3715              		.thumb_func
 3716              		.type	MPU6050_getSlave4Enabled, %function
 3717              	MPU6050_getSlave4Enabled:
 3718              	.LFB81:
1118:.\mpu6050.c   **** /** Get the enabled value for the Slave 4.
1119:.\mpu6050.c   ****  * When set to 1, this bit enables Slave 4 for data transfer operations. When
1120:.\mpu6050.c   ****  * cleared to 0, this bit disables Slave 4 from data transfer operations.
1121:.\mpu6050.c   ****  * @return Current enabled value for Slave 4
1122:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1123:.\mpu6050.c   ****  */
1124:.\mpu6050.c   **** bool MPU6050_getSlave4Enabled() {
 3719              		.loc 1 1124 0
 3720              		.cfi_startproc
 3721 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 86


 3722              		.cfi_def_cfa_offset 8
 3723              		.cfi_offset 7, -8
 3724              		.cfi_offset 14, -4
 3725 0002 00AF     		add	r7, sp, #0
 3726              		.cfi_def_cfa_register 7
1125:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_EN_BIT, buffer);
 3727              		.loc 1 1125 0
 3728 0004 074B     		ldr	r3, .L302
 3729 0006 1A78     		ldrb	r2, [r3]
 3730 0008 074B     		ldr	r3, .L302+4
 3731 000a 101C     		mov	r0, r2
 3732 000c 3421     		mov	r1, #52
 3733 000e 0722     		mov	r2, #7
 3734 0010 FFF7FEFF 		bl	I2CReadBit
1126:.\mpu6050.c   ****     return buffer[0];
 3735              		.loc 1 1126 0
 3736 0014 044B     		ldr	r3, .L302+4
 3737 0016 1B78     		ldrb	r3, [r3]
 3738 0018 5A1E     		sub	r2, r3, #1
 3739 001a 9341     		sbc	r3, r3, r2
 3740 001c DBB2     		uxtb	r3, r3
1127:.\mpu6050.c   **** }
 3741              		.loc 1 1127 0
 3742 001e 181C     		mov	r0, r3
 3743 0020 BD46     		mov	sp, r7
 3744              		@ sp needed
 3745 0022 80BD     		pop	{r7, pc}
 3746              	.L303:
 3747              		.align	2
 3748              	.L302:
 3749 0024 00000000 		.word	devAddr
 3750 0028 00000000 		.word	buffer
 3751              		.cfi_endproc
 3752              	.LFE81:
 3753              		.size	MPU6050_getSlave4Enabled, .-MPU6050_getSlave4Enabled
 3754              		.section	.text.MPU6050_setSlave4Enabled,"ax",%progbits
 3755              		.align	2
 3756              		.global	MPU6050_setSlave4Enabled
 3757              		.code	16
 3758              		.thumb_func
 3759              		.type	MPU6050_setSlave4Enabled, %function
 3760              	MPU6050_setSlave4Enabled:
 3761              	.LFB82:
1128:.\mpu6050.c   **** /** Set the enabled value for Slave 4.
1129:.\mpu6050.c   ****  * @param enabled New enabled value for Slave 4
1130:.\mpu6050.c   ****  * @see getSlave4Enabled()
1131:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1132:.\mpu6050.c   ****  */
1133:.\mpu6050.c   **** void MPU6050_setSlave4Enabled(bool enabled) {
 3762              		.loc 1 1133 0
 3763              		.cfi_startproc
 3764 0000 80B5     		push	{r7, lr}
 3765              		.cfi_def_cfa_offset 8
 3766              		.cfi_offset 7, -8
 3767              		.cfi_offset 14, -4
 3768 0002 82B0     		sub	sp, sp, #8
 3769              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 87


 3770 0004 00AF     		add	r7, sp, #0
 3771              		.cfi_def_cfa_register 7
 3772 0006 021C     		mov	r2, r0
 3773 0008 FB1D     		add	r3, r7, #7
 3774 000a 1A70     		strb	r2, [r3]
1134:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_EN_BIT, enabled);
 3775              		.loc 1 1134 0
 3776 000c 054B     		ldr	r3, .L305
 3777 000e 1A78     		ldrb	r2, [r3]
 3778 0010 FB1D     		add	r3, r7, #7
 3779 0012 1B78     		ldrb	r3, [r3]
 3780 0014 101C     		mov	r0, r2
 3781 0016 3421     		mov	r1, #52
 3782 0018 0722     		mov	r2, #7
 3783 001a FFF7FEFF 		bl	I2CWriteBit
1135:.\mpu6050.c   **** }
 3784              		.loc 1 1135 0
 3785 001e BD46     		mov	sp, r7
 3786 0020 02B0     		add	sp, sp, #8
 3787              		@ sp needed
 3788 0022 80BD     		pop	{r7, pc}
 3789              	.L306:
 3790              		.align	2
 3791              	.L305:
 3792 0024 00000000 		.word	devAddr
 3793              		.cfi_endproc
 3794              	.LFE82:
 3795              		.size	MPU6050_setSlave4Enabled, .-MPU6050_setSlave4Enabled
 3796              		.section	.text.MPU6050_getSlave4InterruptEnabled,"ax",%progbits
 3797              		.align	2
 3798              		.global	MPU6050_getSlave4InterruptEnabled
 3799              		.code	16
 3800              		.thumb_func
 3801              		.type	MPU6050_getSlave4InterruptEnabled, %function
 3802              	MPU6050_getSlave4InterruptEnabled:
 3803              	.LFB83:
1136:.\mpu6050.c   **** /** Get the enabled value for Slave 4 transaction interrupts.
1137:.\mpu6050.c   ****  * When set to 1, this bit enables the generation of an interrupt signal upon
1138:.\mpu6050.c   ****  * completion of a Slave 4 transaction. When cleared to 0, this bit disables the
1139:.\mpu6050.c   ****  * generation of an interrupt signal upon completion of a Slave 4 transaction.
1140:.\mpu6050.c   ****  * The interrupt status can be observed in Register 54.
1141:.\mpu6050.c   ****  *
1142:.\mpu6050.c   ****  * @return Current enabled value for Slave 4 transaction interrupts.
1143:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1144:.\mpu6050.c   ****  */
1145:.\mpu6050.c   **** bool MPU6050_getSlave4InterruptEnabled() {
 3804              		.loc 1 1145 0
 3805              		.cfi_startproc
 3806 0000 80B5     		push	{r7, lr}
 3807              		.cfi_def_cfa_offset 8
 3808              		.cfi_offset 7, -8
 3809              		.cfi_offset 14, -4
 3810 0002 00AF     		add	r7, sp, #0
 3811              		.cfi_def_cfa_register 7
1146:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_INT_EN_BIT, buffer);
 3812              		.loc 1 1146 0
 3813 0004 074B     		ldr	r3, .L309
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 88


 3814 0006 1A78     		ldrb	r2, [r3]
 3815 0008 074B     		ldr	r3, .L309+4
 3816 000a 101C     		mov	r0, r2
 3817 000c 3421     		mov	r1, #52
 3818 000e 0622     		mov	r2, #6
 3819 0010 FFF7FEFF 		bl	I2CReadBit
1147:.\mpu6050.c   ****     return buffer[0];
 3820              		.loc 1 1147 0
 3821 0014 044B     		ldr	r3, .L309+4
 3822 0016 1B78     		ldrb	r3, [r3]
 3823 0018 5A1E     		sub	r2, r3, #1
 3824 001a 9341     		sbc	r3, r3, r2
 3825 001c DBB2     		uxtb	r3, r3
1148:.\mpu6050.c   **** }
 3826              		.loc 1 1148 0
 3827 001e 181C     		mov	r0, r3
 3828 0020 BD46     		mov	sp, r7
 3829              		@ sp needed
 3830 0022 80BD     		pop	{r7, pc}
 3831              	.L310:
 3832              		.align	2
 3833              	.L309:
 3834 0024 00000000 		.word	devAddr
 3835 0028 00000000 		.word	buffer
 3836              		.cfi_endproc
 3837              	.LFE83:
 3838              		.size	MPU6050_getSlave4InterruptEnabled, .-MPU6050_getSlave4InterruptEnabled
 3839              		.section	.text.MPU6050_setSlave4InterruptEnabled,"ax",%progbits
 3840              		.align	2
 3841              		.global	MPU6050_setSlave4InterruptEnabled
 3842              		.code	16
 3843              		.thumb_func
 3844              		.type	MPU6050_setSlave4InterruptEnabled, %function
 3845              	MPU6050_setSlave4InterruptEnabled:
 3846              	.LFB84:
1149:.\mpu6050.c   **** /** Set the enabled value for Slave 4 transaction interrupts.
1150:.\mpu6050.c   ****  * @param enabled New enabled value for Slave 4 transaction interrupts.
1151:.\mpu6050.c   ****  * @see getSlave4InterruptEnabled()
1152:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1153:.\mpu6050.c   ****  */
1154:.\mpu6050.c   **** void MPU6050_setSlave4InterruptEnabled(bool enabled) {
 3847              		.loc 1 1154 0
 3848              		.cfi_startproc
 3849 0000 80B5     		push	{r7, lr}
 3850              		.cfi_def_cfa_offset 8
 3851              		.cfi_offset 7, -8
 3852              		.cfi_offset 14, -4
 3853 0002 82B0     		sub	sp, sp, #8
 3854              		.cfi_def_cfa_offset 16
 3855 0004 00AF     		add	r7, sp, #0
 3856              		.cfi_def_cfa_register 7
 3857 0006 021C     		mov	r2, r0
 3858 0008 FB1D     		add	r3, r7, #7
 3859 000a 1A70     		strb	r2, [r3]
1155:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_INT_EN_BIT, enabled);
 3860              		.loc 1 1155 0
 3861 000c 054B     		ldr	r3, .L312
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 89


 3862 000e 1A78     		ldrb	r2, [r3]
 3863 0010 FB1D     		add	r3, r7, #7
 3864 0012 1B78     		ldrb	r3, [r3]
 3865 0014 101C     		mov	r0, r2
 3866 0016 3421     		mov	r1, #52
 3867 0018 0622     		mov	r2, #6
 3868 001a FFF7FEFF 		bl	I2CWriteBit
1156:.\mpu6050.c   **** }
 3869              		.loc 1 1156 0
 3870 001e BD46     		mov	sp, r7
 3871 0020 02B0     		add	sp, sp, #8
 3872              		@ sp needed
 3873 0022 80BD     		pop	{r7, pc}
 3874              	.L313:
 3875              		.align	2
 3876              	.L312:
 3877 0024 00000000 		.word	devAddr
 3878              		.cfi_endproc
 3879              	.LFE84:
 3880              		.size	MPU6050_setSlave4InterruptEnabled, .-MPU6050_setSlave4InterruptEnabled
 3881              		.section	.text.MPU6050_getSlave4WriteMode,"ax",%progbits
 3882              		.align	2
 3883              		.global	MPU6050_getSlave4WriteMode
 3884              		.code	16
 3885              		.thumb_func
 3886              		.type	MPU6050_getSlave4WriteMode, %function
 3887              	MPU6050_getSlave4WriteMode:
 3888              	.LFB85:
1157:.\mpu6050.c   **** /** Get write mode for Slave 4.
1158:.\mpu6050.c   ****  * When set to 1, the transaction will read or write data only. When cleared to
1159:.\mpu6050.c   ****  * 0, the transaction will write a register address prior to reading or writing
1160:.\mpu6050.c   ****  * data. This should equal 0 when specifying the register address within the
1161:.\mpu6050.c   ****  * Slave device to/from which the ensuing data transaction will take place.
1162:.\mpu6050.c   ****  *
1163:.\mpu6050.c   ****  * @return Current write mode for Slave 4 (0 = register address + data, 1 = data only)
1164:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1165:.\mpu6050.c   ****  */
1166:.\mpu6050.c   **** bool MPU6050_getSlave4WriteMode() {
 3889              		.loc 1 1166 0
 3890              		.cfi_startproc
 3891 0000 80B5     		push	{r7, lr}
 3892              		.cfi_def_cfa_offset 8
 3893              		.cfi_offset 7, -8
 3894              		.cfi_offset 14, -4
 3895 0002 00AF     		add	r7, sp, #0
 3896              		.cfi_def_cfa_register 7
1167:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_REG_DIS_BIT, buffer);
 3897              		.loc 1 1167 0
 3898 0004 074B     		ldr	r3, .L316
 3899 0006 1A78     		ldrb	r2, [r3]
 3900 0008 074B     		ldr	r3, .L316+4
 3901 000a 101C     		mov	r0, r2
 3902 000c 3421     		mov	r1, #52
 3903 000e 0522     		mov	r2, #5
 3904 0010 FFF7FEFF 		bl	I2CReadBit
1168:.\mpu6050.c   ****     return buffer[0];
 3905              		.loc 1 1168 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 90


 3906 0014 044B     		ldr	r3, .L316+4
 3907 0016 1B78     		ldrb	r3, [r3]
 3908 0018 5A1E     		sub	r2, r3, #1
 3909 001a 9341     		sbc	r3, r3, r2
 3910 001c DBB2     		uxtb	r3, r3
1169:.\mpu6050.c   **** }
 3911              		.loc 1 1169 0
 3912 001e 181C     		mov	r0, r3
 3913 0020 BD46     		mov	sp, r7
 3914              		@ sp needed
 3915 0022 80BD     		pop	{r7, pc}
 3916              	.L317:
 3917              		.align	2
 3918              	.L316:
 3919 0024 00000000 		.word	devAddr
 3920 0028 00000000 		.word	buffer
 3921              		.cfi_endproc
 3922              	.LFE85:
 3923              		.size	MPU6050_getSlave4WriteMode, .-MPU6050_getSlave4WriteMode
 3924              		.section	.text.MPU6050_setSlave4WriteMode,"ax",%progbits
 3925              		.align	2
 3926              		.global	MPU6050_setSlave4WriteMode
 3927              		.code	16
 3928              		.thumb_func
 3929              		.type	MPU6050_setSlave4WriteMode, %function
 3930              	MPU6050_setSlave4WriteMode:
 3931              	.LFB86:
1170:.\mpu6050.c   **** /** Set write mode for the Slave 4.
1171:.\mpu6050.c   ****  * @param mode New write mode for Slave 4 (0 = register address + data, 1 = data only)
1172:.\mpu6050.c   ****  * @see getSlave4WriteMode()
1173:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1174:.\mpu6050.c   ****  */
1175:.\mpu6050.c   **** void MPU6050_setSlave4WriteMode(bool mode) {
 3932              		.loc 1 1175 0
 3933              		.cfi_startproc
 3934 0000 80B5     		push	{r7, lr}
 3935              		.cfi_def_cfa_offset 8
 3936              		.cfi_offset 7, -8
 3937              		.cfi_offset 14, -4
 3938 0002 82B0     		sub	sp, sp, #8
 3939              		.cfi_def_cfa_offset 16
 3940 0004 00AF     		add	r7, sp, #0
 3941              		.cfi_def_cfa_register 7
 3942 0006 021C     		mov	r2, r0
 3943 0008 FB1D     		add	r3, r7, #7
 3944 000a 1A70     		strb	r2, [r3]
1176:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_REG_DIS_BIT, mode);
 3945              		.loc 1 1176 0
 3946 000c 054B     		ldr	r3, .L319
 3947 000e 1A78     		ldrb	r2, [r3]
 3948 0010 FB1D     		add	r3, r7, #7
 3949 0012 1B78     		ldrb	r3, [r3]
 3950 0014 101C     		mov	r0, r2
 3951 0016 3421     		mov	r1, #52
 3952 0018 0522     		mov	r2, #5
 3953 001a FFF7FEFF 		bl	I2CWriteBit
1177:.\mpu6050.c   **** }
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 91


 3954              		.loc 1 1177 0
 3955 001e BD46     		mov	sp, r7
 3956 0020 02B0     		add	sp, sp, #8
 3957              		@ sp needed
 3958 0022 80BD     		pop	{r7, pc}
 3959              	.L320:
 3960              		.align	2
 3961              	.L319:
 3962 0024 00000000 		.word	devAddr
 3963              		.cfi_endproc
 3964              	.LFE86:
 3965              		.size	MPU6050_setSlave4WriteMode, .-MPU6050_setSlave4WriteMode
 3966              		.section	.text.MPU6050_getSlave4MasterDelay,"ax",%progbits
 3967              		.align	2
 3968              		.global	MPU6050_getSlave4MasterDelay
 3969              		.code	16
 3970              		.thumb_func
 3971              		.type	MPU6050_getSlave4MasterDelay, %function
 3972              	MPU6050_getSlave4MasterDelay:
 3973              	.LFB87:
1178:.\mpu6050.c   **** /** Get Slave 4 master delay value.
1179:.\mpu6050.c   ****  * This configures the reduced access rate of I2C slaves relative to the Sample
1180:.\mpu6050.c   ****  * Rate. When a slave's access rate is decreased relative to the Sample Rate,
1181:.\mpu6050.c   ****  * the slave is accessed every:
1182:.\mpu6050.c   ****  *
1183:.\mpu6050.c   ****  *     1 / (1 + I2C_MST_DLY) samples
1184:.\mpu6050.c   ****  *
1185:.\mpu6050.c   ****  * This base Sample Rate in turn is determined by SMPLRT_DIV (register 25) and
1186:.\mpu6050.c   ****  * DLPF_CFG (register 26). Whether a slave's access rate is reduced relative to
1187:.\mpu6050.c   ****  * the Sample Rate is determined by I2C_MST_DELAY_CTRL (register 103). For
1188:.\mpu6050.c   ****  * further information regarding the Sample Rate, please refer to register 25.
1189:.\mpu6050.c   ****  *
1190:.\mpu6050.c   ****  * @return Current Slave 4 master delay value
1191:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1192:.\mpu6050.c   ****  */
1193:.\mpu6050.c   **** uint8_t MPU6050_getSlave4MasterDelay() {
 3974              		.loc 1 1193 0
 3975              		.cfi_startproc
 3976 0000 80B5     		push	{r7, lr}
 3977              		.cfi_def_cfa_offset 8
 3978              		.cfi_offset 7, -8
 3979              		.cfi_offset 14, -4
 3980 0002 82B0     		sub	sp, sp, #8
 3981              		.cfi_def_cfa_offset 16
 3982 0004 02AF     		add	r7, sp, #8
 3983              		.cfi_def_cfa 7, 8
1194:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_MST_DLY_BIT, I2C_MPU6050_I2
 3984              		.loc 1 1194 0
 3985 0006 074B     		ldr	r3, .L323
 3986 0008 1A78     		ldrb	r2, [r3]
 3987 000a 074B     		ldr	r3, .L323+4
 3988 000c 0093     		str	r3, [sp]
 3989 000e 101C     		mov	r0, r2
 3990 0010 3421     		mov	r1, #52
 3991 0012 0422     		mov	r2, #4
 3992 0014 0523     		mov	r3, #5
 3993 0016 FFF7FEFF 		bl	I2CReadBits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 92


1195:.\mpu6050.c   ****     return buffer[0];
 3994              		.loc 1 1195 0
 3995 001a 034B     		ldr	r3, .L323+4
 3996 001c 1B78     		ldrb	r3, [r3]
1196:.\mpu6050.c   **** }
 3997              		.loc 1 1196 0
 3998 001e 181C     		mov	r0, r3
 3999 0020 BD46     		mov	sp, r7
 4000              		@ sp needed
 4001 0022 80BD     		pop	{r7, pc}
 4002              	.L324:
 4003              		.align	2
 4004              	.L323:
 4005 0024 00000000 		.word	devAddr
 4006 0028 00000000 		.word	buffer
 4007              		.cfi_endproc
 4008              	.LFE87:
 4009              		.size	MPU6050_getSlave4MasterDelay, .-MPU6050_getSlave4MasterDelay
 4010              		.section	.text.MPU6050_setSlave4MasterDelay,"ax",%progbits
 4011              		.align	2
 4012              		.global	MPU6050_setSlave4MasterDelay
 4013              		.code	16
 4014              		.thumb_func
 4015              		.type	MPU6050_setSlave4MasterDelay, %function
 4016              	MPU6050_setSlave4MasterDelay:
 4017              	.LFB88:
1197:.\mpu6050.c   **** /** Set Slave 4 master delay value.
1198:.\mpu6050.c   ****  * @param delay New Slave 4 master delay value
1199:.\mpu6050.c   ****  * @see getSlave4MasterDelay()
1200:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1201:.\mpu6050.c   ****  */
1202:.\mpu6050.c   **** void MPU6050_setSlave4MasterDelay(uint8_t delay) {
 4018              		.loc 1 1202 0
 4019              		.cfi_startproc
 4020 0000 80B5     		push	{r7, lr}
 4021              		.cfi_def_cfa_offset 8
 4022              		.cfi_offset 7, -8
 4023              		.cfi_offset 14, -4
 4024 0002 84B0     		sub	sp, sp, #16
 4025              		.cfi_def_cfa_offset 24
 4026 0004 02AF     		add	r7, sp, #8
 4027              		.cfi_def_cfa 7, 16
 4028 0006 021C     		mov	r2, r0
 4029 0008 FB1D     		add	r3, r7, #7
 4030 000a 1A70     		strb	r2, [r3]
1203:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_MST_DLY_BIT, I2C_MPU6050_I
 4031              		.loc 1 1203 0
 4032 000c 064B     		ldr	r3, .L326
 4033 000e 1A78     		ldrb	r2, [r3]
 4034 0010 FB1D     		add	r3, r7, #7
 4035 0012 1B78     		ldrb	r3, [r3]
 4036 0014 0093     		str	r3, [sp]
 4037 0016 101C     		mov	r0, r2
 4038 0018 3421     		mov	r1, #52
 4039 001a 0422     		mov	r2, #4
 4040 001c 0523     		mov	r3, #5
 4041 001e FFF7FEFF 		bl	I2CWriteBits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 93


1204:.\mpu6050.c   **** }
 4042              		.loc 1 1204 0
 4043 0022 BD46     		mov	sp, r7
 4044 0024 02B0     		add	sp, sp, #8
 4045              		@ sp needed
 4046 0026 80BD     		pop	{r7, pc}
 4047              	.L327:
 4048              		.align	2
 4049              	.L326:
 4050 0028 00000000 		.word	devAddr
 4051              		.cfi_endproc
 4052              	.LFE88:
 4053              		.size	MPU6050_setSlave4MasterDelay, .-MPU6050_setSlave4MasterDelay
 4054              		.section	.text.MPU6050_getSlate4InputByte,"ax",%progbits
 4055              		.align	2
 4056              		.global	MPU6050_getSlate4InputByte
 4057              		.code	16
 4058              		.thumb_func
 4059              		.type	MPU6050_getSlate4InputByte, %function
 4060              	MPU6050_getSlate4InputByte:
 4061              	.LFB89:
1205:.\mpu6050.c   **** /** Get last available byte read from Slave 4.
1206:.\mpu6050.c   ****  * This register stores the data read from Slave 4. This field is populated
1207:.\mpu6050.c   ****  * after a read transaction.
1208:.\mpu6050.c   ****  * @return Last available byte read from to Slave 4
1209:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_DI
1210:.\mpu6050.c   ****  */
1211:.\mpu6050.c   **** uint8_t MPU6050_getSlate4InputByte() {
 4062              		.loc 1 1211 0
 4063              		.cfi_startproc
 4064 0000 80B5     		push	{r7, lr}
 4065              		.cfi_def_cfa_offset 8
 4066              		.cfi_offset 7, -8
 4067              		.cfi_offset 14, -4
 4068 0002 00AF     		add	r7, sp, #0
 4069              		.cfi_def_cfa_register 7
1212:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV4_DI, buffer);
 4070              		.loc 1 1212 0
 4071 0004 064B     		ldr	r3, .L330
 4072 0006 1A78     		ldrb	r2, [r3]
 4073 0008 064B     		ldr	r3, .L330+4
 4074 000a 101C     		mov	r0, r2
 4075 000c 3521     		mov	r1, #53
 4076 000e 1A1C     		mov	r2, r3
 4077 0010 FFF7FEFF 		bl	I2CReadByte
1213:.\mpu6050.c   ****     return buffer[0];
 4078              		.loc 1 1213 0
 4079 0014 034B     		ldr	r3, .L330+4
 4080 0016 1B78     		ldrb	r3, [r3]
1214:.\mpu6050.c   **** }
 4081              		.loc 1 1214 0
 4082 0018 181C     		mov	r0, r3
 4083 001a BD46     		mov	sp, r7
 4084              		@ sp needed
 4085 001c 80BD     		pop	{r7, pc}
 4086              	.L331:
 4087 001e C046     		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 94


 4088              	.L330:
 4089 0020 00000000 		.word	devAddr
 4090 0024 00000000 		.word	buffer
 4091              		.cfi_endproc
 4092              	.LFE89:
 4093              		.size	MPU6050_getSlate4InputByte, .-MPU6050_getSlate4InputByte
 4094              		.section	.text.MPU6050_getPassthroughStatus,"ax",%progbits
 4095              		.align	2
 4096              		.global	MPU6050_getPassthroughStatus
 4097              		.code	16
 4098              		.thumb_func
 4099              		.type	MPU6050_getPassthroughStatus, %function
 4100              	MPU6050_getPassthroughStatus:
 4101              	.LFB90:
1215:.\mpu6050.c   **** 
1216:.\mpu6050.c   **** // I2C_MST_STATUS register
1217:.\mpu6050.c   **** 
1218:.\mpu6050.c   **** /** Get FSYNC interrupt status.
1219:.\mpu6050.c   ****  * This bit reflects the status of the FSYNC interrupt from an external device
1220:.\mpu6050.c   ****  * into the MPU-60X0. This is used as a way to pass an external interrupt
1221:.\mpu6050.c   ****  * through the MPU-60X0 to the host application processor. When set to 1, this
1222:.\mpu6050.c   ****  * bit will cause an interrupt if FSYNC_INT_EN is asserted in INT_PIN_CFG
1223:.\mpu6050.c   ****  * (Register 55).
1224:.\mpu6050.c   ****  * @return FSYNC interrupt status
1225:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1226:.\mpu6050.c   ****  */
1227:.\mpu6050.c   **** bool MPU6050_getPassthroughStatus() {
 4102              		.loc 1 1227 0
 4103              		.cfi_startproc
 4104 0000 80B5     		push	{r7, lr}
 4105              		.cfi_def_cfa_offset 8
 4106              		.cfi_offset 7, -8
 4107              		.cfi_offset 14, -4
 4108 0002 00AF     		add	r7, sp, #0
 4109              		.cfi_def_cfa_register 7
1228:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_PASS_THROUGH_BIT, buffer);
 4110              		.loc 1 1228 0
 4111 0004 074B     		ldr	r3, .L334
 4112 0006 1A78     		ldrb	r2, [r3]
 4113 0008 074B     		ldr	r3, .L334+4
 4114 000a 101C     		mov	r0, r2
 4115 000c 3621     		mov	r1, #54
 4116 000e 0722     		mov	r2, #7
 4117 0010 FFF7FEFF 		bl	I2CReadBit
1229:.\mpu6050.c   ****     return buffer[0];
 4118              		.loc 1 1229 0
 4119 0014 044B     		ldr	r3, .L334+4
 4120 0016 1B78     		ldrb	r3, [r3]
 4121 0018 5A1E     		sub	r2, r3, #1
 4122 001a 9341     		sbc	r3, r3, r2
 4123 001c DBB2     		uxtb	r3, r3
1230:.\mpu6050.c   **** }
 4124              		.loc 1 1230 0
 4125 001e 181C     		mov	r0, r3
 4126 0020 BD46     		mov	sp, r7
 4127              		@ sp needed
 4128 0022 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 95


 4129              	.L335:
 4130              		.align	2
 4131              	.L334:
 4132 0024 00000000 		.word	devAddr
 4133 0028 00000000 		.word	buffer
 4134              		.cfi_endproc
 4135              	.LFE90:
 4136              		.size	MPU6050_getPassthroughStatus, .-MPU6050_getPassthroughStatus
 4137              		.section	.text.MPU6050_getSlave4IsDone,"ax",%progbits
 4138              		.align	2
 4139              		.global	MPU6050_getSlave4IsDone
 4140              		.code	16
 4141              		.thumb_func
 4142              		.type	MPU6050_getSlave4IsDone, %function
 4143              	MPU6050_getSlave4IsDone:
 4144              	.LFB91:
1231:.\mpu6050.c   **** /** Get Slave 4 transaction done status.
1232:.\mpu6050.c   ****  * Automatically sets to 1 when a Slave 4 transaction has completed. This
1233:.\mpu6050.c   ****  * triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register
1234:.\mpu6050.c   ****  * (Register 56) is asserted and if the SLV_4_DONE_INT bit is asserted in the
1235:.\mpu6050.c   ****  * I2C_SLV4_CTRL register (Register 52).
1236:.\mpu6050.c   ****  * @return Slave 4 transaction done status
1237:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1238:.\mpu6050.c   ****  */
1239:.\mpu6050.c   **** bool MPU6050_getSlave4IsDone() {
 4145              		.loc 1 1239 0
 4146              		.cfi_startproc
 4147 0000 80B5     		push	{r7, lr}
 4148              		.cfi_def_cfa_offset 8
 4149              		.cfi_offset 7, -8
 4150              		.cfi_offset 14, -4
 4151 0002 00AF     		add	r7, sp, #0
 4152              		.cfi_def_cfa_register 7
1240:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV4_DONE_BIT, buffer);
 4153              		.loc 1 1240 0
 4154 0004 074B     		ldr	r3, .L338
 4155 0006 1A78     		ldrb	r2, [r3]
 4156 0008 074B     		ldr	r3, .L338+4
 4157 000a 101C     		mov	r0, r2
 4158 000c 3621     		mov	r1, #54
 4159 000e 0622     		mov	r2, #6
 4160 0010 FFF7FEFF 		bl	I2CReadBit
1241:.\mpu6050.c   ****     return buffer[0];
 4161              		.loc 1 1241 0
 4162 0014 044B     		ldr	r3, .L338+4
 4163 0016 1B78     		ldrb	r3, [r3]
 4164 0018 5A1E     		sub	r2, r3, #1
 4165 001a 9341     		sbc	r3, r3, r2
 4166 001c DBB2     		uxtb	r3, r3
1242:.\mpu6050.c   **** }
 4167              		.loc 1 1242 0
 4168 001e 181C     		mov	r0, r3
 4169 0020 BD46     		mov	sp, r7
 4170              		@ sp needed
 4171 0022 80BD     		pop	{r7, pc}
 4172              	.L339:
 4173              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 96


 4174              	.L338:
 4175 0024 00000000 		.word	devAddr
 4176 0028 00000000 		.word	buffer
 4177              		.cfi_endproc
 4178              	.LFE91:
 4179              		.size	MPU6050_getSlave4IsDone, .-MPU6050_getSlave4IsDone
 4180              		.section	.text.MPU6050_getLostArbitration,"ax",%progbits
 4181              		.align	2
 4182              		.global	MPU6050_getLostArbitration
 4183              		.code	16
 4184              		.thumb_func
 4185              		.type	MPU6050_getLostArbitration, %function
 4186              	MPU6050_getLostArbitration:
 4187              	.LFB92:
1243:.\mpu6050.c   **** /** Get master arbitration lost status.
1244:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master has lost arbitration of
1245:.\mpu6050.c   ****  * the auxiliary I2C bus (an error condition). This triggers an interrupt if the
1246:.\mpu6050.c   ****  * I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted.
1247:.\mpu6050.c   ****  * @return Master arbitration lost status
1248:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1249:.\mpu6050.c   ****  */
1250:.\mpu6050.c   **** bool MPU6050_getLostArbitration() {
 4188              		.loc 1 1250 0
 4189              		.cfi_startproc
 4190 0000 80B5     		push	{r7, lr}
 4191              		.cfi_def_cfa_offset 8
 4192              		.cfi_offset 7, -8
 4193              		.cfi_offset 14, -4
 4194 0002 00AF     		add	r7, sp, #0
 4195              		.cfi_def_cfa_register 7
1251:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_LOST_ARB_BIT, buffer);
 4196              		.loc 1 1251 0
 4197 0004 074B     		ldr	r3, .L342
 4198 0006 1A78     		ldrb	r2, [r3]
 4199 0008 074B     		ldr	r3, .L342+4
 4200 000a 101C     		mov	r0, r2
 4201 000c 3621     		mov	r1, #54
 4202 000e 0522     		mov	r2, #5
 4203 0010 FFF7FEFF 		bl	I2CReadBit
1252:.\mpu6050.c   ****     return buffer[0];
 4204              		.loc 1 1252 0
 4205 0014 044B     		ldr	r3, .L342+4
 4206 0016 1B78     		ldrb	r3, [r3]
 4207 0018 5A1E     		sub	r2, r3, #1
 4208 001a 9341     		sbc	r3, r3, r2
 4209 001c DBB2     		uxtb	r3, r3
1253:.\mpu6050.c   **** }
 4210              		.loc 1 1253 0
 4211 001e 181C     		mov	r0, r3
 4212 0020 BD46     		mov	sp, r7
 4213              		@ sp needed
 4214 0022 80BD     		pop	{r7, pc}
 4215              	.L343:
 4216              		.align	2
 4217              	.L342:
 4218 0024 00000000 		.word	devAddr
 4219 0028 00000000 		.word	buffer
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 97


 4220              		.cfi_endproc
 4221              	.LFE92:
 4222              		.size	MPU6050_getLostArbitration, .-MPU6050_getLostArbitration
 4223              		.section	.text.MPU6050_getSlave4Nack,"ax",%progbits
 4224              		.align	2
 4225              		.global	MPU6050_getSlave4Nack
 4226              		.code	16
 4227              		.thumb_func
 4228              		.type	MPU6050_getSlave4Nack, %function
 4229              	MPU6050_getSlave4Nack:
 4230              	.LFB93:
1254:.\mpu6050.c   **** /** Get Slave 4 NACK status.
1255:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1256:.\mpu6050.c   ****  * transaction with Slave 4. This triggers an interrupt if the I2C_MST_INT_EN
1257:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1258:.\mpu6050.c   ****  * @return Slave 4 NACK interrupt status
1259:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1260:.\mpu6050.c   ****  */
1261:.\mpu6050.c   **** bool MPU6050_getSlave4Nack() {
 4231              		.loc 1 1261 0
 4232              		.cfi_startproc
 4233 0000 80B5     		push	{r7, lr}
 4234              		.cfi_def_cfa_offset 8
 4235              		.cfi_offset 7, -8
 4236              		.cfi_offset 14, -4
 4237 0002 00AF     		add	r7, sp, #0
 4238              		.cfi_def_cfa_register 7
1262:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV4_NACK_BIT, buffer);
 4239              		.loc 1 1262 0
 4240 0004 074B     		ldr	r3, .L346
 4241 0006 1A78     		ldrb	r2, [r3]
 4242 0008 074B     		ldr	r3, .L346+4
 4243 000a 101C     		mov	r0, r2
 4244 000c 3621     		mov	r1, #54
 4245 000e 0422     		mov	r2, #4
 4246 0010 FFF7FEFF 		bl	I2CReadBit
1263:.\mpu6050.c   ****     return buffer[0];
 4247              		.loc 1 1263 0
 4248 0014 044B     		ldr	r3, .L346+4
 4249 0016 1B78     		ldrb	r3, [r3]
 4250 0018 5A1E     		sub	r2, r3, #1
 4251 001a 9341     		sbc	r3, r3, r2
 4252 001c DBB2     		uxtb	r3, r3
1264:.\mpu6050.c   **** }
 4253              		.loc 1 1264 0
 4254 001e 181C     		mov	r0, r3
 4255 0020 BD46     		mov	sp, r7
 4256              		@ sp needed
 4257 0022 80BD     		pop	{r7, pc}
 4258              	.L347:
 4259              		.align	2
 4260              	.L346:
 4261 0024 00000000 		.word	devAddr
 4262 0028 00000000 		.word	buffer
 4263              		.cfi_endproc
 4264              	.LFE93:
 4265              		.size	MPU6050_getSlave4Nack, .-MPU6050_getSlave4Nack
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 98


 4266              		.section	.text.MPU6050_getSlave3Nack,"ax",%progbits
 4267              		.align	2
 4268              		.global	MPU6050_getSlave3Nack
 4269              		.code	16
 4270              		.thumb_func
 4271              		.type	MPU6050_getSlave3Nack, %function
 4272              	MPU6050_getSlave3Nack:
 4273              	.LFB94:
1265:.\mpu6050.c   **** /** Get Slave 3 NACK status.
1266:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1267:.\mpu6050.c   ****  * transaction with Slave 3. This triggers an interrupt if the I2C_MST_INT_EN
1268:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1269:.\mpu6050.c   ****  * @return Slave 3 NACK interrupt status
1270:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1271:.\mpu6050.c   ****  */
1272:.\mpu6050.c   **** bool MPU6050_getSlave3Nack() {
 4274              		.loc 1 1272 0
 4275              		.cfi_startproc
 4276 0000 80B5     		push	{r7, lr}
 4277              		.cfi_def_cfa_offset 8
 4278              		.cfi_offset 7, -8
 4279              		.cfi_offset 14, -4
 4280 0002 00AF     		add	r7, sp, #0
 4281              		.cfi_def_cfa_register 7
1273:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV3_NACK_BIT, buffer);
 4282              		.loc 1 1273 0
 4283 0004 074B     		ldr	r3, .L350
 4284 0006 1A78     		ldrb	r2, [r3]
 4285 0008 074B     		ldr	r3, .L350+4
 4286 000a 101C     		mov	r0, r2
 4287 000c 3621     		mov	r1, #54
 4288 000e 0322     		mov	r2, #3
 4289 0010 FFF7FEFF 		bl	I2CReadBit
1274:.\mpu6050.c   ****     return buffer[0];
 4290              		.loc 1 1274 0
 4291 0014 044B     		ldr	r3, .L350+4
 4292 0016 1B78     		ldrb	r3, [r3]
 4293 0018 5A1E     		sub	r2, r3, #1
 4294 001a 9341     		sbc	r3, r3, r2
 4295 001c DBB2     		uxtb	r3, r3
1275:.\mpu6050.c   **** }
 4296              		.loc 1 1275 0
 4297 001e 181C     		mov	r0, r3
 4298 0020 BD46     		mov	sp, r7
 4299              		@ sp needed
 4300 0022 80BD     		pop	{r7, pc}
 4301              	.L351:
 4302              		.align	2
 4303              	.L350:
 4304 0024 00000000 		.word	devAddr
 4305 0028 00000000 		.word	buffer
 4306              		.cfi_endproc
 4307              	.LFE94:
 4308              		.size	MPU6050_getSlave3Nack, .-MPU6050_getSlave3Nack
 4309              		.section	.text.MPU6050_getSlave2Nack,"ax",%progbits
 4310              		.align	2
 4311              		.global	MPU6050_getSlave2Nack
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 99


 4312              		.code	16
 4313              		.thumb_func
 4314              		.type	MPU6050_getSlave2Nack, %function
 4315              	MPU6050_getSlave2Nack:
 4316              	.LFB95:
1276:.\mpu6050.c   **** /** Get Slave 2 NACK status.
1277:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1278:.\mpu6050.c   ****  * transaction with Slave 2. This triggers an interrupt if the I2C_MST_INT_EN
1279:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1280:.\mpu6050.c   ****  * @return Slave 2 NACK interrupt status
1281:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1282:.\mpu6050.c   ****  */
1283:.\mpu6050.c   **** bool MPU6050_getSlave2Nack() {
 4317              		.loc 1 1283 0
 4318              		.cfi_startproc
 4319 0000 80B5     		push	{r7, lr}
 4320              		.cfi_def_cfa_offset 8
 4321              		.cfi_offset 7, -8
 4322              		.cfi_offset 14, -4
 4323 0002 00AF     		add	r7, sp, #0
 4324              		.cfi_def_cfa_register 7
1284:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV2_NACK_BIT, buffer);
 4325              		.loc 1 1284 0
 4326 0004 074B     		ldr	r3, .L354
 4327 0006 1A78     		ldrb	r2, [r3]
 4328 0008 074B     		ldr	r3, .L354+4
 4329 000a 101C     		mov	r0, r2
 4330 000c 3621     		mov	r1, #54
 4331 000e 0222     		mov	r2, #2
 4332 0010 FFF7FEFF 		bl	I2CReadBit
1285:.\mpu6050.c   ****     return buffer[0];
 4333              		.loc 1 1285 0
 4334 0014 044B     		ldr	r3, .L354+4
 4335 0016 1B78     		ldrb	r3, [r3]
 4336 0018 5A1E     		sub	r2, r3, #1
 4337 001a 9341     		sbc	r3, r3, r2
 4338 001c DBB2     		uxtb	r3, r3
1286:.\mpu6050.c   **** }
 4339              		.loc 1 1286 0
 4340 001e 181C     		mov	r0, r3
 4341 0020 BD46     		mov	sp, r7
 4342              		@ sp needed
 4343 0022 80BD     		pop	{r7, pc}
 4344              	.L355:
 4345              		.align	2
 4346              	.L354:
 4347 0024 00000000 		.word	devAddr
 4348 0028 00000000 		.word	buffer
 4349              		.cfi_endproc
 4350              	.LFE95:
 4351              		.size	MPU6050_getSlave2Nack, .-MPU6050_getSlave2Nack
 4352              		.section	.text.MPU6050_getSlave1Nack,"ax",%progbits
 4353              		.align	2
 4354              		.global	MPU6050_getSlave1Nack
 4355              		.code	16
 4356              		.thumb_func
 4357              		.type	MPU6050_getSlave1Nack, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 100


 4358              	MPU6050_getSlave1Nack:
 4359              	.LFB96:
1287:.\mpu6050.c   **** /** Get Slave 1 NACK status.
1288:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1289:.\mpu6050.c   ****  * transaction with Slave 1. This triggers an interrupt if the I2C_MST_INT_EN
1290:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1291:.\mpu6050.c   ****  * @return Slave 1 NACK interrupt status
1292:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1293:.\mpu6050.c   ****  */
1294:.\mpu6050.c   **** bool MPU6050_getSlave1Nack() {
 4360              		.loc 1 1294 0
 4361              		.cfi_startproc
 4362 0000 80B5     		push	{r7, lr}
 4363              		.cfi_def_cfa_offset 8
 4364              		.cfi_offset 7, -8
 4365              		.cfi_offset 14, -4
 4366 0002 00AF     		add	r7, sp, #0
 4367              		.cfi_def_cfa_register 7
1295:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV1_NACK_BIT, buffer);
 4368              		.loc 1 1295 0
 4369 0004 074B     		ldr	r3, .L358
 4370 0006 1A78     		ldrb	r2, [r3]
 4371 0008 074B     		ldr	r3, .L358+4
 4372 000a 101C     		mov	r0, r2
 4373 000c 3621     		mov	r1, #54
 4374 000e 0122     		mov	r2, #1
 4375 0010 FFF7FEFF 		bl	I2CReadBit
1296:.\mpu6050.c   ****     return buffer[0];
 4376              		.loc 1 1296 0
 4377 0014 044B     		ldr	r3, .L358+4
 4378 0016 1B78     		ldrb	r3, [r3]
 4379 0018 5A1E     		sub	r2, r3, #1
 4380 001a 9341     		sbc	r3, r3, r2
 4381 001c DBB2     		uxtb	r3, r3
1297:.\mpu6050.c   **** }
 4382              		.loc 1 1297 0
 4383 001e 181C     		mov	r0, r3
 4384 0020 BD46     		mov	sp, r7
 4385              		@ sp needed
 4386 0022 80BD     		pop	{r7, pc}
 4387              	.L359:
 4388              		.align	2
 4389              	.L358:
 4390 0024 00000000 		.word	devAddr
 4391 0028 00000000 		.word	buffer
 4392              		.cfi_endproc
 4393              	.LFE96:
 4394              		.size	MPU6050_getSlave1Nack, .-MPU6050_getSlave1Nack
 4395              		.section	.text.MPU6050_getSlave0Nack,"ax",%progbits
 4396              		.align	2
 4397              		.global	MPU6050_getSlave0Nack
 4398              		.code	16
 4399              		.thumb_func
 4400              		.type	MPU6050_getSlave0Nack, %function
 4401              	MPU6050_getSlave0Nack:
 4402              	.LFB97:
1298:.\mpu6050.c   **** /** Get Slave 0 NACK status.
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 101


1299:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1300:.\mpu6050.c   ****  * transaction with Slave 0. This triggers an interrupt if the I2C_MST_INT_EN
1301:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1302:.\mpu6050.c   ****  * @return Slave 0 NACK interrupt status
1303:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1304:.\mpu6050.c   ****  */
1305:.\mpu6050.c   **** bool MPU6050_getSlave0Nack() {
 4403              		.loc 1 1305 0
 4404              		.cfi_startproc
 4405 0000 80B5     		push	{r7, lr}
 4406              		.cfi_def_cfa_offset 8
 4407              		.cfi_offset 7, -8
 4408              		.cfi_offset 14, -4
 4409 0002 00AF     		add	r7, sp, #0
 4410              		.cfi_def_cfa_register 7
1306:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV0_NACK_BIT, buffer);
 4411              		.loc 1 1306 0
 4412 0004 074B     		ldr	r3, .L362
 4413 0006 1A78     		ldrb	r2, [r3]
 4414 0008 074B     		ldr	r3, .L362+4
 4415 000a 101C     		mov	r0, r2
 4416 000c 3621     		mov	r1, #54
 4417 000e 0022     		mov	r2, #0
 4418 0010 FFF7FEFF 		bl	I2CReadBit
1307:.\mpu6050.c   ****     return buffer[0];
 4419              		.loc 1 1307 0
 4420 0014 044B     		ldr	r3, .L362+4
 4421 0016 1B78     		ldrb	r3, [r3]
 4422 0018 5A1E     		sub	r2, r3, #1
 4423 001a 9341     		sbc	r3, r3, r2
 4424 001c DBB2     		uxtb	r3, r3
1308:.\mpu6050.c   **** }
 4425              		.loc 1 1308 0
 4426 001e 181C     		mov	r0, r3
 4427 0020 BD46     		mov	sp, r7
 4428              		@ sp needed
 4429 0022 80BD     		pop	{r7, pc}
 4430              	.L363:
 4431              		.align	2
 4432              	.L362:
 4433 0024 00000000 		.word	devAddr
 4434 0028 00000000 		.word	buffer
 4435              		.cfi_endproc
 4436              	.LFE97:
 4437              		.size	MPU6050_getSlave0Nack, .-MPU6050_getSlave0Nack
 4438              		.section	.text.MPU6050_getInterruptMode,"ax",%progbits
 4439              		.align	2
 4440              		.global	MPU6050_getInterruptMode
 4441              		.code	16
 4442              		.thumb_func
 4443              		.type	MPU6050_getInterruptMode, %function
 4444              	MPU6050_getInterruptMode:
 4445              	.LFB98:
1309:.\mpu6050.c   **** 
1310:.\mpu6050.c   **** // INT_PIN_CFG register
1311:.\mpu6050.c   **** 
1312:.\mpu6050.c   **** /** Get interrupt logic level mode.
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 102


1313:.\mpu6050.c   ****  * Will be set 0 for active-high, 1 for active-low.
1314:.\mpu6050.c   ****  * @return Current interrupt mode (0=active-high, 1=active-low)
1315:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1316:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_LEVEL_BIT
1317:.\mpu6050.c   ****  */
1318:.\mpu6050.c   **** bool MPU6050_getInterruptMode() {
 4446              		.loc 1 1318 0
 4447              		.cfi_startproc
 4448 0000 80B5     		push	{r7, lr}
 4449              		.cfi_def_cfa_offset 8
 4450              		.cfi_offset 7, -8
 4451              		.cfi_offset 14, -4
 4452 0002 00AF     		add	r7, sp, #0
 4453              		.cfi_def_cfa_register 7
1319:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, buffer);
 4454              		.loc 1 1319 0
 4455 0004 074B     		ldr	r3, .L366
 4456 0006 1A78     		ldrb	r2, [r3]
 4457 0008 074B     		ldr	r3, .L366+4
 4458 000a 101C     		mov	r0, r2
 4459 000c 3721     		mov	r1, #55
 4460 000e 0722     		mov	r2, #7
 4461 0010 FFF7FEFF 		bl	I2CReadBit
1320:.\mpu6050.c   ****     return buffer[0];
 4462              		.loc 1 1320 0
 4463 0014 044B     		ldr	r3, .L366+4
 4464 0016 1B78     		ldrb	r3, [r3]
 4465 0018 5A1E     		sub	r2, r3, #1
 4466 001a 9341     		sbc	r3, r3, r2
 4467 001c DBB2     		uxtb	r3, r3
1321:.\mpu6050.c   **** }
 4468              		.loc 1 1321 0
 4469 001e 181C     		mov	r0, r3
 4470 0020 BD46     		mov	sp, r7
 4471              		@ sp needed
 4472 0022 80BD     		pop	{r7, pc}
 4473              	.L367:
 4474              		.align	2
 4475              	.L366:
 4476 0024 00000000 		.word	devAddr
 4477 0028 00000000 		.word	buffer
 4478              		.cfi_endproc
 4479              	.LFE98:
 4480              		.size	MPU6050_getInterruptMode, .-MPU6050_getInterruptMode
 4481              		.section	.text.MPU6050_setInterruptMode,"ax",%progbits
 4482              		.align	2
 4483              		.global	MPU6050_setInterruptMode
 4484              		.code	16
 4485              		.thumb_func
 4486              		.type	MPU6050_setInterruptMode, %function
 4487              	MPU6050_setInterruptMode:
 4488              	.LFB99:
1322:.\mpu6050.c   **** /** Set interrupt logic level mode.
1323:.\mpu6050.c   ****  * @param mode New interrupt mode (0=active-high, 1=active-low)
1324:.\mpu6050.c   ****  * @see getInterruptMode()
1325:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1326:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_LEVEL_BIT
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 103


1327:.\mpu6050.c   ****  */
1328:.\mpu6050.c   **** void MPU6050_setInterruptMode(bool mode) {
 4489              		.loc 1 1328 0
 4490              		.cfi_startproc
 4491 0000 80B5     		push	{r7, lr}
 4492              		.cfi_def_cfa_offset 8
 4493              		.cfi_offset 7, -8
 4494              		.cfi_offset 14, -4
 4495 0002 82B0     		sub	sp, sp, #8
 4496              		.cfi_def_cfa_offset 16
 4497 0004 00AF     		add	r7, sp, #0
 4498              		.cfi_def_cfa_register 7
 4499 0006 021C     		mov	r2, r0
 4500 0008 FB1D     		add	r3, r7, #7
 4501 000a 1A70     		strb	r2, [r3]
1329:.\mpu6050.c   ****    I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, mode);
 4502              		.loc 1 1329 0
 4503 000c 054B     		ldr	r3, .L369
 4504 000e 1A78     		ldrb	r2, [r3]
 4505 0010 FB1D     		add	r3, r7, #7
 4506 0012 1B78     		ldrb	r3, [r3]
 4507 0014 101C     		mov	r0, r2
 4508 0016 3721     		mov	r1, #55
 4509 0018 0722     		mov	r2, #7
 4510 001a FFF7FEFF 		bl	I2CWriteBit
1330:.\mpu6050.c   **** }
 4511              		.loc 1 1330 0
 4512 001e BD46     		mov	sp, r7
 4513 0020 02B0     		add	sp, sp, #8
 4514              		@ sp needed
 4515 0022 80BD     		pop	{r7, pc}
 4516              	.L370:
 4517              		.align	2
 4518              	.L369:
 4519 0024 00000000 		.word	devAddr
 4520              		.cfi_endproc
 4521              	.LFE99:
 4522              		.size	MPU6050_setInterruptMode, .-MPU6050_setInterruptMode
 4523              		.section	.text.MPU6050_getInterruptDrive,"ax",%progbits
 4524              		.align	2
 4525              		.global	MPU6050_getInterruptDrive
 4526              		.code	16
 4527              		.thumb_func
 4528              		.type	MPU6050_getInterruptDrive, %function
 4529              	MPU6050_getInterruptDrive:
 4530              	.LFB100:
1331:.\mpu6050.c   **** /** Get interrupt drive mode.
1332:.\mpu6050.c   ****  * Will be set 0 for push-pull, 1 for open-drain.
1333:.\mpu6050.c   ****  * @return Current interrupt drive mode (0=push-pull, 1=open-drain)
1334:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1335:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_OPEN_BIT
1336:.\mpu6050.c   ****  */
1337:.\mpu6050.c   **** bool MPU6050_getInterruptDrive() {
 4531              		.loc 1 1337 0
 4532              		.cfi_startproc
 4533 0000 80B5     		push	{r7, lr}
 4534              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 104


 4535              		.cfi_offset 7, -8
 4536              		.cfi_offset 14, -4
 4537 0002 00AF     		add	r7, sp, #0
 4538              		.cfi_def_cfa_register 7
1338:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, buffer);
 4539              		.loc 1 1338 0
 4540 0004 074B     		ldr	r3, .L373
 4541 0006 1A78     		ldrb	r2, [r3]
 4542 0008 074B     		ldr	r3, .L373+4
 4543 000a 101C     		mov	r0, r2
 4544 000c 3721     		mov	r1, #55
 4545 000e 0622     		mov	r2, #6
 4546 0010 FFF7FEFF 		bl	I2CReadBit
1339:.\mpu6050.c   ****     return buffer[0];
 4547              		.loc 1 1339 0
 4548 0014 044B     		ldr	r3, .L373+4
 4549 0016 1B78     		ldrb	r3, [r3]
 4550 0018 5A1E     		sub	r2, r3, #1
 4551 001a 9341     		sbc	r3, r3, r2
 4552 001c DBB2     		uxtb	r3, r3
1340:.\mpu6050.c   **** }
 4553              		.loc 1 1340 0
 4554 001e 181C     		mov	r0, r3
 4555 0020 BD46     		mov	sp, r7
 4556              		@ sp needed
 4557 0022 80BD     		pop	{r7, pc}
 4558              	.L374:
 4559              		.align	2
 4560              	.L373:
 4561 0024 00000000 		.word	devAddr
 4562 0028 00000000 		.word	buffer
 4563              		.cfi_endproc
 4564              	.LFE100:
 4565              		.size	MPU6050_getInterruptDrive, .-MPU6050_getInterruptDrive
 4566              		.section	.text.MPU6050_setInterruptDrive,"ax",%progbits
 4567              		.align	2
 4568              		.global	MPU6050_setInterruptDrive
 4569              		.code	16
 4570              		.thumb_func
 4571              		.type	MPU6050_setInterruptDrive, %function
 4572              	MPU6050_setInterruptDrive:
 4573              	.LFB101:
1341:.\mpu6050.c   **** /** Set interrupt drive mode.
1342:.\mpu6050.c   ****  * @param drive New interrupt drive mode (0=push-pull, 1=open-drain)
1343:.\mpu6050.c   ****  * @see getInterruptDrive()
1344:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1345:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_OPEN_BIT
1346:.\mpu6050.c   ****  */
1347:.\mpu6050.c   **** void MPU6050_setInterruptDrive(bool drive) {
 4574              		.loc 1 1347 0
 4575              		.cfi_startproc
 4576 0000 80B5     		push	{r7, lr}
 4577              		.cfi_def_cfa_offset 8
 4578              		.cfi_offset 7, -8
 4579              		.cfi_offset 14, -4
 4580 0002 82B0     		sub	sp, sp, #8
 4581              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 105


 4582 0004 00AF     		add	r7, sp, #0
 4583              		.cfi_def_cfa_register 7
 4584 0006 021C     		mov	r2, r0
 4585 0008 FB1D     		add	r3, r7, #7
 4586 000a 1A70     		strb	r2, [r3]
1348:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, drive);
 4587              		.loc 1 1348 0
 4588 000c 054B     		ldr	r3, .L376
 4589 000e 1A78     		ldrb	r2, [r3]
 4590 0010 FB1D     		add	r3, r7, #7
 4591 0012 1B78     		ldrb	r3, [r3]
 4592 0014 101C     		mov	r0, r2
 4593 0016 3721     		mov	r1, #55
 4594 0018 0622     		mov	r2, #6
 4595 001a FFF7FEFF 		bl	I2CWriteBit
1349:.\mpu6050.c   **** }
 4596              		.loc 1 1349 0
 4597 001e BD46     		mov	sp, r7
 4598 0020 02B0     		add	sp, sp, #8
 4599              		@ sp needed
 4600 0022 80BD     		pop	{r7, pc}
 4601              	.L377:
 4602              		.align	2
 4603              	.L376:
 4604 0024 00000000 		.word	devAddr
 4605              		.cfi_endproc
 4606              	.LFE101:
 4607              		.size	MPU6050_setInterruptDrive, .-MPU6050_setInterruptDrive
 4608              		.section	.text.MPU6050_getInterruptLatch,"ax",%progbits
 4609              		.align	2
 4610              		.global	MPU6050_getInterruptLatch
 4611              		.code	16
 4612              		.thumb_func
 4613              		.type	MPU6050_getInterruptLatch, %function
 4614              	MPU6050_getInterruptLatch:
 4615              	.LFB102:
1350:.\mpu6050.c   **** /** Get interrupt latch mode.
1351:.\mpu6050.c   ****  * Will be set 0 for 50us-pulse, 1 for latch-until-int-cleared.
1352:.\mpu6050.c   ****  * @return Current latch mode (0=50us-pulse, 1=latch-until-int-cleared)
1353:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1354:.\mpu6050.c   ****  * @see MPU6050_INTCFG_LATCH_INT_EN_BIT
1355:.\mpu6050.c   ****  */
1356:.\mpu6050.c   **** bool MPU6050_getInterruptLatch() {
 4616              		.loc 1 1356 0
 4617              		.cfi_startproc
 4618 0000 80B5     		push	{r7, lr}
 4619              		.cfi_def_cfa_offset 8
 4620              		.cfi_offset 7, -8
 4621              		.cfi_offset 14, -4
 4622 0002 00AF     		add	r7, sp, #0
 4623              		.cfi_def_cfa_register 7
1357:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, buffer);
 4624              		.loc 1 1357 0
 4625 0004 074B     		ldr	r3, .L380
 4626 0006 1A78     		ldrb	r2, [r3]
 4627 0008 074B     		ldr	r3, .L380+4
 4628 000a 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 106


 4629 000c 3721     		mov	r1, #55
 4630 000e 0522     		mov	r2, #5
 4631 0010 FFF7FEFF 		bl	I2CReadBit
1358:.\mpu6050.c   ****     return buffer[0];
 4632              		.loc 1 1358 0
 4633 0014 044B     		ldr	r3, .L380+4
 4634 0016 1B78     		ldrb	r3, [r3]
 4635 0018 5A1E     		sub	r2, r3, #1
 4636 001a 9341     		sbc	r3, r3, r2
 4637 001c DBB2     		uxtb	r3, r3
1359:.\mpu6050.c   **** }
 4638              		.loc 1 1359 0
 4639 001e 181C     		mov	r0, r3
 4640 0020 BD46     		mov	sp, r7
 4641              		@ sp needed
 4642 0022 80BD     		pop	{r7, pc}
 4643              	.L381:
 4644              		.align	2
 4645              	.L380:
 4646 0024 00000000 		.word	devAddr
 4647 0028 00000000 		.word	buffer
 4648              		.cfi_endproc
 4649              	.LFE102:
 4650              		.size	MPU6050_getInterruptLatch, .-MPU6050_getInterruptLatch
 4651              		.section	.text.MPU6050_setInterruptLatch,"ax",%progbits
 4652              		.align	2
 4653              		.global	MPU6050_setInterruptLatch
 4654              		.code	16
 4655              		.thumb_func
 4656              		.type	MPU6050_setInterruptLatch, %function
 4657              	MPU6050_setInterruptLatch:
 4658              	.LFB103:
1360:.\mpu6050.c   **** /** Set interrupt latch mode.
1361:.\mpu6050.c   ****  * @param latch New latch mode (0=50us-pulse, 1=latch-until-int-cleared)
1362:.\mpu6050.c   ****  * @see getInterruptLatch()
1363:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1364:.\mpu6050.c   ****  * @see MPU6050_INTCFG_LATCH_INT_EN_BIT
1365:.\mpu6050.c   ****  */
1366:.\mpu6050.c   **** void MPU6050_setInterruptLatch(bool latch) {
 4659              		.loc 1 1366 0
 4660              		.cfi_startproc
 4661 0000 80B5     		push	{r7, lr}
 4662              		.cfi_def_cfa_offset 8
 4663              		.cfi_offset 7, -8
 4664              		.cfi_offset 14, -4
 4665 0002 82B0     		sub	sp, sp, #8
 4666              		.cfi_def_cfa_offset 16
 4667 0004 00AF     		add	r7, sp, #0
 4668              		.cfi_def_cfa_register 7
 4669 0006 021C     		mov	r2, r0
 4670 0008 FB1D     		add	r3, r7, #7
 4671 000a 1A70     		strb	r2, [r3]
1367:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, latch);
 4672              		.loc 1 1367 0
 4673 000c 054B     		ldr	r3, .L383
 4674 000e 1A78     		ldrb	r2, [r3]
 4675 0010 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 107


 4676 0012 1B78     		ldrb	r3, [r3]
 4677 0014 101C     		mov	r0, r2
 4678 0016 3721     		mov	r1, #55
 4679 0018 0522     		mov	r2, #5
 4680 001a FFF7FEFF 		bl	I2CWriteBit
1368:.\mpu6050.c   **** }
 4681              		.loc 1 1368 0
 4682 001e BD46     		mov	sp, r7
 4683 0020 02B0     		add	sp, sp, #8
 4684              		@ sp needed
 4685 0022 80BD     		pop	{r7, pc}
 4686              	.L384:
 4687              		.align	2
 4688              	.L383:
 4689 0024 00000000 		.word	devAddr
 4690              		.cfi_endproc
 4691              	.LFE103:
 4692              		.size	MPU6050_setInterruptLatch, .-MPU6050_setInterruptLatch
 4693              		.section	.text.MPU6050_getInterruptLatchClear,"ax",%progbits
 4694              		.align	2
 4695              		.global	MPU6050_getInterruptLatchClear
 4696              		.code	16
 4697              		.thumb_func
 4698              		.type	MPU6050_getInterruptLatchClear, %function
 4699              	MPU6050_getInterruptLatchClear:
 4700              	.LFB104:
1369:.\mpu6050.c   **** /** Get interrupt latch clear mode.
1370:.\mpu6050.c   ****  * Will be set 0 for status-read-only, 1 for any-register-read.
1371:.\mpu6050.c   ****  * @return Current latch clear mode (0=status-read-only, 1=any-register-read)
1372:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1373:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT
1374:.\mpu6050.c   ****  */
1375:.\mpu6050.c   **** bool MPU6050_getInterruptLatchClear() {
 4701              		.loc 1 1375 0
 4702              		.cfi_startproc
 4703 0000 80B5     		push	{r7, lr}
 4704              		.cfi_def_cfa_offset 8
 4705              		.cfi_offset 7, -8
 4706              		.cfi_offset 14, -4
 4707 0002 00AF     		add	r7, sp, #0
 4708              		.cfi_def_cfa_register 7
1376:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, buffer);
 4709              		.loc 1 1376 0
 4710 0004 074B     		ldr	r3, .L387
 4711 0006 1A78     		ldrb	r2, [r3]
 4712 0008 074B     		ldr	r3, .L387+4
 4713 000a 101C     		mov	r0, r2
 4714 000c 3721     		mov	r1, #55
 4715 000e 0422     		mov	r2, #4
 4716 0010 FFF7FEFF 		bl	I2CReadBit
1377:.\mpu6050.c   ****     return buffer[0];
 4717              		.loc 1 1377 0
 4718 0014 044B     		ldr	r3, .L387+4
 4719 0016 1B78     		ldrb	r3, [r3]
 4720 0018 5A1E     		sub	r2, r3, #1
 4721 001a 9341     		sbc	r3, r3, r2
 4722 001c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 108


1378:.\mpu6050.c   **** }
 4723              		.loc 1 1378 0
 4724 001e 181C     		mov	r0, r3
 4725 0020 BD46     		mov	sp, r7
 4726              		@ sp needed
 4727 0022 80BD     		pop	{r7, pc}
 4728              	.L388:
 4729              		.align	2
 4730              	.L387:
 4731 0024 00000000 		.word	devAddr
 4732 0028 00000000 		.word	buffer
 4733              		.cfi_endproc
 4734              	.LFE104:
 4735              		.size	MPU6050_getInterruptLatchClear, .-MPU6050_getInterruptLatchClear
 4736              		.section	.text.MPU6050_setInterruptLatchClear,"ax",%progbits
 4737              		.align	2
 4738              		.global	MPU6050_setInterruptLatchClear
 4739              		.code	16
 4740              		.thumb_func
 4741              		.type	MPU6050_setInterruptLatchClear, %function
 4742              	MPU6050_setInterruptLatchClear:
 4743              	.LFB105:
1379:.\mpu6050.c   **** /** Set interrupt latch clear mode.
1380:.\mpu6050.c   ****  * @param clear New latch clear mode (0=status-read-only, 1=any-register-read)
1381:.\mpu6050.c   ****  * @see getInterruptLatchClear()
1382:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1383:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT
1384:.\mpu6050.c   ****  */
1385:.\mpu6050.c   **** void MPU6050_setInterruptLatchClear(bool clear) {
 4744              		.loc 1 1385 0
 4745              		.cfi_startproc
 4746 0000 80B5     		push	{r7, lr}
 4747              		.cfi_def_cfa_offset 8
 4748              		.cfi_offset 7, -8
 4749              		.cfi_offset 14, -4
 4750 0002 82B0     		sub	sp, sp, #8
 4751              		.cfi_def_cfa_offset 16
 4752 0004 00AF     		add	r7, sp, #0
 4753              		.cfi_def_cfa_register 7
 4754 0006 021C     		mov	r2, r0
 4755 0008 FB1D     		add	r3, r7, #7
 4756 000a 1A70     		strb	r2, [r3]
1386:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, clear);
 4757              		.loc 1 1386 0
 4758 000c 054B     		ldr	r3, .L390
 4759 000e 1A78     		ldrb	r2, [r3]
 4760 0010 FB1D     		add	r3, r7, #7
 4761 0012 1B78     		ldrb	r3, [r3]
 4762 0014 101C     		mov	r0, r2
 4763 0016 3721     		mov	r1, #55
 4764 0018 0422     		mov	r2, #4
 4765 001a FFF7FEFF 		bl	I2CWriteBit
1387:.\mpu6050.c   **** }
 4766              		.loc 1 1387 0
 4767 001e BD46     		mov	sp, r7
 4768 0020 02B0     		add	sp, sp, #8
 4769              		@ sp needed
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 109


 4770 0022 80BD     		pop	{r7, pc}
 4771              	.L391:
 4772              		.align	2
 4773              	.L390:
 4774 0024 00000000 		.word	devAddr
 4775              		.cfi_endproc
 4776              	.LFE105:
 4777              		.size	MPU6050_setInterruptLatchClear, .-MPU6050_setInterruptLatchClear
 4778              		.section	.text.MPU6050_getFSyncInterruptLevel,"ax",%progbits
 4779              		.align	2
 4780              		.global	MPU6050_getFSyncInterruptLevel
 4781              		.code	16
 4782              		.thumb_func
 4783              		.type	MPU6050_getFSyncInterruptLevel, %function
 4784              	MPU6050_getFSyncInterruptLevel:
 4785              	.LFB106:
1388:.\mpu6050.c   **** /** Get FSYNC interrupt logic level mode.
1389:.\mpu6050.c   ****  * @return Current FSYNC interrupt mode (0=active-high, 1=active-low)
1390:.\mpu6050.c   ****  * @see getFSyncInterruptMode()
1391:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1392:.\mpu6050.c   ****  * @see MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT
1393:.\mpu6050.c   ****  */
1394:.\mpu6050.c   **** bool MPU6050_getFSyncInterruptLevel() {
 4786              		.loc 1 1394 0
 4787              		.cfi_startproc
 4788 0000 80B5     		push	{r7, lr}
 4789              		.cfi_def_cfa_offset 8
 4790              		.cfi_offset 7, -8
 4791              		.cfi_offset 14, -4
 4792 0002 00AF     		add	r7, sp, #0
 4793              		.cfi_def_cfa_register 7
1395:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT, buffer);
 4794              		.loc 1 1395 0
 4795 0004 074B     		ldr	r3, .L394
 4796 0006 1A78     		ldrb	r2, [r3]
 4797 0008 074B     		ldr	r3, .L394+4
 4798 000a 101C     		mov	r0, r2
 4799 000c 3721     		mov	r1, #55
 4800 000e 0322     		mov	r2, #3
 4801 0010 FFF7FEFF 		bl	I2CReadBit
1396:.\mpu6050.c   ****     return buffer[0];
 4802              		.loc 1 1396 0
 4803 0014 044B     		ldr	r3, .L394+4
 4804 0016 1B78     		ldrb	r3, [r3]
 4805 0018 5A1E     		sub	r2, r3, #1
 4806 001a 9341     		sbc	r3, r3, r2
 4807 001c DBB2     		uxtb	r3, r3
1397:.\mpu6050.c   **** }
 4808              		.loc 1 1397 0
 4809 001e 181C     		mov	r0, r3
 4810 0020 BD46     		mov	sp, r7
 4811              		@ sp needed
 4812 0022 80BD     		pop	{r7, pc}
 4813              	.L395:
 4814              		.align	2
 4815              	.L394:
 4816 0024 00000000 		.word	devAddr
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 110


 4817 0028 00000000 		.word	buffer
 4818              		.cfi_endproc
 4819              	.LFE106:
 4820              		.size	MPU6050_getFSyncInterruptLevel, .-MPU6050_getFSyncInterruptLevel
 4821              		.section	.text.MPU6050_setFSyncInterruptLevel,"ax",%progbits
 4822              		.align	2
 4823              		.global	MPU6050_setFSyncInterruptLevel
 4824              		.code	16
 4825              		.thumb_func
 4826              		.type	MPU6050_setFSyncInterruptLevel, %function
 4827              	MPU6050_setFSyncInterruptLevel:
 4828              	.LFB107:
1398:.\mpu6050.c   **** /** Set FSYNC interrupt logic level mode.
1399:.\mpu6050.c   ****  * @param mode New FSYNC interrupt mode (0=active-high, 1=active-low)
1400:.\mpu6050.c   ****  * @see getFSyncInterruptMode()
1401:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1402:.\mpu6050.c   ****  * @see MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT
1403:.\mpu6050.c   ****  */
1404:.\mpu6050.c   **** void MPU6050_setFSyncInterruptLevel(bool level) {
 4829              		.loc 1 1404 0
 4830              		.cfi_startproc
 4831 0000 80B5     		push	{r7, lr}
 4832              		.cfi_def_cfa_offset 8
 4833              		.cfi_offset 7, -8
 4834              		.cfi_offset 14, -4
 4835 0002 82B0     		sub	sp, sp, #8
 4836              		.cfi_def_cfa_offset 16
 4837 0004 00AF     		add	r7, sp, #0
 4838              		.cfi_def_cfa_register 7
 4839 0006 021C     		mov	r2, r0
 4840 0008 FB1D     		add	r3, r7, #7
 4841 000a 1A70     		strb	r2, [r3]
1405:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT, level);
 4842              		.loc 1 1405 0
 4843 000c 054B     		ldr	r3, .L397
 4844 000e 1A78     		ldrb	r2, [r3]
 4845 0010 FB1D     		add	r3, r7, #7
 4846 0012 1B78     		ldrb	r3, [r3]
 4847 0014 101C     		mov	r0, r2
 4848 0016 3721     		mov	r1, #55
 4849 0018 0322     		mov	r2, #3
 4850 001a FFF7FEFF 		bl	I2CWriteBit
1406:.\mpu6050.c   **** }
 4851              		.loc 1 1406 0
 4852 001e BD46     		mov	sp, r7
 4853 0020 02B0     		add	sp, sp, #8
 4854              		@ sp needed
 4855 0022 80BD     		pop	{r7, pc}
 4856              	.L398:
 4857              		.align	2
 4858              	.L397:
 4859 0024 00000000 		.word	devAddr
 4860              		.cfi_endproc
 4861              	.LFE107:
 4862              		.size	MPU6050_setFSyncInterruptLevel, .-MPU6050_setFSyncInterruptLevel
 4863              		.section	.text.MPU6050_getFSyncInterruptEnabled,"ax",%progbits
 4864              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 111


 4865              		.global	MPU6050_getFSyncInterruptEnabled
 4866              		.code	16
 4867              		.thumb_func
 4868              		.type	MPU6050_getFSyncInterruptEnabled, %function
 4869              	MPU6050_getFSyncInterruptEnabled:
 4870              	.LFB108:
1407:.\mpu6050.c   **** /** Get FSYNC pin interrupt enabled setting.
1408:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1409:.\mpu6050.c   ****  * @return Current interrupt enabled setting
1410:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1411:.\mpu6050.c   ****  * @see MPU6050_INTCFG_FSYNC_INT_EN_BIT
1412:.\mpu6050.c   ****  */
1413:.\mpu6050.c   **** bool MPU6050_getFSyncInterruptEnabled() {
 4871              		.loc 1 1413 0
 4872              		.cfi_startproc
 4873 0000 80B5     		push	{r7, lr}
 4874              		.cfi_def_cfa_offset 8
 4875              		.cfi_offset 7, -8
 4876              		.cfi_offset 14, -4
 4877 0002 00AF     		add	r7, sp, #0
 4878              		.cfi_def_cfa_register 7
1414:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_EN_BIT, buffer);
 4879              		.loc 1 1414 0
 4880 0004 074B     		ldr	r3, .L401
 4881 0006 1A78     		ldrb	r2, [r3]
 4882 0008 074B     		ldr	r3, .L401+4
 4883 000a 101C     		mov	r0, r2
 4884 000c 3721     		mov	r1, #55
 4885 000e 0222     		mov	r2, #2
 4886 0010 FFF7FEFF 		bl	I2CReadBit
1415:.\mpu6050.c   ****     return buffer[0];
 4887              		.loc 1 1415 0
 4888 0014 044B     		ldr	r3, .L401+4
 4889 0016 1B78     		ldrb	r3, [r3]
 4890 0018 5A1E     		sub	r2, r3, #1
 4891 001a 9341     		sbc	r3, r3, r2
 4892 001c DBB2     		uxtb	r3, r3
1416:.\mpu6050.c   **** }
 4893              		.loc 1 1416 0
 4894 001e 181C     		mov	r0, r3
 4895 0020 BD46     		mov	sp, r7
 4896              		@ sp needed
 4897 0022 80BD     		pop	{r7, pc}
 4898              	.L402:
 4899              		.align	2
 4900              	.L401:
 4901 0024 00000000 		.word	devAddr
 4902 0028 00000000 		.word	buffer
 4903              		.cfi_endproc
 4904              	.LFE108:
 4905              		.size	MPU6050_getFSyncInterruptEnabled, .-MPU6050_getFSyncInterruptEnabled
 4906              		.section	.text.MPU6050_setFSyncInterruptEnabled,"ax",%progbits
 4907              		.align	2
 4908              		.global	MPU6050_setFSyncInterruptEnabled
 4909              		.code	16
 4910              		.thumb_func
 4911              		.type	MPU6050_setFSyncInterruptEnabled, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 112


 4912              	MPU6050_setFSyncInterruptEnabled:
 4913              	.LFB109:
1417:.\mpu6050.c   **** /** Set FSYNC pin interrupt enabled setting.
1418:.\mpu6050.c   ****  * @param enabled New FSYNC pin interrupt enabled setting
1419:.\mpu6050.c   ****  * @see getFSyncInterruptEnabled()
1420:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1421:.\mpu6050.c   ****  * @see MPU6050_INTCFG_FSYNC_INT_EN_BIT
1422:.\mpu6050.c   ****  */
1423:.\mpu6050.c   **** void MPU6050_setFSyncInterruptEnabled(bool enabled) {
 4914              		.loc 1 1423 0
 4915              		.cfi_startproc
 4916 0000 80B5     		push	{r7, lr}
 4917              		.cfi_def_cfa_offset 8
 4918              		.cfi_offset 7, -8
 4919              		.cfi_offset 14, -4
 4920 0002 82B0     		sub	sp, sp, #8
 4921              		.cfi_def_cfa_offset 16
 4922 0004 00AF     		add	r7, sp, #0
 4923              		.cfi_def_cfa_register 7
 4924 0006 021C     		mov	r2, r0
 4925 0008 FB1D     		add	r3, r7, #7
 4926 000a 1A70     		strb	r2, [r3]
1424:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_EN_BIT, enabled);
 4927              		.loc 1 1424 0
 4928 000c 054B     		ldr	r3, .L404
 4929 000e 1A78     		ldrb	r2, [r3]
 4930 0010 FB1D     		add	r3, r7, #7
 4931 0012 1B78     		ldrb	r3, [r3]
 4932 0014 101C     		mov	r0, r2
 4933 0016 3721     		mov	r1, #55
 4934 0018 0222     		mov	r2, #2
 4935 001a FFF7FEFF 		bl	I2CWriteBit
1425:.\mpu6050.c   **** }
 4936              		.loc 1 1425 0
 4937 001e BD46     		mov	sp, r7
 4938 0020 02B0     		add	sp, sp, #8
 4939              		@ sp needed
 4940 0022 80BD     		pop	{r7, pc}
 4941              	.L405:
 4942              		.align	2
 4943              	.L404:
 4944 0024 00000000 		.word	devAddr
 4945              		.cfi_endproc
 4946              	.LFE109:
 4947              		.size	MPU6050_setFSyncInterruptEnabled, .-MPU6050_setFSyncInterruptEnabled
 4948              		.section	.text.MPU6050_getI2CBypassEnabled,"ax",%progbits
 4949              		.align	2
 4950              		.global	MPU6050_getI2CBypassEnabled
 4951              		.code	16
 4952              		.thumb_func
 4953              		.type	MPU6050_getI2CBypassEnabled, %function
 4954              	MPU6050_getI2CBypassEnabled:
 4955              	.LFB110:
1426:.\mpu6050.c   **** /** Get I2C bypass enabled status.
1427:.\mpu6050.c   ****  * When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to
1428:.\mpu6050.c   ****  * 0, the host application processor will be able to directly access the
1429:.\mpu6050.c   ****  * auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 113


1430:.\mpu6050.c   ****  * application processor will not be able to directly access the auxiliary I2C
1431:.\mpu6050.c   ****  * bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106
1432:.\mpu6050.c   ****  * bit[5]).
1433:.\mpu6050.c   ****  * @return Current I2C bypass enabled status
1434:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1435:.\mpu6050.c   ****  * @see MPU6050_INTCFG_I2C_BYPASS_EN_BIT
1436:.\mpu6050.c   ****  */
1437:.\mpu6050.c   **** bool MPU6050_getI2CBypassEnabled() {
 4956              		.loc 1 1437 0
 4957              		.cfi_startproc
 4958 0000 80B5     		push	{r7, lr}
 4959              		.cfi_def_cfa_offset 8
 4960              		.cfi_offset 7, -8
 4961              		.cfi_offset 14, -4
 4962 0002 00AF     		add	r7, sp, #0
 4963              		.cfi_def_cfa_register 7
1438:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, buffer);
 4964              		.loc 1 1438 0
 4965 0004 074B     		ldr	r3, .L408
 4966 0006 1A78     		ldrb	r2, [r3]
 4967 0008 074B     		ldr	r3, .L408+4
 4968 000a 101C     		mov	r0, r2
 4969 000c 3721     		mov	r1, #55
 4970 000e 0122     		mov	r2, #1
 4971 0010 FFF7FEFF 		bl	I2CReadBit
1439:.\mpu6050.c   ****     return buffer[0];
 4972              		.loc 1 1439 0
 4973 0014 044B     		ldr	r3, .L408+4
 4974 0016 1B78     		ldrb	r3, [r3]
 4975 0018 5A1E     		sub	r2, r3, #1
 4976 001a 9341     		sbc	r3, r3, r2
 4977 001c DBB2     		uxtb	r3, r3
1440:.\mpu6050.c   **** }
 4978              		.loc 1 1440 0
 4979 001e 181C     		mov	r0, r3
 4980 0020 BD46     		mov	sp, r7
 4981              		@ sp needed
 4982 0022 80BD     		pop	{r7, pc}
 4983              	.L409:
 4984              		.align	2
 4985              	.L408:
 4986 0024 00000000 		.word	devAddr
 4987 0028 00000000 		.word	buffer
 4988              		.cfi_endproc
 4989              	.LFE110:
 4990              		.size	MPU6050_getI2CBypassEnabled, .-MPU6050_getI2CBypassEnabled
 4991              		.section	.text.MPU6050_setI2CBypassEnabled,"ax",%progbits
 4992              		.align	2
 4993              		.global	MPU6050_setI2CBypassEnabled
 4994              		.code	16
 4995              		.thumb_func
 4996              		.type	MPU6050_setI2CBypassEnabled, %function
 4997              	MPU6050_setI2CBypassEnabled:
 4998              	.LFB111:
1441:.\mpu6050.c   **** /** Set I2C bypass enabled status.
1442:.\mpu6050.c   ****  * When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to
1443:.\mpu6050.c   ****  * 0, the host application processor will be able to directly access the
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 114


1444:.\mpu6050.c   ****  * auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host
1445:.\mpu6050.c   ****  * application processor will not be able to directly access the auxiliary I2C
1446:.\mpu6050.c   ****  * bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106
1447:.\mpu6050.c   ****  * bit[5]).
1448:.\mpu6050.c   ****  * @param enabled New I2C bypass enabled status
1449:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1450:.\mpu6050.c   ****  * @see MPU6050_INTCFG_I2C_BYPASS_EN_BIT
1451:.\mpu6050.c   ****  */
1452:.\mpu6050.c   **** void MPU6050_setI2CBypassEnabled(bool enabled) {
 4999              		.loc 1 1452 0
 5000              		.cfi_startproc
 5001 0000 80B5     		push	{r7, lr}
 5002              		.cfi_def_cfa_offset 8
 5003              		.cfi_offset 7, -8
 5004              		.cfi_offset 14, -4
 5005 0002 82B0     		sub	sp, sp, #8
 5006              		.cfi_def_cfa_offset 16
 5007 0004 00AF     		add	r7, sp, #0
 5008              		.cfi_def_cfa_register 7
 5009 0006 021C     		mov	r2, r0
 5010 0008 FB1D     		add	r3, r7, #7
 5011 000a 1A70     		strb	r2, [r3]
1453:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 5012              		.loc 1 1453 0
 5013 000c 054B     		ldr	r3, .L411
 5014 000e 1A78     		ldrb	r2, [r3]
 5015 0010 FB1D     		add	r3, r7, #7
 5016 0012 1B78     		ldrb	r3, [r3]
 5017 0014 101C     		mov	r0, r2
 5018 0016 3721     		mov	r1, #55
 5019 0018 0122     		mov	r2, #1
 5020 001a FFF7FEFF 		bl	I2CWriteBit
1454:.\mpu6050.c   **** }
 5021              		.loc 1 1454 0
 5022 001e BD46     		mov	sp, r7
 5023 0020 02B0     		add	sp, sp, #8
 5024              		@ sp needed
 5025 0022 80BD     		pop	{r7, pc}
 5026              	.L412:
 5027              		.align	2
 5028              	.L411:
 5029 0024 00000000 		.word	devAddr
 5030              		.cfi_endproc
 5031              	.LFE111:
 5032              		.size	MPU6050_setI2CBypassEnabled, .-MPU6050_setI2CBypassEnabled
 5033              		.section	.text.MPU6050_getClockOutputEnabled,"ax",%progbits
 5034              		.align	2
 5035              		.global	MPU6050_getClockOutputEnabled
 5036              		.code	16
 5037              		.thumb_func
 5038              		.type	MPU6050_getClockOutputEnabled, %function
 5039              	MPU6050_getClockOutputEnabled:
 5040              	.LFB112:
1455:.\mpu6050.c   **** /** Get reference clock output enabled status.
1456:.\mpu6050.c   ****  * When this bit is equal to 1, a reference clock output is provided at the
1457:.\mpu6050.c   ****  * CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For
1458:.\mpu6050.c   ****  * further information regarding CLKOUT, please refer to the MPU-60X0 Product
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 115


1459:.\mpu6050.c   ****  * Specification document.
1460:.\mpu6050.c   ****  * @return Current reference clock output enabled status
1461:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1462:.\mpu6050.c   ****  * @see MPU6050_INTCFG_CLKOUT_EN_BIT
1463:.\mpu6050.c   ****  */
1464:.\mpu6050.c   **** bool MPU6050_getClockOutputEnabled() {
 5041              		.loc 1 1464 0
 5042              		.cfi_startproc
 5043 0000 80B5     		push	{r7, lr}
 5044              		.cfi_def_cfa_offset 8
 5045              		.cfi_offset 7, -8
 5046              		.cfi_offset 14, -4
 5047 0002 00AF     		add	r7, sp, #0
 5048              		.cfi_def_cfa_register 7
1465:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_CLKOUT_EN_BIT, buffer);
 5049              		.loc 1 1465 0
 5050 0004 074B     		ldr	r3, .L415
 5051 0006 1A78     		ldrb	r2, [r3]
 5052 0008 074B     		ldr	r3, .L415+4
 5053 000a 101C     		mov	r0, r2
 5054 000c 3721     		mov	r1, #55
 5055 000e 0022     		mov	r2, #0
 5056 0010 FFF7FEFF 		bl	I2CReadBit
1466:.\mpu6050.c   ****     return buffer[0];
 5057              		.loc 1 1466 0
 5058 0014 044B     		ldr	r3, .L415+4
 5059 0016 1B78     		ldrb	r3, [r3]
 5060 0018 5A1E     		sub	r2, r3, #1
 5061 001a 9341     		sbc	r3, r3, r2
 5062 001c DBB2     		uxtb	r3, r3
1467:.\mpu6050.c   **** }
 5063              		.loc 1 1467 0
 5064 001e 181C     		mov	r0, r3
 5065 0020 BD46     		mov	sp, r7
 5066              		@ sp needed
 5067 0022 80BD     		pop	{r7, pc}
 5068              	.L416:
 5069              		.align	2
 5070              	.L415:
 5071 0024 00000000 		.word	devAddr
 5072 0028 00000000 		.word	buffer
 5073              		.cfi_endproc
 5074              	.LFE112:
 5075              		.size	MPU6050_getClockOutputEnabled, .-MPU6050_getClockOutputEnabled
 5076              		.section	.text.MPU6050_setClockOutputEnabled,"ax",%progbits
 5077              		.align	2
 5078              		.global	MPU6050_setClockOutputEnabled
 5079              		.code	16
 5080              		.thumb_func
 5081              		.type	MPU6050_setClockOutputEnabled, %function
 5082              	MPU6050_setClockOutputEnabled:
 5083              	.LFB113:
1468:.\mpu6050.c   **** /** Set reference clock output enabled status.
1469:.\mpu6050.c   ****  * When this bit is equal to 1, a reference clock output is provided at the
1470:.\mpu6050.c   ****  * CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For
1471:.\mpu6050.c   ****  * further information regarding CLKOUT, please refer to the MPU-60X0 Product
1472:.\mpu6050.c   ****  * Specification document.
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 116


1473:.\mpu6050.c   ****  * @param enabled New reference clock output enabled status
1474:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1475:.\mpu6050.c   ****  * @see MPU6050_INTCFG_CLKOUT_EN_BIT
1476:.\mpu6050.c   ****  */
1477:.\mpu6050.c   **** void MPU6050_setClockOutputEnabled(bool enabled) {
 5084              		.loc 1 1477 0
 5085              		.cfi_startproc
 5086 0000 80B5     		push	{r7, lr}
 5087              		.cfi_def_cfa_offset 8
 5088              		.cfi_offset 7, -8
 5089              		.cfi_offset 14, -4
 5090 0002 82B0     		sub	sp, sp, #8
 5091              		.cfi_def_cfa_offset 16
 5092 0004 00AF     		add	r7, sp, #0
 5093              		.cfi_def_cfa_register 7
 5094 0006 021C     		mov	r2, r0
 5095 0008 FB1D     		add	r3, r7, #7
 5096 000a 1A70     		strb	r2, [r3]
1478:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_CLKOUT_EN_BIT, enabled);
 5097              		.loc 1 1478 0
 5098 000c 054B     		ldr	r3, .L418
 5099 000e 1A78     		ldrb	r2, [r3]
 5100 0010 FB1D     		add	r3, r7, #7
 5101 0012 1B78     		ldrb	r3, [r3]
 5102 0014 101C     		mov	r0, r2
 5103 0016 3721     		mov	r1, #55
 5104 0018 0022     		mov	r2, #0
 5105 001a FFF7FEFF 		bl	I2CWriteBit
1479:.\mpu6050.c   **** }
 5106              		.loc 1 1479 0
 5107 001e BD46     		mov	sp, r7
 5108 0020 02B0     		add	sp, sp, #8
 5109              		@ sp needed
 5110 0022 80BD     		pop	{r7, pc}
 5111              	.L419:
 5112              		.align	2
 5113              	.L418:
 5114 0024 00000000 		.word	devAddr
 5115              		.cfi_endproc
 5116              	.LFE113:
 5117              		.size	MPU6050_setClockOutputEnabled, .-MPU6050_setClockOutputEnabled
 5118              		.section	.text.MPU6050_getIntEnabled,"ax",%progbits
 5119              		.align	2
 5120              		.global	MPU6050_getIntEnabled
 5121              		.code	16
 5122              		.thumb_func
 5123              		.type	MPU6050_getIntEnabled, %function
 5124              	MPU6050_getIntEnabled:
 5125              	.LFB114:
1480:.\mpu6050.c   **** 
1481:.\mpu6050.c   **** // INT_ENABLE register
1482:.\mpu6050.c   **** 
1483:.\mpu6050.c   **** /** Get full interrupt enabled status.
1484:.\mpu6050.c   ****  * Full register byte for all interrupts, for quick reading. Each bit will be
1485:.\mpu6050.c   ****  * set 0 for disabled, 1 for enabled.
1486:.\mpu6050.c   ****  * @return Current interrupt enabled status
1487:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 117


1488:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1489:.\mpu6050.c   ****  **/
1490:.\mpu6050.c   **** uint8_t MPU6050_getIntEnabled() {
 5126              		.loc 1 1490 0
 5127              		.cfi_startproc
 5128 0000 80B5     		push	{r7, lr}
 5129              		.cfi_def_cfa_offset 8
 5130              		.cfi_offset 7, -8
 5131              		.cfi_offset 14, -4
 5132 0002 00AF     		add	r7, sp, #0
 5133              		.cfi_def_cfa_register 7
1491:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_INT_ENABLE, buffer);
 5134              		.loc 1 1491 0
 5135 0004 064B     		ldr	r3, .L422
 5136 0006 1A78     		ldrb	r2, [r3]
 5137 0008 064B     		ldr	r3, .L422+4
 5138 000a 101C     		mov	r0, r2
 5139 000c 3821     		mov	r1, #56
 5140 000e 1A1C     		mov	r2, r3
 5141 0010 FFF7FEFF 		bl	I2CReadByte
1492:.\mpu6050.c   ****     return buffer[0];
 5142              		.loc 1 1492 0
 5143 0014 034B     		ldr	r3, .L422+4
 5144 0016 1B78     		ldrb	r3, [r3]
1493:.\mpu6050.c   **** }
 5145              		.loc 1 1493 0
 5146 0018 181C     		mov	r0, r3
 5147 001a BD46     		mov	sp, r7
 5148              		@ sp needed
 5149 001c 80BD     		pop	{r7, pc}
 5150              	.L423:
 5151 001e C046     		.align	2
 5152              	.L422:
 5153 0020 00000000 		.word	devAddr
 5154 0024 00000000 		.word	buffer
 5155              		.cfi_endproc
 5156              	.LFE114:
 5157              		.size	MPU6050_getIntEnabled, .-MPU6050_getIntEnabled
 5158              		.section	.text.MPU6050_setIntEnabled,"ax",%progbits
 5159              		.align	2
 5160              		.global	MPU6050_setIntEnabled
 5161              		.code	16
 5162              		.thumb_func
 5163              		.type	MPU6050_setIntEnabled, %function
 5164              	MPU6050_setIntEnabled:
 5165              	.LFB115:
1494:.\mpu6050.c   **** /** Set full interrupt enabled status.
1495:.\mpu6050.c   ****  * Full register byte for all interrupts, for quick reading. Each bit should be
1496:.\mpu6050.c   ****  * set 0 for disabled, 1 for enabled.
1497:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1498:.\mpu6050.c   ****  * @see getIntFreefallEnabled()
1499:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1500:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1501:.\mpu6050.c   ****  **/
1502:.\mpu6050.c   **** void MPU6050_setIntEnabled(uint8_t enabled) {
 5166              		.loc 1 1502 0
 5167              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 118


 5168 0000 80B5     		push	{r7, lr}
 5169              		.cfi_def_cfa_offset 8
 5170              		.cfi_offset 7, -8
 5171              		.cfi_offset 14, -4
 5172 0002 82B0     		sub	sp, sp, #8
 5173              		.cfi_def_cfa_offset 16
 5174 0004 00AF     		add	r7, sp, #0
 5175              		.cfi_def_cfa_register 7
 5176 0006 021C     		mov	r2, r0
 5177 0008 FB1D     		add	r3, r7, #7
 5178 000a 1A70     		strb	r2, [r3]
1503:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 5179              		.loc 1 1503 0
 5180 000c 054B     		ldr	r3, .L425
 5181 000e 1A78     		ldrb	r2, [r3]
 5182 0010 FB1D     		add	r3, r7, #7
 5183 0012 1B78     		ldrb	r3, [r3]
 5184 0014 101C     		mov	r0, r2
 5185 0016 3821     		mov	r1, #56
 5186 0018 1A1C     		mov	r2, r3
 5187 001a FFF7FEFF 		bl	I2CWriteByte
1504:.\mpu6050.c   **** }
 5188              		.loc 1 1504 0
 5189 001e BD46     		mov	sp, r7
 5190 0020 02B0     		add	sp, sp, #8
 5191              		@ sp needed
 5192 0022 80BD     		pop	{r7, pc}
 5193              	.L426:
 5194              		.align	2
 5195              	.L425:
 5196 0024 00000000 		.word	devAddr
 5197              		.cfi_endproc
 5198              	.LFE115:
 5199              		.size	MPU6050_setIntEnabled, .-MPU6050_setIntEnabled
 5200              		.section	.text.MPU6050_getIntFreefallEnabled,"ax",%progbits
 5201              		.align	2
 5202              		.global	MPU6050_getIntFreefallEnabled
 5203              		.code	16
 5204              		.thumb_func
 5205              		.type	MPU6050_getIntFreefallEnabled, %function
 5206              	MPU6050_getIntFreefallEnabled:
 5207              	.LFB116:
1505:.\mpu6050.c   **** /** Get Free Fall interrupt enabled status.
1506:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1507:.\mpu6050.c   ****  * @return Current interrupt enabled status
1508:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1509:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1510:.\mpu6050.c   ****  **/
1511:.\mpu6050.c   **** bool MPU6050_getIntFreefallEnabled() {
 5208              		.loc 1 1511 0
 5209              		.cfi_startproc
 5210 0000 80B5     		push	{r7, lr}
 5211              		.cfi_def_cfa_offset 8
 5212              		.cfi_offset 7, -8
 5213              		.cfi_offset 14, -4
 5214 0002 00AF     		add	r7, sp, #0
 5215              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 119


1512:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FF_BIT, buffer);
 5216              		.loc 1 1512 0
 5217 0004 074B     		ldr	r3, .L429
 5218 0006 1A78     		ldrb	r2, [r3]
 5219 0008 074B     		ldr	r3, .L429+4
 5220 000a 101C     		mov	r0, r2
 5221 000c 3821     		mov	r1, #56
 5222 000e 0722     		mov	r2, #7
 5223 0010 FFF7FEFF 		bl	I2CReadBit
1513:.\mpu6050.c   ****     return buffer[0];
 5224              		.loc 1 1513 0
 5225 0014 044B     		ldr	r3, .L429+4
 5226 0016 1B78     		ldrb	r3, [r3]
 5227 0018 5A1E     		sub	r2, r3, #1
 5228 001a 9341     		sbc	r3, r3, r2
 5229 001c DBB2     		uxtb	r3, r3
1514:.\mpu6050.c   **** }
 5230              		.loc 1 1514 0
 5231 001e 181C     		mov	r0, r3
 5232 0020 BD46     		mov	sp, r7
 5233              		@ sp needed
 5234 0022 80BD     		pop	{r7, pc}
 5235              	.L430:
 5236              		.align	2
 5237              	.L429:
 5238 0024 00000000 		.word	devAddr
 5239 0028 00000000 		.word	buffer
 5240              		.cfi_endproc
 5241              	.LFE116:
 5242              		.size	MPU6050_getIntFreefallEnabled, .-MPU6050_getIntFreefallEnabled
 5243              		.section	.text.MPU6050_setIntFreefallEnabled,"ax",%progbits
 5244              		.align	2
 5245              		.global	MPU6050_setIntFreefallEnabled
 5246              		.code	16
 5247              		.thumb_func
 5248              		.type	MPU6050_setIntFreefallEnabled, %function
 5249              	MPU6050_setIntFreefallEnabled:
 5250              	.LFB117:
1515:.\mpu6050.c   **** /** Set Free Fall interrupt enabled status.
1516:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1517:.\mpu6050.c   ****  * @see getIntFreefallEnabled()
1518:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1519:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1520:.\mpu6050.c   ****  **/
1521:.\mpu6050.c   **** void MPU6050_setIntFreefallEnabled(bool enabled) {
 5251              		.loc 1 1521 0
 5252              		.cfi_startproc
 5253 0000 80B5     		push	{r7, lr}
 5254              		.cfi_def_cfa_offset 8
 5255              		.cfi_offset 7, -8
 5256              		.cfi_offset 14, -4
 5257 0002 82B0     		sub	sp, sp, #8
 5258              		.cfi_def_cfa_offset 16
 5259 0004 00AF     		add	r7, sp, #0
 5260              		.cfi_def_cfa_register 7
 5261 0006 021C     		mov	r2, r0
 5262 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 120


 5263 000a 1A70     		strb	r2, [r3]
1522:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FF_BIT, enabled);
 5264              		.loc 1 1522 0
 5265 000c 054B     		ldr	r3, .L432
 5266 000e 1A78     		ldrb	r2, [r3]
 5267 0010 FB1D     		add	r3, r7, #7
 5268 0012 1B78     		ldrb	r3, [r3]
 5269 0014 101C     		mov	r0, r2
 5270 0016 3821     		mov	r1, #56
 5271 0018 0722     		mov	r2, #7
 5272 001a FFF7FEFF 		bl	I2CWriteBit
1523:.\mpu6050.c   **** }
 5273              		.loc 1 1523 0
 5274 001e BD46     		mov	sp, r7
 5275 0020 02B0     		add	sp, sp, #8
 5276              		@ sp needed
 5277 0022 80BD     		pop	{r7, pc}
 5278              	.L433:
 5279              		.align	2
 5280              	.L432:
 5281 0024 00000000 		.word	devAddr
 5282              		.cfi_endproc
 5283              	.LFE117:
 5284              		.size	MPU6050_setIntFreefallEnabled, .-MPU6050_setIntFreefallEnabled
 5285              		.section	.text.MPU6050_getIntMotionEnabled,"ax",%progbits
 5286              		.align	2
 5287              		.global	MPU6050_getIntMotionEnabled
 5288              		.code	16
 5289              		.thumb_func
 5290              		.type	MPU6050_getIntMotionEnabled, %function
 5291              	MPU6050_getIntMotionEnabled:
 5292              	.LFB118:
1524:.\mpu6050.c   **** /** Get Motion Detection interrupt enabled status.
1525:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1526:.\mpu6050.c   ****  * @return Current interrupt enabled status
1527:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1528:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_MOT_BIT
1529:.\mpu6050.c   ****  **/
1530:.\mpu6050.c   **** bool MPU6050_getIntMotionEnabled() {
 5293              		.loc 1 1530 0
 5294              		.cfi_startproc
 5295 0000 80B5     		push	{r7, lr}
 5296              		.cfi_def_cfa_offset 8
 5297              		.cfi_offset 7, -8
 5298              		.cfi_offset 14, -4
 5299 0002 00AF     		add	r7, sp, #0
 5300              		.cfi_def_cfa_register 7
1531:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_MOT_BIT, buffer);
 5301              		.loc 1 1531 0
 5302 0004 074B     		ldr	r3, .L436
 5303 0006 1A78     		ldrb	r2, [r3]
 5304 0008 074B     		ldr	r3, .L436+4
 5305 000a 101C     		mov	r0, r2
 5306 000c 3821     		mov	r1, #56
 5307 000e 0622     		mov	r2, #6
 5308 0010 FFF7FEFF 		bl	I2CReadBit
1532:.\mpu6050.c   ****     return buffer[0];
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 121


 5309              		.loc 1 1532 0
 5310 0014 044B     		ldr	r3, .L436+4
 5311 0016 1B78     		ldrb	r3, [r3]
 5312 0018 5A1E     		sub	r2, r3, #1
 5313 001a 9341     		sbc	r3, r3, r2
 5314 001c DBB2     		uxtb	r3, r3
1533:.\mpu6050.c   **** }
 5315              		.loc 1 1533 0
 5316 001e 181C     		mov	r0, r3
 5317 0020 BD46     		mov	sp, r7
 5318              		@ sp needed
 5319 0022 80BD     		pop	{r7, pc}
 5320              	.L437:
 5321              		.align	2
 5322              	.L436:
 5323 0024 00000000 		.word	devAddr
 5324 0028 00000000 		.word	buffer
 5325              		.cfi_endproc
 5326              	.LFE118:
 5327              		.size	MPU6050_getIntMotionEnabled, .-MPU6050_getIntMotionEnabled
 5328              		.section	.text.MPU6050_setIntMotionEnabled,"ax",%progbits
 5329              		.align	2
 5330              		.global	MPU6050_setIntMotionEnabled
 5331              		.code	16
 5332              		.thumb_func
 5333              		.type	MPU6050_setIntMotionEnabled, %function
 5334              	MPU6050_setIntMotionEnabled:
 5335              	.LFB119:
1534:.\mpu6050.c   **** /** Set Motion Detection interrupt enabled status.
1535:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1536:.\mpu6050.c   ****  * @see getIntMotionEnabled()
1537:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1538:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_MOT_BIT
1539:.\mpu6050.c   ****  **/
1540:.\mpu6050.c   **** void MPU6050_setIntMotionEnabled(bool enabled) {
 5336              		.loc 1 1540 0
 5337              		.cfi_startproc
 5338 0000 80B5     		push	{r7, lr}
 5339              		.cfi_def_cfa_offset 8
 5340              		.cfi_offset 7, -8
 5341              		.cfi_offset 14, -4
 5342 0002 82B0     		sub	sp, sp, #8
 5343              		.cfi_def_cfa_offset 16
 5344 0004 00AF     		add	r7, sp, #0
 5345              		.cfi_def_cfa_register 7
 5346 0006 021C     		mov	r2, r0
 5347 0008 FB1D     		add	r3, r7, #7
 5348 000a 1A70     		strb	r2, [r3]
1541:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_MOT_BIT, enabled);
 5349              		.loc 1 1541 0
 5350 000c 054B     		ldr	r3, .L439
 5351 000e 1A78     		ldrb	r2, [r3]
 5352 0010 FB1D     		add	r3, r7, #7
 5353 0012 1B78     		ldrb	r3, [r3]
 5354 0014 101C     		mov	r0, r2
 5355 0016 3821     		mov	r1, #56
 5356 0018 0622     		mov	r2, #6
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 122


 5357 001a FFF7FEFF 		bl	I2CWriteBit
1542:.\mpu6050.c   **** }
 5358              		.loc 1 1542 0
 5359 001e BD46     		mov	sp, r7
 5360 0020 02B0     		add	sp, sp, #8
 5361              		@ sp needed
 5362 0022 80BD     		pop	{r7, pc}
 5363              	.L440:
 5364              		.align	2
 5365              	.L439:
 5366 0024 00000000 		.word	devAddr
 5367              		.cfi_endproc
 5368              	.LFE119:
 5369              		.size	MPU6050_setIntMotionEnabled, .-MPU6050_setIntMotionEnabled
 5370              		.section	.text.MPU6050_getIntZeroMotionEnabled,"ax",%progbits
 5371              		.align	2
 5372              		.global	MPU6050_getIntZeroMotionEnabled
 5373              		.code	16
 5374              		.thumb_func
 5375              		.type	MPU6050_getIntZeroMotionEnabled, %function
 5376              	MPU6050_getIntZeroMotionEnabled:
 5377              	.LFB120:
1543:.\mpu6050.c   **** /** Get Zero Motion Detection interrupt enabled status.
1544:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1545:.\mpu6050.c   ****  * @return Current interrupt enabled status
1546:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1547:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_ZMOT_BIT
1548:.\mpu6050.c   ****  **/
1549:.\mpu6050.c   **** bool MPU6050_getIntZeroMotionEnabled() {
 5378              		.loc 1 1549 0
 5379              		.cfi_startproc
 5380 0000 80B5     		push	{r7, lr}
 5381              		.cfi_def_cfa_offset 8
 5382              		.cfi_offset 7, -8
 5383              		.cfi_offset 14, -4
 5384 0002 00AF     		add	r7, sp, #0
 5385              		.cfi_def_cfa_register 7
1550:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_ZMOT_BIT, buffer);
 5386              		.loc 1 1550 0
 5387 0004 074B     		ldr	r3, .L443
 5388 0006 1A78     		ldrb	r2, [r3]
 5389 0008 074B     		ldr	r3, .L443+4
 5390 000a 101C     		mov	r0, r2
 5391 000c 3821     		mov	r1, #56
 5392 000e 0522     		mov	r2, #5
 5393 0010 FFF7FEFF 		bl	I2CReadBit
1551:.\mpu6050.c   ****     return buffer[0];
 5394              		.loc 1 1551 0
 5395 0014 044B     		ldr	r3, .L443+4
 5396 0016 1B78     		ldrb	r3, [r3]
 5397 0018 5A1E     		sub	r2, r3, #1
 5398 001a 9341     		sbc	r3, r3, r2
 5399 001c DBB2     		uxtb	r3, r3
1552:.\mpu6050.c   **** }
 5400              		.loc 1 1552 0
 5401 001e 181C     		mov	r0, r3
 5402 0020 BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 123


 5403              		@ sp needed
 5404 0022 80BD     		pop	{r7, pc}
 5405              	.L444:
 5406              		.align	2
 5407              	.L443:
 5408 0024 00000000 		.word	devAddr
 5409 0028 00000000 		.word	buffer
 5410              		.cfi_endproc
 5411              	.LFE120:
 5412              		.size	MPU6050_getIntZeroMotionEnabled, .-MPU6050_getIntZeroMotionEnabled
 5413              		.section	.text.MPU6050_setIntZeroMotionEnabled,"ax",%progbits
 5414              		.align	2
 5415              		.global	MPU6050_setIntZeroMotionEnabled
 5416              		.code	16
 5417              		.thumb_func
 5418              		.type	MPU6050_setIntZeroMotionEnabled, %function
 5419              	MPU6050_setIntZeroMotionEnabled:
 5420              	.LFB121:
1553:.\mpu6050.c   **** /** Set Zero Motion Detection interrupt enabled status.
1554:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1555:.\mpu6050.c   ****  * @see getIntZeroMotionEnabled()
1556:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1557:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_ZMOT_BIT
1558:.\mpu6050.c   ****  **/
1559:.\mpu6050.c   **** void MPU6050_setIntZeroMotionEnabled(bool enabled) {
 5421              		.loc 1 1559 0
 5422              		.cfi_startproc
 5423 0000 80B5     		push	{r7, lr}
 5424              		.cfi_def_cfa_offset 8
 5425              		.cfi_offset 7, -8
 5426              		.cfi_offset 14, -4
 5427 0002 82B0     		sub	sp, sp, #8
 5428              		.cfi_def_cfa_offset 16
 5429 0004 00AF     		add	r7, sp, #0
 5430              		.cfi_def_cfa_register 7
 5431 0006 021C     		mov	r2, r0
 5432 0008 FB1D     		add	r3, r7, #7
 5433 000a 1A70     		strb	r2, [r3]
1560:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_ZMOT_BIT, enabled);
 5434              		.loc 1 1560 0
 5435 000c 054B     		ldr	r3, .L446
 5436 000e 1A78     		ldrb	r2, [r3]
 5437 0010 FB1D     		add	r3, r7, #7
 5438 0012 1B78     		ldrb	r3, [r3]
 5439 0014 101C     		mov	r0, r2
 5440 0016 3821     		mov	r1, #56
 5441 0018 0522     		mov	r2, #5
 5442 001a FFF7FEFF 		bl	I2CWriteBit
1561:.\mpu6050.c   **** }
 5443              		.loc 1 1561 0
 5444 001e BD46     		mov	sp, r7
 5445 0020 02B0     		add	sp, sp, #8
 5446              		@ sp needed
 5447 0022 80BD     		pop	{r7, pc}
 5448              	.L447:
 5449              		.align	2
 5450              	.L446:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 124


 5451 0024 00000000 		.word	devAddr
 5452              		.cfi_endproc
 5453              	.LFE121:
 5454              		.size	MPU6050_setIntZeroMotionEnabled, .-MPU6050_setIntZeroMotionEnabled
 5455              		.section	.text.MPU6050_getIntFIFOBufferOverflowEnabled,"ax",%progbits
 5456              		.align	2
 5457              		.global	MPU6050_getIntFIFOBufferOverflowEnabled
 5458              		.code	16
 5459              		.thumb_func
 5460              		.type	MPU6050_getIntFIFOBufferOverflowEnabled, %function
 5461              	MPU6050_getIntFIFOBufferOverflowEnabled:
 5462              	.LFB122:
1562:.\mpu6050.c   **** /** Get FIFO Buffer Overflow interrupt enabled status.
1563:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1564:.\mpu6050.c   ****  * @return Current interrupt enabled status
1565:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1566:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
1567:.\mpu6050.c   ****  **/
1568:.\mpu6050.c   **** bool MPU6050_getIntFIFOBufferOverflowEnabled() {
 5463              		.loc 1 1568 0
 5464              		.cfi_startproc
 5465 0000 80B5     		push	{r7, lr}
 5466              		.cfi_def_cfa_offset 8
 5467              		.cfi_offset 7, -8
 5468              		.cfi_offset 14, -4
 5469 0002 00AF     		add	r7, sp, #0
 5470              		.cfi_def_cfa_register 7
1569:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, buffer);
 5471              		.loc 1 1569 0
 5472 0004 074B     		ldr	r3, .L450
 5473 0006 1A78     		ldrb	r2, [r3]
 5474 0008 074B     		ldr	r3, .L450+4
 5475 000a 101C     		mov	r0, r2
 5476 000c 3821     		mov	r1, #56
 5477 000e 0422     		mov	r2, #4
 5478 0010 FFF7FEFF 		bl	I2CReadBit
1570:.\mpu6050.c   ****     return buffer[0];
 5479              		.loc 1 1570 0
 5480 0014 044B     		ldr	r3, .L450+4
 5481 0016 1B78     		ldrb	r3, [r3]
 5482 0018 5A1E     		sub	r2, r3, #1
 5483 001a 9341     		sbc	r3, r3, r2
 5484 001c DBB2     		uxtb	r3, r3
1571:.\mpu6050.c   **** }
 5485              		.loc 1 1571 0
 5486 001e 181C     		mov	r0, r3
 5487 0020 BD46     		mov	sp, r7
 5488              		@ sp needed
 5489 0022 80BD     		pop	{r7, pc}
 5490              	.L451:
 5491              		.align	2
 5492              	.L450:
 5493 0024 00000000 		.word	devAddr
 5494 0028 00000000 		.word	buffer
 5495              		.cfi_endproc
 5496              	.LFE122:
 5497              		.size	MPU6050_getIntFIFOBufferOverflowEnabled, .-MPU6050_getIntFIFOBufferOverflowEnabled
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 125


 5498              		.section	.text.MPU6050_setIntFIFOBufferOverflowEnabled,"ax",%progbits
 5499              		.align	2
 5500              		.global	MPU6050_setIntFIFOBufferOverflowEnabled
 5501              		.code	16
 5502              		.thumb_func
 5503              		.type	MPU6050_setIntFIFOBufferOverflowEnabled, %function
 5504              	MPU6050_setIntFIFOBufferOverflowEnabled:
 5505              	.LFB123:
1572:.\mpu6050.c   **** /** Set FIFO Buffer Overflow interrupt enabled status.
1573:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1574:.\mpu6050.c   ****  * @see getIntFIFOBufferOverflowEnabled()
1575:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1576:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
1577:.\mpu6050.c   ****  **/
1578:.\mpu6050.c   **** void MPU6050_setIntFIFOBufferOverflowEnabled(bool enabled) {
 5506              		.loc 1 1578 0
 5507              		.cfi_startproc
 5508 0000 80B5     		push	{r7, lr}
 5509              		.cfi_def_cfa_offset 8
 5510              		.cfi_offset 7, -8
 5511              		.cfi_offset 14, -4
 5512 0002 82B0     		sub	sp, sp, #8
 5513              		.cfi_def_cfa_offset 16
 5514 0004 00AF     		add	r7, sp, #0
 5515              		.cfi_def_cfa_register 7
 5516 0006 021C     		mov	r2, r0
 5517 0008 FB1D     		add	r3, r7, #7
 5518 000a 1A70     		strb	r2, [r3]
1579:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, enabled);
 5519              		.loc 1 1579 0
 5520 000c 054B     		ldr	r3, .L453
 5521 000e 1A78     		ldrb	r2, [r3]
 5522 0010 FB1D     		add	r3, r7, #7
 5523 0012 1B78     		ldrb	r3, [r3]
 5524 0014 101C     		mov	r0, r2
 5525 0016 3821     		mov	r1, #56
 5526 0018 0422     		mov	r2, #4
 5527 001a FFF7FEFF 		bl	I2CWriteBit
1580:.\mpu6050.c   **** }
 5528              		.loc 1 1580 0
 5529 001e BD46     		mov	sp, r7
 5530 0020 02B0     		add	sp, sp, #8
 5531              		@ sp needed
 5532 0022 80BD     		pop	{r7, pc}
 5533              	.L454:
 5534              		.align	2
 5535              	.L453:
 5536 0024 00000000 		.word	devAddr
 5537              		.cfi_endproc
 5538              	.LFE123:
 5539              		.size	MPU6050_setIntFIFOBufferOverflowEnabled, .-MPU6050_setIntFIFOBufferOverflowEnabled
 5540              		.section	.text.MPU6050_getIntI2CMasterEnabled,"ax",%progbits
 5541              		.align	2
 5542              		.global	MPU6050_getIntI2CMasterEnabled
 5543              		.code	16
 5544              		.thumb_func
 5545              		.type	MPU6050_getIntI2CMasterEnabled, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 126


 5546              	MPU6050_getIntI2CMasterEnabled:
 5547              	.LFB124:
1581:.\mpu6050.c   **** /** Get I2C Master interrupt enabled status.
1582:.\mpu6050.c   ****  * This enables any of the I2C Master interrupt sources to generate an
1583:.\mpu6050.c   ****  * interrupt. Will be set 0 for disabled, 1 for enabled.
1584:.\mpu6050.c   ****  * @return Current interrupt enabled status
1585:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1586:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT
1587:.\mpu6050.c   ****  **/
1588:.\mpu6050.c   **** bool MPU6050_getIntI2CMasterEnabled() {
 5548              		.loc 1 1588 0
 5549              		.cfi_startproc
 5550 0000 80B5     		push	{r7, lr}
 5551              		.cfi_def_cfa_offset 8
 5552              		.cfi_offset 7, -8
 5553              		.cfi_offset 14, -4
 5554 0002 00AF     		add	r7, sp, #0
 5555              		.cfi_def_cfa_register 7
1589:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_I2C_MST_INT_BIT, buffer);
 5556              		.loc 1 1589 0
 5557 0004 074B     		ldr	r3, .L457
 5558 0006 1A78     		ldrb	r2, [r3]
 5559 0008 074B     		ldr	r3, .L457+4
 5560 000a 101C     		mov	r0, r2
 5561 000c 3821     		mov	r1, #56
 5562 000e 0322     		mov	r2, #3
 5563 0010 FFF7FEFF 		bl	I2CReadBit
1590:.\mpu6050.c   ****     return buffer[0];
 5564              		.loc 1 1590 0
 5565 0014 044B     		ldr	r3, .L457+4
 5566 0016 1B78     		ldrb	r3, [r3]
 5567 0018 5A1E     		sub	r2, r3, #1
 5568 001a 9341     		sbc	r3, r3, r2
 5569 001c DBB2     		uxtb	r3, r3
1591:.\mpu6050.c   **** }
 5570              		.loc 1 1591 0
 5571 001e 181C     		mov	r0, r3
 5572 0020 BD46     		mov	sp, r7
 5573              		@ sp needed
 5574 0022 80BD     		pop	{r7, pc}
 5575              	.L458:
 5576              		.align	2
 5577              	.L457:
 5578 0024 00000000 		.word	devAddr
 5579 0028 00000000 		.word	buffer
 5580              		.cfi_endproc
 5581              	.LFE124:
 5582              		.size	MPU6050_getIntI2CMasterEnabled, .-MPU6050_getIntI2CMasterEnabled
 5583              		.section	.text.MPU6050_setIntI2CMasterEnabled,"ax",%progbits
 5584              		.align	2
 5585              		.global	MPU6050_setIntI2CMasterEnabled
 5586              		.code	16
 5587              		.thumb_func
 5588              		.type	MPU6050_setIntI2CMasterEnabled, %function
 5589              	MPU6050_setIntI2CMasterEnabled:
 5590              	.LFB125:
1592:.\mpu6050.c   **** /** Set I2C Master interrupt enabled status.
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 127


1593:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1594:.\mpu6050.c   ****  * @see getIntI2CMasterEnabled()
1595:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1596:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT
1597:.\mpu6050.c   ****  **/
1598:.\mpu6050.c   **** void MPU6050_setIntI2CMasterEnabled(bool enabled) {
 5591              		.loc 1 1598 0
 5592              		.cfi_startproc
 5593 0000 80B5     		push	{r7, lr}
 5594              		.cfi_def_cfa_offset 8
 5595              		.cfi_offset 7, -8
 5596              		.cfi_offset 14, -4
 5597 0002 82B0     		sub	sp, sp, #8
 5598              		.cfi_def_cfa_offset 16
 5599 0004 00AF     		add	r7, sp, #0
 5600              		.cfi_def_cfa_register 7
 5601 0006 021C     		mov	r2, r0
 5602 0008 FB1D     		add	r3, r7, #7
 5603 000a 1A70     		strb	r2, [r3]
1599:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_I2C_MST_INT_BIT, enabled);
 5604              		.loc 1 1599 0
 5605 000c 054B     		ldr	r3, .L460
 5606 000e 1A78     		ldrb	r2, [r3]
 5607 0010 FB1D     		add	r3, r7, #7
 5608 0012 1B78     		ldrb	r3, [r3]
 5609 0014 101C     		mov	r0, r2
 5610 0016 3821     		mov	r1, #56
 5611 0018 0322     		mov	r2, #3
 5612 001a FFF7FEFF 		bl	I2CWriteBit
1600:.\mpu6050.c   **** }
 5613              		.loc 1 1600 0
 5614 001e BD46     		mov	sp, r7
 5615 0020 02B0     		add	sp, sp, #8
 5616              		@ sp needed
 5617 0022 80BD     		pop	{r7, pc}
 5618              	.L461:
 5619              		.align	2
 5620              	.L460:
 5621 0024 00000000 		.word	devAddr
 5622              		.cfi_endproc
 5623              	.LFE125:
 5624              		.size	MPU6050_setIntI2CMasterEnabled, .-MPU6050_setIntI2CMasterEnabled
 5625              		.section	.text.MPU6050_getIntDataReadyEnabled,"ax",%progbits
 5626              		.align	2
 5627              		.global	MPU6050_getIntDataReadyEnabled
 5628              		.code	16
 5629              		.thumb_func
 5630              		.type	MPU6050_getIntDataReadyEnabled, %function
 5631              	MPU6050_getIntDataReadyEnabled:
 5632              	.LFB126:
1601:.\mpu6050.c   **** /** Get Data Ready interrupt enabled setting.
1602:.\mpu6050.c   ****  * This event occurs each time a write operation to all of the sensor registers
1603:.\mpu6050.c   ****  * has been completed. Will be set 0 for disabled, 1 for enabled.
1604:.\mpu6050.c   ****  * @return Current interrupt enabled status
1605:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1606:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_DATA_RDY_BIT
1607:.\mpu6050.c   ****  */
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 128


1608:.\mpu6050.c   **** bool MPU6050_getIntDataReadyEnabled() {
 5633              		.loc 1 1608 0
 5634              		.cfi_startproc
 5635 0000 80B5     		push	{r7, lr}
 5636              		.cfi_def_cfa_offset 8
 5637              		.cfi_offset 7, -8
 5638              		.cfi_offset 14, -4
 5639 0002 00AF     		add	r7, sp, #0
 5640              		.cfi_def_cfa_register 7
1609:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, buffer);
 5641              		.loc 1 1609 0
 5642 0004 074B     		ldr	r3, .L464
 5643 0006 1A78     		ldrb	r2, [r3]
 5644 0008 074B     		ldr	r3, .L464+4
 5645 000a 101C     		mov	r0, r2
 5646 000c 3821     		mov	r1, #56
 5647 000e 0022     		mov	r2, #0
 5648 0010 FFF7FEFF 		bl	I2CReadBit
1610:.\mpu6050.c   ****     return buffer[0];
 5649              		.loc 1 1610 0
 5650 0014 044B     		ldr	r3, .L464+4
 5651 0016 1B78     		ldrb	r3, [r3]
 5652 0018 5A1E     		sub	r2, r3, #1
 5653 001a 9341     		sbc	r3, r3, r2
 5654 001c DBB2     		uxtb	r3, r3
1611:.\mpu6050.c   **** }
 5655              		.loc 1 1611 0
 5656 001e 181C     		mov	r0, r3
 5657 0020 BD46     		mov	sp, r7
 5658              		@ sp needed
 5659 0022 80BD     		pop	{r7, pc}
 5660              	.L465:
 5661              		.align	2
 5662              	.L464:
 5663 0024 00000000 		.word	devAddr
 5664 0028 00000000 		.word	buffer
 5665              		.cfi_endproc
 5666              	.LFE126:
 5667              		.size	MPU6050_getIntDataReadyEnabled, .-MPU6050_getIntDataReadyEnabled
 5668              		.section	.text.MPU6050_setIntDataReadyEnabled,"ax",%progbits
 5669              		.align	2
 5670              		.global	MPU6050_setIntDataReadyEnabled
 5671              		.code	16
 5672              		.thumb_func
 5673              		.type	MPU6050_setIntDataReadyEnabled, %function
 5674              	MPU6050_setIntDataReadyEnabled:
 5675              	.LFB127:
1612:.\mpu6050.c   **** /** Set Data Ready interrupt enabled status.
1613:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1614:.\mpu6050.c   ****  * @see getIntDataReadyEnabled()
1615:.\mpu6050.c   ****  * @see MPU6050_RA_INT_CFG
1616:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_DATA_RDY_BIT
1617:.\mpu6050.c   ****  */
1618:.\mpu6050.c   **** void MPU6050_setIntDataReadyEnabled(bool enabled) {
 5676              		.loc 1 1618 0
 5677              		.cfi_startproc
 5678 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 129


 5679              		.cfi_def_cfa_offset 8
 5680              		.cfi_offset 7, -8
 5681              		.cfi_offset 14, -4
 5682 0002 82B0     		sub	sp, sp, #8
 5683              		.cfi_def_cfa_offset 16
 5684 0004 00AF     		add	r7, sp, #0
 5685              		.cfi_def_cfa_register 7
 5686 0006 021C     		mov	r2, r0
 5687 0008 FB1D     		add	r3, r7, #7
 5688 000a 1A70     		strb	r2, [r3]
1619:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, enabled);
 5689              		.loc 1 1619 0
 5690 000c 054B     		ldr	r3, .L467
 5691 000e 1A78     		ldrb	r2, [r3]
 5692 0010 FB1D     		add	r3, r7, #7
 5693 0012 1B78     		ldrb	r3, [r3]
 5694 0014 101C     		mov	r0, r2
 5695 0016 3821     		mov	r1, #56
 5696 0018 0022     		mov	r2, #0
 5697 001a FFF7FEFF 		bl	I2CWriteBit
1620:.\mpu6050.c   **** }
 5698              		.loc 1 1620 0
 5699 001e BD46     		mov	sp, r7
 5700 0020 02B0     		add	sp, sp, #8
 5701              		@ sp needed
 5702 0022 80BD     		pop	{r7, pc}
 5703              	.L468:
 5704              		.align	2
 5705              	.L467:
 5706 0024 00000000 		.word	devAddr
 5707              		.cfi_endproc
 5708              	.LFE127:
 5709              		.size	MPU6050_setIntDataReadyEnabled, .-MPU6050_setIntDataReadyEnabled
 5710              		.section	.text.MPU6050_getIntStatus,"ax",%progbits
 5711              		.align	2
 5712              		.global	MPU6050_getIntStatus
 5713              		.code	16
 5714              		.thumb_func
 5715              		.type	MPU6050_getIntStatus, %function
 5716              	MPU6050_getIntStatus:
 5717              	.LFB128:
1621:.\mpu6050.c   **** 
1622:.\mpu6050.c   **** // INT_STATUS register
1623:.\mpu6050.c   **** 
1624:.\mpu6050.c   **** /** Get full set of interrupt status bits.
1625:.\mpu6050.c   ****  * These bits clear to 0 after the register has been read. Very useful
1626:.\mpu6050.c   ****  * for getting multiple INT statuses, since each single bit read clears
1627:.\mpu6050.c   ****  * all of them because it has to read the whole byte.
1628:.\mpu6050.c   ****  * @return Current interrupt status
1629:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1630:.\mpu6050.c   ****  */
1631:.\mpu6050.c   **** uint8_t MPU6050_getIntStatus() {
 5718              		.loc 1 1631 0
 5719              		.cfi_startproc
 5720 0000 80B5     		push	{r7, lr}
 5721              		.cfi_def_cfa_offset 8
 5722              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 130


 5723              		.cfi_offset 14, -4
 5724 0002 00AF     		add	r7, sp, #0
 5725              		.cfi_def_cfa_register 7
1632:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 5726              		.loc 1 1632 0
 5727 0004 064B     		ldr	r3, .L471
 5728 0006 1A78     		ldrb	r2, [r3]
 5729 0008 064B     		ldr	r3, .L471+4
 5730 000a 101C     		mov	r0, r2
 5731 000c 3A21     		mov	r1, #58
 5732 000e 1A1C     		mov	r2, r3
 5733 0010 FFF7FEFF 		bl	I2CReadByte
1633:.\mpu6050.c   ****     return buffer[0];
 5734              		.loc 1 1633 0
 5735 0014 034B     		ldr	r3, .L471+4
 5736 0016 1B78     		ldrb	r3, [r3]
1634:.\mpu6050.c   **** }
 5737              		.loc 1 1634 0
 5738 0018 181C     		mov	r0, r3
 5739 001a BD46     		mov	sp, r7
 5740              		@ sp needed
 5741 001c 80BD     		pop	{r7, pc}
 5742              	.L472:
 5743 001e C046     		.align	2
 5744              	.L471:
 5745 0020 00000000 		.word	devAddr
 5746 0024 00000000 		.word	buffer
 5747              		.cfi_endproc
 5748              	.LFE128:
 5749              		.size	MPU6050_getIntStatus, .-MPU6050_getIntStatus
 5750              		.section	.text.MPU6050_getIntFreefallStatus,"ax",%progbits
 5751              		.align	2
 5752              		.global	MPU6050_getIntFreefallStatus
 5753              		.code	16
 5754              		.thumb_func
 5755              		.type	MPU6050_getIntFreefallStatus, %function
 5756              	MPU6050_getIntFreefallStatus:
 5757              	.LFB129:
1635:.\mpu6050.c   **** /** Get Free Fall interrupt status.
1636:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Free Fall interrupt has been
1637:.\mpu6050.c   ****  * generated. The bit clears to 0 after the register has been read.
1638:.\mpu6050.c   ****  * @return Current interrupt status
1639:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1640:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1641:.\mpu6050.c   ****  */
1642:.\mpu6050.c   **** bool MPU6050_getIntFreefallStatus() {
 5758              		.loc 1 1642 0
 5759              		.cfi_startproc
 5760 0000 80B5     		push	{r7, lr}
 5761              		.cfi_def_cfa_offset 8
 5762              		.cfi_offset 7, -8
 5763              		.cfi_offset 14, -4
 5764 0002 00AF     		add	r7, sp, #0
 5765              		.cfi_def_cfa_register 7
1643:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FF_BIT, buffer);
 5766              		.loc 1 1643 0
 5767 0004 074B     		ldr	r3, .L475
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 131


 5768 0006 1A78     		ldrb	r2, [r3]
 5769 0008 074B     		ldr	r3, .L475+4
 5770 000a 101C     		mov	r0, r2
 5771 000c 3A21     		mov	r1, #58
 5772 000e 0722     		mov	r2, #7
 5773 0010 FFF7FEFF 		bl	I2CReadBit
1644:.\mpu6050.c   ****     return buffer[0];
 5774              		.loc 1 1644 0
 5775 0014 044B     		ldr	r3, .L475+4
 5776 0016 1B78     		ldrb	r3, [r3]
 5777 0018 5A1E     		sub	r2, r3, #1
 5778 001a 9341     		sbc	r3, r3, r2
 5779 001c DBB2     		uxtb	r3, r3
1645:.\mpu6050.c   **** }
 5780              		.loc 1 1645 0
 5781 001e 181C     		mov	r0, r3
 5782 0020 BD46     		mov	sp, r7
 5783              		@ sp needed
 5784 0022 80BD     		pop	{r7, pc}
 5785              	.L476:
 5786              		.align	2
 5787              	.L475:
 5788 0024 00000000 		.word	devAddr
 5789 0028 00000000 		.word	buffer
 5790              		.cfi_endproc
 5791              	.LFE129:
 5792              		.size	MPU6050_getIntFreefallStatus, .-MPU6050_getIntFreefallStatus
 5793              		.section	.text.MPU6050_getIntMotionStatus,"ax",%progbits
 5794              		.align	2
 5795              		.global	MPU6050_getIntMotionStatus
 5796              		.code	16
 5797              		.thumb_func
 5798              		.type	MPU6050_getIntMotionStatus, %function
 5799              	MPU6050_getIntMotionStatus:
 5800              	.LFB130:
1646:.\mpu6050.c   **** /** Get Motion Detection interrupt status.
1647:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Motion Detection interrupt has been
1648:.\mpu6050.c   ****  * generated. The bit clears to 0 after the register has been read.
1649:.\mpu6050.c   ****  * @return Current interrupt status
1650:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1651:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_MOT_BIT
1652:.\mpu6050.c   ****  */
1653:.\mpu6050.c   **** bool MPU6050_getIntMotionStatus() {
 5801              		.loc 1 1653 0
 5802              		.cfi_startproc
 5803 0000 80B5     		push	{r7, lr}
 5804              		.cfi_def_cfa_offset 8
 5805              		.cfi_offset 7, -8
 5806              		.cfi_offset 14, -4
 5807 0002 00AF     		add	r7, sp, #0
 5808              		.cfi_def_cfa_register 7
1654:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_MOT_BIT, buffer);
 5809              		.loc 1 1654 0
 5810 0004 074B     		ldr	r3, .L479
 5811 0006 1A78     		ldrb	r2, [r3]
 5812 0008 074B     		ldr	r3, .L479+4
 5813 000a 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 132


 5814 000c 3A21     		mov	r1, #58
 5815 000e 0622     		mov	r2, #6
 5816 0010 FFF7FEFF 		bl	I2CReadBit
1655:.\mpu6050.c   ****     return buffer[0];
 5817              		.loc 1 1655 0
 5818 0014 044B     		ldr	r3, .L479+4
 5819 0016 1B78     		ldrb	r3, [r3]
 5820 0018 5A1E     		sub	r2, r3, #1
 5821 001a 9341     		sbc	r3, r3, r2
 5822 001c DBB2     		uxtb	r3, r3
1656:.\mpu6050.c   **** }
 5823              		.loc 1 1656 0
 5824 001e 181C     		mov	r0, r3
 5825 0020 BD46     		mov	sp, r7
 5826              		@ sp needed
 5827 0022 80BD     		pop	{r7, pc}
 5828              	.L480:
 5829              		.align	2
 5830              	.L479:
 5831 0024 00000000 		.word	devAddr
 5832 0028 00000000 		.word	buffer
 5833              		.cfi_endproc
 5834              	.LFE130:
 5835              		.size	MPU6050_getIntMotionStatus, .-MPU6050_getIntMotionStatus
 5836              		.section	.text.MPU6050_getIntZeroMotionStatus,"ax",%progbits
 5837              		.align	2
 5838              		.global	MPU6050_getIntZeroMotionStatus
 5839              		.code	16
 5840              		.thumb_func
 5841              		.type	MPU6050_getIntZeroMotionStatus, %function
 5842              	MPU6050_getIntZeroMotionStatus:
 5843              	.LFB131:
1657:.\mpu6050.c   **** /** Get Zero Motion Detection interrupt status.
1658:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Zero Motion Detection interrupt has
1659:.\mpu6050.c   ****  * been generated. The bit clears to 0 after the register has been read.
1660:.\mpu6050.c   ****  * @return Current interrupt status
1661:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1662:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_ZMOT_BIT
1663:.\mpu6050.c   ****  */
1664:.\mpu6050.c   **** bool MPU6050_getIntZeroMotionStatus() {
 5844              		.loc 1 1664 0
 5845              		.cfi_startproc
 5846 0000 80B5     		push	{r7, lr}
 5847              		.cfi_def_cfa_offset 8
 5848              		.cfi_offset 7, -8
 5849              		.cfi_offset 14, -4
 5850 0002 00AF     		add	r7, sp, #0
 5851              		.cfi_def_cfa_register 7
1665:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_ZMOT_BIT, buffer);
 5852              		.loc 1 1665 0
 5853 0004 074B     		ldr	r3, .L483
 5854 0006 1A78     		ldrb	r2, [r3]
 5855 0008 074B     		ldr	r3, .L483+4
 5856 000a 101C     		mov	r0, r2
 5857 000c 3A21     		mov	r1, #58
 5858 000e 0522     		mov	r2, #5
 5859 0010 FFF7FEFF 		bl	I2CReadBit
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 133


1666:.\mpu6050.c   ****     return buffer[0];
 5860              		.loc 1 1666 0
 5861 0014 044B     		ldr	r3, .L483+4
 5862 0016 1B78     		ldrb	r3, [r3]
 5863 0018 5A1E     		sub	r2, r3, #1
 5864 001a 9341     		sbc	r3, r3, r2
 5865 001c DBB2     		uxtb	r3, r3
1667:.\mpu6050.c   **** }
 5866              		.loc 1 1667 0
 5867 001e 181C     		mov	r0, r3
 5868 0020 BD46     		mov	sp, r7
 5869              		@ sp needed
 5870 0022 80BD     		pop	{r7, pc}
 5871              	.L484:
 5872              		.align	2
 5873              	.L483:
 5874 0024 00000000 		.word	devAddr
 5875 0028 00000000 		.word	buffer
 5876              		.cfi_endproc
 5877              	.LFE131:
 5878              		.size	MPU6050_getIntZeroMotionStatus, .-MPU6050_getIntZeroMotionStatus
 5879              		.section	.text.MPU6050_getIntFIFOBufferOverflowStatus,"ax",%progbits
 5880              		.align	2
 5881              		.global	MPU6050_getIntFIFOBufferOverflowStatus
 5882              		.code	16
 5883              		.thumb_func
 5884              		.type	MPU6050_getIntFIFOBufferOverflowStatus, %function
 5885              	MPU6050_getIntFIFOBufferOverflowStatus:
 5886              	.LFB132:
1668:.\mpu6050.c   **** /** Get FIFO Buffer Overflow interrupt status.
1669:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Free Fall interrupt has been
1670:.\mpu6050.c   ****  * generated. The bit clears to 0 after the register has been read.
1671:.\mpu6050.c   ****  * @return Current interrupt status
1672:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1673:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
1674:.\mpu6050.c   ****  */
1675:.\mpu6050.c   **** bool MPU6050_getIntFIFOBufferOverflowStatus() {
 5887              		.loc 1 1675 0
 5888              		.cfi_startproc
 5889 0000 80B5     		push	{r7, lr}
 5890              		.cfi_def_cfa_offset 8
 5891              		.cfi_offset 7, -8
 5892              		.cfi_offset 14, -4
 5893 0002 00AF     		add	r7, sp, #0
 5894              		.cfi_def_cfa_register 7
1676:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, buffer);
 5895              		.loc 1 1676 0
 5896 0004 074B     		ldr	r3, .L487
 5897 0006 1A78     		ldrb	r2, [r3]
 5898 0008 074B     		ldr	r3, .L487+4
 5899 000a 101C     		mov	r0, r2
 5900 000c 3A21     		mov	r1, #58
 5901 000e 0422     		mov	r2, #4
 5902 0010 FFF7FEFF 		bl	I2CReadBit
1677:.\mpu6050.c   ****     return buffer[0];
 5903              		.loc 1 1677 0
 5904 0014 044B     		ldr	r3, .L487+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 134


 5905 0016 1B78     		ldrb	r3, [r3]
 5906 0018 5A1E     		sub	r2, r3, #1
 5907 001a 9341     		sbc	r3, r3, r2
 5908 001c DBB2     		uxtb	r3, r3
1678:.\mpu6050.c   **** }
 5909              		.loc 1 1678 0
 5910 001e 181C     		mov	r0, r3
 5911 0020 BD46     		mov	sp, r7
 5912              		@ sp needed
 5913 0022 80BD     		pop	{r7, pc}
 5914              	.L488:
 5915              		.align	2
 5916              	.L487:
 5917 0024 00000000 		.word	devAddr
 5918 0028 00000000 		.word	buffer
 5919              		.cfi_endproc
 5920              	.LFE132:
 5921              		.size	MPU6050_getIntFIFOBufferOverflowStatus, .-MPU6050_getIntFIFOBufferOverflowStatus
 5922              		.section	.text.MPU6050_getIntI2CMasterStatus,"ax",%progbits
 5923              		.align	2
 5924              		.global	MPU6050_getIntI2CMasterStatus
 5925              		.code	16
 5926              		.thumb_func
 5927              		.type	MPU6050_getIntI2CMasterStatus, %function
 5928              	MPU6050_getIntI2CMasterStatus:
 5929              	.LFB133:
1679:.\mpu6050.c   **** /** Get I2C Master interrupt status.
1680:.\mpu6050.c   ****  * This bit automatically sets to 1 when an I2C Master interrupt has been
1681:.\mpu6050.c   ****  * generated. For a list of I2C Master interrupts, please refer to Register 54.
1682:.\mpu6050.c   ****  * The bit clears to 0 after the register has been read.
1683:.\mpu6050.c   ****  * @return Current interrupt status
1684:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1685:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT
1686:.\mpu6050.c   ****  */
1687:.\mpu6050.c   **** bool MPU6050_getIntI2CMasterStatus() {
 5930              		.loc 1 1687 0
 5931              		.cfi_startproc
 5932 0000 80B5     		push	{r7, lr}
 5933              		.cfi_def_cfa_offset 8
 5934              		.cfi_offset 7, -8
 5935              		.cfi_offset 14, -4
 5936 0002 00AF     		add	r7, sp, #0
 5937              		.cfi_def_cfa_register 7
1688:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_I2C_MST_INT_BIT, buffer);
 5938              		.loc 1 1688 0
 5939 0004 074B     		ldr	r3, .L491
 5940 0006 1A78     		ldrb	r2, [r3]
 5941 0008 074B     		ldr	r3, .L491+4
 5942 000a 101C     		mov	r0, r2
 5943 000c 3A21     		mov	r1, #58
 5944 000e 0322     		mov	r2, #3
 5945 0010 FFF7FEFF 		bl	I2CReadBit
1689:.\mpu6050.c   ****     return buffer[0];
 5946              		.loc 1 1689 0
 5947 0014 044B     		ldr	r3, .L491+4
 5948 0016 1B78     		ldrb	r3, [r3]
 5949 0018 5A1E     		sub	r2, r3, #1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 135


 5950 001a 9341     		sbc	r3, r3, r2
 5951 001c DBB2     		uxtb	r3, r3
1690:.\mpu6050.c   **** }
 5952              		.loc 1 1690 0
 5953 001e 181C     		mov	r0, r3
 5954 0020 BD46     		mov	sp, r7
 5955              		@ sp needed
 5956 0022 80BD     		pop	{r7, pc}
 5957              	.L492:
 5958              		.align	2
 5959              	.L491:
 5960 0024 00000000 		.word	devAddr
 5961 0028 00000000 		.word	buffer
 5962              		.cfi_endproc
 5963              	.LFE133:
 5964              		.size	MPU6050_getIntI2CMasterStatus, .-MPU6050_getIntI2CMasterStatus
 5965              		.section	.text.MPU6050_getIntDataReadyStatus,"ax",%progbits
 5966              		.align	2
 5967              		.global	MPU6050_getIntDataReadyStatus
 5968              		.code	16
 5969              		.thumb_func
 5970              		.type	MPU6050_getIntDataReadyStatus, %function
 5971              	MPU6050_getIntDataReadyStatus:
 5972              	.LFB134:
1691:.\mpu6050.c   **** /** Get Data Ready interrupt status.
1692:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Data Ready interrupt has been
1693:.\mpu6050.c   ****  * generated. The bit clears to 0 after the register has been read.
1694:.\mpu6050.c   ****  * @return Current interrupt status
1695:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1696:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_DATA_RDY_BIT
1697:.\mpu6050.c   ****  */
1698:.\mpu6050.c   **** bool MPU6050_getIntDataReadyStatus() {
 5973              		.loc 1 1698 0
 5974              		.cfi_startproc
 5975 0000 80B5     		push	{r7, lr}
 5976              		.cfi_def_cfa_offset 8
 5977              		.cfi_offset 7, -8
 5978              		.cfi_offset 14, -4
 5979 0002 00AF     		add	r7, sp, #0
 5980              		.cfi_def_cfa_register 7
1699:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, buffer);
 5981              		.loc 1 1699 0
 5982 0004 074B     		ldr	r3, .L495
 5983 0006 1A78     		ldrb	r2, [r3]
 5984 0008 074B     		ldr	r3, .L495+4
 5985 000a 101C     		mov	r0, r2
 5986 000c 3A21     		mov	r1, #58
 5987 000e 0022     		mov	r2, #0
 5988 0010 FFF7FEFF 		bl	I2CReadBit
1700:.\mpu6050.c   ****     return buffer[0];
 5989              		.loc 1 1700 0
 5990 0014 044B     		ldr	r3, .L495+4
 5991 0016 1B78     		ldrb	r3, [r3]
 5992 0018 5A1E     		sub	r2, r3, #1
 5993 001a 9341     		sbc	r3, r3, r2
 5994 001c DBB2     		uxtb	r3, r3
1701:.\mpu6050.c   **** }
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 136


 5995              		.loc 1 1701 0
 5996 001e 181C     		mov	r0, r3
 5997 0020 BD46     		mov	sp, r7
 5998              		@ sp needed
 5999 0022 80BD     		pop	{r7, pc}
 6000              	.L496:
 6001              		.align	2
 6002              	.L495:
 6003 0024 00000000 		.word	devAddr
 6004 0028 00000000 		.word	buffer
 6005              		.cfi_endproc
 6006              	.LFE134:
 6007              		.size	MPU6050_getIntDataReadyStatus, .-MPU6050_getIntDataReadyStatus
 6008              		.section	.text.MPU6050_getMotion9,"ax",%progbits
 6009              		.align	2
 6010              		.global	MPU6050_getMotion9
 6011              		.code	16
 6012              		.thumb_func
 6013              		.type	MPU6050_getMotion9, %function
 6014              	MPU6050_getMotion9:
 6015              	.LFB135:
1702:.\mpu6050.c   **** 
1703:.\mpu6050.c   **** // ACCEL_*OUT_* registers
1704:.\mpu6050.c   **** 
1705:.\mpu6050.c   **** /** Get raw 9-axis motion sensor readings (accel/gyro/compass) + temperature.
1706:.\mpu6050.c   ****  * FUNCTION NOT FULLY IMPLEMENTED YET.
1707:.\mpu6050.c   ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1708:.\mpu6050.c   ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1709:.\mpu6050.c   ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1710:.\mpu6050.c   ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1711:.\mpu6050.c   ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1712:.\mpu6050.c   ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1713:.\mpu6050.c   ****  * @param mx 16-bit signed integer container for magnetometer X-axis value
1714:.\mpu6050.c   ****  * @param my 16-bit signed integer container for magnetometer Y-axis value
1715:.\mpu6050.c   ****  * @param mz 16-bit signed integer container for magnetometer Z-axis value
1716:.\mpu6050.c   ****  * @see getMotion6()
1717:.\mpu6050.c   ****  * @see getAcceleration()
1718:.\mpu6050.c   ****  * @see getRotation()
1719:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
1720:.\mpu6050.c   ****  */
1721:.\mpu6050.c   **** void MPU6050_getMotion9(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* g
 6016              		.loc 1 1721 0
 6017              		.cfi_startproc
 6018 0000 80B5     		push	{r7, lr}
 6019              		.cfi_def_cfa_offset 8
 6020              		.cfi_offset 7, -8
 6021              		.cfi_offset 14, -4
 6022 0002 84B0     		sub	sp, sp, #16
 6023              		.cfi_def_cfa_offset 24
 6024 0004 00AF     		add	r7, sp, #0
 6025              		.cfi_def_cfa_register 7
 6026 0006 F860     		str	r0, [r7, #12]
 6027 0008 B960     		str	r1, [r7, #8]
 6028 000a 7A60     		str	r2, [r7, #4]
 6029 000c 3B60     		str	r3, [r7]
1722:.\mpu6050.c   ****     I2CReadBytes(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 22, buffer);
 6030              		.loc 1 1722 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 137


 6031 000e 364B     		ldr	r3, .L498
 6032 0010 6820     		mov	r0, #104
 6033 0012 3B21     		mov	r1, #59
 6034 0014 1622     		mov	r2, #22
 6035 0016 FFF7FEFF 		bl	I2CReadBytes
1723:.\mpu6050.c   **** 	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6036              		.loc 1 1723 0
 6037 001a 334B     		ldr	r3, .L498
 6038 001c 1B78     		ldrb	r3, [r3]
 6039 001e 1B02     		lsl	r3, r3, #8
 6040 0020 9AB2     		uxth	r2, r3
 6041 0022 314B     		ldr	r3, .L498
 6042 0024 5B78     		ldrb	r3, [r3, #1]
 6043 0026 9BB2     		uxth	r3, r3
 6044 0028 1343     		orr	r3, r2
 6045 002a 9AB2     		uxth	r2, r3
 6046 002c FB68     		ldr	r3, [r7, #12]
 6047 002e 1A80     		strh	r2, [r3]
1724:.\mpu6050.c   **** 	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6048              		.loc 1 1724 0
 6049 0030 2D4B     		ldr	r3, .L498
 6050 0032 9B78     		ldrb	r3, [r3, #2]
 6051 0034 1B02     		lsl	r3, r3, #8
 6052 0036 9AB2     		uxth	r2, r3
 6053 0038 2B4B     		ldr	r3, .L498
 6054 003a DB78     		ldrb	r3, [r3, #3]
 6055 003c 9BB2     		uxth	r3, r3
 6056 003e 1343     		orr	r3, r2
 6057 0040 9AB2     		uxth	r2, r3
 6058 0042 BB68     		ldr	r3, [r7, #8]
 6059 0044 1A80     		strh	r2, [r3]
1725:.\mpu6050.c   **** 	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6060              		.loc 1 1725 0
 6061 0046 284B     		ldr	r3, .L498
 6062 0048 1B79     		ldrb	r3, [r3, #4]
 6063 004a 1B02     		lsl	r3, r3, #8
 6064 004c 9AB2     		uxth	r2, r3
 6065 004e 264B     		ldr	r3, .L498
 6066 0050 5B79     		ldrb	r3, [r3, #5]
 6067 0052 9BB2     		uxth	r3, r3
 6068 0054 1343     		orr	r3, r2
 6069 0056 9AB2     		uxth	r2, r3
 6070 0058 7B68     		ldr	r3, [r7, #4]
 6071 005a 1A80     		strh	r2, [r3]
1726:.\mpu6050.c   **** //	*t  = (((int16_t)buffer[6]) << 8) | buffer[7];
1727:.\mpu6050.c   **** 	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6072              		.loc 1 1727 0
 6073 005c 224B     		ldr	r3, .L498
 6074 005e 1B7A     		ldrb	r3, [r3, #8]
 6075 0060 1B02     		lsl	r3, r3, #8
 6076 0062 9AB2     		uxth	r2, r3
 6077 0064 204B     		ldr	r3, .L498
 6078 0066 5B7A     		ldrb	r3, [r3, #9]
 6079 0068 9BB2     		uxth	r3, r3
 6080 006a 1343     		orr	r3, r2
 6081 006c 9AB2     		uxth	r2, r3
 6082 006e 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 138


 6083 0070 1A80     		strh	r2, [r3]
1728:.\mpu6050.c   **** 	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6084              		.loc 1 1728 0
 6085 0072 1D4B     		ldr	r3, .L498
 6086 0074 9B7A     		ldrb	r3, [r3, #10]
 6087 0076 1B02     		lsl	r3, r3, #8
 6088 0078 9AB2     		uxth	r2, r3
 6089 007a 1B4B     		ldr	r3, .L498
 6090 007c DB7A     		ldrb	r3, [r3, #11]
 6091 007e 9BB2     		uxth	r3, r3
 6092 0080 1343     		orr	r3, r2
 6093 0082 9AB2     		uxth	r2, r3
 6094 0084 BB69     		ldr	r3, [r7, #24]
 6095 0086 1A80     		strh	r2, [r3]
1729:.\mpu6050.c   **** 	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6096              		.loc 1 1729 0
 6097 0088 174B     		ldr	r3, .L498
 6098 008a 1B7B     		ldrb	r3, [r3, #12]
 6099 008c 1B02     		lsl	r3, r3, #8
 6100 008e 9AB2     		uxth	r2, r3
 6101 0090 154B     		ldr	r3, .L498
 6102 0092 5B7B     		ldrb	r3, [r3, #13]
 6103 0094 9BB2     		uxth	r3, r3
 6104 0096 1343     		orr	r3, r2
 6105 0098 9AB2     		uxth	r2, r3
 6106 009a FB69     		ldr	r3, [r7, #28]
 6107 009c 1A80     		strh	r2, [r3]
1730:.\mpu6050.c   **** 	//buffer[14] is register 0x02 (ST1) of AK8975. Contains DRDY in BIT0
1731:.\mpu6050.c   **** 	*mx = (((int16_t)buffer[16]) << 8) | buffer[15]; // equals register 0x03 (HXL) and 0x04 (HXH) of A
 6108              		.loc 1 1731 0
 6109 009e 124B     		ldr	r3, .L498
 6110 00a0 1B7C     		ldrb	r3, [r3, #16]
 6111 00a2 1B02     		lsl	r3, r3, #8
 6112 00a4 9AB2     		uxth	r2, r3
 6113 00a6 104B     		ldr	r3, .L498
 6114 00a8 DB7B     		ldrb	r3, [r3, #15]
 6115 00aa 9BB2     		uxth	r3, r3
 6116 00ac 1343     		orr	r3, r2
 6117 00ae 9AB2     		uxth	r2, r3
 6118 00b0 3B6A     		ldr	r3, [r7, #32]
 6119 00b2 1A80     		strh	r2, [r3]
1732:.\mpu6050.c   **** 	*my = (((int16_t)buffer[18]) << 8) | buffer[17]; // equals register 0x05 (HYL) and 0x06 (HYH) of A
 6120              		.loc 1 1732 0
 6121 00b4 0C4B     		ldr	r3, .L498
 6122 00b6 9B7C     		ldrb	r3, [r3, #18]
 6123 00b8 1B02     		lsl	r3, r3, #8
 6124 00ba 9AB2     		uxth	r2, r3
 6125 00bc 0A4B     		ldr	r3, .L498
 6126 00be 5B7C     		ldrb	r3, [r3, #17]
 6127 00c0 9BB2     		uxth	r3, r3
 6128 00c2 1343     		orr	r3, r2
 6129 00c4 9AB2     		uxth	r2, r3
 6130 00c6 7B6A     		ldr	r3, [r7, #36]
 6131 00c8 1A80     		strh	r2, [r3]
1733:.\mpu6050.c   **** 	*mz = (((int16_t)buffer[20]) << 8) | buffer[19]; // equals register 0x07 (HZL) and 0x08 (HZH) of A
 6132              		.loc 1 1733 0
 6133 00ca 074B     		ldr	r3, .L498
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 139


 6134 00cc 1B7D     		ldrb	r3, [r3, #20]
 6135 00ce 1B02     		lsl	r3, r3, #8
 6136 00d0 9AB2     		uxth	r2, r3
 6137 00d2 054B     		ldr	r3, .L498
 6138 00d4 DB7C     		ldrb	r3, [r3, #19]
 6139 00d6 9BB2     		uxth	r3, r3
 6140 00d8 1343     		orr	r3, r2
 6141 00da 9AB2     		uxth	r2, r3
 6142 00dc BB6A     		ldr	r3, [r7, #40]
 6143 00de 1A80     		strh	r2, [r3]
1734:.\mpu6050.c   **** 	//buffer[21] is register 0x09 (ST2) of AK8975. Contains Data Error (DERR) in BIT2 and Sensor Overf
1735:.\mpu6050.c   **** 
1736:.\mpu6050.c   **** }
 6144              		.loc 1 1736 0
 6145 00e0 BD46     		mov	sp, r7
 6146 00e2 04B0     		add	sp, sp, #16
 6147              		@ sp needed
 6148 00e4 80BD     		pop	{r7, pc}
 6149              	.L499:
 6150 00e6 C046     		.align	2
 6151              	.L498:
 6152 00e8 00000000 		.word	buffer
 6153              		.cfi_endproc
 6154              	.LFE135:
 6155              		.size	MPU6050_getMotion9, .-MPU6050_getMotion9
 6156              		.section	.text.MPU6050_getMotion9t,"ax",%progbits
 6157              		.align	2
 6158              		.global	MPU6050_getMotion9t
 6159              		.code	16
 6160              		.thumb_func
 6161              		.type	MPU6050_getMotion9t, %function
 6162              	MPU6050_getMotion9t:
 6163              	.LFB136:
1737:.\mpu6050.c   **** 
1738:.\mpu6050.c   **** /** Get raw 9-axis motion sensor readings (accel/gyro/compass) + temperature.
1739:.\mpu6050.c   ****  * assumes setup of compass with setup_compass
1740:.\mpu6050.c   ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1741:.\mpu6050.c   ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1742:.\mpu6050.c   ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1743:.\mpu6050.c   ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1744:.\mpu6050.c   ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1745:.\mpu6050.c   ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1746:.\mpu6050.c   ****  * @param mx 16-bit signed integer container for magnetometer X-axis value
1747:.\mpu6050.c   ****  * @param my 16-bit signed integer container for magnetometer Y-axis value
1748:.\mpu6050.c   ****  * @param mz 16-bit signed integer container for magnetometer Z-axis value
1749:.\mpu6050.c   ****  * @param t  16-bit signed integer container for temperature value
1750:.\mpu6050.c   ****  * @see getMotion6()
1751:.\mpu6050.c   ****  * @see getAcceleration()
1752:.\mpu6050.c   ****  * @see getRotation()
1753:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
1754:.\mpu6050.c   ****  * @see setup_compass
1755:.\mpu6050.c   ****  */
1756:.\mpu6050.c   **** void MPU6050_getMotion9t(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* 
 6164              		.loc 1 1756 0
 6165              		.cfi_startproc
 6166 0000 80B5     		push	{r7, lr}
 6167              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 140


 6168              		.cfi_offset 7, -8
 6169              		.cfi_offset 14, -4
 6170 0002 84B0     		sub	sp, sp, #16
 6171              		.cfi_def_cfa_offset 24
 6172 0004 00AF     		add	r7, sp, #0
 6173              		.cfi_def_cfa_register 7
 6174 0006 F860     		str	r0, [r7, #12]
 6175 0008 B960     		str	r1, [r7, #8]
 6176 000a 7A60     		str	r2, [r7, #4]
 6177 000c 3B60     		str	r3, [r7]
1757:.\mpu6050.c   ****     I2CReadBytes(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 22, buffer);
 6178              		.loc 1 1757 0
 6179 000e 3B4B     		ldr	r3, .L501
 6180 0010 6820     		mov	r0, #104
 6181 0012 3B21     		mov	r1, #59
 6182 0014 1622     		mov	r2, #22
 6183 0016 FFF7FEFF 		bl	I2CReadBytes
1758:.\mpu6050.c   **** 	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6184              		.loc 1 1758 0
 6185 001a 384B     		ldr	r3, .L501
 6186 001c 1B78     		ldrb	r3, [r3]
 6187 001e 1B02     		lsl	r3, r3, #8
 6188 0020 9AB2     		uxth	r2, r3
 6189 0022 364B     		ldr	r3, .L501
 6190 0024 5B78     		ldrb	r3, [r3, #1]
 6191 0026 9BB2     		uxth	r3, r3
 6192 0028 1343     		orr	r3, r2
 6193 002a 9AB2     		uxth	r2, r3
 6194 002c FB68     		ldr	r3, [r7, #12]
 6195 002e 1A80     		strh	r2, [r3]
1759:.\mpu6050.c   **** 	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6196              		.loc 1 1759 0
 6197 0030 324B     		ldr	r3, .L501
 6198 0032 9B78     		ldrb	r3, [r3, #2]
 6199 0034 1B02     		lsl	r3, r3, #8
 6200 0036 9AB2     		uxth	r2, r3
 6201 0038 304B     		ldr	r3, .L501
 6202 003a DB78     		ldrb	r3, [r3, #3]
 6203 003c 9BB2     		uxth	r3, r3
 6204 003e 1343     		orr	r3, r2
 6205 0040 9AB2     		uxth	r2, r3
 6206 0042 BB68     		ldr	r3, [r7, #8]
 6207 0044 1A80     		strh	r2, [r3]
1760:.\mpu6050.c   **** 	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6208              		.loc 1 1760 0
 6209 0046 2D4B     		ldr	r3, .L501
 6210 0048 1B79     		ldrb	r3, [r3, #4]
 6211 004a 1B02     		lsl	r3, r3, #8
 6212 004c 9AB2     		uxth	r2, r3
 6213 004e 2B4B     		ldr	r3, .L501
 6214 0050 5B79     		ldrb	r3, [r3, #5]
 6215 0052 9BB2     		uxth	r3, r3
 6216 0054 1343     		orr	r3, r2
 6217 0056 9AB2     		uxth	r2, r3
 6218 0058 7B68     		ldr	r3, [r7, #4]
 6219 005a 1A80     		strh	r2, [r3]
1761:.\mpu6050.c   **** 	*t  = (((int16_t)buffer[6]) << 8) | buffer[7];
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 141


 6220              		.loc 1 1761 0
 6221 005c 274B     		ldr	r3, .L501
 6222 005e 9B79     		ldrb	r3, [r3, #6]
 6223 0060 1B02     		lsl	r3, r3, #8
 6224 0062 9AB2     		uxth	r2, r3
 6225 0064 254B     		ldr	r3, .L501
 6226 0066 DB79     		ldrb	r3, [r3, #7]
 6227 0068 9BB2     		uxth	r3, r3
 6228 006a 1343     		orr	r3, r2
 6229 006c 9AB2     		uxth	r2, r3
 6230 006e FB6A     		ldr	r3, [r7, #44]
 6231 0070 1A80     		strh	r2, [r3]
1762:.\mpu6050.c   **** 	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6232              		.loc 1 1762 0
 6233 0072 224B     		ldr	r3, .L501
 6234 0074 1B7A     		ldrb	r3, [r3, #8]
 6235 0076 1B02     		lsl	r3, r3, #8
 6236 0078 9AB2     		uxth	r2, r3
 6237 007a 204B     		ldr	r3, .L501
 6238 007c 5B7A     		ldrb	r3, [r3, #9]
 6239 007e 9BB2     		uxth	r3, r3
 6240 0080 1343     		orr	r3, r2
 6241 0082 9AB2     		uxth	r2, r3
 6242 0084 3B68     		ldr	r3, [r7]
 6243 0086 1A80     		strh	r2, [r3]
1763:.\mpu6050.c   **** 	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6244              		.loc 1 1763 0
 6245 0088 1C4B     		ldr	r3, .L501
 6246 008a 9B7A     		ldrb	r3, [r3, #10]
 6247 008c 1B02     		lsl	r3, r3, #8
 6248 008e 9AB2     		uxth	r2, r3
 6249 0090 1A4B     		ldr	r3, .L501
 6250 0092 DB7A     		ldrb	r3, [r3, #11]
 6251 0094 9BB2     		uxth	r3, r3
 6252 0096 1343     		orr	r3, r2
 6253 0098 9AB2     		uxth	r2, r3
 6254 009a BB69     		ldr	r3, [r7, #24]
 6255 009c 1A80     		strh	r2, [r3]
1764:.\mpu6050.c   **** 	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6256              		.loc 1 1764 0
 6257 009e 174B     		ldr	r3, .L501
 6258 00a0 1B7B     		ldrb	r3, [r3, #12]
 6259 00a2 1B02     		lsl	r3, r3, #8
 6260 00a4 9AB2     		uxth	r2, r3
 6261 00a6 154B     		ldr	r3, .L501
 6262 00a8 5B7B     		ldrb	r3, [r3, #13]
 6263 00aa 9BB2     		uxth	r3, r3
 6264 00ac 1343     		orr	r3, r2
 6265 00ae 9AB2     		uxth	r2, r3
 6266 00b0 FB69     		ldr	r3, [r7, #28]
 6267 00b2 1A80     		strh	r2, [r3]
1765:.\mpu6050.c   **** 	//buffer[14] is register 0x02 (ST1) of AK8975. Contains DRDY in BIT0
1766:.\mpu6050.c   **** 	*mx = (((int16_t)buffer[16]) << 8) | buffer[15]; // equals register 0x03 (HXL) and 0x04 (HXH) of A
 6268              		.loc 1 1766 0
 6269 00b4 114B     		ldr	r3, .L501
 6270 00b6 1B7C     		ldrb	r3, [r3, #16]
 6271 00b8 1B02     		lsl	r3, r3, #8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 142


 6272 00ba 9AB2     		uxth	r2, r3
 6273 00bc 0F4B     		ldr	r3, .L501
 6274 00be DB7B     		ldrb	r3, [r3, #15]
 6275 00c0 9BB2     		uxth	r3, r3
 6276 00c2 1343     		orr	r3, r2
 6277 00c4 9AB2     		uxth	r2, r3
 6278 00c6 3B6A     		ldr	r3, [r7, #32]
 6279 00c8 1A80     		strh	r2, [r3]
1767:.\mpu6050.c   **** 	*my = (((int16_t)buffer[18]) << 8) | buffer[17]; // equals register 0x05 (HYL) and 0x06 (HYH) of A
 6280              		.loc 1 1767 0
 6281 00ca 0C4B     		ldr	r3, .L501
 6282 00cc 9B7C     		ldrb	r3, [r3, #18]
 6283 00ce 1B02     		lsl	r3, r3, #8
 6284 00d0 9AB2     		uxth	r2, r3
 6285 00d2 0A4B     		ldr	r3, .L501
 6286 00d4 5B7C     		ldrb	r3, [r3, #17]
 6287 00d6 9BB2     		uxth	r3, r3
 6288 00d8 1343     		orr	r3, r2
 6289 00da 9AB2     		uxth	r2, r3
 6290 00dc 7B6A     		ldr	r3, [r7, #36]
 6291 00de 1A80     		strh	r2, [r3]
1768:.\mpu6050.c   **** 	*mz = (((int16_t)buffer[20]) << 8) | buffer[19]; // equals register 0x07 (HZL) and 0x08 (HZH) of A
 6292              		.loc 1 1768 0
 6293 00e0 064B     		ldr	r3, .L501
 6294 00e2 1B7D     		ldrb	r3, [r3, #20]
 6295 00e4 1B02     		lsl	r3, r3, #8
 6296 00e6 9AB2     		uxth	r2, r3
 6297 00e8 044B     		ldr	r3, .L501
 6298 00ea DB7C     		ldrb	r3, [r3, #19]
 6299 00ec 9BB2     		uxth	r3, r3
 6300 00ee 1343     		orr	r3, r2
 6301 00f0 9AB2     		uxth	r2, r3
 6302 00f2 BB6A     		ldr	r3, [r7, #40]
 6303 00f4 1A80     		strh	r2, [r3]
1769:.\mpu6050.c   **** 	//buffer[21] is register 0x09 (ST2) of AK8975. Contains Data Error (DERR) in BIT2 and Sensor Overf
1770:.\mpu6050.c   **** 
1771:.\mpu6050.c   **** }
 6304              		.loc 1 1771 0
 6305 00f6 BD46     		mov	sp, r7
 6306 00f8 04B0     		add	sp, sp, #16
 6307              		@ sp needed
 6308 00fa 80BD     		pop	{r7, pc}
 6309              	.L502:
 6310              		.align	2
 6311              	.L501:
 6312 00fc 00000000 		.word	buffer
 6313              		.cfi_endproc
 6314              	.LFE136:
 6315              		.size	MPU6050_getMotion9t, .-MPU6050_getMotion9t
 6316              		.section	.text.MPU6050_getMotion6,"ax",%progbits
 6317              		.align	2
 6318              		.global	MPU6050_getMotion6
 6319              		.code	16
 6320              		.thumb_func
 6321              		.type	MPU6050_getMotion6, %function
 6322              	MPU6050_getMotion6:
 6323              	.LFB137:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 143


1772:.\mpu6050.c   **** 
1773:.\mpu6050.c   **** /** Get raw 6-axis motion sensor readings (accel/gyro).
1774:.\mpu6050.c   ****  * Retrieves all currently available motion sensor values.
1775:.\mpu6050.c   ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1776:.\mpu6050.c   ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1777:.\mpu6050.c   ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1778:.\mpu6050.c   ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1779:.\mpu6050.c   ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1780:.\mpu6050.c   ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1781:.\mpu6050.c   ****  * @see getAcceleration()
1782:.\mpu6050.c   ****  * @see getRotation()
1783:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
1784:.\mpu6050.c   ****  */
1785:.\mpu6050.c   **** void MPU6050_getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* g
 6324              		.loc 1 1785 0
 6325              		.cfi_startproc
 6326 0000 80B5     		push	{r7, lr}
 6327              		.cfi_def_cfa_offset 8
 6328              		.cfi_offset 7, -8
 6329              		.cfi_offset 14, -4
 6330 0002 84B0     		sub	sp, sp, #16
 6331              		.cfi_def_cfa_offset 24
 6332 0004 00AF     		add	r7, sp, #0
 6333              		.cfi_def_cfa_register 7
 6334 0006 F860     		str	r0, [r7, #12]
 6335 0008 B960     		str	r1, [r7, #8]
 6336 000a 7A60     		str	r2, [r7, #4]
 6337 000c 3B60     		str	r3, [r7]
1786:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 6338              		.loc 1 1786 0
 6339 000e 264B     		ldr	r3, .L504
 6340 0010 1A78     		ldrb	r2, [r3]
 6341 0012 264B     		ldr	r3, .L504+4
 6342 0014 101C     		mov	r0, r2
 6343 0016 3B21     		mov	r1, #59
 6344 0018 0E22     		mov	r2, #14
 6345 001a FFF7FEFF 		bl	I2CReadBytes
1787:.\mpu6050.c   ****     //fixme the following code needs to be examined. causes a interrupt to NMI_VECTOR
1788:.\mpu6050.c   ****     *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6346              		.loc 1 1788 0
 6347 001e 234B     		ldr	r3, .L504+4
 6348 0020 1B78     		ldrb	r3, [r3]
 6349 0022 1B02     		lsl	r3, r3, #8
 6350 0024 9AB2     		uxth	r2, r3
 6351 0026 214B     		ldr	r3, .L504+4
 6352 0028 5B78     		ldrb	r3, [r3, #1]
 6353 002a 9BB2     		uxth	r3, r3
 6354 002c 1343     		orr	r3, r2
 6355 002e 9AB2     		uxth	r2, r3
 6356 0030 FB68     		ldr	r3, [r7, #12]
 6357 0032 1A80     		strh	r2, [r3]
1789:.\mpu6050.c   ****     *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6358              		.loc 1 1789 0
 6359 0034 1D4B     		ldr	r3, .L504+4
 6360 0036 9B78     		ldrb	r3, [r3, #2]
 6361 0038 1B02     		lsl	r3, r3, #8
 6362 003a 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 144


 6363 003c 1B4B     		ldr	r3, .L504+4
 6364 003e DB78     		ldrb	r3, [r3, #3]
 6365 0040 9BB2     		uxth	r3, r3
 6366 0042 1343     		orr	r3, r2
 6367 0044 9AB2     		uxth	r2, r3
 6368 0046 BB68     		ldr	r3, [r7, #8]
 6369 0048 1A80     		strh	r2, [r3]
1790:.\mpu6050.c   ****     *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6370              		.loc 1 1790 0
 6371 004a 184B     		ldr	r3, .L504+4
 6372 004c 1B79     		ldrb	r3, [r3, #4]
 6373 004e 1B02     		lsl	r3, r3, #8
 6374 0050 9AB2     		uxth	r2, r3
 6375 0052 164B     		ldr	r3, .L504+4
 6376 0054 5B79     		ldrb	r3, [r3, #5]
 6377 0056 9BB2     		uxth	r3, r3
 6378 0058 1343     		orr	r3, r2
 6379 005a 9AB2     		uxth	r2, r3
 6380 005c 7B68     		ldr	r3, [r7, #4]
 6381 005e 1A80     		strh	r2, [r3]
1791:.\mpu6050.c   ****     *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6382              		.loc 1 1791 0
 6383 0060 124B     		ldr	r3, .L504+4
 6384 0062 1B7A     		ldrb	r3, [r3, #8]
 6385 0064 1B02     		lsl	r3, r3, #8
 6386 0066 9AB2     		uxth	r2, r3
 6387 0068 104B     		ldr	r3, .L504+4
 6388 006a 5B7A     		ldrb	r3, [r3, #9]
 6389 006c 9BB2     		uxth	r3, r3
 6390 006e 1343     		orr	r3, r2
 6391 0070 9AB2     		uxth	r2, r3
 6392 0072 3B68     		ldr	r3, [r7]
 6393 0074 1A80     		strh	r2, [r3]
1792:.\mpu6050.c   ****     *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6394              		.loc 1 1792 0
 6395 0076 0D4B     		ldr	r3, .L504+4
 6396 0078 9B7A     		ldrb	r3, [r3, #10]
 6397 007a 1B02     		lsl	r3, r3, #8
 6398 007c 9AB2     		uxth	r2, r3
 6399 007e 0B4B     		ldr	r3, .L504+4
 6400 0080 DB7A     		ldrb	r3, [r3, #11]
 6401 0082 9BB2     		uxth	r3, r3
 6402 0084 1343     		orr	r3, r2
 6403 0086 9AB2     		uxth	r2, r3
 6404 0088 BB69     		ldr	r3, [r7, #24]
 6405 008a 1A80     		strh	r2, [r3]
1793:.\mpu6050.c   ****     *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6406              		.loc 1 1793 0
 6407 008c 074B     		ldr	r3, .L504+4
 6408 008e 1B7B     		ldrb	r3, [r3, #12]
 6409 0090 1B02     		lsl	r3, r3, #8
 6410 0092 9AB2     		uxth	r2, r3
 6411 0094 054B     		ldr	r3, .L504+4
 6412 0096 5B7B     		ldrb	r3, [r3, #13]
 6413 0098 9BB2     		uxth	r3, r3
 6414 009a 1343     		orr	r3, r2
 6415 009c 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 145


 6416 009e FB69     		ldr	r3, [r7, #28]
 6417 00a0 1A80     		strh	r2, [r3]
1794:.\mpu6050.c   **** }
 6418              		.loc 1 1794 0
 6419 00a2 BD46     		mov	sp, r7
 6420 00a4 04B0     		add	sp, sp, #16
 6421              		@ sp needed
 6422 00a6 80BD     		pop	{r7, pc}
 6423              	.L505:
 6424              		.align	2
 6425              	.L504:
 6426 00a8 00000000 		.word	devAddr
 6427 00ac 00000000 		.word	buffer
 6428              		.cfi_endproc
 6429              	.LFE137:
 6430              		.size	MPU6050_getMotion6, .-MPU6050_getMotion6
 6431              		.section	.text.MPU6050_getMotion6t,"ax",%progbits
 6432              		.align	2
 6433              		.global	MPU6050_getMotion6t
 6434              		.code	16
 6435              		.thumb_func
 6436              		.type	MPU6050_getMotion6t, %function
 6437              	MPU6050_getMotion6t:
 6438              	.LFB138:
1795:.\mpu6050.c   **** 
1796:.\mpu6050.c   **** /** Get raw 6-axis motion sensor readings (accel/gyro) + temperature.
1797:.\mpu6050.c   ****  * Retrieves all currently available motion sensor values.
1798:.\mpu6050.c   ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1799:.\mpu6050.c   ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1800:.\mpu6050.c   ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1801:.\mpu6050.c   ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1802:.\mpu6050.c   ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1803:.\mpu6050.c   ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1804:.\mpu6050.c   ****  * @param t  16-bit signed integer container for temperature value
1805:.\mpu6050.c   ****  * @see getAcceleration()
1806:.\mpu6050.c   ****  * @see getRotation()
1807:.\mpu6050.c   ****  * @see getTemperature()
1808:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
1809:.\mpu6050.c   ****  */
1810:.\mpu6050.c   **** void MPU6050_getMotion6t(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* 
 6439              		.loc 1 1810 0
 6440              		.cfi_startproc
 6441 0000 80B5     		push	{r7, lr}
 6442              		.cfi_def_cfa_offset 8
 6443              		.cfi_offset 7, -8
 6444              		.cfi_offset 14, -4
 6445 0002 84B0     		sub	sp, sp, #16
 6446              		.cfi_def_cfa_offset 24
 6447 0004 00AF     		add	r7, sp, #0
 6448              		.cfi_def_cfa_register 7
 6449 0006 F860     		str	r0, [r7, #12]
 6450 0008 B960     		str	r1, [r7, #8]
 6451 000a 7A60     		str	r2, [r7, #4]
 6452 000c 3B60     		str	r3, [r7]
1811:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 6453              		.loc 1 1811 0
 6454 000e 2C4B     		ldr	r3, .L507
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 146


 6455 0010 1A78     		ldrb	r2, [r3]
 6456 0012 2C4B     		ldr	r3, .L507+4
 6457 0014 101C     		mov	r0, r2
 6458 0016 3B21     		mov	r1, #59
 6459 0018 0E22     		mov	r2, #14
 6460 001a FFF7FEFF 		bl	I2CReadBytes
1812:.\mpu6050.c   ****     *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6461              		.loc 1 1812 0
 6462 001e 294B     		ldr	r3, .L507+4
 6463 0020 1B78     		ldrb	r3, [r3]
 6464 0022 1B02     		lsl	r3, r3, #8
 6465 0024 9AB2     		uxth	r2, r3
 6466 0026 274B     		ldr	r3, .L507+4
 6467 0028 5B78     		ldrb	r3, [r3, #1]
 6468 002a 9BB2     		uxth	r3, r3
 6469 002c 1343     		orr	r3, r2
 6470 002e 9AB2     		uxth	r2, r3
 6471 0030 FB68     		ldr	r3, [r7, #12]
 6472 0032 1A80     		strh	r2, [r3]
1813:.\mpu6050.c   ****     *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6473              		.loc 1 1813 0
 6474 0034 234B     		ldr	r3, .L507+4
 6475 0036 9B78     		ldrb	r3, [r3, #2]
 6476 0038 1B02     		lsl	r3, r3, #8
 6477 003a 9AB2     		uxth	r2, r3
 6478 003c 214B     		ldr	r3, .L507+4
 6479 003e DB78     		ldrb	r3, [r3, #3]
 6480 0040 9BB2     		uxth	r3, r3
 6481 0042 1343     		orr	r3, r2
 6482 0044 9AB2     		uxth	r2, r3
 6483 0046 BB68     		ldr	r3, [r7, #8]
 6484 0048 1A80     		strh	r2, [r3]
1814:.\mpu6050.c   ****     *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6485              		.loc 1 1814 0
 6486 004a 1E4B     		ldr	r3, .L507+4
 6487 004c 1B79     		ldrb	r3, [r3, #4]
 6488 004e 1B02     		lsl	r3, r3, #8
 6489 0050 9AB2     		uxth	r2, r3
 6490 0052 1C4B     		ldr	r3, .L507+4
 6491 0054 5B79     		ldrb	r3, [r3, #5]
 6492 0056 9BB2     		uxth	r3, r3
 6493 0058 1343     		orr	r3, r2
 6494 005a 9AB2     		uxth	r2, r3
 6495 005c 7B68     		ldr	r3, [r7, #4]
 6496 005e 1A80     		strh	r2, [r3]
1815:.\mpu6050.c   ****     *t  = (((int16_t)buffer[6]) << 8) | buffer[7];
 6497              		.loc 1 1815 0
 6498 0060 184B     		ldr	r3, .L507+4
 6499 0062 9B79     		ldrb	r3, [r3, #6]
 6500 0064 1B02     		lsl	r3, r3, #8
 6501 0066 9AB2     		uxth	r2, r3
 6502 0068 164B     		ldr	r3, .L507+4
 6503 006a DB79     		ldrb	r3, [r3, #7]
 6504 006c 9BB2     		uxth	r3, r3
 6505 006e 1343     		orr	r3, r2
 6506 0070 9AB2     		uxth	r2, r3
 6507 0072 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 147


 6508 0074 1A80     		strh	r2, [r3]
1816:.\mpu6050.c   ****     *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6509              		.loc 1 1816 0
 6510 0076 134B     		ldr	r3, .L507+4
 6511 0078 1B7A     		ldrb	r3, [r3, #8]
 6512 007a 1B02     		lsl	r3, r3, #8
 6513 007c 9AB2     		uxth	r2, r3
 6514 007e 114B     		ldr	r3, .L507+4
 6515 0080 5B7A     		ldrb	r3, [r3, #9]
 6516 0082 9BB2     		uxth	r3, r3
 6517 0084 1343     		orr	r3, r2
 6518 0086 9AB2     		uxth	r2, r3
 6519 0088 3B68     		ldr	r3, [r7]
 6520 008a 1A80     		strh	r2, [r3]
1817:.\mpu6050.c   ****     *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6521              		.loc 1 1817 0
 6522 008c 0D4B     		ldr	r3, .L507+4
 6523 008e 9B7A     		ldrb	r3, [r3, #10]
 6524 0090 1B02     		lsl	r3, r3, #8
 6525 0092 9AB2     		uxth	r2, r3
 6526 0094 0B4B     		ldr	r3, .L507+4
 6527 0096 DB7A     		ldrb	r3, [r3, #11]
 6528 0098 9BB2     		uxth	r3, r3
 6529 009a 1343     		orr	r3, r2
 6530 009c 9AB2     		uxth	r2, r3
 6531 009e BB69     		ldr	r3, [r7, #24]
 6532 00a0 1A80     		strh	r2, [r3]
1818:.\mpu6050.c   ****     *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6533              		.loc 1 1818 0
 6534 00a2 084B     		ldr	r3, .L507+4
 6535 00a4 1B7B     		ldrb	r3, [r3, #12]
 6536 00a6 1B02     		lsl	r3, r3, #8
 6537 00a8 9AB2     		uxth	r2, r3
 6538 00aa 064B     		ldr	r3, .L507+4
 6539 00ac 5B7B     		ldrb	r3, [r3, #13]
 6540 00ae 9BB2     		uxth	r3, r3
 6541 00b0 1343     		orr	r3, r2
 6542 00b2 9AB2     		uxth	r2, r3
 6543 00b4 FB69     		ldr	r3, [r7, #28]
 6544 00b6 1A80     		strh	r2, [r3]
1819:.\mpu6050.c   **** }
 6545              		.loc 1 1819 0
 6546 00b8 BD46     		mov	sp, r7
 6547 00ba 04B0     		add	sp, sp, #16
 6548              		@ sp needed
 6549 00bc 80BD     		pop	{r7, pc}
 6550              	.L508:
 6551 00be C046     		.align	2
 6552              	.L507:
 6553 00c0 00000000 		.word	devAddr
 6554 00c4 00000000 		.word	buffer
 6555              		.cfi_endproc
 6556              	.LFE138:
 6557              		.size	MPU6050_getMotion6t, .-MPU6050_getMotion6t
 6558              		.section	.text.MPU6050_getAcceleration,"ax",%progbits
 6559              		.align	2
 6560              		.global	MPU6050_getAcceleration
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 148


 6561              		.code	16
 6562              		.thumb_func
 6563              		.type	MPU6050_getAcceleration, %function
 6564              	MPU6050_getAcceleration:
 6565              	.LFB139:
1820:.\mpu6050.c   **** 
1821:.\mpu6050.c   **** /** Get 3-axis accelerometer readings.
1822:.\mpu6050.c   ****  * These registers store the most recent accelerometer measurements.
1823:.\mpu6050.c   ****  * Accelerometer measurements are written to these registers at the Sample Rate
1824:.\mpu6050.c   ****  * as defined in Register 25.
1825:.\mpu6050.c   ****  *
1826:.\mpu6050.c   ****  * The accelerometer measurement registers, along with the temperature
1827:.\mpu6050.c   ****  * measurement registers, gyroscope measurement registers, and external sensor
1828:.\mpu6050.c   ****  * data registers, are composed of two sets of registers: an internal register
1829:.\mpu6050.c   ****  * set and a user-facing read register set.
1830:.\mpu6050.c   ****  *
1831:.\mpu6050.c   ****  * The data within the accelerometer sensors' internal register set is always
1832:.\mpu6050.c   ****  * updated at the Sample Rate. Meanwhile, the user-facing read register set
1833:.\mpu6050.c   ****  * duplicates the internal register set's data values whenever the serial
1834:.\mpu6050.c   ****  * interface is idle. This guarantees that a burst read of sensor registers will
1835:.\mpu6050.c   ****  * read measurements from the same sampling instant. Note that if burst reads
1836:.\mpu6050.c   ****  * are not used, the user is responsible for ensuring a set of single byte reads
1837:.\mpu6050.c   ****  * correspond to a single sampling instant by checking the Data Ready interrupt.
1838:.\mpu6050.c   ****  *
1839:.\mpu6050.c   ****  * Each 16-bit accelerometer measurement has a full scale defined in ACCEL_FS
1840:.\mpu6050.c   ****  * (Register 28). For each full scale setting, the accelerometers' sensitivity
1841:.\mpu6050.c   ****  * per LSB in ACCEL_xOUT is shown in the table below:
1842:.\mpu6050.c   ****  *
1843:.\mpu6050.c   ****  * <pre>
1844:.\mpu6050.c   ****  * AFS_SEL | Full Scale Range | LSB Sensitivity
1845:.\mpu6050.c   ****  * --------+------------------+----------------
1846:.\mpu6050.c   ****  * 0       | +/- 2g           | 8192 LSB/mg
1847:.\mpu6050.c   ****  * 1       | +/- 4g           | 4096 LSB/mg
1848:.\mpu6050.c   ****  * 2       | +/- 8g           | 2048 LSB/mg
1849:.\mpu6050.c   ****  * 3       | +/- 16g          | 1024 LSB/mg
1850:.\mpu6050.c   ****  * </pre>
1851:.\mpu6050.c   ****  *
1852:.\mpu6050.c   ****  * @param x 16-bit signed integer container for X-axis acceleration
1853:.\mpu6050.c   ****  * @param y 16-bit signed integer container for Y-axis acceleration
1854:.\mpu6050.c   ****  * @param z 16-bit signed integer container for Z-axis acceleration
1855:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_XOUT_H
1856:.\mpu6050.c   ****  */
1857:.\mpu6050.c   **** void MPU6050_getAcceleration(int16_t* x, int16_t* y, int16_t* z) {
 6566              		.loc 1 1857 0
 6567              		.cfi_startproc
 6568 0000 80B5     		push	{r7, lr}
 6569              		.cfi_def_cfa_offset 8
 6570              		.cfi_offset 7, -8
 6571              		.cfi_offset 14, -4
 6572 0002 84B0     		sub	sp, sp, #16
 6573              		.cfi_def_cfa_offset 24
 6574 0004 00AF     		add	r7, sp, #0
 6575              		.cfi_def_cfa_register 7
 6576 0006 F860     		str	r0, [r7, #12]
 6577 0008 B960     		str	r1, [r7, #8]
 6578 000a 7A60     		str	r2, [r7, #4]
1858:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 6, buffer);
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 149


 6579              		.loc 1 1858 0
 6580 000c 154B     		ldr	r3, .L510
 6581 000e 1A78     		ldrb	r2, [r3]
 6582 0010 154B     		ldr	r3, .L510+4
 6583 0012 101C     		mov	r0, r2
 6584 0014 3B21     		mov	r1, #59
 6585 0016 0622     		mov	r2, #6
 6586 0018 FFF7FEFF 		bl	I2CReadBytes
1859:.\mpu6050.c   ****     *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 6587              		.loc 1 1859 0
 6588 001c 124B     		ldr	r3, .L510+4
 6589 001e 1B78     		ldrb	r3, [r3]
 6590 0020 1B02     		lsl	r3, r3, #8
 6591 0022 9AB2     		uxth	r2, r3
 6592 0024 104B     		ldr	r3, .L510+4
 6593 0026 5B78     		ldrb	r3, [r3, #1]
 6594 0028 9BB2     		uxth	r3, r3
 6595 002a 1343     		orr	r3, r2
 6596 002c 9AB2     		uxth	r2, r3
 6597 002e FB68     		ldr	r3, [r7, #12]
 6598 0030 1A80     		strh	r2, [r3]
1860:.\mpu6050.c   ****     *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 6599              		.loc 1 1860 0
 6600 0032 0D4B     		ldr	r3, .L510+4
 6601 0034 9B78     		ldrb	r3, [r3, #2]
 6602 0036 1B02     		lsl	r3, r3, #8
 6603 0038 9AB2     		uxth	r2, r3
 6604 003a 0B4B     		ldr	r3, .L510+4
 6605 003c DB78     		ldrb	r3, [r3, #3]
 6606 003e 9BB2     		uxth	r3, r3
 6607 0040 1343     		orr	r3, r2
 6608 0042 9AB2     		uxth	r2, r3
 6609 0044 BB68     		ldr	r3, [r7, #8]
 6610 0046 1A80     		strh	r2, [r3]
1861:.\mpu6050.c   ****     *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 6611              		.loc 1 1861 0
 6612 0048 074B     		ldr	r3, .L510+4
 6613 004a 1B79     		ldrb	r3, [r3, #4]
 6614 004c 1B02     		lsl	r3, r3, #8
 6615 004e 9AB2     		uxth	r2, r3
 6616 0050 054B     		ldr	r3, .L510+4
 6617 0052 5B79     		ldrb	r3, [r3, #5]
 6618 0054 9BB2     		uxth	r3, r3
 6619 0056 1343     		orr	r3, r2
 6620 0058 9AB2     		uxth	r2, r3
 6621 005a 7B68     		ldr	r3, [r7, #4]
 6622 005c 1A80     		strh	r2, [r3]
1862:.\mpu6050.c   **** }
 6623              		.loc 1 1862 0
 6624 005e BD46     		mov	sp, r7
 6625 0060 04B0     		add	sp, sp, #16
 6626              		@ sp needed
 6627 0062 80BD     		pop	{r7, pc}
 6628              	.L511:
 6629              		.align	2
 6630              	.L510:
 6631 0064 00000000 		.word	devAddr
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 150


 6632 0068 00000000 		.word	buffer
 6633              		.cfi_endproc
 6634              	.LFE139:
 6635              		.size	MPU6050_getAcceleration, .-MPU6050_getAcceleration
 6636              		.section	.text.MPU6050_getAccelerationX,"ax",%progbits
 6637              		.align	2
 6638              		.global	MPU6050_getAccelerationX
 6639              		.code	16
 6640              		.thumb_func
 6641              		.type	MPU6050_getAccelerationX, %function
 6642              	MPU6050_getAccelerationX:
 6643              	.LFB140:
1863:.\mpu6050.c   **** /** Get X-axis accelerometer reading.
1864:.\mpu6050.c   ****  * @return X-axis acceleration measurement in 16-bit 2's complement format
1865:.\mpu6050.c   ****  * @see getMotion6()
1866:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
1867:.\mpu6050.c   ****  */
1868:.\mpu6050.c   **** int16_t MPU6050_getAccelerationX() {
 6644              		.loc 1 1868 0
 6645              		.cfi_startproc
 6646 0000 80B5     		push	{r7, lr}
 6647              		.cfi_def_cfa_offset 8
 6648              		.cfi_offset 7, -8
 6649              		.cfi_offset 14, -4
 6650 0002 00AF     		add	r7, sp, #0
 6651              		.cfi_def_cfa_register 7
1869:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 2, buffer);
 6652              		.loc 1 1869 0
 6653 0004 0A4B     		ldr	r3, .L514
 6654 0006 1A78     		ldrb	r2, [r3]
 6655 0008 0A4B     		ldr	r3, .L514+4
 6656 000a 101C     		mov	r0, r2
 6657 000c 3B21     		mov	r1, #59
 6658 000e 0222     		mov	r2, #2
 6659 0010 FFF7FEFF 		bl	I2CReadBytes
1870:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6660              		.loc 1 1870 0
 6661 0014 074B     		ldr	r3, .L514+4
 6662 0016 1B78     		ldrb	r3, [r3]
 6663 0018 1B02     		lsl	r3, r3, #8
 6664 001a 9AB2     		uxth	r2, r3
 6665 001c 054B     		ldr	r3, .L514+4
 6666 001e 5B78     		ldrb	r3, [r3, #1]
 6667 0020 9BB2     		uxth	r3, r3
 6668 0022 1343     		orr	r3, r2
 6669 0024 9BB2     		uxth	r3, r3
 6670 0026 1BB2     		sxth	r3, r3
1871:.\mpu6050.c   **** }
 6671              		.loc 1 1871 0
 6672 0028 181C     		mov	r0, r3
 6673 002a BD46     		mov	sp, r7
 6674              		@ sp needed
 6675 002c 80BD     		pop	{r7, pc}
 6676              	.L515:
 6677 002e C046     		.align	2
 6678              	.L514:
 6679 0030 00000000 		.word	devAddr
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 151


 6680 0034 00000000 		.word	buffer
 6681              		.cfi_endproc
 6682              	.LFE140:
 6683              		.size	MPU6050_getAccelerationX, .-MPU6050_getAccelerationX
 6684              		.section	.text.MPU6050_getAccelerationY,"ax",%progbits
 6685              		.align	2
 6686              		.global	MPU6050_getAccelerationY
 6687              		.code	16
 6688              		.thumb_func
 6689              		.type	MPU6050_getAccelerationY, %function
 6690              	MPU6050_getAccelerationY:
 6691              	.LFB141:
1872:.\mpu6050.c   **** /** Get Y-axis accelerometer reading.
1873:.\mpu6050.c   ****  * @return Y-axis acceleration measurement in 16-bit 2's complement format
1874:.\mpu6050.c   ****  * @see getMotion6()
1875:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_YOUT_H
1876:.\mpu6050.c   ****  */
1877:.\mpu6050.c   **** int16_t MPU6050_getAccelerationY() {
 6692              		.loc 1 1877 0
 6693              		.cfi_startproc
 6694 0000 80B5     		push	{r7, lr}
 6695              		.cfi_def_cfa_offset 8
 6696              		.cfi_offset 7, -8
 6697              		.cfi_offset 14, -4
 6698 0002 00AF     		add	r7, sp, #0
 6699              		.cfi_def_cfa_register 7
1878:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_YOUT_H, 2, buffer);
 6700              		.loc 1 1878 0
 6701 0004 0A4B     		ldr	r3, .L518
 6702 0006 1A78     		ldrb	r2, [r3]
 6703 0008 0A4B     		ldr	r3, .L518+4
 6704 000a 101C     		mov	r0, r2
 6705 000c 3D21     		mov	r1, #61
 6706 000e 0222     		mov	r2, #2
 6707 0010 FFF7FEFF 		bl	I2CReadBytes
1879:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6708              		.loc 1 1879 0
 6709 0014 074B     		ldr	r3, .L518+4
 6710 0016 1B78     		ldrb	r3, [r3]
 6711 0018 1B02     		lsl	r3, r3, #8
 6712 001a 9AB2     		uxth	r2, r3
 6713 001c 054B     		ldr	r3, .L518+4
 6714 001e 5B78     		ldrb	r3, [r3, #1]
 6715 0020 9BB2     		uxth	r3, r3
 6716 0022 1343     		orr	r3, r2
 6717 0024 9BB2     		uxth	r3, r3
 6718 0026 1BB2     		sxth	r3, r3
1880:.\mpu6050.c   **** }
 6719              		.loc 1 1880 0
 6720 0028 181C     		mov	r0, r3
 6721 002a BD46     		mov	sp, r7
 6722              		@ sp needed
 6723 002c 80BD     		pop	{r7, pc}
 6724              	.L519:
 6725 002e C046     		.align	2
 6726              	.L518:
 6727 0030 00000000 		.word	devAddr
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 152


 6728 0034 00000000 		.word	buffer
 6729              		.cfi_endproc
 6730              	.LFE141:
 6731              		.size	MPU6050_getAccelerationY, .-MPU6050_getAccelerationY
 6732              		.section	.text.MPU6050_getAccelerationZ,"ax",%progbits
 6733              		.align	2
 6734              		.global	MPU6050_getAccelerationZ
 6735              		.code	16
 6736              		.thumb_func
 6737              		.type	MPU6050_getAccelerationZ, %function
 6738              	MPU6050_getAccelerationZ:
 6739              	.LFB142:
1881:.\mpu6050.c   **** /** Get Z-axis accelerometer reading.
1882:.\mpu6050.c   ****  * @return Z-axis acceleration measurement in 16-bit 2's complement format
1883:.\mpu6050.c   ****  * @see getMotion6()
1884:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_ZOUT_H
1885:.\mpu6050.c   ****  */
1886:.\mpu6050.c   **** int16_t MPU6050_getAccelerationZ() {
 6740              		.loc 1 1886 0
 6741              		.cfi_startproc
 6742 0000 80B5     		push	{r7, lr}
 6743              		.cfi_def_cfa_offset 8
 6744              		.cfi_offset 7, -8
 6745              		.cfi_offset 14, -4
 6746 0002 00AF     		add	r7, sp, #0
 6747              		.cfi_def_cfa_register 7
1887:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_ZOUT_H, 2, buffer);
 6748              		.loc 1 1887 0
 6749 0004 0A4B     		ldr	r3, .L522
 6750 0006 1A78     		ldrb	r2, [r3]
 6751 0008 0A4B     		ldr	r3, .L522+4
 6752 000a 101C     		mov	r0, r2
 6753 000c 3F21     		mov	r1, #63
 6754 000e 0222     		mov	r2, #2
 6755 0010 FFF7FEFF 		bl	I2CReadBytes
1888:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6756              		.loc 1 1888 0
 6757 0014 074B     		ldr	r3, .L522+4
 6758 0016 1B78     		ldrb	r3, [r3]
 6759 0018 1B02     		lsl	r3, r3, #8
 6760 001a 9AB2     		uxth	r2, r3
 6761 001c 054B     		ldr	r3, .L522+4
 6762 001e 5B78     		ldrb	r3, [r3, #1]
 6763 0020 9BB2     		uxth	r3, r3
 6764 0022 1343     		orr	r3, r2
 6765 0024 9BB2     		uxth	r3, r3
 6766 0026 1BB2     		sxth	r3, r3
1889:.\mpu6050.c   **** }
 6767              		.loc 1 1889 0
 6768 0028 181C     		mov	r0, r3
 6769 002a BD46     		mov	sp, r7
 6770              		@ sp needed
 6771 002c 80BD     		pop	{r7, pc}
 6772              	.L523:
 6773 002e C046     		.align	2
 6774              	.L522:
 6775 0030 00000000 		.word	devAddr
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 153


 6776 0034 00000000 		.word	buffer
 6777              		.cfi_endproc
 6778              	.LFE142:
 6779              		.size	MPU6050_getAccelerationZ, .-MPU6050_getAccelerationZ
 6780              		.section	.text.MPU6050_getTemperature,"ax",%progbits
 6781              		.align	2
 6782              		.global	MPU6050_getTemperature
 6783              		.code	16
 6784              		.thumb_func
 6785              		.type	MPU6050_getTemperature, %function
 6786              	MPU6050_getTemperature:
 6787              	.LFB143:
1890:.\mpu6050.c   **** 
1891:.\mpu6050.c   **** // TEMP_OUT_* registers
1892:.\mpu6050.c   **** 
1893:.\mpu6050.c   **** /** Get current internal temperature.
1894:.\mpu6050.c   ****  * @return Temperature reading in 16-bit 2's complement format
1895:.\mpu6050.c   ****  * @see MPU6050_RA_TEMP_OUT_H
1896:.\mpu6050.c   ****  */
1897:.\mpu6050.c   **** int16_t MPU6050_getTemperature() {
 6788              		.loc 1 1897 0
 6789              		.cfi_startproc
 6790 0000 80B5     		push	{r7, lr}
 6791              		.cfi_def_cfa_offset 8
 6792              		.cfi_offset 7, -8
 6793              		.cfi_offset 14, -4
 6794 0002 00AF     		add	r7, sp, #0
 6795              		.cfi_def_cfa_register 7
1898:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_TEMP_OUT_H, 2, buffer);
 6796              		.loc 1 1898 0
 6797 0004 0A4B     		ldr	r3, .L526
 6798 0006 1A78     		ldrb	r2, [r3]
 6799 0008 0A4B     		ldr	r3, .L526+4
 6800 000a 101C     		mov	r0, r2
 6801 000c 4121     		mov	r1, #65
 6802 000e 0222     		mov	r2, #2
 6803 0010 FFF7FEFF 		bl	I2CReadBytes
1899:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6804              		.loc 1 1899 0
 6805 0014 074B     		ldr	r3, .L526+4
 6806 0016 1B78     		ldrb	r3, [r3]
 6807 0018 1B02     		lsl	r3, r3, #8
 6808 001a 9AB2     		uxth	r2, r3
 6809 001c 054B     		ldr	r3, .L526+4
 6810 001e 5B78     		ldrb	r3, [r3, #1]
 6811 0020 9BB2     		uxth	r3, r3
 6812 0022 1343     		orr	r3, r2
 6813 0024 9BB2     		uxth	r3, r3
 6814 0026 1BB2     		sxth	r3, r3
1900:.\mpu6050.c   **** }
 6815              		.loc 1 1900 0
 6816 0028 181C     		mov	r0, r3
 6817 002a BD46     		mov	sp, r7
 6818              		@ sp needed
 6819 002c 80BD     		pop	{r7, pc}
 6820              	.L527:
 6821 002e C046     		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 154


 6822              	.L526:
 6823 0030 00000000 		.word	devAddr
 6824 0034 00000000 		.word	buffer
 6825              		.cfi_endproc
 6826              	.LFE143:
 6827              		.size	MPU6050_getTemperature, .-MPU6050_getTemperature
 6828              		.section	.text.MPU6050_getRotation,"ax",%progbits
 6829              		.align	2
 6830              		.global	MPU6050_getRotation
 6831              		.code	16
 6832              		.thumb_func
 6833              		.type	MPU6050_getRotation, %function
 6834              	MPU6050_getRotation:
 6835              	.LFB144:
1901:.\mpu6050.c   **** 
1902:.\mpu6050.c   **** // GYRO_*OUT_* registers
1903:.\mpu6050.c   **** 
1904:.\mpu6050.c   **** /** Get 3-axis gyroscope readings.
1905:.\mpu6050.c   ****  * These gyroscope measurement registers, along with the accelerometer
1906:.\mpu6050.c   ****  * measurement registers, temperature measurement registers, and external sensor
1907:.\mpu6050.c   ****  * data registers, are composed of two sets of registers: an internal register
1908:.\mpu6050.c   ****  * set and a user-facing read register set.
1909:.\mpu6050.c   ****  * The data within the gyroscope sensors' internal register set is always
1910:.\mpu6050.c   ****  * updated at the Sample Rate. Meanwhile, the user-facing read register set
1911:.\mpu6050.c   ****  * duplicates the internal register set's data values whenever the serial
1912:.\mpu6050.c   ****  * interface is idle. This guarantees that a burst read of sensor registers will
1913:.\mpu6050.c   ****  * read measurements from the same sampling instant. Note that if burst reads
1914:.\mpu6050.c   ****  * are not used, the user is responsible for ensuring a set of single byte reads
1915:.\mpu6050.c   ****  * correspond to a single sampling instant by checking the Data Ready interrupt.
1916:.\mpu6050.c   ****  *
1917:.\mpu6050.c   ****  * Each 16-bit gyroscope measurement has a full scale defined in FS_SEL
1918:.\mpu6050.c   ****  * (Register 27). For each full scale setting, the gyroscopes' sensitivity per
1919:.\mpu6050.c   ****  * LSB in GYRO_xOUT is shown in the table below:
1920:.\mpu6050.c   ****  *
1921:.\mpu6050.c   ****  * <pre>
1922:.\mpu6050.c   ****  * FS_SEL | Full Scale Range   | LSB Sensitivity
1923:.\mpu6050.c   ****  * -------+--------------------+----------------
1924:.\mpu6050.c   ****  * 0      | +/- 250 degrees/s  | 131 LSB/deg/s
1925:.\mpu6050.c   ****  * 1      | +/- 500 degrees/s  | 65.5 LSB/deg/s
1926:.\mpu6050.c   ****  * 2      | +/- 1000 degrees/s | 32.8 LSB/deg/s
1927:.\mpu6050.c   ****  * 3      | +/- 2000 degrees/s | 16.4 LSB/deg/s
1928:.\mpu6050.c   ****  * </pre>
1929:.\mpu6050.c   ****  *
1930:.\mpu6050.c   ****  * @param x 16-bit signed integer container for X-axis rotation
1931:.\mpu6050.c   ****  * @param y 16-bit signed integer container for Y-axis rotation
1932:.\mpu6050.c   ****  * @param z 16-bit signed integer container for Z-axis rotation
1933:.\mpu6050.c   ****  * @see getMotion6()
1934:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_XOUT_H
1935:.\mpu6050.c   ****  */
1936:.\mpu6050.c   **** void MPU6050_getRotation(int16_t* x, int16_t* y, int16_t* z) {
 6836              		.loc 1 1936 0
 6837              		.cfi_startproc
 6838 0000 80B5     		push	{r7, lr}
 6839              		.cfi_def_cfa_offset 8
 6840              		.cfi_offset 7, -8
 6841              		.cfi_offset 14, -4
 6842 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 155


 6843              		.cfi_def_cfa_offset 24
 6844 0004 00AF     		add	r7, sp, #0
 6845              		.cfi_def_cfa_register 7
 6846 0006 F860     		str	r0, [r7, #12]
 6847 0008 B960     		str	r1, [r7, #8]
 6848 000a 7A60     		str	r2, [r7, #4]
1937:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 6, buffer);
 6849              		.loc 1 1937 0
 6850 000c 154B     		ldr	r3, .L529
 6851 000e 1A78     		ldrb	r2, [r3]
 6852 0010 154B     		ldr	r3, .L529+4
 6853 0012 101C     		mov	r0, r2
 6854 0014 4321     		mov	r1, #67
 6855 0016 0622     		mov	r2, #6
 6856 0018 FFF7FEFF 		bl	I2CReadBytes
1938:.\mpu6050.c   ****     *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 6857              		.loc 1 1938 0
 6858 001c 124B     		ldr	r3, .L529+4
 6859 001e 1B78     		ldrb	r3, [r3]
 6860 0020 1B02     		lsl	r3, r3, #8
 6861 0022 9AB2     		uxth	r2, r3
 6862 0024 104B     		ldr	r3, .L529+4
 6863 0026 5B78     		ldrb	r3, [r3, #1]
 6864 0028 9BB2     		uxth	r3, r3
 6865 002a 1343     		orr	r3, r2
 6866 002c 9AB2     		uxth	r2, r3
 6867 002e FB68     		ldr	r3, [r7, #12]
 6868 0030 1A80     		strh	r2, [r3]
1939:.\mpu6050.c   ****     *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 6869              		.loc 1 1939 0
 6870 0032 0D4B     		ldr	r3, .L529+4
 6871 0034 9B78     		ldrb	r3, [r3, #2]
 6872 0036 1B02     		lsl	r3, r3, #8
 6873 0038 9AB2     		uxth	r2, r3
 6874 003a 0B4B     		ldr	r3, .L529+4
 6875 003c DB78     		ldrb	r3, [r3, #3]
 6876 003e 9BB2     		uxth	r3, r3
 6877 0040 1343     		orr	r3, r2
 6878 0042 9AB2     		uxth	r2, r3
 6879 0044 BB68     		ldr	r3, [r7, #8]
 6880 0046 1A80     		strh	r2, [r3]
1940:.\mpu6050.c   ****     *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 6881              		.loc 1 1940 0
 6882 0048 074B     		ldr	r3, .L529+4
 6883 004a 1B79     		ldrb	r3, [r3, #4]
 6884 004c 1B02     		lsl	r3, r3, #8
 6885 004e 9AB2     		uxth	r2, r3
 6886 0050 054B     		ldr	r3, .L529+4
 6887 0052 5B79     		ldrb	r3, [r3, #5]
 6888 0054 9BB2     		uxth	r3, r3
 6889 0056 1343     		orr	r3, r2
 6890 0058 9AB2     		uxth	r2, r3
 6891 005a 7B68     		ldr	r3, [r7, #4]
 6892 005c 1A80     		strh	r2, [r3]
1941:.\mpu6050.c   **** }
 6893              		.loc 1 1941 0
 6894 005e BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 156


 6895 0060 04B0     		add	sp, sp, #16
 6896              		@ sp needed
 6897 0062 80BD     		pop	{r7, pc}
 6898              	.L530:
 6899              		.align	2
 6900              	.L529:
 6901 0064 00000000 		.word	devAddr
 6902 0068 00000000 		.word	buffer
 6903              		.cfi_endproc
 6904              	.LFE144:
 6905              		.size	MPU6050_getRotation, .-MPU6050_getRotation
 6906              		.section	.text.MPU6050_getRotationX,"ax",%progbits
 6907              		.align	2
 6908              		.global	MPU6050_getRotationX
 6909              		.code	16
 6910              		.thumb_func
 6911              		.type	MPU6050_getRotationX, %function
 6912              	MPU6050_getRotationX:
 6913              	.LFB145:
1942:.\mpu6050.c   **** /** Get X-axis gyroscope reading.
1943:.\mpu6050.c   ****  * @return X-axis rotation measurement in 16-bit 2's complement format
1944:.\mpu6050.c   ****  * @see getMotion6()
1945:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_XOUT_H
1946:.\mpu6050.c   ****  */
1947:.\mpu6050.c   **** int16_t MPU6050_getRotationX() {
 6914              		.loc 1 1947 0
 6915              		.cfi_startproc
 6916 0000 80B5     		push	{r7, lr}
 6917              		.cfi_def_cfa_offset 8
 6918              		.cfi_offset 7, -8
 6919              		.cfi_offset 14, -4
 6920 0002 00AF     		add	r7, sp, #0
 6921              		.cfi_def_cfa_register 7
1948:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 2, buffer);
 6922              		.loc 1 1948 0
 6923 0004 0A4B     		ldr	r3, .L533
 6924 0006 1A78     		ldrb	r2, [r3]
 6925 0008 0A4B     		ldr	r3, .L533+4
 6926 000a 101C     		mov	r0, r2
 6927 000c 4321     		mov	r1, #67
 6928 000e 0222     		mov	r2, #2
 6929 0010 FFF7FEFF 		bl	I2CReadBytes
1949:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6930              		.loc 1 1949 0
 6931 0014 074B     		ldr	r3, .L533+4
 6932 0016 1B78     		ldrb	r3, [r3]
 6933 0018 1B02     		lsl	r3, r3, #8
 6934 001a 9AB2     		uxth	r2, r3
 6935 001c 054B     		ldr	r3, .L533+4
 6936 001e 5B78     		ldrb	r3, [r3, #1]
 6937 0020 9BB2     		uxth	r3, r3
 6938 0022 1343     		orr	r3, r2
 6939 0024 9BB2     		uxth	r3, r3
 6940 0026 1BB2     		sxth	r3, r3
1950:.\mpu6050.c   **** }
 6941              		.loc 1 1950 0
 6942 0028 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 157


 6943 002a BD46     		mov	sp, r7
 6944              		@ sp needed
 6945 002c 80BD     		pop	{r7, pc}
 6946              	.L534:
 6947 002e C046     		.align	2
 6948              	.L533:
 6949 0030 00000000 		.word	devAddr
 6950 0034 00000000 		.word	buffer
 6951              		.cfi_endproc
 6952              	.LFE145:
 6953              		.size	MPU6050_getRotationX, .-MPU6050_getRotationX
 6954              		.section	.text.MPU6050_getRotationY,"ax",%progbits
 6955              		.align	2
 6956              		.global	MPU6050_getRotationY
 6957              		.code	16
 6958              		.thumb_func
 6959              		.type	MPU6050_getRotationY, %function
 6960              	MPU6050_getRotationY:
 6961              	.LFB146:
1951:.\mpu6050.c   **** /** Get Y-axis gyroscope reading.
1952:.\mpu6050.c   ****  * @return Y-axis rotation measurement in 16-bit 2's complement format
1953:.\mpu6050.c   ****  * @see getMotion6()
1954:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_YOUT_H
1955:.\mpu6050.c   ****  */
1956:.\mpu6050.c   **** int16_t MPU6050_getRotationY() {
 6962              		.loc 1 1956 0
 6963              		.cfi_startproc
 6964 0000 80B5     		push	{r7, lr}
 6965              		.cfi_def_cfa_offset 8
 6966              		.cfi_offset 7, -8
 6967              		.cfi_offset 14, -4
 6968 0002 00AF     		add	r7, sp, #0
 6969              		.cfi_def_cfa_register 7
1957:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_GYRO_YOUT_H, 2, buffer);
 6970              		.loc 1 1957 0
 6971 0004 0A4B     		ldr	r3, .L537
 6972 0006 1A78     		ldrb	r2, [r3]
 6973 0008 0A4B     		ldr	r3, .L537+4
 6974 000a 101C     		mov	r0, r2
 6975 000c 4521     		mov	r1, #69
 6976 000e 0222     		mov	r2, #2
 6977 0010 FFF7FEFF 		bl	I2CReadBytes
1958:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6978              		.loc 1 1958 0
 6979 0014 074B     		ldr	r3, .L537+4
 6980 0016 1B78     		ldrb	r3, [r3]
 6981 0018 1B02     		lsl	r3, r3, #8
 6982 001a 9AB2     		uxth	r2, r3
 6983 001c 054B     		ldr	r3, .L537+4
 6984 001e 5B78     		ldrb	r3, [r3, #1]
 6985 0020 9BB2     		uxth	r3, r3
 6986 0022 1343     		orr	r3, r2
 6987 0024 9BB2     		uxth	r3, r3
 6988 0026 1BB2     		sxth	r3, r3
1959:.\mpu6050.c   **** }
 6989              		.loc 1 1959 0
 6990 0028 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 158


 6991 002a BD46     		mov	sp, r7
 6992              		@ sp needed
 6993 002c 80BD     		pop	{r7, pc}
 6994              	.L538:
 6995 002e C046     		.align	2
 6996              	.L537:
 6997 0030 00000000 		.word	devAddr
 6998 0034 00000000 		.word	buffer
 6999              		.cfi_endproc
 7000              	.LFE146:
 7001              		.size	MPU6050_getRotationY, .-MPU6050_getRotationY
 7002              		.section	.text.MPU6050_getRotationZ,"ax",%progbits
 7003              		.align	2
 7004              		.global	MPU6050_getRotationZ
 7005              		.code	16
 7006              		.thumb_func
 7007              		.type	MPU6050_getRotationZ, %function
 7008              	MPU6050_getRotationZ:
 7009              	.LFB147:
1960:.\mpu6050.c   **** /** Get Z-axis gyroscope reading.
1961:.\mpu6050.c   ****  * @return Z-axis rotation measurement in 16-bit 2's complement format
1962:.\mpu6050.c   ****  * @see getMotion6()
1963:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_ZOUT_H
1964:.\mpu6050.c   ****  */
1965:.\mpu6050.c   **** int16_t MPU6050_getRotationZ() {
 7010              		.loc 1 1965 0
 7011              		.cfi_startproc
 7012 0000 80B5     		push	{r7, lr}
 7013              		.cfi_def_cfa_offset 8
 7014              		.cfi_offset 7, -8
 7015              		.cfi_offset 14, -4
 7016 0002 00AF     		add	r7, sp, #0
 7017              		.cfi_def_cfa_register 7
1966:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_GYRO_ZOUT_H, 2, buffer);
 7018              		.loc 1 1966 0
 7019 0004 0A4B     		ldr	r3, .L541
 7020 0006 1A78     		ldrb	r2, [r3]
 7021 0008 0A4B     		ldr	r3, .L541+4
 7022 000a 101C     		mov	r0, r2
 7023 000c 4721     		mov	r1, #71
 7024 000e 0222     		mov	r2, #2
 7025 0010 FFF7FEFF 		bl	I2CReadBytes
1967:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 7026              		.loc 1 1967 0
 7027 0014 074B     		ldr	r3, .L541+4
 7028 0016 1B78     		ldrb	r3, [r3]
 7029 0018 1B02     		lsl	r3, r3, #8
 7030 001a 9AB2     		uxth	r2, r3
 7031 001c 054B     		ldr	r3, .L541+4
 7032 001e 5B78     		ldrb	r3, [r3, #1]
 7033 0020 9BB2     		uxth	r3, r3
 7034 0022 1343     		orr	r3, r2
 7035 0024 9BB2     		uxth	r3, r3
 7036 0026 1BB2     		sxth	r3, r3
1968:.\mpu6050.c   **** }
 7037              		.loc 1 1968 0
 7038 0028 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 159


 7039 002a BD46     		mov	sp, r7
 7040              		@ sp needed
 7041 002c 80BD     		pop	{r7, pc}
 7042              	.L542:
 7043 002e C046     		.align	2
 7044              	.L541:
 7045 0030 00000000 		.word	devAddr
 7046 0034 00000000 		.word	buffer
 7047              		.cfi_endproc
 7048              	.LFE147:
 7049              		.size	MPU6050_getRotationZ, .-MPU6050_getRotationZ
 7050              		.section	.text.MPU6050_getExternalSensorByte,"ax",%progbits
 7051              		.align	2
 7052              		.global	MPU6050_getExternalSensorByte
 7053              		.code	16
 7054              		.thumb_func
 7055              		.type	MPU6050_getExternalSensorByte, %function
 7056              	MPU6050_getExternalSensorByte:
 7057              	.LFB148:
1969:.\mpu6050.c   **** 
1970:.\mpu6050.c   **** // EXT_SENS_DATA_* registers
1971:.\mpu6050.c   **** 
1972:.\mpu6050.c   **** /** Read single byte from external sensor data register.
1973:.\mpu6050.c   ****  * These registers store data read from external sensors by the Slave 0, 1, 2,
1974:.\mpu6050.c   ****  * and 3 on the auxiliary I2C interface. Data read by Slave 4 is stored in
1975:.\mpu6050.c   ****  * I2C_SLV4_DI (Register 53).
1976:.\mpu6050.c   ****  *
1977:.\mpu6050.c   ****  * External sensor data is written to these registers at the Sample Rate as
1978:.\mpu6050.c   ****  * defined in Register 25. This access rate can be reduced by using the Slave
1979:.\mpu6050.c   ****  * Delay Enable registers (Register 103).
1980:.\mpu6050.c   ****  *
1981:.\mpu6050.c   ****  * External sensor data registers, along with the gyroscope measurement
1982:.\mpu6050.c   ****  * registers, accelerometer measurement registers, and temperature measurement
1983:.\mpu6050.c   ****  * registers, are composed of two sets of registers: an internal register set
1984:.\mpu6050.c   ****  * and a user-facing read register set.
1985:.\mpu6050.c   ****  *
1986:.\mpu6050.c   ****  * The data within the external sensors' internal register set is always updated
1987:.\mpu6050.c   ****  * at the Sample Rate (or the reduced access rate) whenever the serial interface
1988:.\mpu6050.c   ****  * is idle. This guarantees that a burst read of sensor registers will read
1989:.\mpu6050.c   ****  * measurements from the same sampling instant. Note that if burst reads are not
1990:.\mpu6050.c   ****  * used, the user is responsible for ensuring a set of single byte reads
1991:.\mpu6050.c   ****  * correspond to a single sampling instant by checking the Data Ready interrupt.
1992:.\mpu6050.c   ****  *
1993:.\mpu6050.c   ****  * Data is placed in these external sensor data registers according to
1994:.\mpu6050.c   ****  * I2C_SLV0_CTRL, I2C_SLV1_CTRL, I2C_SLV2_CTRL, and I2C_SLV3_CTRL (Registers 39,
1995:.\mpu6050.c   ****  * 42, 45, and 48). When more than zero bytes are read (I2C_SLVx_LEN > 0) from
1996:.\mpu6050.c   ****  * an enabled slave (I2C_SLVx_EN = 1), the slave is read at the Sample Rate (as
1997:.\mpu6050.c   ****  * defined in Register 25) or delayed rate (if specified in Register 52 and
1998:.\mpu6050.c   ****  * 103). During each Sample cycle, slave reads are performed in order of Slave
1999:.\mpu6050.c   ****  * number. If all slaves are enabled with more than zero bytes to be read, the
2000:.\mpu6050.c   ****  * order will be Slave 0, followed by Slave 1, Slave 2, and Slave 3.
2001:.\mpu6050.c   ****  *
2002:.\mpu6050.c   ****  * Each enabled slave will have EXT_SENS_DATA registers associated with it by
2003:.\mpu6050.c   ****  * number of bytes read (I2C_SLVx_LEN) in order of slave number, starting from
2004:.\mpu6050.c   ****  * EXT_SENS_DATA_00. Note that this means enabling or disabling a slave may
2005:.\mpu6050.c   ****  * change the higher numbered slaves' associated registers. Furthermore, if
2006:.\mpu6050.c   ****  * fewer total bytes are being read from the external sensors as a result of
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 160


2007:.\mpu6050.c   ****  * such a change, then the data remaining in the registers which no longer have
2008:.\mpu6050.c   ****  * an associated slave device (i.e. high numbered registers) will remain in
2009:.\mpu6050.c   ****  * these previously allocated registers unless reset.
2010:.\mpu6050.c   ****  *
2011:.\mpu6050.c   ****  * If the sum of the read lengths of all SLVx transactions exceed the number of
2012:.\mpu6050.c   ****  * available EXT_SENS_DATA registers, the excess bytes will be dropped. There
2013:.\mpu6050.c   ****  * are 24 EXT_SENS_DATA registers and hence the total read lengths between all
2014:.\mpu6050.c   ****  * the slaves cannot be greater than 24 or some bytes will be lost.
2015:.\mpu6050.c   ****  *
2016:.\mpu6050.c   ****  * Note: Slave 4's behavior is distinct from that of Slaves 0-3. For further
2017:.\mpu6050.c   ****  * information regarding the characteristics of Slave 4, please refer to
2018:.\mpu6050.c   ****  * Registers 49 to 53.
2019:.\mpu6050.c   ****  *
2020:.\mpu6050.c   ****  * EXAMPLE:
2021:.\mpu6050.c   ****  * Suppose that Slave 0 is enabled with 4 bytes to be read (I2C_SLV0_EN = 1 and
2022:.\mpu6050.c   ****  * I2C_SLV0_LEN = 4) while Slave 1 is enabled with 2 bytes to be read so that
2023:.\mpu6050.c   ****  * I2C_SLV1_EN = 1 and I2C_SLV1_LEN = 2. In such a situation, EXT_SENS_DATA _00
2024:.\mpu6050.c   ****  * through _03 will be associated with Slave 0, while EXT_SENS_DATA _04 and 05
2025:.\mpu6050.c   ****  * will be associated with Slave 1. If Slave 2 is enabled as well, registers
2026:.\mpu6050.c   ****  * starting from EXT_SENS_DATA_06 will be allocated to Slave 2.
2027:.\mpu6050.c   ****  *
2028:.\mpu6050.c   ****  * If Slave 2 is disabled while Slave 3 is enabled in this same situation, then
2029:.\mpu6050.c   ****  * registers starting from EXT_SENS_DATA_06 will be allocated to Slave 3
2030:.\mpu6050.c   ****  * instead.
2031:.\mpu6050.c   ****  *
2032:.\mpu6050.c   ****  * REGISTER ALLOCATION FOR DYNAMIC DISABLE VS. NORMAL DISABLE:
2033:.\mpu6050.c   ****  * If a slave is disabled at any time, the space initially allocated to the
2034:.\mpu6050.c   ****  * slave in the EXT_SENS_DATA register, will remain associated with that slave.
2035:.\mpu6050.c   ****  * This is to avoid dynamic adjustment of the register allocation.
2036:.\mpu6050.c   ****  *
2037:.\mpu6050.c   ****  * The allocation of the EXT_SENS_DATA registers is recomputed only when (1) all
2038:.\mpu6050.c   ****  * slaves are disabled, or (2) the I2C_MST_RST bit is set (Register 106).
2039:.\mpu6050.c   ****  *
2040:.\mpu6050.c   ****  * This above is also true if one of the slaves gets NACKed and stops
2041:.\mpu6050.c   ****  * functioning.
2042:.\mpu6050.c   ****  *
2043:.\mpu6050.c   ****  * @param position Starting position (0-23)
2044:.\mpu6050.c   ****  * @return Byte read from register
2045:.\mpu6050.c   ****  */
2046:.\mpu6050.c   **** uint8_t MPU6050_getExternalSensorByte(int position) {
 7058              		.loc 1 2046 0
 7059              		.cfi_startproc
 7060 0000 80B5     		push	{r7, lr}
 7061              		.cfi_def_cfa_offset 8
 7062              		.cfi_offset 7, -8
 7063              		.cfi_offset 14, -4
 7064 0002 82B0     		sub	sp, sp, #8
 7065              		.cfi_def_cfa_offset 16
 7066 0004 00AF     		add	r7, sp, #0
 7067              		.cfi_def_cfa_register 7
 7068 0006 7860     		str	r0, [r7, #4]
2047:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, buffer);
 7069              		.loc 1 2047 0
 7070 0008 084B     		ldr	r3, .L545
 7071 000a 1978     		ldrb	r1, [r3]
 7072 000c 7B68     		ldr	r3, [r7, #4]
 7073 000e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 161


 7074 0010 4933     		add	r3, r3, #73
 7075 0012 DAB2     		uxtb	r2, r3
 7076 0014 064B     		ldr	r3, .L545+4
 7077 0016 081C     		mov	r0, r1
 7078 0018 111C     		mov	r1, r2
 7079 001a 1A1C     		mov	r2, r3
 7080 001c FFF7FEFF 		bl	I2CReadByte
2048:.\mpu6050.c   ****     return buffer[0];
 7081              		.loc 1 2048 0
 7082 0020 034B     		ldr	r3, .L545+4
 7083 0022 1B78     		ldrb	r3, [r3]
2049:.\mpu6050.c   **** }
 7084              		.loc 1 2049 0
 7085 0024 181C     		mov	r0, r3
 7086 0026 BD46     		mov	sp, r7
 7087 0028 02B0     		add	sp, sp, #8
 7088              		@ sp needed
 7089 002a 80BD     		pop	{r7, pc}
 7090              	.L546:
 7091              		.align	2
 7092              	.L545:
 7093 002c 00000000 		.word	devAddr
 7094 0030 00000000 		.word	buffer
 7095              		.cfi_endproc
 7096              	.LFE148:
 7097              		.size	MPU6050_getExternalSensorByte, .-MPU6050_getExternalSensorByte
 7098              		.section	.text.MPU6050_getExternalSensorWord,"ax",%progbits
 7099              		.align	2
 7100              		.global	MPU6050_getExternalSensorWord
 7101              		.code	16
 7102              		.thumb_func
 7103              		.type	MPU6050_getExternalSensorWord, %function
 7104              	MPU6050_getExternalSensorWord:
 7105              	.LFB149:
2050:.\mpu6050.c   **** /** Read word (2 bytes) from external sensor data registers.
2051:.\mpu6050.c   ****  * @param position Starting position (0-21)
2052:.\mpu6050.c   ****  * @return Word read from register
2053:.\mpu6050.c   ****  * @see getExternalSensorByte()
2054:.\mpu6050.c   ****  */
2055:.\mpu6050.c   **** uint16_t MPU6050_getExternalSensorWord(int position) {
 7106              		.loc 1 2055 0
 7107              		.cfi_startproc
 7108 0000 80B5     		push	{r7, lr}
 7109              		.cfi_def_cfa_offset 8
 7110              		.cfi_offset 7, -8
 7111              		.cfi_offset 14, -4
 7112 0002 82B0     		sub	sp, sp, #8
 7113              		.cfi_def_cfa_offset 16
 7114 0004 00AF     		add	r7, sp, #0
 7115              		.cfi_def_cfa_register 7
 7116 0006 7860     		str	r0, [r7, #4]
2056:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, 2, buffer);
 7117              		.loc 1 2056 0
 7118 0008 0C4B     		ldr	r3, .L549
 7119 000a 1978     		ldrb	r1, [r3]
 7120 000c 7B68     		ldr	r3, [r7, #4]
 7121 000e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 162


 7122 0010 4933     		add	r3, r3, #73
 7123 0012 DAB2     		uxtb	r2, r3
 7124 0014 0A4B     		ldr	r3, .L549+4
 7125 0016 081C     		mov	r0, r1
 7126 0018 111C     		mov	r1, r2
 7127 001a 0222     		mov	r2, #2
 7128 001c FFF7FEFF 		bl	I2CReadBytes
2057:.\mpu6050.c   ****     return (((uint16_t)buffer[0]) << 8) | buffer[1];
 7129              		.loc 1 2057 0
 7130 0020 074B     		ldr	r3, .L549+4
 7131 0022 1B78     		ldrb	r3, [r3]
 7132 0024 1B02     		lsl	r3, r3, #8
 7133 0026 9AB2     		uxth	r2, r3
 7134 0028 054B     		ldr	r3, .L549+4
 7135 002a 5B78     		ldrb	r3, [r3, #1]
 7136 002c 9BB2     		uxth	r3, r3
 7137 002e 1343     		orr	r3, r2
 7138 0030 9BB2     		uxth	r3, r3
 7139 0032 9BB2     		uxth	r3, r3
2058:.\mpu6050.c   **** }
 7140              		.loc 1 2058 0
 7141 0034 181C     		mov	r0, r3
 7142 0036 BD46     		mov	sp, r7
 7143 0038 02B0     		add	sp, sp, #8
 7144              		@ sp needed
 7145 003a 80BD     		pop	{r7, pc}
 7146              	.L550:
 7147              		.align	2
 7148              	.L549:
 7149 003c 00000000 		.word	devAddr
 7150 0040 00000000 		.word	buffer
 7151              		.cfi_endproc
 7152              	.LFE149:
 7153              		.size	MPU6050_getExternalSensorWord, .-MPU6050_getExternalSensorWord
 7154              		.section	.text.MPU6050_getExternalSensorDWord,"ax",%progbits
 7155              		.align	2
 7156              		.global	MPU6050_getExternalSensorDWord
 7157              		.code	16
 7158              		.thumb_func
 7159              		.type	MPU6050_getExternalSensorDWord, %function
 7160              	MPU6050_getExternalSensorDWord:
 7161              	.LFB150:
2059:.\mpu6050.c   **** /** Read double word (4 bytes) from external sensor data registers.
2060:.\mpu6050.c   ****  * @param position Starting position (0-20)
2061:.\mpu6050.c   ****  * @return Double word read from registers
2062:.\mpu6050.c   ****  * @see getExternalSensorByte()
2063:.\mpu6050.c   ****  */
2064:.\mpu6050.c   **** uint32_t MPU6050_getExternalSensorDWord(int position) {
 7162              		.loc 1 2064 0
 7163              		.cfi_startproc
 7164 0000 80B5     		push	{r7, lr}
 7165              		.cfi_def_cfa_offset 8
 7166              		.cfi_offset 7, -8
 7167              		.cfi_offset 14, -4
 7168 0002 82B0     		sub	sp, sp, #8
 7169              		.cfi_def_cfa_offset 16
 7170 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 163


 7171              		.cfi_def_cfa_register 7
 7172 0006 7860     		str	r0, [r7, #4]
2065:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, 4, buffer);
 7173              		.loc 1 2065 0
 7174 0008 0E4B     		ldr	r3, .L553
 7175 000a 1978     		ldrb	r1, [r3]
 7176 000c 7B68     		ldr	r3, [r7, #4]
 7177 000e DBB2     		uxtb	r3, r3
 7178 0010 4933     		add	r3, r3, #73
 7179 0012 DAB2     		uxtb	r2, r3
 7180 0014 0C4B     		ldr	r3, .L553+4
 7181 0016 081C     		mov	r0, r1
 7182 0018 111C     		mov	r1, r2
 7183 001a 0422     		mov	r2, #4
 7184 001c FFF7FEFF 		bl	I2CReadBytes
2066:.\mpu6050.c   ****     return (((uint32_t)buffer[0]) << 24) | (((uint32_t)buffer[1]) << 16) | (((uint16_t)buffer[2]) <
 7185              		.loc 1 2066 0
 7186 0020 094B     		ldr	r3, .L553+4
 7187 0022 1B78     		ldrb	r3, [r3]
 7188 0024 1A06     		lsl	r2, r3, #24
 7189 0026 084B     		ldr	r3, .L553+4
 7190 0028 5B78     		ldrb	r3, [r3, #1]
 7191 002a 1B04     		lsl	r3, r3, #16
 7192 002c 1343     		orr	r3, r2
 7193 002e 064A     		ldr	r2, .L553+4
 7194 0030 9278     		ldrb	r2, [r2, #2]
 7195 0032 1202     		lsl	r2, r2, #8
 7196 0034 1343     		orr	r3, r2
 7197 0036 044A     		ldr	r2, .L553+4
 7198 0038 D278     		ldrb	r2, [r2, #3]
 7199 003a 1343     		orr	r3, r2
2067:.\mpu6050.c   **** }
 7200              		.loc 1 2067 0
 7201 003c 181C     		mov	r0, r3
 7202 003e BD46     		mov	sp, r7
 7203 0040 02B0     		add	sp, sp, #8
 7204              		@ sp needed
 7205 0042 80BD     		pop	{r7, pc}
 7206              	.L554:
 7207              		.align	2
 7208              	.L553:
 7209 0044 00000000 		.word	devAddr
 7210 0048 00000000 		.word	buffer
 7211              		.cfi_endproc
 7212              	.LFE150:
 7213              		.size	MPU6050_getExternalSensorDWord, .-MPU6050_getExternalSensorDWord
 7214              		.section	.text.MPU6050_getXNegMotionDetected,"ax",%progbits
 7215              		.align	2
 7216              		.global	MPU6050_getXNegMotionDetected
 7217              		.code	16
 7218              		.thumb_func
 7219              		.type	MPU6050_getXNegMotionDetected, %function
 7220              	MPU6050_getXNegMotionDetected:
 7221              	.LFB151:
2068:.\mpu6050.c   **** 
2069:.\mpu6050.c   **** // MOT_DETECT_STATUS register
2070:.\mpu6050.c   **** 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 164


2071:.\mpu6050.c   **** /** Get X-axis negative motion detection interrupt status.
2072:.\mpu6050.c   ****  * @return Motion detection status
2073:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2074:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_XNEG_BIT
2075:.\mpu6050.c   ****  */
2076:.\mpu6050.c   **** bool MPU6050_getXNegMotionDetected() {
 7222              		.loc 1 2076 0
 7223              		.cfi_startproc
 7224 0000 80B5     		push	{r7, lr}
 7225              		.cfi_def_cfa_offset 8
 7226              		.cfi_offset 7, -8
 7227              		.cfi_offset 14, -4
 7228 0002 00AF     		add	r7, sp, #0
 7229              		.cfi_def_cfa_register 7
2077:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_XNEG_BIT, buffer);
 7230              		.loc 1 2077 0
 7231 0004 074B     		ldr	r3, .L557
 7232 0006 1A78     		ldrb	r2, [r3]
 7233 0008 074B     		ldr	r3, .L557+4
 7234 000a 101C     		mov	r0, r2
 7235 000c 6121     		mov	r1, #97
 7236 000e 0722     		mov	r2, #7
 7237 0010 FFF7FEFF 		bl	I2CReadBit
2078:.\mpu6050.c   ****     return buffer[0];
 7238              		.loc 1 2078 0
 7239 0014 044B     		ldr	r3, .L557+4
 7240 0016 1B78     		ldrb	r3, [r3]
 7241 0018 5A1E     		sub	r2, r3, #1
 7242 001a 9341     		sbc	r3, r3, r2
 7243 001c DBB2     		uxtb	r3, r3
2079:.\mpu6050.c   **** }
 7244              		.loc 1 2079 0
 7245 001e 181C     		mov	r0, r3
 7246 0020 BD46     		mov	sp, r7
 7247              		@ sp needed
 7248 0022 80BD     		pop	{r7, pc}
 7249              	.L558:
 7250              		.align	2
 7251              	.L557:
 7252 0024 00000000 		.word	devAddr
 7253 0028 00000000 		.word	buffer
 7254              		.cfi_endproc
 7255              	.LFE151:
 7256              		.size	MPU6050_getXNegMotionDetected, .-MPU6050_getXNegMotionDetected
 7257              		.section	.text.MPU6050_getXPosMotionDetected,"ax",%progbits
 7258              		.align	2
 7259              		.global	MPU6050_getXPosMotionDetected
 7260              		.code	16
 7261              		.thumb_func
 7262              		.type	MPU6050_getXPosMotionDetected, %function
 7263              	MPU6050_getXPosMotionDetected:
 7264              	.LFB152:
2080:.\mpu6050.c   **** /** Get X-axis positive motion detection interrupt status.
2081:.\mpu6050.c   ****  * @return Motion detection status
2082:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2083:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_XPOS_BIT
2084:.\mpu6050.c   ****  */
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 165


2085:.\mpu6050.c   **** bool MPU6050_getXPosMotionDetected() {
 7265              		.loc 1 2085 0
 7266              		.cfi_startproc
 7267 0000 80B5     		push	{r7, lr}
 7268              		.cfi_def_cfa_offset 8
 7269              		.cfi_offset 7, -8
 7270              		.cfi_offset 14, -4
 7271 0002 00AF     		add	r7, sp, #0
 7272              		.cfi_def_cfa_register 7
2086:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_XPOS_BIT, buffer);
 7273              		.loc 1 2086 0
 7274 0004 074B     		ldr	r3, .L561
 7275 0006 1A78     		ldrb	r2, [r3]
 7276 0008 074B     		ldr	r3, .L561+4
 7277 000a 101C     		mov	r0, r2
 7278 000c 6121     		mov	r1, #97
 7279 000e 0622     		mov	r2, #6
 7280 0010 FFF7FEFF 		bl	I2CReadBit
2087:.\mpu6050.c   ****     return buffer[0];
 7281              		.loc 1 2087 0
 7282 0014 044B     		ldr	r3, .L561+4
 7283 0016 1B78     		ldrb	r3, [r3]
 7284 0018 5A1E     		sub	r2, r3, #1
 7285 001a 9341     		sbc	r3, r3, r2
 7286 001c DBB2     		uxtb	r3, r3
2088:.\mpu6050.c   **** }
 7287              		.loc 1 2088 0
 7288 001e 181C     		mov	r0, r3
 7289 0020 BD46     		mov	sp, r7
 7290              		@ sp needed
 7291 0022 80BD     		pop	{r7, pc}
 7292              	.L562:
 7293              		.align	2
 7294              	.L561:
 7295 0024 00000000 		.word	devAddr
 7296 0028 00000000 		.word	buffer
 7297              		.cfi_endproc
 7298              	.LFE152:
 7299              		.size	MPU6050_getXPosMotionDetected, .-MPU6050_getXPosMotionDetected
 7300              		.section	.text.MPU6050_getYNegMotionDetected,"ax",%progbits
 7301              		.align	2
 7302              		.global	MPU6050_getYNegMotionDetected
 7303              		.code	16
 7304              		.thumb_func
 7305              		.type	MPU6050_getYNegMotionDetected, %function
 7306              	MPU6050_getYNegMotionDetected:
 7307              	.LFB153:
2089:.\mpu6050.c   **** /** Get Y-axis negative motion detection interrupt status.
2090:.\mpu6050.c   ****  * @return Motion detection status
2091:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2092:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_YNEG_BIT
2093:.\mpu6050.c   ****  */
2094:.\mpu6050.c   **** bool MPU6050_getYNegMotionDetected() {
 7308              		.loc 1 2094 0
 7309              		.cfi_startproc
 7310 0000 80B5     		push	{r7, lr}
 7311              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 166


 7312              		.cfi_offset 7, -8
 7313              		.cfi_offset 14, -4
 7314 0002 00AF     		add	r7, sp, #0
 7315              		.cfi_def_cfa_register 7
2095:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_YNEG_BIT, buffer);
 7316              		.loc 1 2095 0
 7317 0004 074B     		ldr	r3, .L565
 7318 0006 1A78     		ldrb	r2, [r3]
 7319 0008 074B     		ldr	r3, .L565+4
 7320 000a 101C     		mov	r0, r2
 7321 000c 6121     		mov	r1, #97
 7322 000e 0522     		mov	r2, #5
 7323 0010 FFF7FEFF 		bl	I2CReadBit
2096:.\mpu6050.c   ****     return buffer[0];
 7324              		.loc 1 2096 0
 7325 0014 044B     		ldr	r3, .L565+4
 7326 0016 1B78     		ldrb	r3, [r3]
 7327 0018 5A1E     		sub	r2, r3, #1
 7328 001a 9341     		sbc	r3, r3, r2
 7329 001c DBB2     		uxtb	r3, r3
2097:.\mpu6050.c   **** }
 7330              		.loc 1 2097 0
 7331 001e 181C     		mov	r0, r3
 7332 0020 BD46     		mov	sp, r7
 7333              		@ sp needed
 7334 0022 80BD     		pop	{r7, pc}
 7335              	.L566:
 7336              		.align	2
 7337              	.L565:
 7338 0024 00000000 		.word	devAddr
 7339 0028 00000000 		.word	buffer
 7340              		.cfi_endproc
 7341              	.LFE153:
 7342              		.size	MPU6050_getYNegMotionDetected, .-MPU6050_getYNegMotionDetected
 7343              		.section	.text.MPU6050_getYPosMotionDetected,"ax",%progbits
 7344              		.align	2
 7345              		.global	MPU6050_getYPosMotionDetected
 7346              		.code	16
 7347              		.thumb_func
 7348              		.type	MPU6050_getYPosMotionDetected, %function
 7349              	MPU6050_getYPosMotionDetected:
 7350              	.LFB154:
2098:.\mpu6050.c   **** /** Get Y-axis positive motion detection interrupt status.
2099:.\mpu6050.c   ****  * @return Motion detection status
2100:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2101:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_YPOS_BIT
2102:.\mpu6050.c   ****  */
2103:.\mpu6050.c   **** bool MPU6050_getYPosMotionDetected() {
 7351              		.loc 1 2103 0
 7352              		.cfi_startproc
 7353 0000 80B5     		push	{r7, lr}
 7354              		.cfi_def_cfa_offset 8
 7355              		.cfi_offset 7, -8
 7356              		.cfi_offset 14, -4
 7357 0002 00AF     		add	r7, sp, #0
 7358              		.cfi_def_cfa_register 7
2104:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_YPOS_BIT, buffer);
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 167


 7359              		.loc 1 2104 0
 7360 0004 074B     		ldr	r3, .L569
 7361 0006 1A78     		ldrb	r2, [r3]
 7362 0008 074B     		ldr	r3, .L569+4
 7363 000a 101C     		mov	r0, r2
 7364 000c 6121     		mov	r1, #97
 7365 000e 0422     		mov	r2, #4
 7366 0010 FFF7FEFF 		bl	I2CReadBit
2105:.\mpu6050.c   ****     return buffer[0];
 7367              		.loc 1 2105 0
 7368 0014 044B     		ldr	r3, .L569+4
 7369 0016 1B78     		ldrb	r3, [r3]
 7370 0018 5A1E     		sub	r2, r3, #1
 7371 001a 9341     		sbc	r3, r3, r2
 7372 001c DBB2     		uxtb	r3, r3
2106:.\mpu6050.c   **** }
 7373              		.loc 1 2106 0
 7374 001e 181C     		mov	r0, r3
 7375 0020 BD46     		mov	sp, r7
 7376              		@ sp needed
 7377 0022 80BD     		pop	{r7, pc}
 7378              	.L570:
 7379              		.align	2
 7380              	.L569:
 7381 0024 00000000 		.word	devAddr
 7382 0028 00000000 		.word	buffer
 7383              		.cfi_endproc
 7384              	.LFE154:
 7385              		.size	MPU6050_getYPosMotionDetected, .-MPU6050_getYPosMotionDetected
 7386              		.section	.text.MPU6050_getZNegMotionDetected,"ax",%progbits
 7387              		.align	2
 7388              		.global	MPU6050_getZNegMotionDetected
 7389              		.code	16
 7390              		.thumb_func
 7391              		.type	MPU6050_getZNegMotionDetected, %function
 7392              	MPU6050_getZNegMotionDetected:
 7393              	.LFB155:
2107:.\mpu6050.c   **** /** Get Z-axis negative motion detection interrupt status.
2108:.\mpu6050.c   ****  * @return Motion detection status
2109:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2110:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_ZNEG_BIT
2111:.\mpu6050.c   ****  */
2112:.\mpu6050.c   **** bool MPU6050_getZNegMotionDetected() {
 7394              		.loc 1 2112 0
 7395              		.cfi_startproc
 7396 0000 80B5     		push	{r7, lr}
 7397              		.cfi_def_cfa_offset 8
 7398              		.cfi_offset 7, -8
 7399              		.cfi_offset 14, -4
 7400 0002 00AF     		add	r7, sp, #0
 7401              		.cfi_def_cfa_register 7
2113:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZNEG_BIT, buffer);
 7402              		.loc 1 2113 0
 7403 0004 074B     		ldr	r3, .L573
 7404 0006 1A78     		ldrb	r2, [r3]
 7405 0008 074B     		ldr	r3, .L573+4
 7406 000a 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 168


 7407 000c 6121     		mov	r1, #97
 7408 000e 0322     		mov	r2, #3
 7409 0010 FFF7FEFF 		bl	I2CReadBit
2114:.\mpu6050.c   ****     return buffer[0];
 7410              		.loc 1 2114 0
 7411 0014 044B     		ldr	r3, .L573+4
 7412 0016 1B78     		ldrb	r3, [r3]
 7413 0018 5A1E     		sub	r2, r3, #1
 7414 001a 9341     		sbc	r3, r3, r2
 7415 001c DBB2     		uxtb	r3, r3
2115:.\mpu6050.c   **** }
 7416              		.loc 1 2115 0
 7417 001e 181C     		mov	r0, r3
 7418 0020 BD46     		mov	sp, r7
 7419              		@ sp needed
 7420 0022 80BD     		pop	{r7, pc}
 7421              	.L574:
 7422              		.align	2
 7423              	.L573:
 7424 0024 00000000 		.word	devAddr
 7425 0028 00000000 		.word	buffer
 7426              		.cfi_endproc
 7427              	.LFE155:
 7428              		.size	MPU6050_getZNegMotionDetected, .-MPU6050_getZNegMotionDetected
 7429              		.section	.text.MPU6050_getZPosMotionDetected,"ax",%progbits
 7430              		.align	2
 7431              		.global	MPU6050_getZPosMotionDetected
 7432              		.code	16
 7433              		.thumb_func
 7434              		.type	MPU6050_getZPosMotionDetected, %function
 7435              	MPU6050_getZPosMotionDetected:
 7436              	.LFB156:
2116:.\mpu6050.c   **** /** Get Z-axis positive motion detection interrupt status.
2117:.\mpu6050.c   ****  * @return Motion detection status
2118:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2119:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_ZPOS_BIT
2120:.\mpu6050.c   ****  */
2121:.\mpu6050.c   **** bool MPU6050_getZPosMotionDetected() {
 7437              		.loc 1 2121 0
 7438              		.cfi_startproc
 7439 0000 80B5     		push	{r7, lr}
 7440              		.cfi_def_cfa_offset 8
 7441              		.cfi_offset 7, -8
 7442              		.cfi_offset 14, -4
 7443 0002 00AF     		add	r7, sp, #0
 7444              		.cfi_def_cfa_register 7
2122:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZPOS_BIT, buffer);
 7445              		.loc 1 2122 0
 7446 0004 074B     		ldr	r3, .L577
 7447 0006 1A78     		ldrb	r2, [r3]
 7448 0008 074B     		ldr	r3, .L577+4
 7449 000a 101C     		mov	r0, r2
 7450 000c 6121     		mov	r1, #97
 7451 000e 0222     		mov	r2, #2
 7452 0010 FFF7FEFF 		bl	I2CReadBit
2123:.\mpu6050.c   ****     return buffer[0];
 7453              		.loc 1 2123 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 169


 7454 0014 044B     		ldr	r3, .L577+4
 7455 0016 1B78     		ldrb	r3, [r3]
 7456 0018 5A1E     		sub	r2, r3, #1
 7457 001a 9341     		sbc	r3, r3, r2
 7458 001c DBB2     		uxtb	r3, r3
2124:.\mpu6050.c   **** }
 7459              		.loc 1 2124 0
 7460 001e 181C     		mov	r0, r3
 7461 0020 BD46     		mov	sp, r7
 7462              		@ sp needed
 7463 0022 80BD     		pop	{r7, pc}
 7464              	.L578:
 7465              		.align	2
 7466              	.L577:
 7467 0024 00000000 		.word	devAddr
 7468 0028 00000000 		.word	buffer
 7469              		.cfi_endproc
 7470              	.LFE156:
 7471              		.size	MPU6050_getZPosMotionDetected, .-MPU6050_getZPosMotionDetected
 7472              		.section	.text.MPU6050_getZeroMotionDetected,"ax",%progbits
 7473              		.align	2
 7474              		.global	MPU6050_getZeroMotionDetected
 7475              		.code	16
 7476              		.thumb_func
 7477              		.type	MPU6050_getZeroMotionDetected, %function
 7478              	MPU6050_getZeroMotionDetected:
 7479              	.LFB157:
2125:.\mpu6050.c   **** /** Get zero motion detection interrupt status.
2126:.\mpu6050.c   ****  * @return Motion detection status
2127:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2128:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_ZRMOT_BIT
2129:.\mpu6050.c   ****  */
2130:.\mpu6050.c   **** bool MPU6050_getZeroMotionDetected() {
 7480              		.loc 1 2130 0
 7481              		.cfi_startproc
 7482 0000 80B5     		push	{r7, lr}
 7483              		.cfi_def_cfa_offset 8
 7484              		.cfi_offset 7, -8
 7485              		.cfi_offset 14, -4
 7486 0002 00AF     		add	r7, sp, #0
 7487              		.cfi_def_cfa_register 7
2131:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZRMOT_BIT, buffer);
 7488              		.loc 1 2131 0
 7489 0004 074B     		ldr	r3, .L581
 7490 0006 1A78     		ldrb	r2, [r3]
 7491 0008 074B     		ldr	r3, .L581+4
 7492 000a 101C     		mov	r0, r2
 7493 000c 6121     		mov	r1, #97
 7494 000e 0022     		mov	r2, #0
 7495 0010 FFF7FEFF 		bl	I2CReadBit
2132:.\mpu6050.c   ****     return buffer[0];
 7496              		.loc 1 2132 0
 7497 0014 044B     		ldr	r3, .L581+4
 7498 0016 1B78     		ldrb	r3, [r3]
 7499 0018 5A1E     		sub	r2, r3, #1
 7500 001a 9341     		sbc	r3, r3, r2
 7501 001c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 170


2133:.\mpu6050.c   **** }
 7502              		.loc 1 2133 0
 7503 001e 181C     		mov	r0, r3
 7504 0020 BD46     		mov	sp, r7
 7505              		@ sp needed
 7506 0022 80BD     		pop	{r7, pc}
 7507              	.L582:
 7508              		.align	2
 7509              	.L581:
 7510 0024 00000000 		.word	devAddr
 7511 0028 00000000 		.word	buffer
 7512              		.cfi_endproc
 7513              	.LFE157:
 7514              		.size	MPU6050_getZeroMotionDetected, .-MPU6050_getZeroMotionDetected
 7515              		.section	.text.MPU6050_setSlaveOutputByte,"ax",%progbits
 7516              		.align	2
 7517              		.global	MPU6050_setSlaveOutputByte
 7518              		.code	16
 7519              		.thumb_func
 7520              		.type	MPU6050_setSlaveOutputByte, %function
 7521              	MPU6050_setSlaveOutputByte:
 7522              	.LFB158:
2134:.\mpu6050.c   **** 
2135:.\mpu6050.c   **** // I2C_SLV*_DO register
2136:.\mpu6050.c   **** 
2137:.\mpu6050.c   **** /** Write byte to Data Output container for specified slave.
2138:.\mpu6050.c   ****  * This register holds the output data written into Slave when Slave is set to
2139:.\mpu6050.c   ****  * write mode. For further information regarding Slave control, please
2140:.\mpu6050.c   ****  * refer to Registers 37 to 39 and immediately following.
2141:.\mpu6050.c   ****  * @param num Slave number (0-3)
2142:.\mpu6050.c   ****  * @param data Byte to write
2143:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_DO
2144:.\mpu6050.c   ****  */
2145:.\mpu6050.c   **** void MPU6050_setSlaveOutputByte(uint8_t num, uint8_t data) {
 7523              		.loc 1 2145 0
 7524              		.cfi_startproc
 7525 0000 80B5     		push	{r7, lr}
 7526              		.cfi_def_cfa_offset 8
 7527              		.cfi_offset 7, -8
 7528              		.cfi_offset 14, -4
 7529 0002 82B0     		sub	sp, sp, #8
 7530              		.cfi_def_cfa_offset 16
 7531 0004 00AF     		add	r7, sp, #0
 7532              		.cfi_def_cfa_register 7
 7533 0006 021C     		mov	r2, r0
 7534 0008 FB1D     		add	r3, r7, #7
 7535 000a 1A70     		strb	r2, [r3]
 7536 000c BB1D     		add	r3, r7, #6
 7537 000e 0A1C     		add	r2, r1, #0
 7538 0010 1A70     		strb	r2, [r3]
2146:.\mpu6050.c   ****     if (num > 3) return;
 7539              		.loc 1 2146 0
 7540 0012 FB1D     		add	r3, r7, #7
 7541 0014 1B78     		ldrb	r3, [r3]
 7542 0016 032B     		cmp	r3, #3
 7543 0018 00D9     		bls	.L584
 7544 001a 0CE0     		b	.L583
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 171


 7545              	.L584:
2147:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV0_DO + num, data);
 7546              		.loc 1 2147 0
 7547 001c 074B     		ldr	r3, .L586
 7548 001e 1978     		ldrb	r1, [r3]
 7549 0020 FB1D     		add	r3, r7, #7
 7550 0022 1B78     		ldrb	r3, [r3]
 7551 0024 6333     		add	r3, r3, #99
 7552 0026 DAB2     		uxtb	r2, r3
 7553 0028 BB1D     		add	r3, r7, #6
 7554 002a 1B78     		ldrb	r3, [r3]
 7555 002c 081C     		mov	r0, r1
 7556 002e 111C     		mov	r1, r2
 7557 0030 1A1C     		mov	r2, r3
 7558 0032 FFF7FEFF 		bl	I2CWriteByte
 7559              	.L583:
2148:.\mpu6050.c   **** }
 7560              		.loc 1 2148 0
 7561 0036 BD46     		mov	sp, r7
 7562 0038 02B0     		add	sp, sp, #8
 7563              		@ sp needed
 7564 003a 80BD     		pop	{r7, pc}
 7565              	.L587:
 7566              		.align	2
 7567              	.L586:
 7568 003c 00000000 		.word	devAddr
 7569              		.cfi_endproc
 7570              	.LFE158:
 7571              		.size	MPU6050_setSlaveOutputByte, .-MPU6050_setSlaveOutputByte
 7572              		.section	.text.MPU6050_getExternalShadowDelayEnabled,"ax",%progbits
 7573              		.align	2
 7574              		.global	MPU6050_getExternalShadowDelayEnabled
 7575              		.code	16
 7576              		.thumb_func
 7577              		.type	MPU6050_getExternalShadowDelayEnabled, %function
 7578              	MPU6050_getExternalShadowDelayEnabled:
 7579              	.LFB159:
2149:.\mpu6050.c   **** 
2150:.\mpu6050.c   **** // I2C_MST_DELAY_CTRL register
2151:.\mpu6050.c   **** 
2152:.\mpu6050.c   **** /** Get external data shadow delay enabled status.
2153:.\mpu6050.c   ****  * This register is used to specify the timing of external sensor data
2154:.\mpu6050.c   ****  * shadowing. When DELAY_ES_SHADOW is set to 1, shadowing of external
2155:.\mpu6050.c   ****  * sensor data is delayed until all data has been received.
2156:.\mpu6050.c   ****  * @return Current external data shadow delay enabled status.
2157:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2158:.\mpu6050.c   ****  * @see MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT
2159:.\mpu6050.c   ****  */
2160:.\mpu6050.c   **** bool MPU6050_getExternalShadowDelayEnabled() {
 7580              		.loc 1 2160 0
 7581              		.cfi_startproc
 7582 0000 80B5     		push	{r7, lr}
 7583              		.cfi_def_cfa_offset 8
 7584              		.cfi_offset 7, -8
 7585              		.cfi_offset 14, -4
 7586 0002 00AF     		add	r7, sp, #0
 7587              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 172


2161:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT, buffe
 7588              		.loc 1 2161 0
 7589 0004 074B     		ldr	r3, .L590
 7590 0006 1A78     		ldrb	r2, [r3]
 7591 0008 074B     		ldr	r3, .L590+4
 7592 000a 101C     		mov	r0, r2
 7593 000c 6721     		mov	r1, #103
 7594 000e 0722     		mov	r2, #7
 7595 0010 FFF7FEFF 		bl	I2CReadBit
2162:.\mpu6050.c   ****     return buffer[0];
 7596              		.loc 1 2162 0
 7597 0014 044B     		ldr	r3, .L590+4
 7598 0016 1B78     		ldrb	r3, [r3]
 7599 0018 5A1E     		sub	r2, r3, #1
 7600 001a 9341     		sbc	r3, r3, r2
 7601 001c DBB2     		uxtb	r3, r3
2163:.\mpu6050.c   **** }
 7602              		.loc 1 2163 0
 7603 001e 181C     		mov	r0, r3
 7604 0020 BD46     		mov	sp, r7
 7605              		@ sp needed
 7606 0022 80BD     		pop	{r7, pc}
 7607              	.L591:
 7608              		.align	2
 7609              	.L590:
 7610 0024 00000000 		.word	devAddr
 7611 0028 00000000 		.word	buffer
 7612              		.cfi_endproc
 7613              	.LFE159:
 7614              		.size	MPU6050_getExternalShadowDelayEnabled, .-MPU6050_getExternalShadowDelayEnabled
 7615              		.section	.text.MPU6050_setExternalShadowDelayEnabled,"ax",%progbits
 7616              		.align	2
 7617              		.global	MPU6050_setExternalShadowDelayEnabled
 7618              		.code	16
 7619              		.thumb_func
 7620              		.type	MPU6050_setExternalShadowDelayEnabled, %function
 7621              	MPU6050_setExternalShadowDelayEnabled:
 7622              	.LFB160:
2164:.\mpu6050.c   **** /** Set external data shadow delay enabled status.
2165:.\mpu6050.c   ****  * @param enabled New external data shadow delay enabled status.
2166:.\mpu6050.c   ****  * @see getExternalShadowDelayEnabled()
2167:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2168:.\mpu6050.c   ****  * @see MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT
2169:.\mpu6050.c   ****  */
2170:.\mpu6050.c   **** void MPU6050_setExternalShadowDelayEnabled(bool enabled) {
 7623              		.loc 1 2170 0
 7624              		.cfi_startproc
 7625 0000 80B5     		push	{r7, lr}
 7626              		.cfi_def_cfa_offset 8
 7627              		.cfi_offset 7, -8
 7628              		.cfi_offset 14, -4
 7629 0002 82B0     		sub	sp, sp, #8
 7630              		.cfi_def_cfa_offset 16
 7631 0004 00AF     		add	r7, sp, #0
 7632              		.cfi_def_cfa_register 7
 7633 0006 021C     		mov	r2, r0
 7634 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 173


 7635 000a 1A70     		strb	r2, [r3]
2171:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT, enab
 7636              		.loc 1 2171 0
 7637 000c 054B     		ldr	r3, .L593
 7638 000e 1A78     		ldrb	r2, [r3]
 7639 0010 FB1D     		add	r3, r7, #7
 7640 0012 1B78     		ldrb	r3, [r3]
 7641 0014 101C     		mov	r0, r2
 7642 0016 6721     		mov	r1, #103
 7643 0018 0722     		mov	r2, #7
 7644 001a FFF7FEFF 		bl	I2CWriteBit
2172:.\mpu6050.c   **** }
 7645              		.loc 1 2172 0
 7646 001e BD46     		mov	sp, r7
 7647 0020 02B0     		add	sp, sp, #8
 7648              		@ sp needed
 7649 0022 80BD     		pop	{r7, pc}
 7650              	.L594:
 7651              		.align	2
 7652              	.L593:
 7653 0024 00000000 		.word	devAddr
 7654              		.cfi_endproc
 7655              	.LFE160:
 7656              		.size	MPU6050_setExternalShadowDelayEnabled, .-MPU6050_setExternalShadowDelayEnabled
 7657              		.section	.text.MPU6050_getSlaveDelayEnabled,"ax",%progbits
 7658              		.align	2
 7659              		.global	MPU6050_getSlaveDelayEnabled
 7660              		.code	16
 7661              		.thumb_func
 7662              		.type	MPU6050_getSlaveDelayEnabled, %function
 7663              	MPU6050_getSlaveDelayEnabled:
 7664              	.LFB161:
2173:.\mpu6050.c   **** /** Get slave delay enabled status.
2174:.\mpu6050.c   ****  * When a particular slave delay is enabled, the rate of access for the that
2175:.\mpu6050.c   ****  * slave device is reduced. When a slave's access rate is decreased relative to
2176:.\mpu6050.c   ****  * the Sample Rate, the slave is accessed every:
2177:.\mpu6050.c   ****  *
2178:.\mpu6050.c   ****  *     1 / (1 + I2C_MST_DLY) Samples
2179:.\mpu6050.c   ****  *
2180:.\mpu6050.c   ****  * This base Sample Rate in turn is determined by SMPLRT_DIV (register  * 25)
2181:.\mpu6050.c   ****  * and DLPF_CFG (register 26).
2182:.\mpu6050.c   ****  *
2183:.\mpu6050.c   ****  * For further information regarding I2C_MST_DLY, please refer to register 52.
2184:.\mpu6050.c   ****  * For further information regarding the Sample Rate, please refer to register 25.
2185:.\mpu6050.c   ****  *
2186:.\mpu6050.c   ****  * @param num Slave number (0-4)
2187:.\mpu6050.c   ****  * @return Current slave delay enabled status.
2188:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2189:.\mpu6050.c   ****  * @see MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT
2190:.\mpu6050.c   ****  */
2191:.\mpu6050.c   **** bool MPU6050_getSlaveDelayEnabled(uint8_t num) {
 7665              		.loc 1 2191 0
 7666              		.cfi_startproc
 7667 0000 80B5     		push	{r7, lr}
 7668              		.cfi_def_cfa_offset 8
 7669              		.cfi_offset 7, -8
 7670              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 174


 7671 0002 82B0     		sub	sp, sp, #8
 7672              		.cfi_def_cfa_offset 16
 7673 0004 00AF     		add	r7, sp, #0
 7674              		.cfi_def_cfa_register 7
 7675 0006 021C     		mov	r2, r0
 7676 0008 FB1D     		add	r3, r7, #7
 7677 000a 1A70     		strb	r2, [r3]
2192:.\mpu6050.c   ****     // MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT is 4, SLV3 is 3, etc.
2193:.\mpu6050.c   ****     if (num > 4) return 0;
 7678              		.loc 1 2193 0
 7679 000c FB1D     		add	r3, r7, #7
 7680 000e 1B78     		ldrb	r3, [r3]
 7681 0010 042B     		cmp	r3, #4
 7682 0012 01D9     		bls	.L596
 7683              		.loc 1 2193 0 is_stmt 0 discriminator 1
 7684 0014 0023     		mov	r3, #0
 7685 0016 0DE0     		b	.L597
 7686              	.L596:
2194:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, num, buffer);
 7687              		.loc 1 2194 0 is_stmt 1
 7688 0018 084B     		ldr	r3, .L598
 7689 001a 1978     		ldrb	r1, [r3]
 7690 001c FB1D     		add	r3, r7, #7
 7691 001e 1A78     		ldrb	r2, [r3]
 7692 0020 074B     		ldr	r3, .L598+4
 7693 0022 081C     		mov	r0, r1
 7694 0024 6721     		mov	r1, #103
 7695 0026 FFF7FEFF 		bl	I2CReadBit
2195:.\mpu6050.c   ****     return buffer[0];
 7696              		.loc 1 2195 0
 7697 002a 054B     		ldr	r3, .L598+4
 7698 002c 1B78     		ldrb	r3, [r3]
 7699 002e 5A1E     		sub	r2, r3, #1
 7700 0030 9341     		sbc	r3, r3, r2
 7701 0032 DBB2     		uxtb	r3, r3
 7702              	.L597:
2196:.\mpu6050.c   **** }
 7703              		.loc 1 2196 0
 7704 0034 181C     		mov	r0, r3
 7705 0036 BD46     		mov	sp, r7
 7706 0038 02B0     		add	sp, sp, #8
 7707              		@ sp needed
 7708 003a 80BD     		pop	{r7, pc}
 7709              	.L599:
 7710              		.align	2
 7711              	.L598:
 7712 003c 00000000 		.word	devAddr
 7713 0040 00000000 		.word	buffer
 7714              		.cfi_endproc
 7715              	.LFE161:
 7716              		.size	MPU6050_getSlaveDelayEnabled, .-MPU6050_getSlaveDelayEnabled
 7717              		.section	.text.MPU6050_setSlaveDelayEnabled,"ax",%progbits
 7718              		.align	2
 7719              		.global	MPU6050_setSlaveDelayEnabled
 7720              		.code	16
 7721              		.thumb_func
 7722              		.type	MPU6050_setSlaveDelayEnabled, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 175


 7723              	MPU6050_setSlaveDelayEnabled:
 7724              	.LFB162:
2197:.\mpu6050.c   **** /** Set slave delay enabled status.
2198:.\mpu6050.c   ****  * @param num Slave number (0-4)
2199:.\mpu6050.c   ****  * @param enabled New slave delay enabled status.
2200:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2201:.\mpu6050.c   ****  * @see MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT
2202:.\mpu6050.c   ****  */
2203:.\mpu6050.c   **** void MPU6050_setSlaveDelayEnabled(uint8_t num, bool enabled) {
 7725              		.loc 1 2203 0
 7726              		.cfi_startproc
 7727 0000 90B5     		push	{r4, r7, lr}
 7728              		.cfi_def_cfa_offset 12
 7729              		.cfi_offset 4, -12
 7730              		.cfi_offset 7, -8
 7731              		.cfi_offset 14, -4
 7732 0002 83B0     		sub	sp, sp, #12
 7733              		.cfi_def_cfa_offset 24
 7734 0004 00AF     		add	r7, sp, #0
 7735              		.cfi_def_cfa_register 7
 7736 0006 021C     		mov	r2, r0
 7737 0008 FB1D     		add	r3, r7, #7
 7738 000a 1A70     		strb	r2, [r3]
 7739 000c BB1D     		add	r3, r7, #6
 7740 000e 0A1C     		add	r2, r1, #0
 7741 0010 1A70     		strb	r2, [r3]
2204:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, num, enabled);
 7742              		.loc 1 2204 0
 7743 0012 074B     		ldr	r3, .L601
 7744 0014 1A78     		ldrb	r2, [r3]
 7745 0016 BB1D     		add	r3, r7, #6
 7746 0018 1C78     		ldrb	r4, [r3]
 7747 001a FB1D     		add	r3, r7, #7
 7748 001c 1B78     		ldrb	r3, [r3]
 7749 001e 101C     		mov	r0, r2
 7750 0020 6721     		mov	r1, #103
 7751 0022 1A1C     		mov	r2, r3
 7752 0024 231C     		mov	r3, r4
 7753 0026 FFF7FEFF 		bl	I2CWriteBit
2205:.\mpu6050.c   **** }
 7754              		.loc 1 2205 0
 7755 002a BD46     		mov	sp, r7
 7756 002c 03B0     		add	sp, sp, #12
 7757              		@ sp needed
 7758 002e 90BD     		pop	{r4, r7, pc}
 7759              	.L602:
 7760              		.align	2
 7761              	.L601:
 7762 0030 00000000 		.word	devAddr
 7763              		.cfi_endproc
 7764              	.LFE162:
 7765              		.size	MPU6050_setSlaveDelayEnabled, .-MPU6050_setSlaveDelayEnabled
 7766              		.section	.text.MPU6050_resetGyroscopePath,"ax",%progbits
 7767              		.align	2
 7768              		.global	MPU6050_resetGyroscopePath
 7769              		.code	16
 7770              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 176


 7771              		.type	MPU6050_resetGyroscopePath, %function
 7772              	MPU6050_resetGyroscopePath:
 7773              	.LFB163:
2206:.\mpu6050.c   **** 
2207:.\mpu6050.c   **** // SIGNAL_PATH_RESET register
2208:.\mpu6050.c   **** 
2209:.\mpu6050.c   **** /** Reset gyroscope signal path.
2210:.\mpu6050.c   ****  * The reset will revert the signal path analog to digital converters and
2211:.\mpu6050.c   ****  * filters to their power up configurations.
2212:.\mpu6050.c   ****  * @see MPU6050_RA_SIGNAL_PATH_RESET
2213:.\mpu6050.c   ****  * @see MPU6050_PATHRESET_GYRO_RESET_BIT
2214:.\mpu6050.c   ****  */
2215:.\mpu6050.c   **** void MPU6050_resetGyroscopePath() {
 7774              		.loc 1 2215 0
 7775              		.cfi_startproc
 7776 0000 80B5     		push	{r7, lr}
 7777              		.cfi_def_cfa_offset 8
 7778              		.cfi_offset 7, -8
 7779              		.cfi_offset 14, -4
 7780 0002 00AF     		add	r7, sp, #0
 7781              		.cfi_def_cfa_register 7
2216:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_GYRO_RESET_BIT, true);
 7782              		.loc 1 2216 0
 7783 0004 044B     		ldr	r3, .L604
 7784 0006 1B78     		ldrb	r3, [r3]
 7785 0008 181C     		mov	r0, r3
 7786 000a 6821     		mov	r1, #104
 7787 000c 0222     		mov	r2, #2
 7788 000e 0123     		mov	r3, #1
 7789 0010 FFF7FEFF 		bl	I2CWriteBit
2217:.\mpu6050.c   **** }
 7790              		.loc 1 2217 0
 7791 0014 BD46     		mov	sp, r7
 7792              		@ sp needed
 7793 0016 80BD     		pop	{r7, pc}
 7794              	.L605:
 7795              		.align	2
 7796              	.L604:
 7797 0018 00000000 		.word	devAddr
 7798              		.cfi_endproc
 7799              	.LFE163:
 7800              		.size	MPU6050_resetGyroscopePath, .-MPU6050_resetGyroscopePath
 7801              		.section	.text.MPU6050_resetAccelerometerPath,"ax",%progbits
 7802              		.align	2
 7803              		.global	MPU6050_resetAccelerometerPath
 7804              		.code	16
 7805              		.thumb_func
 7806              		.type	MPU6050_resetAccelerometerPath, %function
 7807              	MPU6050_resetAccelerometerPath:
 7808              	.LFB164:
2218:.\mpu6050.c   **** /** Reset accelerometer signal path.
2219:.\mpu6050.c   ****  * The reset will revert the signal path analog to digital converters and
2220:.\mpu6050.c   ****  * filters to their power up configurations.
2221:.\mpu6050.c   ****  * @see MPU6050_RA_SIGNAL_PATH_RESET
2222:.\mpu6050.c   ****  * @see MPU6050_PATHRESET_ACCEL_RESET_BIT
2223:.\mpu6050.c   ****  */
2224:.\mpu6050.c   **** void MPU6050_resetAccelerometerPath() {
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 177


 7809              		.loc 1 2224 0
 7810              		.cfi_startproc
 7811 0000 80B5     		push	{r7, lr}
 7812              		.cfi_def_cfa_offset 8
 7813              		.cfi_offset 7, -8
 7814              		.cfi_offset 14, -4
 7815 0002 00AF     		add	r7, sp, #0
 7816              		.cfi_def_cfa_register 7
2225:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_ACCEL_RESET_BIT, true);
 7817              		.loc 1 2225 0
 7818 0004 044B     		ldr	r3, .L607
 7819 0006 1B78     		ldrb	r3, [r3]
 7820 0008 181C     		mov	r0, r3
 7821 000a 6821     		mov	r1, #104
 7822 000c 0122     		mov	r2, #1
 7823 000e 0123     		mov	r3, #1
 7824 0010 FFF7FEFF 		bl	I2CWriteBit
2226:.\mpu6050.c   **** }
 7825              		.loc 1 2226 0
 7826 0014 BD46     		mov	sp, r7
 7827              		@ sp needed
 7828 0016 80BD     		pop	{r7, pc}
 7829              	.L608:
 7830              		.align	2
 7831              	.L607:
 7832 0018 00000000 		.word	devAddr
 7833              		.cfi_endproc
 7834              	.LFE164:
 7835              		.size	MPU6050_resetAccelerometerPath, .-MPU6050_resetAccelerometerPath
 7836              		.section	.text.MPU6050_resetTemperaturePath,"ax",%progbits
 7837              		.align	2
 7838              		.global	MPU6050_resetTemperaturePath
 7839              		.code	16
 7840              		.thumb_func
 7841              		.type	MPU6050_resetTemperaturePath, %function
 7842              	MPU6050_resetTemperaturePath:
 7843              	.LFB165:
2227:.\mpu6050.c   **** /** Reset temperature sensor signal path.
2228:.\mpu6050.c   ****  * The reset will revert the signal path analog to digital converters and
2229:.\mpu6050.c   ****  * filters to their power up configurations.
2230:.\mpu6050.c   ****  * @see MPU6050_RA_SIGNAL_PATH_RESET
2231:.\mpu6050.c   ****  * @see MPU6050_PATHRESET_TEMP_RESET_BIT
2232:.\mpu6050.c   ****  */
2233:.\mpu6050.c   **** void MPU6050_resetTemperaturePath() {
 7844              		.loc 1 2233 0
 7845              		.cfi_startproc
 7846 0000 80B5     		push	{r7, lr}
 7847              		.cfi_def_cfa_offset 8
 7848              		.cfi_offset 7, -8
 7849              		.cfi_offset 14, -4
 7850 0002 00AF     		add	r7, sp, #0
 7851              		.cfi_def_cfa_register 7
2234:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_TEMP_RESET_BIT, true);
 7852              		.loc 1 2234 0
 7853 0004 044B     		ldr	r3, .L610
 7854 0006 1B78     		ldrb	r3, [r3]
 7855 0008 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 178


 7856 000a 6821     		mov	r1, #104
 7857 000c 0022     		mov	r2, #0
 7858 000e 0123     		mov	r3, #1
 7859 0010 FFF7FEFF 		bl	I2CWriteBit
2235:.\mpu6050.c   **** }
 7860              		.loc 1 2235 0
 7861 0014 BD46     		mov	sp, r7
 7862              		@ sp needed
 7863 0016 80BD     		pop	{r7, pc}
 7864              	.L611:
 7865              		.align	2
 7866              	.L610:
 7867 0018 00000000 		.word	devAddr
 7868              		.cfi_endproc
 7869              	.LFE165:
 7870              		.size	MPU6050_resetTemperaturePath, .-MPU6050_resetTemperaturePath
 7871              		.section	.text.MPU6050_getAccelerometerPowerOnDelay,"ax",%progbits
 7872              		.align	2
 7873              		.global	MPU6050_getAccelerometerPowerOnDelay
 7874              		.code	16
 7875              		.thumb_func
 7876              		.type	MPU6050_getAccelerometerPowerOnDelay, %function
 7877              	MPU6050_getAccelerometerPowerOnDelay:
 7878              	.LFB166:
2236:.\mpu6050.c   **** 
2237:.\mpu6050.c   **** // MOT_DETECT_CTRL register
2238:.\mpu6050.c   **** 
2239:.\mpu6050.c   **** /** Get accelerometer power-on delay.
2240:.\mpu6050.c   ****  * The accelerometer data path provides samples to the sensor registers, Motion
2241:.\mpu6050.c   ****  * detection, Zero Motion detection, and Free Fall detection modules. The
2242:.\mpu6050.c   ****  * signal path contains filters which must be flushed on wake-up with new
2243:.\mpu6050.c   ****  * samples before the detection modules begin operations. The default wake-up
2244:.\mpu6050.c   ****  * delay, of 4ms can be lengthened by up to 3ms. This additional delay is
2245:.\mpu6050.c   ****  * specified in ACCEL_ON_DELAY in units of 1 LSB = 1 ms. The user may select
2246:.\mpu6050.c   ****  * any value above zero unless instructed otherwise by InvenSense. Please refer
2247:.\mpu6050.c   ****  * to Section 8 of the MPU-6000/MPU-6050 Product Specification document for
2248:.\mpu6050.c   ****  * further information regarding the detection modules.
2249:.\mpu6050.c   ****  * @return Current accelerometer power-on delay
2250:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2251:.\mpu6050.c   ****  * @see MPU6050_DETECT_ACCEL_ON_DELAY_BIT
2252:.\mpu6050.c   ****  */
2253:.\mpu6050.c   **** uint8_t MPU6050_getAccelerometerPowerOnDelay() {
 7879              		.loc 1 2253 0
 7880              		.cfi_startproc
 7881 0000 80B5     		push	{r7, lr}
 7882              		.cfi_def_cfa_offset 8
 7883              		.cfi_offset 7, -8
 7884              		.cfi_offset 14, -4
 7885 0002 82B0     		sub	sp, sp, #8
 7886              		.cfi_def_cfa_offset 16
 7887 0004 02AF     		add	r7, sp, #8
 7888              		.cfi_def_cfa 7, 8
2254:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_ACCEL_ON_DELAY_BIT, MPU6050_DET
 7889              		.loc 1 2254 0
 7890 0006 074B     		ldr	r3, .L614
 7891 0008 1A78     		ldrb	r2, [r3]
 7892 000a 074B     		ldr	r3, .L614+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 179


 7893 000c 0093     		str	r3, [sp]
 7894 000e 101C     		mov	r0, r2
 7895 0010 6921     		mov	r1, #105
 7896 0012 0522     		mov	r2, #5
 7897 0014 0223     		mov	r3, #2
 7898 0016 FFF7FEFF 		bl	I2CReadBits
2255:.\mpu6050.c   ****     return buffer[0];
 7899              		.loc 1 2255 0
 7900 001a 034B     		ldr	r3, .L614+4
 7901 001c 1B78     		ldrb	r3, [r3]
2256:.\mpu6050.c   **** }
 7902              		.loc 1 2256 0
 7903 001e 181C     		mov	r0, r3
 7904 0020 BD46     		mov	sp, r7
 7905              		@ sp needed
 7906 0022 80BD     		pop	{r7, pc}
 7907              	.L615:
 7908              		.align	2
 7909              	.L614:
 7910 0024 00000000 		.word	devAddr
 7911 0028 00000000 		.word	buffer
 7912              		.cfi_endproc
 7913              	.LFE166:
 7914              		.size	MPU6050_getAccelerometerPowerOnDelay, .-MPU6050_getAccelerometerPowerOnDelay
 7915              		.section	.text.MPU6050_setAccelerometerPowerOnDelay,"ax",%progbits
 7916              		.align	2
 7917              		.global	MPU6050_setAccelerometerPowerOnDelay
 7918              		.code	16
 7919              		.thumb_func
 7920              		.type	MPU6050_setAccelerometerPowerOnDelay, %function
 7921              	MPU6050_setAccelerometerPowerOnDelay:
 7922              	.LFB167:
2257:.\mpu6050.c   **** /** Set accelerometer power-on delay.
2258:.\mpu6050.c   ****  * @param delay New accelerometer power-on delay (0-3)
2259:.\mpu6050.c   ****  * @see getAccelerometerPowerOnDelay()
2260:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2261:.\mpu6050.c   ****  * @see MPU6050_DETECT_ACCEL_ON_DELAY_BIT
2262:.\mpu6050.c   ****  */
2263:.\mpu6050.c   **** void MPU6050_setAccelerometerPowerOnDelay(uint8_t delay) {
 7923              		.loc 1 2263 0
 7924              		.cfi_startproc
 7925 0000 80B5     		push	{r7, lr}
 7926              		.cfi_def_cfa_offset 8
 7927              		.cfi_offset 7, -8
 7928              		.cfi_offset 14, -4
 7929 0002 84B0     		sub	sp, sp, #16
 7930              		.cfi_def_cfa_offset 24
 7931 0004 02AF     		add	r7, sp, #8
 7932              		.cfi_def_cfa 7, 16
 7933 0006 021C     		mov	r2, r0
 7934 0008 FB1D     		add	r3, r7, #7
 7935 000a 1A70     		strb	r2, [r3]
2264:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_ACCEL_ON_DELAY_BIT, MPU6050_DE
 7936              		.loc 1 2264 0
 7937 000c 064B     		ldr	r3, .L617
 7938 000e 1A78     		ldrb	r2, [r3]
 7939 0010 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 180


 7940 0012 1B78     		ldrb	r3, [r3]
 7941 0014 0093     		str	r3, [sp]
 7942 0016 101C     		mov	r0, r2
 7943 0018 6921     		mov	r1, #105
 7944 001a 0522     		mov	r2, #5
 7945 001c 0223     		mov	r3, #2
 7946 001e FFF7FEFF 		bl	I2CWriteBits
2265:.\mpu6050.c   **** }
 7947              		.loc 1 2265 0
 7948 0022 BD46     		mov	sp, r7
 7949 0024 02B0     		add	sp, sp, #8
 7950              		@ sp needed
 7951 0026 80BD     		pop	{r7, pc}
 7952              	.L618:
 7953              		.align	2
 7954              	.L617:
 7955 0028 00000000 		.word	devAddr
 7956              		.cfi_endproc
 7957              	.LFE167:
 7958              		.size	MPU6050_setAccelerometerPowerOnDelay, .-MPU6050_setAccelerometerPowerOnDelay
 7959              		.section	.text.MPU6050_getFreefallDetectionCounterDecrement,"ax",%progbits
 7960              		.align	2
 7961              		.global	MPU6050_getFreefallDetectionCounterDecrement
 7962              		.code	16
 7963              		.thumb_func
 7964              		.type	MPU6050_getFreefallDetectionCounterDecrement, %function
 7965              	MPU6050_getFreefallDetectionCounterDecrement:
 7966              	.LFB168:
2266:.\mpu6050.c   **** /** Get Free Fall detection counter decrement configuration.
2267:.\mpu6050.c   ****  * Detection is registered by the Free Fall detection module after accelerometer
2268:.\mpu6050.c   ****  * measurements meet their respective threshold conditions over a specified
2269:.\mpu6050.c   ****  * number of samples. When the threshold conditions are met, the corresponding
2270:.\mpu6050.c   ****  * detection counter increments by 1. The user may control the rate at which the
2271:.\mpu6050.c   ****  * detection counter decrements when the threshold condition is not met by
2272:.\mpu6050.c   ****  * configuring FF_COUNT. The decrement rate can be set according to the
2273:.\mpu6050.c   ****  * following table:
2274:.\mpu6050.c   ****  *
2275:.\mpu6050.c   ****  * <pre>
2276:.\mpu6050.c   ****  * FF_COUNT | Counter Decrement
2277:.\mpu6050.c   ****  * ---------+------------------
2278:.\mpu6050.c   ****  * 0        | Reset
2279:.\mpu6050.c   ****  * 1        | 1
2280:.\mpu6050.c   ****  * 2        | 2
2281:.\mpu6050.c   ****  * 3        | 4
2282:.\mpu6050.c   ****  * </pre>
2283:.\mpu6050.c   ****  *
2284:.\mpu6050.c   ****  * When FF_COUNT is configured to 0 (reset), any non-qualifying sample will
2285:.\mpu6050.c   ****  * reset the counter to 0. For further information on Free Fall detection,
2286:.\mpu6050.c   ****  * please refer to Registers 29 to 32.
2287:.\mpu6050.c   ****  *
2288:.\mpu6050.c   ****  * @return Current decrement configuration
2289:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2290:.\mpu6050.c   ****  * @see MPU6050_DETECT_FF_COUNT_BIT
2291:.\mpu6050.c   ****  */
2292:.\mpu6050.c   **** uint8_t MPU6050_getFreefallDetectionCounterDecrement() {
 7967              		.loc 1 2292 0
 7968              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 181


 7969 0000 80B5     		push	{r7, lr}
 7970              		.cfi_def_cfa_offset 8
 7971              		.cfi_offset 7, -8
 7972              		.cfi_offset 14, -4
 7973 0002 82B0     		sub	sp, sp, #8
 7974              		.cfi_def_cfa_offset 16
 7975 0004 02AF     		add	r7, sp, #8
 7976              		.cfi_def_cfa 7, 8
2293:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_FF_COUNT_BIT, MPU6050_DETECT_FF
 7977              		.loc 1 2293 0
 7978 0006 074B     		ldr	r3, .L621
 7979 0008 1A78     		ldrb	r2, [r3]
 7980 000a 074B     		ldr	r3, .L621+4
 7981 000c 0093     		str	r3, [sp]
 7982 000e 101C     		mov	r0, r2
 7983 0010 6921     		mov	r1, #105
 7984 0012 0322     		mov	r2, #3
 7985 0014 0223     		mov	r3, #2
 7986 0016 FFF7FEFF 		bl	I2CReadBits
2294:.\mpu6050.c   ****     return buffer[0];
 7987              		.loc 1 2294 0
 7988 001a 034B     		ldr	r3, .L621+4
 7989 001c 1B78     		ldrb	r3, [r3]
2295:.\mpu6050.c   **** }
 7990              		.loc 1 2295 0
 7991 001e 181C     		mov	r0, r3
 7992 0020 BD46     		mov	sp, r7
 7993              		@ sp needed
 7994 0022 80BD     		pop	{r7, pc}
 7995              	.L622:
 7996              		.align	2
 7997              	.L621:
 7998 0024 00000000 		.word	devAddr
 7999 0028 00000000 		.word	buffer
 8000              		.cfi_endproc
 8001              	.LFE168:
 8002              		.size	MPU6050_getFreefallDetectionCounterDecrement, .-MPU6050_getFreefallDetectionCounterDecrement
 8003              		.section	.text.MPU6050_setFreefallDetectionCounterDecrement,"ax",%progbits
 8004              		.align	2
 8005              		.global	MPU6050_setFreefallDetectionCounterDecrement
 8006              		.code	16
 8007              		.thumb_func
 8008              		.type	MPU6050_setFreefallDetectionCounterDecrement, %function
 8009              	MPU6050_setFreefallDetectionCounterDecrement:
 8010              	.LFB169:
2296:.\mpu6050.c   **** /** Set Free Fall detection counter decrement configuration.
2297:.\mpu6050.c   ****  * @param decrement New decrement configuration value
2298:.\mpu6050.c   ****  * @see getFreefallDetectionCounterDecrement()
2299:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2300:.\mpu6050.c   ****  * @see MPU6050_DETECT_FF_COUNT_BIT
2301:.\mpu6050.c   ****  */
2302:.\mpu6050.c   **** void MPU6050_setFreefallDetectionCounterDecrement(uint8_t decrement) {
 8011              		.loc 1 2302 0
 8012              		.cfi_startproc
 8013 0000 80B5     		push	{r7, lr}
 8014              		.cfi_def_cfa_offset 8
 8015              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 182


 8016              		.cfi_offset 14, -4
 8017 0002 84B0     		sub	sp, sp, #16
 8018              		.cfi_def_cfa_offset 24
 8019 0004 02AF     		add	r7, sp, #8
 8020              		.cfi_def_cfa 7, 16
 8021 0006 021C     		mov	r2, r0
 8022 0008 FB1D     		add	r3, r7, #7
 8023 000a 1A70     		strb	r2, [r3]
2303:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_FF_COUNT_BIT, MPU6050_DETECT_F
 8024              		.loc 1 2303 0
 8025 000c 064B     		ldr	r3, .L624
 8026 000e 1A78     		ldrb	r2, [r3]
 8027 0010 FB1D     		add	r3, r7, #7
 8028 0012 1B78     		ldrb	r3, [r3]
 8029 0014 0093     		str	r3, [sp]
 8030 0016 101C     		mov	r0, r2
 8031 0018 6921     		mov	r1, #105
 8032 001a 0322     		mov	r2, #3
 8033 001c 0223     		mov	r3, #2
 8034 001e FFF7FEFF 		bl	I2CWriteBits
2304:.\mpu6050.c   **** }
 8035              		.loc 1 2304 0
 8036 0022 BD46     		mov	sp, r7
 8037 0024 02B0     		add	sp, sp, #8
 8038              		@ sp needed
 8039 0026 80BD     		pop	{r7, pc}
 8040              	.L625:
 8041              		.align	2
 8042              	.L624:
 8043 0028 00000000 		.word	devAddr
 8044              		.cfi_endproc
 8045              	.LFE169:
 8046              		.size	MPU6050_setFreefallDetectionCounterDecrement, .-MPU6050_setFreefallDetectionCounterDecrement
 8047              		.section	.text.MPU6050_getMotionDetectionCounterDecrement,"ax",%progbits
 8048              		.align	2
 8049              		.global	MPU6050_getMotionDetectionCounterDecrement
 8050              		.code	16
 8051              		.thumb_func
 8052              		.type	MPU6050_getMotionDetectionCounterDecrement, %function
 8053              	MPU6050_getMotionDetectionCounterDecrement:
 8054              	.LFB170:
2305:.\mpu6050.c   **** /** Get Motion detection counter decrement configuration.
2306:.\mpu6050.c   ****  * Detection is registered by the Motion detection module after accelerometer
2307:.\mpu6050.c   ****  * measurements meet their respective threshold conditions over a specified
2308:.\mpu6050.c   ****  * number of samples. When the threshold conditions are met, the corresponding
2309:.\mpu6050.c   ****  * detection counter increments by 1. The user may control the rate at which the
2310:.\mpu6050.c   ****  * detection counter decrements when the threshold condition is not met by
2311:.\mpu6050.c   ****  * configuring MOT_COUNT. The decrement rate can be set according to the
2312:.\mpu6050.c   ****  * following table:
2313:.\mpu6050.c   ****  *
2314:.\mpu6050.c   ****  * <pre>
2315:.\mpu6050.c   ****  * MOT_COUNT | Counter Decrement
2316:.\mpu6050.c   ****  * ----------+------------------
2317:.\mpu6050.c   ****  * 0         | Reset
2318:.\mpu6050.c   ****  * 1         | 1
2319:.\mpu6050.c   ****  * 2         | 2
2320:.\mpu6050.c   ****  * 3         | 4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 183


2321:.\mpu6050.c   ****  * </pre>
2322:.\mpu6050.c   ****  *
2323:.\mpu6050.c   ****  * When MOT_COUNT is configured to 0 (reset), any non-qualifying sample will
2324:.\mpu6050.c   ****  * reset the counter to 0. For further information on Motion detection,
2325:.\mpu6050.c   ****  * please refer to Registers 29 to 32.
2326:.\mpu6050.c   ****  *
2327:.\mpu6050.c   ****  */
2328:.\mpu6050.c   **** uint8_t MPU6050_getMotionDetectionCounterDecrement() {
 8055              		.loc 1 2328 0
 8056              		.cfi_startproc
 8057 0000 80B5     		push	{r7, lr}
 8058              		.cfi_def_cfa_offset 8
 8059              		.cfi_offset 7, -8
 8060              		.cfi_offset 14, -4
 8061 0002 82B0     		sub	sp, sp, #8
 8062              		.cfi_def_cfa_offset 16
 8063 0004 02AF     		add	r7, sp, #8
 8064              		.cfi_def_cfa 7, 8
2329:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_MOT_COUNT_BIT, MPU6050_DETECT_M
 8065              		.loc 1 2329 0
 8066 0006 074B     		ldr	r3, .L628
 8067 0008 1A78     		ldrb	r2, [r3]
 8068 000a 074B     		ldr	r3, .L628+4
 8069 000c 0093     		str	r3, [sp]
 8070 000e 101C     		mov	r0, r2
 8071 0010 6921     		mov	r1, #105
 8072 0012 0122     		mov	r2, #1
 8073 0014 0223     		mov	r3, #2
 8074 0016 FFF7FEFF 		bl	I2CReadBits
2330:.\mpu6050.c   ****     return buffer[0];
 8075              		.loc 1 2330 0
 8076 001a 034B     		ldr	r3, .L628+4
 8077 001c 1B78     		ldrb	r3, [r3]
2331:.\mpu6050.c   **** }
 8078              		.loc 1 2331 0
 8079 001e 181C     		mov	r0, r3
 8080 0020 BD46     		mov	sp, r7
 8081              		@ sp needed
 8082 0022 80BD     		pop	{r7, pc}
 8083              	.L629:
 8084              		.align	2
 8085              	.L628:
 8086 0024 00000000 		.word	devAddr
 8087 0028 00000000 		.word	buffer
 8088              		.cfi_endproc
 8089              	.LFE170:
 8090              		.size	MPU6050_getMotionDetectionCounterDecrement, .-MPU6050_getMotionDetectionCounterDecrement
 8091              		.section	.text.MPU6050_setMotionDetectionCounterDecrement,"ax",%progbits
 8092              		.align	2
 8093              		.global	MPU6050_setMotionDetectionCounterDecrement
 8094              		.code	16
 8095              		.thumb_func
 8096              		.type	MPU6050_setMotionDetectionCounterDecrement, %function
 8097              	MPU6050_setMotionDetectionCounterDecrement:
 8098              	.LFB171:
2332:.\mpu6050.c   **** /** Set Motion detection counter decrement configuration.
2333:.\mpu6050.c   ****  * @param decrement New decrement configuration value
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 184


2334:.\mpu6050.c   ****  * @see getMotionDetectionCounterDecrement()
2335:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2336:.\mpu6050.c   ****  * @see MPU6050_DETECT_MOT_COUNT_BIT
2337:.\mpu6050.c   ****  */
2338:.\mpu6050.c   **** void MPU6050_setMotionDetectionCounterDecrement(uint8_t decrement) {
 8099              		.loc 1 2338 0
 8100              		.cfi_startproc
 8101 0000 80B5     		push	{r7, lr}
 8102              		.cfi_def_cfa_offset 8
 8103              		.cfi_offset 7, -8
 8104              		.cfi_offset 14, -4
 8105 0002 84B0     		sub	sp, sp, #16
 8106              		.cfi_def_cfa_offset 24
 8107 0004 02AF     		add	r7, sp, #8
 8108              		.cfi_def_cfa 7, 16
 8109 0006 021C     		mov	r2, r0
 8110 0008 FB1D     		add	r3, r7, #7
 8111 000a 1A70     		strb	r2, [r3]
2339:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_MOT_COUNT_BIT, MPU6050_DETECT_
 8112              		.loc 1 2339 0
 8113 000c 064B     		ldr	r3, .L631
 8114 000e 1A78     		ldrb	r2, [r3]
 8115 0010 FB1D     		add	r3, r7, #7
 8116 0012 1B78     		ldrb	r3, [r3]
 8117 0014 0093     		str	r3, [sp]
 8118 0016 101C     		mov	r0, r2
 8119 0018 6921     		mov	r1, #105
 8120 001a 0122     		mov	r2, #1
 8121 001c 0223     		mov	r3, #2
 8122 001e FFF7FEFF 		bl	I2CWriteBits
2340:.\mpu6050.c   **** }
 8123              		.loc 1 2340 0
 8124 0022 BD46     		mov	sp, r7
 8125 0024 02B0     		add	sp, sp, #8
 8126              		@ sp needed
 8127 0026 80BD     		pop	{r7, pc}
 8128              	.L632:
 8129              		.align	2
 8130              	.L631:
 8131 0028 00000000 		.word	devAddr
 8132              		.cfi_endproc
 8133              	.LFE171:
 8134              		.size	MPU6050_setMotionDetectionCounterDecrement, .-MPU6050_setMotionDetectionCounterDecrement
 8135              		.section	.text.MPU6050_getFIFOEnabled,"ax",%progbits
 8136              		.align	2
 8137              		.global	MPU6050_getFIFOEnabled
 8138              		.code	16
 8139              		.thumb_func
 8140              		.type	MPU6050_getFIFOEnabled, %function
 8141              	MPU6050_getFIFOEnabled:
 8142              	.LFB172:
2341:.\mpu6050.c   **** 
2342:.\mpu6050.c   **** // USER_CTRL register
2343:.\mpu6050.c   **** 
2344:.\mpu6050.c   **** /** Get FIFO enabled status.
2345:.\mpu6050.c   ****  * When this bit is set to 0, the FIFO buffer is disabled. The FIFO buffer
2346:.\mpu6050.c   ****  * cannot be written to or read from while disabled. The FIFO buffer's state
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 185


2347:.\mpu6050.c   ****  * does not change unless the MPU-60X0 is power cycled.
2348:.\mpu6050.c   ****  * @return Current FIFO enabled status
2349:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2350:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_FIFO_EN_BIT
2351:.\mpu6050.c   ****  */
2352:.\mpu6050.c   **** bool MPU6050_getFIFOEnabled() {
 8143              		.loc 1 2352 0
 8144              		.cfi_startproc
 8145 0000 80B5     		push	{r7, lr}
 8146              		.cfi_def_cfa_offset 8
 8147              		.cfi_offset 7, -8
 8148              		.cfi_offset 14, -4
 8149 0002 00AF     		add	r7, sp, #0
 8150              		.cfi_def_cfa_register 7
2353:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, buffer);
 8151              		.loc 1 2353 0
 8152 0004 074B     		ldr	r3, .L635
 8153 0006 1A78     		ldrb	r2, [r3]
 8154 0008 074B     		ldr	r3, .L635+4
 8155 000a 101C     		mov	r0, r2
 8156 000c 6A21     		mov	r1, #106
 8157 000e 0622     		mov	r2, #6
 8158 0010 FFF7FEFF 		bl	I2CReadBit
2354:.\mpu6050.c   ****     return buffer[0];
 8159              		.loc 1 2354 0
 8160 0014 044B     		ldr	r3, .L635+4
 8161 0016 1B78     		ldrb	r3, [r3]
 8162 0018 5A1E     		sub	r2, r3, #1
 8163 001a 9341     		sbc	r3, r3, r2
 8164 001c DBB2     		uxtb	r3, r3
2355:.\mpu6050.c   **** }
 8165              		.loc 1 2355 0
 8166 001e 181C     		mov	r0, r3
 8167 0020 BD46     		mov	sp, r7
 8168              		@ sp needed
 8169 0022 80BD     		pop	{r7, pc}
 8170              	.L636:
 8171              		.align	2
 8172              	.L635:
 8173 0024 00000000 		.word	devAddr
 8174 0028 00000000 		.word	buffer
 8175              		.cfi_endproc
 8176              	.LFE172:
 8177              		.size	MPU6050_getFIFOEnabled, .-MPU6050_getFIFOEnabled
 8178              		.section	.text.MPU6050_setFIFOEnabled,"ax",%progbits
 8179              		.align	2
 8180              		.global	MPU6050_setFIFOEnabled
 8181              		.code	16
 8182              		.thumb_func
 8183              		.type	MPU6050_setFIFOEnabled, %function
 8184              	MPU6050_setFIFOEnabled:
 8185              	.LFB173:
2356:.\mpu6050.c   **** /** Set FIFO enabled status.
2357:.\mpu6050.c   ****  * @param enabled New FIFO enabled status
2358:.\mpu6050.c   ****  * @see getFIFOEnabled()
2359:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2360:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_FIFO_EN_BIT
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 186


2361:.\mpu6050.c   ****  */
2362:.\mpu6050.c   **** void MPU6050_setFIFOEnabled(bool enabled) {
 8186              		.loc 1 2362 0
 8187              		.cfi_startproc
 8188 0000 80B5     		push	{r7, lr}
 8189              		.cfi_def_cfa_offset 8
 8190              		.cfi_offset 7, -8
 8191              		.cfi_offset 14, -4
 8192 0002 82B0     		sub	sp, sp, #8
 8193              		.cfi_def_cfa_offset 16
 8194 0004 00AF     		add	r7, sp, #0
 8195              		.cfi_def_cfa_register 7
 8196 0006 021C     		mov	r2, r0
 8197 0008 FB1D     		add	r3, r7, #7
 8198 000a 1A70     		strb	r2, [r3]
2363:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8199              		.loc 1 2363 0
 8200 000c 054B     		ldr	r3, .L638
 8201 000e 1A78     		ldrb	r2, [r3]
 8202 0010 FB1D     		add	r3, r7, #7
 8203 0012 1B78     		ldrb	r3, [r3]
 8204 0014 101C     		mov	r0, r2
 8205 0016 6A21     		mov	r1, #106
 8206 0018 0622     		mov	r2, #6
 8207 001a FFF7FEFF 		bl	I2CWriteBit
2364:.\mpu6050.c   **** }
 8208              		.loc 1 2364 0
 8209 001e BD46     		mov	sp, r7
 8210 0020 02B0     		add	sp, sp, #8
 8211              		@ sp needed
 8212 0022 80BD     		pop	{r7, pc}
 8213              	.L639:
 8214              		.align	2
 8215              	.L638:
 8216 0024 00000000 		.word	devAddr
 8217              		.cfi_endproc
 8218              	.LFE173:
 8219              		.size	MPU6050_setFIFOEnabled, .-MPU6050_setFIFOEnabled
 8220              		.section	.text.MPU6050_getI2CMasterModeEnabled,"ax",%progbits
 8221              		.align	2
 8222              		.global	MPU6050_getI2CMasterModeEnabled
 8223              		.code	16
 8224              		.thumb_func
 8225              		.type	MPU6050_getI2CMasterModeEnabled, %function
 8226              	MPU6050_getI2CMasterModeEnabled:
 8227              	.LFB174:
2365:.\mpu6050.c   **** /** Get I2C Master Mode enabled status.
2366:.\mpu6050.c   ****  * When this mode is enabled, the MPU-60X0 acts as the I2C Master to the
2367:.\mpu6050.c   ****  * external sensor slave devices on the auxiliary I2C bus. When this bit is
2368:.\mpu6050.c   ****  * cleared to 0, the auxiliary I2C bus lines (AUX_DA and AUX_CL) are logically
2369:.\mpu6050.c   ****  * driven by the primary I2C bus (SDA and SCL). This is a precondition to
2370:.\mpu6050.c   ****  * enabling Bypass Mode. For further information regarding Bypass Mode, please
2371:.\mpu6050.c   ****  * refer to Register 55.
2372:.\mpu6050.c   ****  * @return Current I2C Master Mode enabled status
2373:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2374:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
2375:.\mpu6050.c   ****  */
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 187


2376:.\mpu6050.c   **** bool MPU6050_getI2CMasterModeEnabled() {
 8228              		.loc 1 2376 0
 8229              		.cfi_startproc
 8230 0000 80B5     		push	{r7, lr}
 8231              		.cfi_def_cfa_offset 8
 8232              		.cfi_offset 7, -8
 8233              		.cfi_offset 14, -4
 8234 0002 00AF     		add	r7, sp, #0
 8235              		.cfi_def_cfa_register 7
2377:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, buffer);
 8236              		.loc 1 2377 0
 8237 0004 074B     		ldr	r3, .L642
 8238 0006 1A78     		ldrb	r2, [r3]
 8239 0008 074B     		ldr	r3, .L642+4
 8240 000a 101C     		mov	r0, r2
 8241 000c 6A21     		mov	r1, #106
 8242 000e 0522     		mov	r2, #5
 8243 0010 FFF7FEFF 		bl	I2CReadBit
2378:.\mpu6050.c   ****     return buffer[0];
 8244              		.loc 1 2378 0
 8245 0014 044B     		ldr	r3, .L642+4
 8246 0016 1B78     		ldrb	r3, [r3]
 8247 0018 5A1E     		sub	r2, r3, #1
 8248 001a 9341     		sbc	r3, r3, r2
 8249 001c DBB2     		uxtb	r3, r3
2379:.\mpu6050.c   **** }
 8250              		.loc 1 2379 0
 8251 001e 181C     		mov	r0, r3
 8252 0020 BD46     		mov	sp, r7
 8253              		@ sp needed
 8254 0022 80BD     		pop	{r7, pc}
 8255              	.L643:
 8256              		.align	2
 8257              	.L642:
 8258 0024 00000000 		.word	devAddr
 8259 0028 00000000 		.word	buffer
 8260              		.cfi_endproc
 8261              	.LFE174:
 8262              		.size	MPU6050_getI2CMasterModeEnabled, .-MPU6050_getI2CMasterModeEnabled
 8263              		.section	.text.MPU6050_setI2CMasterModeEnabled,"ax",%progbits
 8264              		.align	2
 8265              		.global	MPU6050_setI2CMasterModeEnabled
 8266              		.code	16
 8267              		.thumb_func
 8268              		.type	MPU6050_setI2CMasterModeEnabled, %function
 8269              	MPU6050_setI2CMasterModeEnabled:
 8270              	.LFB175:
2380:.\mpu6050.c   **** /** Set I2C Master Mode enabled status.
2381:.\mpu6050.c   ****  * @param enabled New I2C Master Mode enabled status
2382:.\mpu6050.c   ****  * @see getI2CMasterModeEnabled()
2383:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2384:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
2385:.\mpu6050.c   ****  */
2386:.\mpu6050.c   **** void MPU6050_setI2CMasterModeEnabled(bool enabled) {
 8271              		.loc 1 2386 0
 8272              		.cfi_startproc
 8273 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 188


 8274              		.cfi_def_cfa_offset 8
 8275              		.cfi_offset 7, -8
 8276              		.cfi_offset 14, -4
 8277 0002 82B0     		sub	sp, sp, #8
 8278              		.cfi_def_cfa_offset 16
 8279 0004 00AF     		add	r7, sp, #0
 8280              		.cfi_def_cfa_register 7
 8281 0006 021C     		mov	r2, r0
 8282 0008 FB1D     		add	r3, r7, #7
 8283 000a 1A70     		strb	r2, [r3]
2387:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8284              		.loc 1 2387 0
 8285 000c 054B     		ldr	r3, .L645
 8286 000e 1A78     		ldrb	r2, [r3]
 8287 0010 FB1D     		add	r3, r7, #7
 8288 0012 1B78     		ldrb	r3, [r3]
 8289 0014 101C     		mov	r0, r2
 8290 0016 6A21     		mov	r1, #106
 8291 0018 0522     		mov	r2, #5
 8292 001a FFF7FEFF 		bl	I2CWriteBit
2388:.\mpu6050.c   **** }
 8293              		.loc 1 2388 0
 8294 001e BD46     		mov	sp, r7
 8295 0020 02B0     		add	sp, sp, #8
 8296              		@ sp needed
 8297 0022 80BD     		pop	{r7, pc}
 8298              	.L646:
 8299              		.align	2
 8300              	.L645:
 8301 0024 00000000 		.word	devAddr
 8302              		.cfi_endproc
 8303              	.LFE175:
 8304              		.size	MPU6050_setI2CMasterModeEnabled, .-MPU6050_setI2CMasterModeEnabled
 8305              		.section	.text.MPU6050_switchSPIEnabled,"ax",%progbits
 8306              		.align	2
 8307              		.global	MPU6050_switchSPIEnabled
 8308              		.code	16
 8309              		.thumb_func
 8310              		.type	MPU6050_switchSPIEnabled, %function
 8311              	MPU6050_switchSPIEnabled:
 8312              	.LFB176:
2389:.\mpu6050.c   **** /** Switch from I2C to SPI mode (MPU-6000 only)
2390:.\mpu6050.c   ****  * If this is set, the primary SPI interface will be enabled in place of the
2391:.\mpu6050.c   ****  * disabled primary I2C interface.
2392:.\mpu6050.c   ****  */
2393:.\mpu6050.c   **** void MPU6050_switchSPIEnabled(bool enabled) {
 8313              		.loc 1 2393 0
 8314              		.cfi_startproc
 8315 0000 80B5     		push	{r7, lr}
 8316              		.cfi_def_cfa_offset 8
 8317              		.cfi_offset 7, -8
 8318              		.cfi_offset 14, -4
 8319 0002 82B0     		sub	sp, sp, #8
 8320              		.cfi_def_cfa_offset 16
 8321 0004 00AF     		add	r7, sp, #0
 8322              		.cfi_def_cfa_register 7
 8323 0006 021C     		mov	r2, r0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 189


 8324 0008 FB1D     		add	r3, r7, #7
 8325 000a 1A70     		strb	r2, [r3]
2394:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_IF_DIS_BIT, enabled);
 8326              		.loc 1 2394 0
 8327 000c 054B     		ldr	r3, .L648
 8328 000e 1A78     		ldrb	r2, [r3]
 8329 0010 FB1D     		add	r3, r7, #7
 8330 0012 1B78     		ldrb	r3, [r3]
 8331 0014 101C     		mov	r0, r2
 8332 0016 6A21     		mov	r1, #106
 8333 0018 0422     		mov	r2, #4
 8334 001a FFF7FEFF 		bl	I2CWriteBit
2395:.\mpu6050.c   **** }
 8335              		.loc 1 2395 0
 8336 001e BD46     		mov	sp, r7
 8337 0020 02B0     		add	sp, sp, #8
 8338              		@ sp needed
 8339 0022 80BD     		pop	{r7, pc}
 8340              	.L649:
 8341              		.align	2
 8342              	.L648:
 8343 0024 00000000 		.word	devAddr
 8344              		.cfi_endproc
 8345              	.LFE176:
 8346              		.size	MPU6050_switchSPIEnabled, .-MPU6050_switchSPIEnabled
 8347              		.section	.text.MPU6050_resetFIFO,"ax",%progbits
 8348              		.align	2
 8349              		.global	MPU6050_resetFIFO
 8350              		.code	16
 8351              		.thumb_func
 8352              		.type	MPU6050_resetFIFO, %function
 8353              	MPU6050_resetFIFO:
 8354              	.LFB177:
2396:.\mpu6050.c   **** /** Reset the FIFO.
2397:.\mpu6050.c   ****  * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
2398:.\mpu6050.c   ****  * bit automatically clears to 0 after the reset has been triggered.
2399:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2400:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_FIFO_RESET_BIT
2401:.\mpu6050.c   ****  */
2402:.\mpu6050.c   **** void MPU6050_resetFIFO() {
 8355              		.loc 1 2402 0
 8356              		.cfi_startproc
 8357 0000 80B5     		push	{r7, lr}
 8358              		.cfi_def_cfa_offset 8
 8359              		.cfi_offset 7, -8
 8360              		.cfi_offset 14, -4
 8361 0002 00AF     		add	r7, sp, #0
 8362              		.cfi_def_cfa_register 7
2403:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8363              		.loc 1 2403 0
 8364 0004 044B     		ldr	r3, .L651
 8365 0006 1B78     		ldrb	r3, [r3]
 8366 0008 181C     		mov	r0, r3
 8367 000a 6A21     		mov	r1, #106
 8368 000c 0222     		mov	r2, #2
 8369 000e 0123     		mov	r3, #1
 8370 0010 FFF7FEFF 		bl	I2CWriteBit
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 190


2404:.\mpu6050.c   **** }
 8371              		.loc 1 2404 0
 8372 0014 BD46     		mov	sp, r7
 8373              		@ sp needed
 8374 0016 80BD     		pop	{r7, pc}
 8375              	.L652:
 8376              		.align	2
 8377              	.L651:
 8378 0018 00000000 		.word	devAddr
 8379              		.cfi_endproc
 8380              	.LFE177:
 8381              		.size	MPU6050_resetFIFO, .-MPU6050_resetFIFO
 8382              		.section	.text.MPU6050_resetI2CMaster,"ax",%progbits
 8383              		.align	2
 8384              		.global	MPU6050_resetI2CMaster
 8385              		.code	16
 8386              		.thumb_func
 8387              		.type	MPU6050_resetI2CMaster, %function
 8388              	MPU6050_resetI2CMaster:
 8389              	.LFB178:
2405:.\mpu6050.c   **** /** Reset the I2C Master.
2406:.\mpu6050.c   ****  * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
2407:.\mpu6050.c   ****  * This bit automatically clears to 0 after the reset has been triggered.
2408:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2409:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
2410:.\mpu6050.c   ****  */
2411:.\mpu6050.c   **** void MPU6050_resetI2CMaster() {
 8390              		.loc 1 2411 0
 8391              		.cfi_startproc
 8392 0000 80B5     		push	{r7, lr}
 8393              		.cfi_def_cfa_offset 8
 8394              		.cfi_offset 7, -8
 8395              		.cfi_offset 14, -4
 8396 0002 00AF     		add	r7, sp, #0
 8397              		.cfi_def_cfa_register 7
2412:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8398              		.loc 1 2412 0
 8399 0004 044B     		ldr	r3, .L654
 8400 0006 1B78     		ldrb	r3, [r3]
 8401 0008 181C     		mov	r0, r3
 8402 000a 6A21     		mov	r1, #106
 8403 000c 0122     		mov	r2, #1
 8404 000e 0123     		mov	r3, #1
 8405 0010 FFF7FEFF 		bl	I2CWriteBit
2413:.\mpu6050.c   **** }
 8406              		.loc 1 2413 0
 8407 0014 BD46     		mov	sp, r7
 8408              		@ sp needed
 8409 0016 80BD     		pop	{r7, pc}
 8410              	.L655:
 8411              		.align	2
 8412              	.L654:
 8413 0018 00000000 		.word	devAddr
 8414              		.cfi_endproc
 8415              	.LFE178:
 8416              		.size	MPU6050_resetI2CMaster, .-MPU6050_resetI2CMaster
 8417              		.section	.text.MPU6050_resetSensors,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 191


 8418              		.align	2
 8419              		.global	MPU6050_resetSensors
 8420              		.code	16
 8421              		.thumb_func
 8422              		.type	MPU6050_resetSensors, %function
 8423              	MPU6050_resetSensors:
 8424              	.LFB179:
2414:.\mpu6050.c   **** /** Reset all sensor registers and signal paths.
2415:.\mpu6050.c   ****  * When set to 1, this bit resets the signal paths for all sensors (gyroscopes,
2416:.\mpu6050.c   ****  * accelerometers, and temperature sensor). This operation will also clear the
2417:.\mpu6050.c   ****  * sensor registers. This bit automatically clears to 0 after the reset has been
2418:.\mpu6050.c   ****  * triggered.
2419:.\mpu6050.c   ****  *
2420:.\mpu6050.c   ****  * When resetting only the signal path (and not the sensor registers), please
2421:.\mpu6050.c   ****  * use Register 104, SIGNAL_PATH_RESET.
2422:.\mpu6050.c   ****  *
2423:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2424:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_SIG_COND_RESET_BIT
2425:.\mpu6050.c   ****  */
2426:.\mpu6050.c   **** void MPU6050_resetSensors() {
 8425              		.loc 1 2426 0
 8426              		.cfi_startproc
 8427 0000 80B5     		push	{r7, lr}
 8428              		.cfi_def_cfa_offset 8
 8429              		.cfi_offset 7, -8
 8430              		.cfi_offset 14, -4
 8431 0002 00AF     		add	r7, sp, #0
 8432              		.cfi_def_cfa_register 7
2427:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_SIG_COND_RESET_BIT, true);
 8433              		.loc 1 2427 0
 8434 0004 044B     		ldr	r3, .L657
 8435 0006 1B78     		ldrb	r3, [r3]
 8436 0008 181C     		mov	r0, r3
 8437 000a 6A21     		mov	r1, #106
 8438 000c 0022     		mov	r2, #0
 8439 000e 0123     		mov	r3, #1
 8440 0010 FFF7FEFF 		bl	I2CWriteBit
2428:.\mpu6050.c   **** }
 8441              		.loc 1 2428 0
 8442 0014 BD46     		mov	sp, r7
 8443              		@ sp needed
 8444 0016 80BD     		pop	{r7, pc}
 8445              	.L658:
 8446              		.align	2
 8447              	.L657:
 8448 0018 00000000 		.word	devAddr
 8449              		.cfi_endproc
 8450              	.LFE179:
 8451              		.size	MPU6050_resetSensors, .-MPU6050_resetSensors
 8452              		.section	.text.MPU6050_reset,"ax",%progbits
 8453              		.align	2
 8454              		.global	MPU6050_reset
 8455              		.code	16
 8456              		.thumb_func
 8457              		.type	MPU6050_reset, %function
 8458              	MPU6050_reset:
 8459              	.LFB180:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 192


2429:.\mpu6050.c   **** 
2430:.\mpu6050.c   **** // PWR_MGMT_1 register
2431:.\mpu6050.c   **** 
2432:.\mpu6050.c   **** /** Trigger a full device reset.
2433:.\mpu6050.c   ****  * A small delay of ~50ms may be desirable after triggering a reset.
2434:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2435:.\mpu6050.c   ****  * @see MPU6050_PWR1_DEVICE_RESET_BIT
2436:.\mpu6050.c   ****  */
2437:.\mpu6050.c   **** void MPU6050_reset() {
 8460              		.loc 1 2437 0
 8461              		.cfi_startproc
 8462 0000 80B5     		push	{r7, lr}
 8463              		.cfi_def_cfa_offset 8
 8464              		.cfi_offset 7, -8
 8465              		.cfi_offset 14, -4
 8466 0002 00AF     		add	r7, sp, #0
 8467              		.cfi_def_cfa_register 7
2438:.\mpu6050.c   **** 	//todo consider writing byte 0x80 without reading the register before since it is reset anyways
2439:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8468              		.loc 1 2439 0
 8469 0004 044B     		ldr	r3, .L660
 8470 0006 1B78     		ldrb	r3, [r3]
 8471 0008 181C     		mov	r0, r3
 8472 000a 6B21     		mov	r1, #107
 8473 000c 0722     		mov	r2, #7
 8474 000e 0123     		mov	r3, #1
 8475 0010 FFF7FEFF 		bl	I2CWriteBit
2440:.\mpu6050.c   **** }
 8476              		.loc 1 2440 0
 8477 0014 BD46     		mov	sp, r7
 8478              		@ sp needed
 8479 0016 80BD     		pop	{r7, pc}
 8480              	.L661:
 8481              		.align	2
 8482              	.L660:
 8483 0018 00000000 		.word	devAddr
 8484              		.cfi_endproc
 8485              	.LFE180:
 8486              		.size	MPU6050_reset, .-MPU6050_reset
 8487              		.section	.text.MPU6050_getSleepEnabled,"ax",%progbits
 8488              		.align	2
 8489              		.global	MPU6050_getSleepEnabled
 8490              		.code	16
 8491              		.thumb_func
 8492              		.type	MPU6050_getSleepEnabled, %function
 8493              	MPU6050_getSleepEnabled:
 8494              	.LFB181:
2441:.\mpu6050.c   **** /** Get sleep mode status.
2442:.\mpu6050.c   ****  * Setting the SLEEP bit in the register puts the device into very low power
2443:.\mpu6050.c   ****  * sleep mode. In this mode, only the serial interface and internal registers
2444:.\mpu6050.c   ****  * remain active, allowing for a very low standby current. Clearing this bit
2445:.\mpu6050.c   ****  * puts the device back into normal mode. To save power, the individual standby
2446:.\mpu6050.c   ****  * selections for each of the gyros should be used if any gyro axis is not used
2447:.\mpu6050.c   ****  * by the application.
2448:.\mpu6050.c   ****  * @return Current sleep mode enabled status
2449:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2450:.\mpu6050.c   ****  * @see MPU6050_PWR1_SLEEP_BIT
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 193


2451:.\mpu6050.c   ****  */
2452:.\mpu6050.c   **** bool MPU6050_getSleepEnabled() {
 8495              		.loc 1 2452 0
 8496              		.cfi_startproc
 8497 0000 80B5     		push	{r7, lr}
 8498              		.cfi_def_cfa_offset 8
 8499              		.cfi_offset 7, -8
 8500              		.cfi_offset 14, -4
 8501 0002 00AF     		add	r7, sp, #0
 8502              		.cfi_def_cfa_register 7
2453:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, buffer);
 8503              		.loc 1 2453 0
 8504 0004 074B     		ldr	r3, .L664
 8505 0006 1A78     		ldrb	r2, [r3]
 8506 0008 074B     		ldr	r3, .L664+4
 8507 000a 101C     		mov	r0, r2
 8508 000c 6B21     		mov	r1, #107
 8509 000e 0622     		mov	r2, #6
 8510 0010 FFF7FEFF 		bl	I2CReadBit
2454:.\mpu6050.c   ****     return buffer[0];
 8511              		.loc 1 2454 0
 8512 0014 044B     		ldr	r3, .L664+4
 8513 0016 1B78     		ldrb	r3, [r3]
 8514 0018 5A1E     		sub	r2, r3, #1
 8515 001a 9341     		sbc	r3, r3, r2
 8516 001c DBB2     		uxtb	r3, r3
2455:.\mpu6050.c   **** }
 8517              		.loc 1 2455 0
 8518 001e 181C     		mov	r0, r3
 8519 0020 BD46     		mov	sp, r7
 8520              		@ sp needed
 8521 0022 80BD     		pop	{r7, pc}
 8522              	.L665:
 8523              		.align	2
 8524              	.L664:
 8525 0024 00000000 		.word	devAddr
 8526 0028 00000000 		.word	buffer
 8527              		.cfi_endproc
 8528              	.LFE181:
 8529              		.size	MPU6050_getSleepEnabled, .-MPU6050_getSleepEnabled
 8530              		.section	.text.MPU6050_setSleepEnabled,"ax",%progbits
 8531              		.align	2
 8532              		.global	MPU6050_setSleepEnabled
 8533              		.code	16
 8534              		.thumb_func
 8535              		.type	MPU6050_setSleepEnabled, %function
 8536              	MPU6050_setSleepEnabled:
 8537              	.LFB182:
2456:.\mpu6050.c   **** /** Set sleep mode status.
2457:.\mpu6050.c   ****  * @param enabled New sleep mode enabled status
2458:.\mpu6050.c   ****  * @see getSleepEnabled()
2459:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2460:.\mpu6050.c   ****  * @see MPU6050_PWR1_SLEEP_BIT
2461:.\mpu6050.c   ****  */
2462:.\mpu6050.c   **** void MPU6050_setSleepEnabled(bool enabled) {
 8538              		.loc 1 2462 0
 8539              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 194


 8540 0000 80B5     		push	{r7, lr}
 8541              		.cfi_def_cfa_offset 8
 8542              		.cfi_offset 7, -8
 8543              		.cfi_offset 14, -4
 8544 0002 82B0     		sub	sp, sp, #8
 8545              		.cfi_def_cfa_offset 16
 8546 0004 00AF     		add	r7, sp, #0
 8547              		.cfi_def_cfa_register 7
 8548 0006 021C     		mov	r2, r0
 8549 0008 FB1D     		add	r3, r7, #7
 8550 000a 1A70     		strb	r2, [r3]
2463:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8551              		.loc 1 2463 0
 8552 000c 054B     		ldr	r3, .L667
 8553 000e 1A78     		ldrb	r2, [r3]
 8554 0010 FB1D     		add	r3, r7, #7
 8555 0012 1B78     		ldrb	r3, [r3]
 8556 0014 101C     		mov	r0, r2
 8557 0016 6B21     		mov	r1, #107
 8558 0018 0622     		mov	r2, #6
 8559 001a FFF7FEFF 		bl	I2CWriteBit
2464:.\mpu6050.c   **** }
 8560              		.loc 1 2464 0
 8561 001e BD46     		mov	sp, r7
 8562 0020 02B0     		add	sp, sp, #8
 8563              		@ sp needed
 8564 0022 80BD     		pop	{r7, pc}
 8565              	.L668:
 8566              		.align	2
 8567              	.L667:
 8568 0024 00000000 		.word	devAddr
 8569              		.cfi_endproc
 8570              	.LFE182:
 8571              		.size	MPU6050_setSleepEnabled, .-MPU6050_setSleepEnabled
 8572              		.section	.text.MPU6050_getWakeCycleEnabled,"ax",%progbits
 8573              		.align	2
 8574              		.global	MPU6050_getWakeCycleEnabled
 8575              		.code	16
 8576              		.thumb_func
 8577              		.type	MPU6050_getWakeCycleEnabled, %function
 8578              	MPU6050_getWakeCycleEnabled:
 8579              	.LFB183:
2465:.\mpu6050.c   **** /** Get wake cycle enabled status.
2466:.\mpu6050.c   ****  * When this bit is set to 1 and SLEEP is disabled, the MPU-60X0 will cycle
2467:.\mpu6050.c   ****  * between sleep mode and waking up to take a single sample of data from active
2468:.\mpu6050.c   ****  * sensors at a rate determined by LP_WAKE_CTRL (register 108).
2469:.\mpu6050.c   ****  * @return Current sleep mode enabled status
2470:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2471:.\mpu6050.c   ****  * @see MPU6050_PWR1_CYCLE_BIT
2472:.\mpu6050.c   ****  */
2473:.\mpu6050.c   **** bool MPU6050_getWakeCycleEnabled() {
 8580              		.loc 1 2473 0
 8581              		.cfi_startproc
 8582 0000 80B5     		push	{r7, lr}
 8583              		.cfi_def_cfa_offset 8
 8584              		.cfi_offset 7, -8
 8585              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 195


 8586 0002 00AF     		add	r7, sp, #0
 8587              		.cfi_def_cfa_register 7
2474:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CYCLE_BIT, buffer);
 8588              		.loc 1 2474 0
 8589 0004 074B     		ldr	r3, .L671
 8590 0006 1A78     		ldrb	r2, [r3]
 8591 0008 074B     		ldr	r3, .L671+4
 8592 000a 101C     		mov	r0, r2
 8593 000c 6B21     		mov	r1, #107
 8594 000e 0522     		mov	r2, #5
 8595 0010 FFF7FEFF 		bl	I2CReadBit
2475:.\mpu6050.c   ****     return buffer[0];
 8596              		.loc 1 2475 0
 8597 0014 044B     		ldr	r3, .L671+4
 8598 0016 1B78     		ldrb	r3, [r3]
 8599 0018 5A1E     		sub	r2, r3, #1
 8600 001a 9341     		sbc	r3, r3, r2
 8601 001c DBB2     		uxtb	r3, r3
2476:.\mpu6050.c   **** }
 8602              		.loc 1 2476 0
 8603 001e 181C     		mov	r0, r3
 8604 0020 BD46     		mov	sp, r7
 8605              		@ sp needed
 8606 0022 80BD     		pop	{r7, pc}
 8607              	.L672:
 8608              		.align	2
 8609              	.L671:
 8610 0024 00000000 		.word	devAddr
 8611 0028 00000000 		.word	buffer
 8612              		.cfi_endproc
 8613              	.LFE183:
 8614              		.size	MPU6050_getWakeCycleEnabled, .-MPU6050_getWakeCycleEnabled
 8615              		.section	.text.MPU6050_setWakeCycleEnabled,"ax",%progbits
 8616              		.align	2
 8617              		.global	MPU6050_setWakeCycleEnabled
 8618              		.code	16
 8619              		.thumb_func
 8620              		.type	MPU6050_setWakeCycleEnabled, %function
 8621              	MPU6050_setWakeCycleEnabled:
 8622              	.LFB184:
2477:.\mpu6050.c   **** /** Set wake cycle enabled status.
2478:.\mpu6050.c   ****  * @param enabled New sleep mode enabled status
2479:.\mpu6050.c   ****  * @see getWakeCycleEnabled()
2480:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2481:.\mpu6050.c   ****  * @see MPU6050_PWR1_CYCLE_BIT
2482:.\mpu6050.c   ****  */
2483:.\mpu6050.c   **** void MPU6050_setWakeCycleEnabled(bool enabled) {
 8623              		.loc 1 2483 0
 8624              		.cfi_startproc
 8625 0000 80B5     		push	{r7, lr}
 8626              		.cfi_def_cfa_offset 8
 8627              		.cfi_offset 7, -8
 8628              		.cfi_offset 14, -4
 8629 0002 82B0     		sub	sp, sp, #8
 8630              		.cfi_def_cfa_offset 16
 8631 0004 00AF     		add	r7, sp, #0
 8632              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 196


 8633 0006 021C     		mov	r2, r0
 8634 0008 FB1D     		add	r3, r7, #7
 8635 000a 1A70     		strb	r2, [r3]
2484:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CYCLE_BIT, enabled);
 8636              		.loc 1 2484 0
 8637 000c 054B     		ldr	r3, .L674
 8638 000e 1A78     		ldrb	r2, [r3]
 8639 0010 FB1D     		add	r3, r7, #7
 8640 0012 1B78     		ldrb	r3, [r3]
 8641 0014 101C     		mov	r0, r2
 8642 0016 6B21     		mov	r1, #107
 8643 0018 0522     		mov	r2, #5
 8644 001a FFF7FEFF 		bl	I2CWriteBit
2485:.\mpu6050.c   **** }
 8645              		.loc 1 2485 0
 8646 001e BD46     		mov	sp, r7
 8647 0020 02B0     		add	sp, sp, #8
 8648              		@ sp needed
 8649 0022 80BD     		pop	{r7, pc}
 8650              	.L675:
 8651              		.align	2
 8652              	.L674:
 8653 0024 00000000 		.word	devAddr
 8654              		.cfi_endproc
 8655              	.LFE184:
 8656              		.size	MPU6050_setWakeCycleEnabled, .-MPU6050_setWakeCycleEnabled
 8657              		.section	.text.MPU6050_getTempSensorEnabled,"ax",%progbits
 8658              		.align	2
 8659              		.global	MPU6050_getTempSensorEnabled
 8660              		.code	16
 8661              		.thumb_func
 8662              		.type	MPU6050_getTempSensorEnabled, %function
 8663              	MPU6050_getTempSensorEnabled:
 8664              	.LFB185:
2486:.\mpu6050.c   **** /** Get temperature sensor enabled status.
2487:.\mpu6050.c   ****  * Control the usage of the internal temperature sensor.
2488:.\mpu6050.c   ****  *
2489:.\mpu6050.c   ****  * Note: this register stores the *disabled* value, but for consistency with the
2490:.\mpu6050.c   ****  * rest of the code, the function is named and used with standard true/false
2491:.\mpu6050.c   ****  * values to indicate whether the sensor is enabled or disabled, respectively.
2492:.\mpu6050.c   ****  *
2493:.\mpu6050.c   ****  * @return Current temperature sensor enabled status
2494:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2495:.\mpu6050.c   ****  * @see MPU6050_PWR1_TEMP_DIS_BIT
2496:.\mpu6050.c   ****  */
2497:.\mpu6050.c   **** bool MPU6050_getTempSensorEnabled() {
 8665              		.loc 1 2497 0
 8666              		.cfi_startproc
 8667 0000 80B5     		push	{r7, lr}
 8668              		.cfi_def_cfa_offset 8
 8669              		.cfi_offset 7, -8
 8670              		.cfi_offset 14, -4
 8671 0002 00AF     		add	r7, sp, #0
 8672              		.cfi_def_cfa_register 7
2498:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_TEMP_DIS_BIT, buffer);
 8673              		.loc 1 2498 0
 8674 0004 074B     		ldr	r3, .L678
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 197


 8675 0006 1A78     		ldrb	r2, [r3]
 8676 0008 074B     		ldr	r3, .L678+4
 8677 000a 101C     		mov	r0, r2
 8678 000c 6B21     		mov	r1, #107
 8679 000e 0322     		mov	r2, #3
 8680 0010 FFF7FEFF 		bl	I2CReadBit
2499:.\mpu6050.c   ****     return buffer[0] == 0; // 1 is actually disabled here
 8681              		.loc 1 2499 0
 8682 0014 044B     		ldr	r3, .L678+4
 8683 0016 1B78     		ldrb	r3, [r3]
 8684 0018 5A42     		neg	r2, r3
 8685 001a 5341     		adc	r3, r3, r2
 8686 001c DBB2     		uxtb	r3, r3
2500:.\mpu6050.c   **** }
 8687              		.loc 1 2500 0
 8688 001e 181C     		mov	r0, r3
 8689 0020 BD46     		mov	sp, r7
 8690              		@ sp needed
 8691 0022 80BD     		pop	{r7, pc}
 8692              	.L679:
 8693              		.align	2
 8694              	.L678:
 8695 0024 00000000 		.word	devAddr
 8696 0028 00000000 		.word	buffer
 8697              		.cfi_endproc
 8698              	.LFE185:
 8699              		.size	MPU6050_getTempSensorEnabled, .-MPU6050_getTempSensorEnabled
 8700              		.section	.text.MPU6050_setTempSensorEnabled,"ax",%progbits
 8701              		.align	2
 8702              		.global	MPU6050_setTempSensorEnabled
 8703              		.code	16
 8704              		.thumb_func
 8705              		.type	MPU6050_setTempSensorEnabled, %function
 8706              	MPU6050_setTempSensorEnabled:
 8707              	.LFB186:
2501:.\mpu6050.c   **** /** Set temperature sensor enabled status.
2502:.\mpu6050.c   ****  * Note: this register stores the *disabled* value, but for consistency with the
2503:.\mpu6050.c   ****  * rest of the code, the function is named and used with standard true/false
2504:.\mpu6050.c   ****  * values to indicate whether the sensor is enabled or disabled, respectively.
2505:.\mpu6050.c   ****  *
2506:.\mpu6050.c   ****  * @param enabled New temperature sensor enabled status
2507:.\mpu6050.c   ****  * @see getTempSensorEnabled()
2508:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2509:.\mpu6050.c   ****  * @see MPU6050_PWR1_TEMP_DIS_BIT
2510:.\mpu6050.c   ****  */
2511:.\mpu6050.c   **** void MPU6050_setTempSensorEnabled(bool enabled) {
 8708              		.loc 1 2511 0
 8709              		.cfi_startproc
 8710 0000 80B5     		push	{r7, lr}
 8711              		.cfi_def_cfa_offset 8
 8712              		.cfi_offset 7, -8
 8713              		.cfi_offset 14, -4
 8714 0002 82B0     		sub	sp, sp, #8
 8715              		.cfi_def_cfa_offset 16
 8716 0004 00AF     		add	r7, sp, #0
 8717              		.cfi_def_cfa_register 7
 8718 0006 021C     		mov	r2, r0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 198


 8719 0008 FB1D     		add	r3, r7, #7
 8720 000a 1A70     		strb	r2, [r3]
2512:.\mpu6050.c   ****     // 1 is actually disabled here
2513:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_TEMP_DIS_BIT, !enabled);
 8721              		.loc 1 2513 0
 8722 000c 074B     		ldr	r3, .L681
 8723 000e 1978     		ldrb	r1, [r3]
 8724 0010 FB1D     		add	r3, r7, #7
 8725 0012 1B78     		ldrb	r3, [r3]
 8726 0014 0122     		mov	r2, #1
 8727 0016 5340     		eor	r3, r2
 8728 0018 DBB2     		uxtb	r3, r3
 8729 001a 081C     		mov	r0, r1
 8730 001c 6B21     		mov	r1, #107
 8731 001e 0322     		mov	r2, #3
 8732 0020 FFF7FEFF 		bl	I2CWriteBit
2514:.\mpu6050.c   **** }
 8733              		.loc 1 2514 0
 8734 0024 BD46     		mov	sp, r7
 8735 0026 02B0     		add	sp, sp, #8
 8736              		@ sp needed
 8737 0028 80BD     		pop	{r7, pc}
 8738              	.L682:
 8739 002a C046     		.align	2
 8740              	.L681:
 8741 002c 00000000 		.word	devAddr
 8742              		.cfi_endproc
 8743              	.LFE186:
 8744              		.size	MPU6050_setTempSensorEnabled, .-MPU6050_setTempSensorEnabled
 8745              		.section	.text.MPU6050_getClockSource,"ax",%progbits
 8746              		.align	2
 8747              		.global	MPU6050_getClockSource
 8748              		.code	16
 8749              		.thumb_func
 8750              		.type	MPU6050_getClockSource, %function
 8751              	MPU6050_getClockSource:
 8752              	.LFB187:
2515:.\mpu6050.c   **** /** Get clock source setting.
2516:.\mpu6050.c   ****  * @return Current clock source setting
2517:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2518:.\mpu6050.c   ****  * @see MPU6050_PWR1_CLKSEL_BIT
2519:.\mpu6050.c   ****  * @see MPU6050_PWR1_CLKSEL_LENGTH
2520:.\mpu6050.c   ****  */
2521:.\mpu6050.c   **** uint8_t MPU6050_getClockSource() {
 8753              		.loc 1 2521 0
 8754              		.cfi_startproc
 8755 0000 80B5     		push	{r7, lr}
 8756              		.cfi_def_cfa_offset 8
 8757              		.cfi_offset 7, -8
 8758              		.cfi_offset 14, -4
 8759 0002 82B0     		sub	sp, sp, #8
 8760              		.cfi_def_cfa_offset 16
 8761 0004 02AF     		add	r7, sp, #8
 8762              		.cfi_def_cfa 7, 8
2522:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH
 8763              		.loc 1 2522 0
 8764 0006 074B     		ldr	r3, .L685
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 199


 8765 0008 1A78     		ldrb	r2, [r3]
 8766 000a 074B     		ldr	r3, .L685+4
 8767 000c 0093     		str	r3, [sp]
 8768 000e 101C     		mov	r0, r2
 8769 0010 6B21     		mov	r1, #107
 8770 0012 0222     		mov	r2, #2
 8771 0014 0323     		mov	r3, #3
 8772 0016 FFF7FEFF 		bl	I2CReadBits
2523:.\mpu6050.c   ****     return buffer[0];
 8773              		.loc 1 2523 0
 8774 001a 034B     		ldr	r3, .L685+4
 8775 001c 1B78     		ldrb	r3, [r3]
2524:.\mpu6050.c   **** }
 8776              		.loc 1 2524 0
 8777 001e 181C     		mov	r0, r3
 8778 0020 BD46     		mov	sp, r7
 8779              		@ sp needed
 8780 0022 80BD     		pop	{r7, pc}
 8781              	.L686:
 8782              		.align	2
 8783              	.L685:
 8784 0024 00000000 		.word	devAddr
 8785 0028 00000000 		.word	buffer
 8786              		.cfi_endproc
 8787              	.LFE187:
 8788              		.size	MPU6050_getClockSource, .-MPU6050_getClockSource
 8789              		.section	.text.MPU6050_setClockSource,"ax",%progbits
 8790              		.align	2
 8791              		.global	MPU6050_setClockSource
 8792              		.code	16
 8793              		.thumb_func
 8794              		.type	MPU6050_setClockSource, %function
 8795              	MPU6050_setClockSource:
 8796              	.LFB188:
2525:.\mpu6050.c   **** /** Set clock source setting.
2526:.\mpu6050.c   ****  * An internal 8MHz oscillator, gyroscope based clock, or external sources can
2527:.\mpu6050.c   ****  * be selected as the MPU-60X0 clock source. When the internal 8 MHz oscillator
2528:.\mpu6050.c   ****  * or an external source is chosen as the clock source, the MPU-60X0 can operate
2529:.\mpu6050.c   ****  * in low power modes with the gyroscopes disabled.
2530:.\mpu6050.c   ****  *
2531:.\mpu6050.c   ****  * Upon power up, the MPU-60X0 clock source defaults to the internal oscillator.
2532:.\mpu6050.c   ****  * However, it is highly recommended that the device be configured to use one of
2533:.\mpu6050.c   ****  * the gyroscopes (or an external clock source) as the clock reference for
2534:.\mpu6050.c   ****  * improved stability. The clock source can be selected according to the following table:
2535:.\mpu6050.c   ****  *
2536:.\mpu6050.c   ****  * <pre>
2537:.\mpu6050.c   ****  * CLK_SEL | Clock Source
2538:.\mpu6050.c   ****  * --------+--------------------------------------
2539:.\mpu6050.c   ****  * 0       | Internal oscillator
2540:.\mpu6050.c   ****  * 1       | PLL with X Gyro reference
2541:.\mpu6050.c   ****  * 2       | PLL with Y Gyro reference
2542:.\mpu6050.c   ****  * 3       | PLL with Z Gyro reference
2543:.\mpu6050.c   ****  * 4       | PLL with external 32.768kHz reference
2544:.\mpu6050.c   ****  * 5       | PLL with external 19.2MHz reference
2545:.\mpu6050.c   ****  * 6       | Reserved
2546:.\mpu6050.c   ****  * 7       | Stops the clock and keeps the timing generator in reset
2547:.\mpu6050.c   ****  * </pre>
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 200


2548:.\mpu6050.c   ****  *
2549:.\mpu6050.c   ****  * @param source New clock source setting
2550:.\mpu6050.c   ****  * @see getClockSource()
2551:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2552:.\mpu6050.c   ****  * @see MPU6050_PWR1_CLKSEL_BIT
2553:.\mpu6050.c   ****  * @see MPU6050_PWR1_CLKSEL_LENGTH
2554:.\mpu6050.c   ****  */
2555:.\mpu6050.c   **** void MPU6050_setClockSource(uint8_t source) {
 8797              		.loc 1 2555 0
 8798              		.cfi_startproc
 8799 0000 80B5     		push	{r7, lr}
 8800              		.cfi_def_cfa_offset 8
 8801              		.cfi_offset 7, -8
 8802              		.cfi_offset 14, -4
 8803 0002 84B0     		sub	sp, sp, #16
 8804              		.cfi_def_cfa_offset 24
 8805 0004 02AF     		add	r7, sp, #8
 8806              		.cfi_def_cfa 7, 16
 8807 0006 021C     		mov	r2, r0
 8808 0008 FB1D     		add	r3, r7, #7
 8809 000a 1A70     		strb	r2, [r3]
2556:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGT
 8810              		.loc 1 2556 0
 8811 000c 064B     		ldr	r3, .L688
 8812 000e 1A78     		ldrb	r2, [r3]
 8813 0010 FB1D     		add	r3, r7, #7
 8814 0012 1B78     		ldrb	r3, [r3]
 8815 0014 0093     		str	r3, [sp]
 8816 0016 101C     		mov	r0, r2
 8817 0018 6B21     		mov	r1, #107
 8818 001a 0222     		mov	r2, #2
 8819 001c 0323     		mov	r3, #3
 8820 001e FFF7FEFF 		bl	I2CWriteBits
2557:.\mpu6050.c   **** }
 8821              		.loc 1 2557 0
 8822 0022 BD46     		mov	sp, r7
 8823 0024 02B0     		add	sp, sp, #8
 8824              		@ sp needed
 8825 0026 80BD     		pop	{r7, pc}
 8826              	.L689:
 8827              		.align	2
 8828              	.L688:
 8829 0028 00000000 		.word	devAddr
 8830              		.cfi_endproc
 8831              	.LFE188:
 8832              		.size	MPU6050_setClockSource, .-MPU6050_setClockSource
 8833              		.section	.text.MPU6050_getWakeFrequency,"ax",%progbits
 8834              		.align	2
 8835              		.global	MPU6050_getWakeFrequency
 8836              		.code	16
 8837              		.thumb_func
 8838              		.type	MPU6050_getWakeFrequency, %function
 8839              	MPU6050_getWakeFrequency:
 8840              	.LFB189:
2558:.\mpu6050.c   **** 
2559:.\mpu6050.c   **** // PWR_MGMT_2 register
2560:.\mpu6050.c   **** 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 201


2561:.\mpu6050.c   **** /** Get wake frequency in Accel-Only Low Power Mode.
2562:.\mpu6050.c   ****  * The MPU-60X0 can be put into Accerlerometer Only Low Power Mode by setting
2563:.\mpu6050.c   ****  * PWRSEL to 1 in the Power Management 1 register (Register 107). In this mode,
2564:.\mpu6050.c   ****  * the device will power off all devices except for the primary I2C interface,
2565:.\mpu6050.c   ****  * waking only the accelerometer at fixed intervals to take a single
2566:.\mpu6050.c   ****  * measurement. The frequency of wake-ups can be configured with LP_WAKE_CTRL
2567:.\mpu6050.c   ****  * as shown below:
2568:.\mpu6050.c   ****  *
2569:.\mpu6050.c   ****  * <pre>
2570:.\mpu6050.c   ****  * LP_WAKE_CTRL | Wake-up Frequency
2571:.\mpu6050.c   ****  * -------------+------------------
2572:.\mpu6050.c   ****  * 0            | 1.25 Hz
2573:.\mpu6050.c   ****  * 1            | 2.5 Hz
2574:.\mpu6050.c   ****  * 2            | 5 Hz
2575:.\mpu6050.c   ****  * 3            | 10 Hz
2576:.\mpu6050.c   ****  * <pre>
2577:.\mpu6050.c   ****  *
2578:.\mpu6050.c   ****  * For further information regarding the MPU-60X0's power modes, please refer to
2579:.\mpu6050.c   ****  * Register 107.
2580:.\mpu6050.c   ****  *
2581:.\mpu6050.c   ****  * @return Current wake frequency
2582:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2583:.\mpu6050.c   ****  */
2584:.\mpu6050.c   **** uint8_t MPU6050_getWakeFrequency() {
 8841              		.loc 1 2584 0
 8842              		.cfi_startproc
 8843 0000 80B5     		push	{r7, lr}
 8844              		.cfi_def_cfa_offset 8
 8845              		.cfi_offset 7, -8
 8846              		.cfi_offset 14, -4
 8847 0002 82B0     		sub	sp, sp, #8
 8848              		.cfi_def_cfa_offset 16
 8849 0004 02AF     		add	r7, sp, #8
 8850              		.cfi_def_cfa 7, 8
2585:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAKE
 8851              		.loc 1 2585 0
 8852 0006 074B     		ldr	r3, .L692
 8853 0008 1A78     		ldrb	r2, [r3]
 8854 000a 074B     		ldr	r3, .L692+4
 8855 000c 0093     		str	r3, [sp]
 8856 000e 101C     		mov	r0, r2
 8857 0010 6C21     		mov	r1, #108
 8858 0012 0722     		mov	r2, #7
 8859 0014 0223     		mov	r3, #2
 8860 0016 FFF7FEFF 		bl	I2CReadBits
2586:.\mpu6050.c   ****     return buffer[0];
 8861              		.loc 1 2586 0
 8862 001a 034B     		ldr	r3, .L692+4
 8863 001c 1B78     		ldrb	r3, [r3]
2587:.\mpu6050.c   **** }
 8864              		.loc 1 2587 0
 8865 001e 181C     		mov	r0, r3
 8866 0020 BD46     		mov	sp, r7
 8867              		@ sp needed
 8868 0022 80BD     		pop	{r7, pc}
 8869              	.L693:
 8870              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 202


 8871              	.L692:
 8872 0024 00000000 		.word	devAddr
 8873 0028 00000000 		.word	buffer
 8874              		.cfi_endproc
 8875              	.LFE189:
 8876              		.size	MPU6050_getWakeFrequency, .-MPU6050_getWakeFrequency
 8877              		.section	.text.MPU6050_setWakeFrequency,"ax",%progbits
 8878              		.align	2
 8879              		.global	MPU6050_setWakeFrequency
 8880              		.code	16
 8881              		.thumb_func
 8882              		.type	MPU6050_setWakeFrequency, %function
 8883              	MPU6050_setWakeFrequency:
 8884              	.LFB190:
2588:.\mpu6050.c   **** /** Set wake frequency in Accel-Only Low Power Mode.
2589:.\mpu6050.c   ****  * @param frequency New wake frequency
2590:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2591:.\mpu6050.c   ****  */
2592:.\mpu6050.c   **** void MPU6050_setWakeFrequency(uint8_t frequency) {
 8885              		.loc 1 2592 0
 8886              		.cfi_startproc
 8887 0000 80B5     		push	{r7, lr}
 8888              		.cfi_def_cfa_offset 8
 8889              		.cfi_offset 7, -8
 8890              		.cfi_offset 14, -4
 8891 0002 84B0     		sub	sp, sp, #16
 8892              		.cfi_def_cfa_offset 24
 8893 0004 02AF     		add	r7, sp, #8
 8894              		.cfi_def_cfa 7, 16
 8895 0006 021C     		mov	r2, r0
 8896 0008 FB1D     		add	r3, r7, #7
 8897 000a 1A70     		strb	r2, [r3]
2593:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAK
 8898              		.loc 1 2593 0
 8899 000c 064B     		ldr	r3, .L695
 8900 000e 1A78     		ldrb	r2, [r3]
 8901 0010 FB1D     		add	r3, r7, #7
 8902 0012 1B78     		ldrb	r3, [r3]
 8903 0014 0093     		str	r3, [sp]
 8904 0016 101C     		mov	r0, r2
 8905 0018 6C21     		mov	r1, #108
 8906 001a 0722     		mov	r2, #7
 8907 001c 0223     		mov	r3, #2
 8908 001e FFF7FEFF 		bl	I2CWriteBits
2594:.\mpu6050.c   **** }
 8909              		.loc 1 2594 0
 8910 0022 BD46     		mov	sp, r7
 8911 0024 02B0     		add	sp, sp, #8
 8912              		@ sp needed
 8913 0026 80BD     		pop	{r7, pc}
 8914              	.L696:
 8915              		.align	2
 8916              	.L695:
 8917 0028 00000000 		.word	devAddr
 8918              		.cfi_endproc
 8919              	.LFE190:
 8920              		.size	MPU6050_setWakeFrequency, .-MPU6050_setWakeFrequency
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 203


 8921              		.section	.text.MPU6050_getStandbyXAccelEnabled,"ax",%progbits
 8922              		.align	2
 8923              		.global	MPU6050_getStandbyXAccelEnabled
 8924              		.code	16
 8925              		.thumb_func
 8926              		.type	MPU6050_getStandbyXAccelEnabled, %function
 8927              	MPU6050_getStandbyXAccelEnabled:
 8928              	.LFB191:
2595:.\mpu6050.c   **** 
2596:.\mpu6050.c   **** /** Get X-axis accelerometer standby enabled status.
2597:.\mpu6050.c   ****  * If enabled, the X-axis will not gather or report data (or use power).
2598:.\mpu6050.c   ****  * @return Current X-axis standby enabled status
2599:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2600:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_XA_BIT
2601:.\mpu6050.c   ****  */
2602:.\mpu6050.c   **** bool MPU6050_getStandbyXAccelEnabled() {
 8929              		.loc 1 2602 0
 8930              		.cfi_startproc
 8931 0000 80B5     		push	{r7, lr}
 8932              		.cfi_def_cfa_offset 8
 8933              		.cfi_offset 7, -8
 8934              		.cfi_offset 14, -4
 8935 0002 00AF     		add	r7, sp, #0
 8936              		.cfi_def_cfa_register 7
2603:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XA_BIT, buffer);
 8937              		.loc 1 2603 0
 8938 0004 074B     		ldr	r3, .L699
 8939 0006 1A78     		ldrb	r2, [r3]
 8940 0008 074B     		ldr	r3, .L699+4
 8941 000a 101C     		mov	r0, r2
 8942 000c 6C21     		mov	r1, #108
 8943 000e 0522     		mov	r2, #5
 8944 0010 FFF7FEFF 		bl	I2CReadBit
2604:.\mpu6050.c   ****     return buffer[0];
 8945              		.loc 1 2604 0
 8946 0014 044B     		ldr	r3, .L699+4
 8947 0016 1B78     		ldrb	r3, [r3]
 8948 0018 5A1E     		sub	r2, r3, #1
 8949 001a 9341     		sbc	r3, r3, r2
 8950 001c DBB2     		uxtb	r3, r3
2605:.\mpu6050.c   **** }
 8951              		.loc 1 2605 0
 8952 001e 181C     		mov	r0, r3
 8953 0020 BD46     		mov	sp, r7
 8954              		@ sp needed
 8955 0022 80BD     		pop	{r7, pc}
 8956              	.L700:
 8957              		.align	2
 8958              	.L699:
 8959 0024 00000000 		.word	devAddr
 8960 0028 00000000 		.word	buffer
 8961              		.cfi_endproc
 8962              	.LFE191:
 8963              		.size	MPU6050_getStandbyXAccelEnabled, .-MPU6050_getStandbyXAccelEnabled
 8964              		.section	.text.MPU6050_setStandbyXAccelEnabled,"ax",%progbits
 8965              		.align	2
 8966              		.global	MPU6050_setStandbyXAccelEnabled
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 204


 8967              		.code	16
 8968              		.thumb_func
 8969              		.type	MPU6050_setStandbyXAccelEnabled, %function
 8970              	MPU6050_setStandbyXAccelEnabled:
 8971              	.LFB192:
2606:.\mpu6050.c   **** /** Set X-axis accelerometer standby enabled status.
2607:.\mpu6050.c   ****  * @param New X-axis standby enabled status
2608:.\mpu6050.c   ****  * @see getStandbyXAccelEnabled()
2609:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2610:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_XA_BIT
2611:.\mpu6050.c   ****  */
2612:.\mpu6050.c   **** void MPU6050_setStandbyXAccelEnabled(bool enabled) {
 8972              		.loc 1 2612 0
 8973              		.cfi_startproc
 8974 0000 80B5     		push	{r7, lr}
 8975              		.cfi_def_cfa_offset 8
 8976              		.cfi_offset 7, -8
 8977              		.cfi_offset 14, -4
 8978 0002 82B0     		sub	sp, sp, #8
 8979              		.cfi_def_cfa_offset 16
 8980 0004 00AF     		add	r7, sp, #0
 8981              		.cfi_def_cfa_register 7
 8982 0006 021C     		mov	r2, r0
 8983 0008 FB1D     		add	r3, r7, #7
 8984 000a 1A70     		strb	r2, [r3]
2613:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XA_BIT, enabled);
 8985              		.loc 1 2613 0
 8986 000c 054B     		ldr	r3, .L702
 8987 000e 1A78     		ldrb	r2, [r3]
 8988 0010 FB1D     		add	r3, r7, #7
 8989 0012 1B78     		ldrb	r3, [r3]
 8990 0014 101C     		mov	r0, r2
 8991 0016 6C21     		mov	r1, #108
 8992 0018 0522     		mov	r2, #5
 8993 001a FFF7FEFF 		bl	I2CWriteBit
2614:.\mpu6050.c   **** }
 8994              		.loc 1 2614 0
 8995 001e BD46     		mov	sp, r7
 8996 0020 02B0     		add	sp, sp, #8
 8997              		@ sp needed
 8998 0022 80BD     		pop	{r7, pc}
 8999              	.L703:
 9000              		.align	2
 9001              	.L702:
 9002 0024 00000000 		.word	devAddr
 9003              		.cfi_endproc
 9004              	.LFE192:
 9005              		.size	MPU6050_setStandbyXAccelEnabled, .-MPU6050_setStandbyXAccelEnabled
 9006              		.section	.text.MPU6050_getStandbyYAccelEnabled,"ax",%progbits
 9007              		.align	2
 9008              		.global	MPU6050_getStandbyYAccelEnabled
 9009              		.code	16
 9010              		.thumb_func
 9011              		.type	MPU6050_getStandbyYAccelEnabled, %function
 9012              	MPU6050_getStandbyYAccelEnabled:
 9013              	.LFB193:
2615:.\mpu6050.c   **** /** Get Y-axis accelerometer standby enabled status.
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 205


2616:.\mpu6050.c   ****  * If enabled, the Y-axis will not gather or report data (or use power).
2617:.\mpu6050.c   ****  * @return Current Y-axis standby enabled status
2618:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2619:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_YA_BIT
2620:.\mpu6050.c   ****  */
2621:.\mpu6050.c   **** bool MPU6050_getStandbyYAccelEnabled() {
 9014              		.loc 1 2621 0
 9015              		.cfi_startproc
 9016 0000 80B5     		push	{r7, lr}
 9017              		.cfi_def_cfa_offset 8
 9018              		.cfi_offset 7, -8
 9019              		.cfi_offset 14, -4
 9020 0002 00AF     		add	r7, sp, #0
 9021              		.cfi_def_cfa_register 7
2622:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YA_BIT, buffer);
 9022              		.loc 1 2622 0
 9023 0004 074B     		ldr	r3, .L706
 9024 0006 1A78     		ldrb	r2, [r3]
 9025 0008 074B     		ldr	r3, .L706+4
 9026 000a 101C     		mov	r0, r2
 9027 000c 6C21     		mov	r1, #108
 9028 000e 0422     		mov	r2, #4
 9029 0010 FFF7FEFF 		bl	I2CReadBit
2623:.\mpu6050.c   ****     return buffer[0];
 9030              		.loc 1 2623 0
 9031 0014 044B     		ldr	r3, .L706+4
 9032 0016 1B78     		ldrb	r3, [r3]
 9033 0018 5A1E     		sub	r2, r3, #1
 9034 001a 9341     		sbc	r3, r3, r2
 9035 001c DBB2     		uxtb	r3, r3
2624:.\mpu6050.c   **** }
 9036              		.loc 1 2624 0
 9037 001e 181C     		mov	r0, r3
 9038 0020 BD46     		mov	sp, r7
 9039              		@ sp needed
 9040 0022 80BD     		pop	{r7, pc}
 9041              	.L707:
 9042              		.align	2
 9043              	.L706:
 9044 0024 00000000 		.word	devAddr
 9045 0028 00000000 		.word	buffer
 9046              		.cfi_endproc
 9047              	.LFE193:
 9048              		.size	MPU6050_getStandbyYAccelEnabled, .-MPU6050_getStandbyYAccelEnabled
 9049              		.section	.text.MPU6050_setStandbyYAccelEnabled,"ax",%progbits
 9050              		.align	2
 9051              		.global	MPU6050_setStandbyYAccelEnabled
 9052              		.code	16
 9053              		.thumb_func
 9054              		.type	MPU6050_setStandbyYAccelEnabled, %function
 9055              	MPU6050_setStandbyYAccelEnabled:
 9056              	.LFB194:
2625:.\mpu6050.c   **** /** Set Y-axis accelerometer standby enabled status.
2626:.\mpu6050.c   ****  * @param New Y-axis standby enabled status
2627:.\mpu6050.c   ****  * @see getStandbyYAccelEnabled()
2628:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2629:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_YA_BIT
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 206


2630:.\mpu6050.c   ****  */
2631:.\mpu6050.c   **** void MPU6050_setStandbyYAccelEnabled(bool enabled) {
 9057              		.loc 1 2631 0
 9058              		.cfi_startproc
 9059 0000 80B5     		push	{r7, lr}
 9060              		.cfi_def_cfa_offset 8
 9061              		.cfi_offset 7, -8
 9062              		.cfi_offset 14, -4
 9063 0002 82B0     		sub	sp, sp, #8
 9064              		.cfi_def_cfa_offset 16
 9065 0004 00AF     		add	r7, sp, #0
 9066              		.cfi_def_cfa_register 7
 9067 0006 021C     		mov	r2, r0
 9068 0008 FB1D     		add	r3, r7, #7
 9069 000a 1A70     		strb	r2, [r3]
2632:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YA_BIT, enabled);
 9070              		.loc 1 2632 0
 9071 000c 054B     		ldr	r3, .L709
 9072 000e 1A78     		ldrb	r2, [r3]
 9073 0010 FB1D     		add	r3, r7, #7
 9074 0012 1B78     		ldrb	r3, [r3]
 9075 0014 101C     		mov	r0, r2
 9076 0016 6C21     		mov	r1, #108
 9077 0018 0422     		mov	r2, #4
 9078 001a FFF7FEFF 		bl	I2CWriteBit
2633:.\mpu6050.c   **** }
 9079              		.loc 1 2633 0
 9080 001e BD46     		mov	sp, r7
 9081 0020 02B0     		add	sp, sp, #8
 9082              		@ sp needed
 9083 0022 80BD     		pop	{r7, pc}
 9084              	.L710:
 9085              		.align	2
 9086              	.L709:
 9087 0024 00000000 		.word	devAddr
 9088              		.cfi_endproc
 9089              	.LFE194:
 9090              		.size	MPU6050_setStandbyYAccelEnabled, .-MPU6050_setStandbyYAccelEnabled
 9091              		.section	.text.MPU6050_getStandbyZAccelEnabled,"ax",%progbits
 9092              		.align	2
 9093              		.global	MPU6050_getStandbyZAccelEnabled
 9094              		.code	16
 9095              		.thumb_func
 9096              		.type	MPU6050_getStandbyZAccelEnabled, %function
 9097              	MPU6050_getStandbyZAccelEnabled:
 9098              	.LFB195:
2634:.\mpu6050.c   **** /** Get Z-axis accelerometer standby enabled status.
2635:.\mpu6050.c   ****  * If enabled, the Z-axis will not gather or report data (or use power).
2636:.\mpu6050.c   ****  * @return Current Z-axis standby enabled status
2637:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2638:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_ZA_BIT
2639:.\mpu6050.c   ****  */
2640:.\mpu6050.c   **** bool MPU6050_getStandbyZAccelEnabled() {
 9099              		.loc 1 2640 0
 9100              		.cfi_startproc
 9101 0000 80B5     		push	{r7, lr}
 9102              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 207


 9103              		.cfi_offset 7, -8
 9104              		.cfi_offset 14, -4
 9105 0002 00AF     		add	r7, sp, #0
 9106              		.cfi_def_cfa_register 7
2641:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZA_BIT, buffer);
 9107              		.loc 1 2641 0
 9108 0004 074B     		ldr	r3, .L713
 9109 0006 1A78     		ldrb	r2, [r3]
 9110 0008 074B     		ldr	r3, .L713+4
 9111 000a 101C     		mov	r0, r2
 9112 000c 6C21     		mov	r1, #108
 9113 000e 0322     		mov	r2, #3
 9114 0010 FFF7FEFF 		bl	I2CReadBit
2642:.\mpu6050.c   ****     return buffer[0];
 9115              		.loc 1 2642 0
 9116 0014 044B     		ldr	r3, .L713+4
 9117 0016 1B78     		ldrb	r3, [r3]
 9118 0018 5A1E     		sub	r2, r3, #1
 9119 001a 9341     		sbc	r3, r3, r2
 9120 001c DBB2     		uxtb	r3, r3
2643:.\mpu6050.c   **** }
 9121              		.loc 1 2643 0
 9122 001e 181C     		mov	r0, r3
 9123 0020 BD46     		mov	sp, r7
 9124              		@ sp needed
 9125 0022 80BD     		pop	{r7, pc}
 9126              	.L714:
 9127              		.align	2
 9128              	.L713:
 9129 0024 00000000 		.word	devAddr
 9130 0028 00000000 		.word	buffer
 9131              		.cfi_endproc
 9132              	.LFE195:
 9133              		.size	MPU6050_getStandbyZAccelEnabled, .-MPU6050_getStandbyZAccelEnabled
 9134              		.section	.text.MPU6050_setStandbyZAccelEnabled,"ax",%progbits
 9135              		.align	2
 9136              		.global	MPU6050_setStandbyZAccelEnabled
 9137              		.code	16
 9138              		.thumb_func
 9139              		.type	MPU6050_setStandbyZAccelEnabled, %function
 9140              	MPU6050_setStandbyZAccelEnabled:
 9141              	.LFB196:
2644:.\mpu6050.c   **** /** Set Z-axis accelerometer standby enabled status.
2645:.\mpu6050.c   ****  * @param New Z-axis standby enabled status
2646:.\mpu6050.c   ****  * @see getStandbyZAccelEnabled()
2647:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2648:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_ZA_BIT
2649:.\mpu6050.c   ****  */
2650:.\mpu6050.c   **** void MPU6050_setStandbyZAccelEnabled(bool enabled) {
 9142              		.loc 1 2650 0
 9143              		.cfi_startproc
 9144 0000 80B5     		push	{r7, lr}
 9145              		.cfi_def_cfa_offset 8
 9146              		.cfi_offset 7, -8
 9147              		.cfi_offset 14, -4
 9148 0002 82B0     		sub	sp, sp, #8
 9149              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 208


 9150 0004 00AF     		add	r7, sp, #0
 9151              		.cfi_def_cfa_register 7
 9152 0006 021C     		mov	r2, r0
 9153 0008 FB1D     		add	r3, r7, #7
 9154 000a 1A70     		strb	r2, [r3]
2651:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZA_BIT, enabled);
 9155              		.loc 1 2651 0
 9156 000c 054B     		ldr	r3, .L716
 9157 000e 1A78     		ldrb	r2, [r3]
 9158 0010 FB1D     		add	r3, r7, #7
 9159 0012 1B78     		ldrb	r3, [r3]
 9160 0014 101C     		mov	r0, r2
 9161 0016 6C21     		mov	r1, #108
 9162 0018 0322     		mov	r2, #3
 9163 001a FFF7FEFF 		bl	I2CWriteBit
2652:.\mpu6050.c   **** }
 9164              		.loc 1 2652 0
 9165 001e BD46     		mov	sp, r7
 9166 0020 02B0     		add	sp, sp, #8
 9167              		@ sp needed
 9168 0022 80BD     		pop	{r7, pc}
 9169              	.L717:
 9170              		.align	2
 9171              	.L716:
 9172 0024 00000000 		.word	devAddr
 9173              		.cfi_endproc
 9174              	.LFE196:
 9175              		.size	MPU6050_setStandbyZAccelEnabled, .-MPU6050_setStandbyZAccelEnabled
 9176              		.section	.text.MPU6050_getStandbyXGyroEnabled,"ax",%progbits
 9177              		.align	2
 9178              		.global	MPU6050_getStandbyXGyroEnabled
 9179              		.code	16
 9180              		.thumb_func
 9181              		.type	MPU6050_getStandbyXGyroEnabled, %function
 9182              	MPU6050_getStandbyXGyroEnabled:
 9183              	.LFB197:
2653:.\mpu6050.c   **** /** Get X-axis gyroscope standby enabled status.
2654:.\mpu6050.c   ****  * If enabled, the X-axis will not gather or report data (or use power).
2655:.\mpu6050.c   ****  * @return Current X-axis standby enabled status
2656:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2657:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_XG_BIT
2658:.\mpu6050.c   ****  */
2659:.\mpu6050.c   **** bool MPU6050_getStandbyXGyroEnabled() {
 9184              		.loc 1 2659 0
 9185              		.cfi_startproc
 9186 0000 80B5     		push	{r7, lr}
 9187              		.cfi_def_cfa_offset 8
 9188              		.cfi_offset 7, -8
 9189              		.cfi_offset 14, -4
 9190 0002 00AF     		add	r7, sp, #0
 9191              		.cfi_def_cfa_register 7
2660:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XG_BIT, buffer);
 9192              		.loc 1 2660 0
 9193 0004 074B     		ldr	r3, .L720
 9194 0006 1A78     		ldrb	r2, [r3]
 9195 0008 074B     		ldr	r3, .L720+4
 9196 000a 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 209


 9197 000c 6C21     		mov	r1, #108
 9198 000e 0222     		mov	r2, #2
 9199 0010 FFF7FEFF 		bl	I2CReadBit
2661:.\mpu6050.c   ****     return buffer[0];
 9200              		.loc 1 2661 0
 9201 0014 044B     		ldr	r3, .L720+4
 9202 0016 1B78     		ldrb	r3, [r3]
 9203 0018 5A1E     		sub	r2, r3, #1
 9204 001a 9341     		sbc	r3, r3, r2
 9205 001c DBB2     		uxtb	r3, r3
2662:.\mpu6050.c   **** }
 9206              		.loc 1 2662 0
 9207 001e 181C     		mov	r0, r3
 9208 0020 BD46     		mov	sp, r7
 9209              		@ sp needed
 9210 0022 80BD     		pop	{r7, pc}
 9211              	.L721:
 9212              		.align	2
 9213              	.L720:
 9214 0024 00000000 		.word	devAddr
 9215 0028 00000000 		.word	buffer
 9216              		.cfi_endproc
 9217              	.LFE197:
 9218              		.size	MPU6050_getStandbyXGyroEnabled, .-MPU6050_getStandbyXGyroEnabled
 9219              		.section	.text.MPU6050_setStandbyXGyroEnabled,"ax",%progbits
 9220              		.align	2
 9221              		.global	MPU6050_setStandbyXGyroEnabled
 9222              		.code	16
 9223              		.thumb_func
 9224              		.type	MPU6050_setStandbyXGyroEnabled, %function
 9225              	MPU6050_setStandbyXGyroEnabled:
 9226              	.LFB198:
2663:.\mpu6050.c   **** /** Set X-axis gyroscope standby enabled status.
2664:.\mpu6050.c   ****  * @param New X-axis standby enabled status
2665:.\mpu6050.c   ****  * @see getStandbyXGyroEnabled()
2666:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2667:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_XG_BIT
2668:.\mpu6050.c   ****  */
2669:.\mpu6050.c   **** void MPU6050_setStandbyXGyroEnabled(bool enabled) {
 9227              		.loc 1 2669 0
 9228              		.cfi_startproc
 9229 0000 80B5     		push	{r7, lr}
 9230              		.cfi_def_cfa_offset 8
 9231              		.cfi_offset 7, -8
 9232              		.cfi_offset 14, -4
 9233 0002 82B0     		sub	sp, sp, #8
 9234              		.cfi_def_cfa_offset 16
 9235 0004 00AF     		add	r7, sp, #0
 9236              		.cfi_def_cfa_register 7
 9237 0006 021C     		mov	r2, r0
 9238 0008 FB1D     		add	r3, r7, #7
 9239 000a 1A70     		strb	r2, [r3]
2670:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XG_BIT, enabled);
 9240              		.loc 1 2670 0
 9241 000c 054B     		ldr	r3, .L723
 9242 000e 1A78     		ldrb	r2, [r3]
 9243 0010 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 210


 9244 0012 1B78     		ldrb	r3, [r3]
 9245 0014 101C     		mov	r0, r2
 9246 0016 6C21     		mov	r1, #108
 9247 0018 0222     		mov	r2, #2
 9248 001a FFF7FEFF 		bl	I2CWriteBit
2671:.\mpu6050.c   **** }
 9249              		.loc 1 2671 0
 9250 001e BD46     		mov	sp, r7
 9251 0020 02B0     		add	sp, sp, #8
 9252              		@ sp needed
 9253 0022 80BD     		pop	{r7, pc}
 9254              	.L724:
 9255              		.align	2
 9256              	.L723:
 9257 0024 00000000 		.word	devAddr
 9258              		.cfi_endproc
 9259              	.LFE198:
 9260              		.size	MPU6050_setStandbyXGyroEnabled, .-MPU6050_setStandbyXGyroEnabled
 9261              		.section	.text.MPU6050_getStandbyYGyroEnabled,"ax",%progbits
 9262              		.align	2
 9263              		.global	MPU6050_getStandbyYGyroEnabled
 9264              		.code	16
 9265              		.thumb_func
 9266              		.type	MPU6050_getStandbyYGyroEnabled, %function
 9267              	MPU6050_getStandbyYGyroEnabled:
 9268              	.LFB199:
2672:.\mpu6050.c   **** /** Get Y-axis gyroscope standby enabled status.
2673:.\mpu6050.c   ****  * If enabled, the Y-axis will not gather or report data (or use power).
2674:.\mpu6050.c   ****  * @return Current Y-axis standby enabled status
2675:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2676:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_YG_BIT
2677:.\mpu6050.c   ****  */
2678:.\mpu6050.c   **** bool MPU6050_getStandbyYGyroEnabled() {
 9269              		.loc 1 2678 0
 9270              		.cfi_startproc
 9271 0000 80B5     		push	{r7, lr}
 9272              		.cfi_def_cfa_offset 8
 9273              		.cfi_offset 7, -8
 9274              		.cfi_offset 14, -4
 9275 0002 00AF     		add	r7, sp, #0
 9276              		.cfi_def_cfa_register 7
2679:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YG_BIT, buffer);
 9277              		.loc 1 2679 0
 9278 0004 074B     		ldr	r3, .L727
 9279 0006 1A78     		ldrb	r2, [r3]
 9280 0008 074B     		ldr	r3, .L727+4
 9281 000a 101C     		mov	r0, r2
 9282 000c 6C21     		mov	r1, #108
 9283 000e 0122     		mov	r2, #1
 9284 0010 FFF7FEFF 		bl	I2CReadBit
2680:.\mpu6050.c   ****     return buffer[0];
 9285              		.loc 1 2680 0
 9286 0014 044B     		ldr	r3, .L727+4
 9287 0016 1B78     		ldrb	r3, [r3]
 9288 0018 5A1E     		sub	r2, r3, #1
 9289 001a 9341     		sbc	r3, r3, r2
 9290 001c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 211


2681:.\mpu6050.c   **** }
 9291              		.loc 1 2681 0
 9292 001e 181C     		mov	r0, r3
 9293 0020 BD46     		mov	sp, r7
 9294              		@ sp needed
 9295 0022 80BD     		pop	{r7, pc}
 9296              	.L728:
 9297              		.align	2
 9298              	.L727:
 9299 0024 00000000 		.word	devAddr
 9300 0028 00000000 		.word	buffer
 9301              		.cfi_endproc
 9302              	.LFE199:
 9303              		.size	MPU6050_getStandbyYGyroEnabled, .-MPU6050_getStandbyYGyroEnabled
 9304              		.section	.text.MPU6050_setStandbyYGyroEnabled,"ax",%progbits
 9305              		.align	2
 9306              		.global	MPU6050_setStandbyYGyroEnabled
 9307              		.code	16
 9308              		.thumb_func
 9309              		.type	MPU6050_setStandbyYGyroEnabled, %function
 9310              	MPU6050_setStandbyYGyroEnabled:
 9311              	.LFB200:
2682:.\mpu6050.c   **** /** Set Y-axis gyroscope standby enabled status.
2683:.\mpu6050.c   ****  * @param New Y-axis standby enabled status
2684:.\mpu6050.c   ****  * @see getStandbyYGyroEnabled()
2685:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2686:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_YG_BIT
2687:.\mpu6050.c   ****  */
2688:.\mpu6050.c   **** void MPU6050_setStandbyYGyroEnabled(bool enabled) {
 9312              		.loc 1 2688 0
 9313              		.cfi_startproc
 9314 0000 80B5     		push	{r7, lr}
 9315              		.cfi_def_cfa_offset 8
 9316              		.cfi_offset 7, -8
 9317              		.cfi_offset 14, -4
 9318 0002 82B0     		sub	sp, sp, #8
 9319              		.cfi_def_cfa_offset 16
 9320 0004 00AF     		add	r7, sp, #0
 9321              		.cfi_def_cfa_register 7
 9322 0006 021C     		mov	r2, r0
 9323 0008 FB1D     		add	r3, r7, #7
 9324 000a 1A70     		strb	r2, [r3]
2689:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YG_BIT, enabled);
 9325              		.loc 1 2689 0
 9326 000c 054B     		ldr	r3, .L730
 9327 000e 1A78     		ldrb	r2, [r3]
 9328 0010 FB1D     		add	r3, r7, #7
 9329 0012 1B78     		ldrb	r3, [r3]
 9330 0014 101C     		mov	r0, r2
 9331 0016 6C21     		mov	r1, #108
 9332 0018 0122     		mov	r2, #1
 9333 001a FFF7FEFF 		bl	I2CWriteBit
2690:.\mpu6050.c   **** }
 9334              		.loc 1 2690 0
 9335 001e BD46     		mov	sp, r7
 9336 0020 02B0     		add	sp, sp, #8
 9337              		@ sp needed
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 212


 9338 0022 80BD     		pop	{r7, pc}
 9339              	.L731:
 9340              		.align	2
 9341              	.L730:
 9342 0024 00000000 		.word	devAddr
 9343              		.cfi_endproc
 9344              	.LFE200:
 9345              		.size	MPU6050_setStandbyYGyroEnabled, .-MPU6050_setStandbyYGyroEnabled
 9346              		.section	.text.MPU6050_getStandbyZGyroEnabled,"ax",%progbits
 9347              		.align	2
 9348              		.global	MPU6050_getStandbyZGyroEnabled
 9349              		.code	16
 9350              		.thumb_func
 9351              		.type	MPU6050_getStandbyZGyroEnabled, %function
 9352              	MPU6050_getStandbyZGyroEnabled:
 9353              	.LFB201:
2691:.\mpu6050.c   **** /** Get Z-axis gyroscope standby enabled status.
2692:.\mpu6050.c   ****  * If enabled, the Z-axis will not gather or report data (or use power).
2693:.\mpu6050.c   ****  * @return Current Z-axis standby enabled status
2694:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2695:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_ZG_BIT
2696:.\mpu6050.c   ****  */
2697:.\mpu6050.c   **** bool MPU6050_getStandbyZGyroEnabled() {
 9354              		.loc 1 2697 0
 9355              		.cfi_startproc
 9356 0000 80B5     		push	{r7, lr}
 9357              		.cfi_def_cfa_offset 8
 9358              		.cfi_offset 7, -8
 9359              		.cfi_offset 14, -4
 9360 0002 00AF     		add	r7, sp, #0
 9361              		.cfi_def_cfa_register 7
2698:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZG_BIT, buffer);
 9362              		.loc 1 2698 0
 9363 0004 074B     		ldr	r3, .L734
 9364 0006 1A78     		ldrb	r2, [r3]
 9365 0008 074B     		ldr	r3, .L734+4
 9366 000a 101C     		mov	r0, r2
 9367 000c 6C21     		mov	r1, #108
 9368 000e 0022     		mov	r2, #0
 9369 0010 FFF7FEFF 		bl	I2CReadBit
2699:.\mpu6050.c   ****     return buffer[0];
 9370              		.loc 1 2699 0
 9371 0014 044B     		ldr	r3, .L734+4
 9372 0016 1B78     		ldrb	r3, [r3]
 9373 0018 5A1E     		sub	r2, r3, #1
 9374 001a 9341     		sbc	r3, r3, r2
 9375 001c DBB2     		uxtb	r3, r3
2700:.\mpu6050.c   **** }
 9376              		.loc 1 2700 0
 9377 001e 181C     		mov	r0, r3
 9378 0020 BD46     		mov	sp, r7
 9379              		@ sp needed
 9380 0022 80BD     		pop	{r7, pc}
 9381              	.L735:
 9382              		.align	2
 9383              	.L734:
 9384 0024 00000000 		.word	devAddr
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 213


 9385 0028 00000000 		.word	buffer
 9386              		.cfi_endproc
 9387              	.LFE201:
 9388              		.size	MPU6050_getStandbyZGyroEnabled, .-MPU6050_getStandbyZGyroEnabled
 9389              		.section	.text.MPU6050_setStandbyZGyroEnabled,"ax",%progbits
 9390              		.align	2
 9391              		.global	MPU6050_setStandbyZGyroEnabled
 9392              		.code	16
 9393              		.thumb_func
 9394              		.type	MPU6050_setStandbyZGyroEnabled, %function
 9395              	MPU6050_setStandbyZGyroEnabled:
 9396              	.LFB202:
2701:.\mpu6050.c   **** /** Set Z-axis gyroscope standby enabled status.
2702:.\mpu6050.c   ****  * @param New Z-axis standby enabled status
2703:.\mpu6050.c   ****  * @see getStandbyZGyroEnabled()
2704:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2705:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_ZG_BIT
2706:.\mpu6050.c   ****  */
2707:.\mpu6050.c   **** void MPU6050_setStandbyZGyroEnabled(bool enabled) {
 9397              		.loc 1 2707 0
 9398              		.cfi_startproc
 9399 0000 80B5     		push	{r7, lr}
 9400              		.cfi_def_cfa_offset 8
 9401              		.cfi_offset 7, -8
 9402              		.cfi_offset 14, -4
 9403 0002 82B0     		sub	sp, sp, #8
 9404              		.cfi_def_cfa_offset 16
 9405 0004 00AF     		add	r7, sp, #0
 9406              		.cfi_def_cfa_register 7
 9407 0006 021C     		mov	r2, r0
 9408 0008 FB1D     		add	r3, r7, #7
 9409 000a 1A70     		strb	r2, [r3]
2708:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZG_BIT, enabled);
 9410              		.loc 1 2708 0
 9411 000c 054B     		ldr	r3, .L737
 9412 000e 1A78     		ldrb	r2, [r3]
 9413 0010 FB1D     		add	r3, r7, #7
 9414 0012 1B78     		ldrb	r3, [r3]
 9415 0014 101C     		mov	r0, r2
 9416 0016 6C21     		mov	r1, #108
 9417 0018 0022     		mov	r2, #0
 9418 001a FFF7FEFF 		bl	I2CWriteBit
2709:.\mpu6050.c   **** }
 9419              		.loc 1 2709 0
 9420 001e BD46     		mov	sp, r7
 9421 0020 02B0     		add	sp, sp, #8
 9422              		@ sp needed
 9423 0022 80BD     		pop	{r7, pc}
 9424              	.L738:
 9425              		.align	2
 9426              	.L737:
 9427 0024 00000000 		.word	devAddr
 9428              		.cfi_endproc
 9429              	.LFE202:
 9430              		.size	MPU6050_setStandbyZGyroEnabled, .-MPU6050_setStandbyZGyroEnabled
 9431              		.section	.text.MPU6050_getFIFOCount,"ax",%progbits
 9432              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 214


 9433              		.global	MPU6050_getFIFOCount
 9434              		.code	16
 9435              		.thumb_func
 9436              		.type	MPU6050_getFIFOCount, %function
 9437              	MPU6050_getFIFOCount:
 9438              	.LFB203:
2710:.\mpu6050.c   **** 
2711:.\mpu6050.c   **** // FIFO_COUNT* registers
2712:.\mpu6050.c   **** 
2713:.\mpu6050.c   **** /** Get current FIFO buffer size.
2714:.\mpu6050.c   ****  * This value indicates the number of bytes stored in the FIFO buffer. This
2715:.\mpu6050.c   ****  * number is in turn the number of bytes that can be read from the FIFO buffer
2716:.\mpu6050.c   ****  * and it is directly proportional to the number of samples available given the
2717:.\mpu6050.c   ****  * set of sensor data bound to be stored in the FIFO (register 35 and 36).
2718:.\mpu6050.c   ****  * @return Current FIFO buffer size
2719:.\mpu6050.c   ****  */
2720:.\mpu6050.c   **** uint16_t MPU6050_getFIFOCount() {
 9439              		.loc 1 2720 0
 9440              		.cfi_startproc
 9441 0000 80B5     		push	{r7, lr}
 9442              		.cfi_def_cfa_offset 8
 9443              		.cfi_offset 7, -8
 9444              		.cfi_offset 14, -4
 9445 0002 00AF     		add	r7, sp, #0
 9446              		.cfi_def_cfa_register 7
2721:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 9447              		.loc 1 2721 0
 9448 0004 0A4B     		ldr	r3, .L741
 9449 0006 1A78     		ldrb	r2, [r3]
 9450 0008 0A4B     		ldr	r3, .L741+4
 9451 000a 101C     		mov	r0, r2
 9452 000c 7221     		mov	r1, #114
 9453 000e 0222     		mov	r2, #2
 9454 0010 FFF7FEFF 		bl	I2CReadBytes
2722:.\mpu6050.c   ****     return (((uint16_t)buffer[0]) << 8) | buffer[1];
 9455              		.loc 1 2722 0
 9456 0014 074B     		ldr	r3, .L741+4
 9457 0016 1B78     		ldrb	r3, [r3]
 9458 0018 1B02     		lsl	r3, r3, #8
 9459 001a 9AB2     		uxth	r2, r3
 9460 001c 054B     		ldr	r3, .L741+4
 9461 001e 5B78     		ldrb	r3, [r3, #1]
 9462 0020 9BB2     		uxth	r3, r3
 9463 0022 1343     		orr	r3, r2
 9464 0024 9BB2     		uxth	r3, r3
 9465 0026 9BB2     		uxth	r3, r3
2723:.\mpu6050.c   **** }
 9466              		.loc 1 2723 0
 9467 0028 181C     		mov	r0, r3
 9468 002a BD46     		mov	sp, r7
 9469              		@ sp needed
 9470 002c 80BD     		pop	{r7, pc}
 9471              	.L742:
 9472 002e C046     		.align	2
 9473              	.L741:
 9474 0030 00000000 		.word	devAddr
 9475 0034 00000000 		.word	buffer
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 215


 9476              		.cfi_endproc
 9477              	.LFE203:
 9478              		.size	MPU6050_getFIFOCount, .-MPU6050_getFIFOCount
 9479              		.section	.text.MPU6050_getFIFOByte,"ax",%progbits
 9480              		.align	2
 9481              		.global	MPU6050_getFIFOByte
 9482              		.code	16
 9483              		.thumb_func
 9484              		.type	MPU6050_getFIFOByte, %function
 9485              	MPU6050_getFIFOByte:
 9486              	.LFB204:
2724:.\mpu6050.c   **** 
2725:.\mpu6050.c   **** // FIFO_R_W register
2726:.\mpu6050.c   **** 
2727:.\mpu6050.c   **** /** Get byte from FIFO buffer.
2728:.\mpu6050.c   ****  * This register is used to read and write data from the FIFO buffer. Data is
2729:.\mpu6050.c   ****  * written to the FIFO in order of register number (from lowest to highest). If
2730:.\mpu6050.c   ****  * all the FIFO enable flags (see below) are enabled and all External Sensor
2731:.\mpu6050.c   ****  * Data registers (Registers 73 to 96) are associated with a Slave device, the
2732:.\mpu6050.c   ****  * contents of registers 59 through 96 will be written in order at the Sample
2733:.\mpu6050.c   ****  * Rate.
2734:.\mpu6050.c   ****  *
2735:.\mpu6050.c   ****  * The contents of the sensor data registers (Registers 59 to 96) are written
2736:.\mpu6050.c   ****  * into the FIFO buffer when their corresponding FIFO enable flags are set to 1
2737:.\mpu6050.c   ****  * in FIFO_EN (Register 35). An additional flag for the sensor data registers
2738:.\mpu6050.c   ****  * associated with I2C Slave 3 can be found in I2C_MST_CTRL (Register 36).
2739:.\mpu6050.c   ****  *
2740:.\mpu6050.c   ****  * If the FIFO buffer has overflowed, the status bit FIFO_OFLOW_INT is
2741:.\mpu6050.c   ****  * automatically set to 1. This bit is located in INT_STATUS (Register 58).
2742:.\mpu6050.c   ****  * When the FIFO buffer has overflowed, the oldest data will be lost and new
2743:.\mpu6050.c   ****  * data will be written to the FIFO.
2744:.\mpu6050.c   ****  *
2745:.\mpu6050.c   ****  * If the FIFO buffer is empty, reading this register will return the last byte
2746:.\mpu6050.c   ****  * that was previously read from the FIFO until new data is available. The user
2747:.\mpu6050.c   ****  * should check FIFO_COUNT to ensure that the FIFO buffer is not read when
2748:.\mpu6050.c   ****  * empty.
2749:.\mpu6050.c   ****  *
2750:.\mpu6050.c   ****  * @return Byte from FIFO buffer
2751:.\mpu6050.c   ****  */
2752:.\mpu6050.c   **** uint8_t MPU6050_getFIFOByte() {
 9487              		.loc 1 2752 0
 9488              		.cfi_startproc
 9489 0000 80B5     		push	{r7, lr}
 9490              		.cfi_def_cfa_offset 8
 9491              		.cfi_offset 7, -8
 9492              		.cfi_offset 14, -4
 9493 0002 00AF     		add	r7, sp, #0
 9494              		.cfi_def_cfa_register 7
2753:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
 9495              		.loc 1 2753 0
 9496 0004 064B     		ldr	r3, .L745
 9497 0006 1A78     		ldrb	r2, [r3]
 9498 0008 064B     		ldr	r3, .L745+4
 9499 000a 101C     		mov	r0, r2
 9500 000c 7421     		mov	r1, #116
 9501 000e 1A1C     		mov	r2, r3
 9502 0010 FFF7FEFF 		bl	I2CReadByte
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 216


2754:.\mpu6050.c   ****     return buffer[0];
 9503              		.loc 1 2754 0
 9504 0014 034B     		ldr	r3, .L745+4
 9505 0016 1B78     		ldrb	r3, [r3]
2755:.\mpu6050.c   **** }
 9506              		.loc 1 2755 0
 9507 0018 181C     		mov	r0, r3
 9508 001a BD46     		mov	sp, r7
 9509              		@ sp needed
 9510 001c 80BD     		pop	{r7, pc}
 9511              	.L746:
 9512 001e C046     		.align	2
 9513              	.L745:
 9514 0020 00000000 		.word	devAddr
 9515 0024 00000000 		.word	buffer
 9516              		.cfi_endproc
 9517              	.LFE204:
 9518              		.size	MPU6050_getFIFOByte, .-MPU6050_getFIFOByte
 9519              		.section	.text.MPU6050_getFIFOBytes,"ax",%progbits
 9520              		.align	2
 9521              		.global	MPU6050_getFIFOBytes
 9522              		.code	16
 9523              		.thumb_func
 9524              		.type	MPU6050_getFIFOBytes, %function
 9525              	MPU6050_getFIFOBytes:
 9526              	.LFB205:
2756:.\mpu6050.c   **** void MPU6050_getFIFOBytes(uint8_t *data, uint8_t length) {
 9527              		.loc 1 2756 0
 9528              		.cfi_startproc
 9529 0000 80B5     		push	{r7, lr}
 9530              		.cfi_def_cfa_offset 8
 9531              		.cfi_offset 7, -8
 9532              		.cfi_offset 14, -4
 9533 0002 82B0     		sub	sp, sp, #8
 9534              		.cfi_def_cfa_offset 16
 9535 0004 00AF     		add	r7, sp, #0
 9536              		.cfi_def_cfa_register 7
 9537 0006 7860     		str	r0, [r7, #4]
 9538 0008 0A1C     		mov	r2, r1
 9539 000a FB1C     		add	r3, r7, #3
 9540 000c 1A70     		strb	r2, [r3]
2757:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 9541              		.loc 1 2757 0
 9542 000e 064B     		ldr	r3, .L748
 9543 0010 1978     		ldrb	r1, [r3]
 9544 0012 FB1C     		add	r3, r7, #3
 9545 0014 1A78     		ldrb	r2, [r3]
 9546 0016 7B68     		ldr	r3, [r7, #4]
 9547 0018 081C     		mov	r0, r1
 9548 001a 7421     		mov	r1, #116
 9549 001c FFF7FEFF 		bl	I2CReadBytes
2758:.\mpu6050.c   **** }
 9550              		.loc 1 2758 0
 9551 0020 BD46     		mov	sp, r7
 9552 0022 02B0     		add	sp, sp, #8
 9553              		@ sp needed
 9554 0024 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 217


 9555              	.L749:
 9556 0026 C046     		.align	2
 9557              	.L748:
 9558 0028 00000000 		.word	devAddr
 9559              		.cfi_endproc
 9560              	.LFE205:
 9561              		.size	MPU6050_getFIFOBytes, .-MPU6050_getFIFOBytes
 9562              		.section	.text.MPU6050_setFIFOByte,"ax",%progbits
 9563              		.align	2
 9564              		.global	MPU6050_setFIFOByte
 9565              		.code	16
 9566              		.thumb_func
 9567              		.type	MPU6050_setFIFOByte, %function
 9568              	MPU6050_setFIFOByte:
 9569              	.LFB206:
2759:.\mpu6050.c   **** /** Write byte to FIFO buffer.
2760:.\mpu6050.c   ****  * @see getFIFOByte()
2761:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_R_W
2762:.\mpu6050.c   ****  */
2763:.\mpu6050.c   **** void MPU6050_setFIFOByte(uint8_t data) {
 9570              		.loc 1 2763 0
 9571              		.cfi_startproc
 9572 0000 80B5     		push	{r7, lr}
 9573              		.cfi_def_cfa_offset 8
 9574              		.cfi_offset 7, -8
 9575              		.cfi_offset 14, -4
 9576 0002 82B0     		sub	sp, sp, #8
 9577              		.cfi_def_cfa_offset 16
 9578 0004 00AF     		add	r7, sp, #0
 9579              		.cfi_def_cfa_register 7
 9580 0006 021C     		mov	r2, r0
 9581 0008 FB1D     		add	r3, r7, #7
 9582 000a 1A70     		strb	r2, [r3]
2764:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_FIFO_R_W, data);
 9583              		.loc 1 2764 0
 9584 000c 054B     		ldr	r3, .L751
 9585 000e 1A78     		ldrb	r2, [r3]
 9586 0010 FB1D     		add	r3, r7, #7
 9587 0012 1B78     		ldrb	r3, [r3]
 9588 0014 101C     		mov	r0, r2
 9589 0016 7421     		mov	r1, #116
 9590 0018 1A1C     		mov	r2, r3
 9591 001a FFF7FEFF 		bl	I2CWriteByte
2765:.\mpu6050.c   **** }
 9592              		.loc 1 2765 0
 9593 001e BD46     		mov	sp, r7
 9594 0020 02B0     		add	sp, sp, #8
 9595              		@ sp needed
 9596 0022 80BD     		pop	{r7, pc}
 9597              	.L752:
 9598              		.align	2
 9599              	.L751:
 9600 0024 00000000 		.word	devAddr
 9601              		.cfi_endproc
 9602              	.LFE206:
 9603              		.size	MPU6050_setFIFOByte, .-MPU6050_setFIFOByte
 9604              		.section	.text.MPU6050_getDeviceID,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 218


 9605              		.align	2
 9606              		.global	MPU6050_getDeviceID
 9607              		.code	16
 9608              		.thumb_func
 9609              		.type	MPU6050_getDeviceID, %function
 9610              	MPU6050_getDeviceID:
 9611              	.LFB207:
2766:.\mpu6050.c   **** 
2767:.\mpu6050.c   **** // WHO_AM_I register
2768:.\mpu6050.c   **** 
2769:.\mpu6050.c   **** /** Get Device ID.
2770:.\mpu6050.c   ****  * This register is used to verify the identity of the device (0b110100, 0x34).
2771:.\mpu6050.c   ****  * @return Device ID (6 bits only! should be 0x34)
2772:.\mpu6050.c   ****  * @see MPU6050_RA_WHO_AM_I
2773:.\mpu6050.c   ****  * @see MPU6050_WHO_AM_I_BIT
2774:.\mpu6050.c   ****  * @see MPU6050_WHO_AM_I_LENGTH
2775:.\mpu6050.c   ****  */
2776:.\mpu6050.c   **** uint8_t MPU6050_getDeviceID() {
 9612              		.loc 1 2776 0
 9613              		.cfi_startproc
 9614 0000 80B5     		push	{r7, lr}
 9615              		.cfi_def_cfa_offset 8
 9616              		.cfi_offset 7, -8
 9617              		.cfi_offset 14, -4
 9618 0002 82B0     		sub	sp, sp, #8
 9619              		.cfi_def_cfa_offset 16
 9620 0004 02AF     		add	r7, sp, #8
 9621              		.cfi_def_cfa 7, 8
2777:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer
 9622              		.loc 1 2777 0
 9623 0006 074B     		ldr	r3, .L755
 9624 0008 1A78     		ldrb	r2, [r3]
 9625 000a 074B     		ldr	r3, .L755+4
 9626 000c 0093     		str	r3, [sp]
 9627 000e 101C     		mov	r0, r2
 9628 0010 7521     		mov	r1, #117
 9629 0012 0622     		mov	r2, #6
 9630 0014 0623     		mov	r3, #6
 9631 0016 FFF7FEFF 		bl	I2CReadBits
2778:.\mpu6050.c   ****     return buffer[0];
 9632              		.loc 1 2778 0
 9633 001a 034B     		ldr	r3, .L755+4
 9634 001c 1B78     		ldrb	r3, [r3]
2779:.\mpu6050.c   **** }
 9635              		.loc 1 2779 0
 9636 001e 181C     		mov	r0, r3
 9637 0020 BD46     		mov	sp, r7
 9638              		@ sp needed
 9639 0022 80BD     		pop	{r7, pc}
 9640              	.L756:
 9641              		.align	2
 9642              	.L755:
 9643 0024 00000000 		.word	devAddr
 9644 0028 00000000 		.word	buffer
 9645              		.cfi_endproc
 9646              	.LFE207:
 9647              		.size	MPU6050_getDeviceID, .-MPU6050_getDeviceID
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 219


 9648              		.section	.text.MPU6050_setDeviceID,"ax",%progbits
 9649              		.align	2
 9650              		.global	MPU6050_setDeviceID
 9651              		.code	16
 9652              		.thumb_func
 9653              		.type	MPU6050_setDeviceID, %function
 9654              	MPU6050_setDeviceID:
 9655              	.LFB208:
2780:.\mpu6050.c   **** /** Set Device ID.
2781:.\mpu6050.c   ****  * Write a new ID into the WHO_AM_I register (no idea why this should ever be
2782:.\mpu6050.c   ****  * necessary though).
2783:.\mpu6050.c   ****  * @param id New device ID to set.
2784:.\mpu6050.c   ****  * @see getDeviceID()
2785:.\mpu6050.c   ****  * @see MPU6050_RA_WHO_AM_I
2786:.\mpu6050.c   ****  * @see MPU6050_WHO_AM_I_BIT
2787:.\mpu6050.c   ****  * @see MPU6050_WHO_AM_I_LENGTH
2788:.\mpu6050.c   ****  */
2789:.\mpu6050.c   **** void MPU6050_setDeviceID(uint8_t id) {
 9656              		.loc 1 2789 0
 9657              		.cfi_startproc
 9658 0000 80B5     		push	{r7, lr}
 9659              		.cfi_def_cfa_offset 8
 9660              		.cfi_offset 7, -8
 9661              		.cfi_offset 14, -4
 9662 0002 84B0     		sub	sp, sp, #16
 9663              		.cfi_def_cfa_offset 24
 9664 0004 02AF     		add	r7, sp, #8
 9665              		.cfi_def_cfa 7, 16
 9666 0006 021C     		mov	r2, r0
 9667 0008 FB1D     		add	r3, r7, #7
 9668 000a 1A70     		strb	r2, [r3]
2790:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, id);
 9669              		.loc 1 2790 0
 9670 000c 064B     		ldr	r3, .L758
 9671 000e 1A78     		ldrb	r2, [r3]
 9672 0010 FB1D     		add	r3, r7, #7
 9673 0012 1B78     		ldrb	r3, [r3]
 9674 0014 0093     		str	r3, [sp]
 9675 0016 101C     		mov	r0, r2
 9676 0018 7521     		mov	r1, #117
 9677 001a 0622     		mov	r2, #6
 9678 001c 0623     		mov	r3, #6
 9679 001e FFF7FEFF 		bl	I2CWriteBits
2791:.\mpu6050.c   **** }
 9680              		.loc 1 2791 0
 9681 0022 BD46     		mov	sp, r7
 9682 0024 02B0     		add	sp, sp, #8
 9683              		@ sp needed
 9684 0026 80BD     		pop	{r7, pc}
 9685              	.L759:
 9686              		.align	2
 9687              	.L758:
 9688 0028 00000000 		.word	devAddr
 9689              		.cfi_endproc
 9690              	.LFE208:
 9691              		.size	MPU6050_setDeviceID, .-MPU6050_setDeviceID
 9692              		.section	.text.MPU6050_getOTPBankValid,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 220


 9693              		.align	2
 9694              		.global	MPU6050_getOTPBankValid
 9695              		.code	16
 9696              		.thumb_func
 9697              		.type	MPU6050_getOTPBankValid, %function
 9698              	MPU6050_getOTPBankValid:
 9699              	.LFB209:
2792:.\mpu6050.c   **** 
2793:.\mpu6050.c   **** // ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========
2794:.\mpu6050.c   **** 
2795:.\mpu6050.c   **** // XG_OFFS_TC register
2796:.\mpu6050.c   **** 
2797:.\mpu6050.c   **** uint8_t MPU6050_getOTPBankValid() {
 9700              		.loc 1 2797 0
 9701              		.cfi_startproc
 9702 0000 80B5     		push	{r7, lr}
 9703              		.cfi_def_cfa_offset 8
 9704              		.cfi_offset 7, -8
 9705              		.cfi_offset 14, -4
 9706 0002 00AF     		add	r7, sp, #0
 9707              		.cfi_def_cfa_register 7
2798:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
 9708              		.loc 1 2798 0
 9709 0004 064B     		ldr	r3, .L762
 9710 0006 1A78     		ldrb	r2, [r3]
 9711 0008 064B     		ldr	r3, .L762+4
 9712 000a 101C     		mov	r0, r2
 9713 000c 0021     		mov	r1, #0
 9714 000e 0022     		mov	r2, #0
 9715 0010 FFF7FEFF 		bl	I2CReadBit
2799:.\mpu6050.c   ****     return buffer[0];
 9716              		.loc 1 2799 0
 9717 0014 034B     		ldr	r3, .L762+4
 9718 0016 1B78     		ldrb	r3, [r3]
2800:.\mpu6050.c   **** }
 9719              		.loc 1 2800 0
 9720 0018 181C     		mov	r0, r3
 9721 001a BD46     		mov	sp, r7
 9722              		@ sp needed
 9723 001c 80BD     		pop	{r7, pc}
 9724              	.L763:
 9725 001e C046     		.align	2
 9726              	.L762:
 9727 0020 00000000 		.word	devAddr
 9728 0024 00000000 		.word	buffer
 9729              		.cfi_endproc
 9730              	.LFE209:
 9731              		.size	MPU6050_getOTPBankValid, .-MPU6050_getOTPBankValid
 9732              		.section	.text.MPU6050_setOTPBankValid,"ax",%progbits
 9733              		.align	2
 9734              		.global	MPU6050_setOTPBankValid
 9735              		.code	16
 9736              		.thumb_func
 9737              		.type	MPU6050_setOTPBankValid, %function
 9738              	MPU6050_setOTPBankValid:
 9739              	.LFB210:
2801:.\mpu6050.c   **** void MPU6050_setOTPBankValid(bool enabled) {
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 221


 9740              		.loc 1 2801 0
 9741              		.cfi_startproc
 9742 0000 80B5     		push	{r7, lr}
 9743              		.cfi_def_cfa_offset 8
 9744              		.cfi_offset 7, -8
 9745              		.cfi_offset 14, -4
 9746 0002 82B0     		sub	sp, sp, #8
 9747              		.cfi_def_cfa_offset 16
 9748 0004 00AF     		add	r7, sp, #0
 9749              		.cfi_def_cfa_register 7
 9750 0006 021C     		mov	r2, r0
 9751 0008 FB1D     		add	r3, r7, #7
 9752 000a 1A70     		strb	r2, [r3]
2802:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 9753              		.loc 1 2802 0
 9754 000c 054B     		ldr	r3, .L765
 9755 000e 1A78     		ldrb	r2, [r3]
 9756 0010 FB1D     		add	r3, r7, #7
 9757 0012 1B78     		ldrb	r3, [r3]
 9758 0014 101C     		mov	r0, r2
 9759 0016 0021     		mov	r1, #0
 9760 0018 0022     		mov	r2, #0
 9761 001a FFF7FEFF 		bl	I2CWriteBit
2803:.\mpu6050.c   **** }
 9762              		.loc 1 2803 0
 9763 001e BD46     		mov	sp, r7
 9764 0020 02B0     		add	sp, sp, #8
 9765              		@ sp needed
 9766 0022 80BD     		pop	{r7, pc}
 9767              	.L766:
 9768              		.align	2
 9769              	.L765:
 9770 0024 00000000 		.word	devAddr
 9771              		.cfi_endproc
 9772              	.LFE210:
 9773              		.size	MPU6050_setOTPBankValid, .-MPU6050_setOTPBankValid
 9774              		.section	.text.MPU6050_getXGyroOffset,"ax",%progbits
 9775              		.align	2
 9776              		.global	MPU6050_getXGyroOffset
 9777              		.code	16
 9778              		.thumb_func
 9779              		.type	MPU6050_getXGyroOffset, %function
 9780              	MPU6050_getXGyroOffset:
 9781              	.LFB211:
2804:.\mpu6050.c   **** int8_t MPU6050_getXGyroOffset() {
 9782              		.loc 1 2804 0
 9783              		.cfi_startproc
 9784 0000 80B5     		push	{r7, lr}
 9785              		.cfi_def_cfa_offset 8
 9786              		.cfi_offset 7, -8
 9787              		.cfi_offset 14, -4
 9788 0002 82B0     		sub	sp, sp, #8
 9789              		.cfi_def_cfa_offset 16
 9790 0004 02AF     		add	r7, sp, #8
 9791              		.cfi_def_cfa 7, 8
2805:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, bu
 9792              		.loc 1 2805 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 222


 9793 0006 084B     		ldr	r3, .L769
 9794 0008 1A78     		ldrb	r2, [r3]
 9795 000a 084B     		ldr	r3, .L769+4
 9796 000c 0093     		str	r3, [sp]
 9797 000e 101C     		mov	r0, r2
 9798 0010 0021     		mov	r1, #0
 9799 0012 0622     		mov	r2, #6
 9800 0014 0623     		mov	r3, #6
 9801 0016 FFF7FEFF 		bl	I2CReadBits
2806:.\mpu6050.c   ****     return buffer[0];
 9802              		.loc 1 2806 0
 9803 001a 044B     		ldr	r3, .L769+4
 9804 001c 1B78     		ldrb	r3, [r3]
 9805 001e DBB2     		uxtb	r3, r3
 9806 0020 5BB2     		sxtb	r3, r3
2807:.\mpu6050.c   **** }
 9807              		.loc 1 2807 0
 9808 0022 181C     		mov	r0, r3
 9809 0024 BD46     		mov	sp, r7
 9810              		@ sp needed
 9811 0026 80BD     		pop	{r7, pc}
 9812              	.L770:
 9813              		.align	2
 9814              	.L769:
 9815 0028 00000000 		.word	devAddr
 9816 002c 00000000 		.word	buffer
 9817              		.cfi_endproc
 9818              	.LFE211:
 9819              		.size	MPU6050_getXGyroOffset, .-MPU6050_getXGyroOffset
 9820              		.section	.text.MPU6050_setXGyroOffset,"ax",%progbits
 9821              		.align	2
 9822              		.global	MPU6050_setXGyroOffset
 9823              		.code	16
 9824              		.thumb_func
 9825              		.type	MPU6050_setXGyroOffset, %function
 9826              	MPU6050_setXGyroOffset:
 9827              	.LFB212:
2808:.\mpu6050.c   **** void MPU6050_setXGyroOffset(int8_t offset) {
 9828              		.loc 1 2808 0
 9829              		.cfi_startproc
 9830 0000 80B5     		push	{r7, lr}
 9831              		.cfi_def_cfa_offset 8
 9832              		.cfi_offset 7, -8
 9833              		.cfi_offset 14, -4
 9834 0002 84B0     		sub	sp, sp, #16
 9835              		.cfi_def_cfa_offset 24
 9836 0004 02AF     		add	r7, sp, #8
 9837              		.cfi_def_cfa 7, 16
 9838 0006 021C     		mov	r2, r0
 9839 0008 FB1D     		add	r3, r7, #7
 9840 000a 1A70     		strb	r2, [r3]
2809:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, o
 9841              		.loc 1 2809 0
 9842 000c 064B     		ldr	r3, .L772
 9843 000e 1A78     		ldrb	r2, [r3]
 9844 0010 FB1D     		add	r3, r7, #7
 9845 0012 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 223


 9846 0014 0093     		str	r3, [sp]
 9847 0016 101C     		mov	r0, r2
 9848 0018 0021     		mov	r1, #0
 9849 001a 0622     		mov	r2, #6
 9850 001c 0623     		mov	r3, #6
 9851 001e FFF7FEFF 		bl	I2CWriteBits
2810:.\mpu6050.c   **** }
 9852              		.loc 1 2810 0
 9853 0022 BD46     		mov	sp, r7
 9854 0024 02B0     		add	sp, sp, #8
 9855              		@ sp needed
 9856 0026 80BD     		pop	{r7, pc}
 9857              	.L773:
 9858              		.align	2
 9859              	.L772:
 9860 0028 00000000 		.word	devAddr
 9861              		.cfi_endproc
 9862              	.LFE212:
 9863              		.size	MPU6050_setXGyroOffset, .-MPU6050_setXGyroOffset
 9864              		.section	.text.MPU6050_getYGyroOffset,"ax",%progbits
 9865              		.align	2
 9866              		.global	MPU6050_getYGyroOffset
 9867              		.code	16
 9868              		.thumb_func
 9869              		.type	MPU6050_getYGyroOffset, %function
 9870              	MPU6050_getYGyroOffset:
 9871              	.LFB213:
2811:.\mpu6050.c   **** 
2812:.\mpu6050.c   **** // YG_OFFS_TC register
2813:.\mpu6050.c   **** 
2814:.\mpu6050.c   **** int8_t MPU6050_getYGyroOffset() {
 9872              		.loc 1 2814 0
 9873              		.cfi_startproc
 9874 0000 80B5     		push	{r7, lr}
 9875              		.cfi_def_cfa_offset 8
 9876              		.cfi_offset 7, -8
 9877              		.cfi_offset 14, -4
 9878 0002 82B0     		sub	sp, sp, #8
 9879              		.cfi_def_cfa_offset 16
 9880 0004 02AF     		add	r7, sp, #8
 9881              		.cfi_def_cfa 7, 8
2815:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, bu
 9882              		.loc 1 2815 0
 9883 0006 084B     		ldr	r3, .L776
 9884 0008 1A78     		ldrb	r2, [r3]
 9885 000a 084B     		ldr	r3, .L776+4
 9886 000c 0093     		str	r3, [sp]
 9887 000e 101C     		mov	r0, r2
 9888 0010 0121     		mov	r1, #1
 9889 0012 0622     		mov	r2, #6
 9890 0014 0623     		mov	r3, #6
 9891 0016 FFF7FEFF 		bl	I2CReadBits
2816:.\mpu6050.c   ****     return buffer[0];
 9892              		.loc 1 2816 0
 9893 001a 044B     		ldr	r3, .L776+4
 9894 001c 1B78     		ldrb	r3, [r3]
 9895 001e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 224


 9896 0020 5BB2     		sxtb	r3, r3
2817:.\mpu6050.c   **** }
 9897              		.loc 1 2817 0
 9898 0022 181C     		mov	r0, r3
 9899 0024 BD46     		mov	sp, r7
 9900              		@ sp needed
 9901 0026 80BD     		pop	{r7, pc}
 9902              	.L777:
 9903              		.align	2
 9904              	.L776:
 9905 0028 00000000 		.word	devAddr
 9906 002c 00000000 		.word	buffer
 9907              		.cfi_endproc
 9908              	.LFE213:
 9909              		.size	MPU6050_getYGyroOffset, .-MPU6050_getYGyroOffset
 9910              		.section	.text.MPU6050_setYGyroOffset,"ax",%progbits
 9911              		.align	2
 9912              		.global	MPU6050_setYGyroOffset
 9913              		.code	16
 9914              		.thumb_func
 9915              		.type	MPU6050_setYGyroOffset, %function
 9916              	MPU6050_setYGyroOffset:
 9917              	.LFB214:
2818:.\mpu6050.c   **** void MPU6050_setYGyroOffset(int8_t offset) {
 9918              		.loc 1 2818 0
 9919              		.cfi_startproc
 9920 0000 80B5     		push	{r7, lr}
 9921              		.cfi_def_cfa_offset 8
 9922              		.cfi_offset 7, -8
 9923              		.cfi_offset 14, -4
 9924 0002 84B0     		sub	sp, sp, #16
 9925              		.cfi_def_cfa_offset 24
 9926 0004 02AF     		add	r7, sp, #8
 9927              		.cfi_def_cfa 7, 16
 9928 0006 021C     		mov	r2, r0
 9929 0008 FB1D     		add	r3, r7, #7
 9930 000a 1A70     		strb	r2, [r3]
2819:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, o
 9931              		.loc 1 2819 0
 9932 000c 064B     		ldr	r3, .L779
 9933 000e 1A78     		ldrb	r2, [r3]
 9934 0010 FB1D     		add	r3, r7, #7
 9935 0012 1B78     		ldrb	r3, [r3]
 9936 0014 0093     		str	r3, [sp]
 9937 0016 101C     		mov	r0, r2
 9938 0018 0121     		mov	r1, #1
 9939 001a 0622     		mov	r2, #6
 9940 001c 0623     		mov	r3, #6
 9941 001e FFF7FEFF 		bl	I2CWriteBits
2820:.\mpu6050.c   **** }
 9942              		.loc 1 2820 0
 9943 0022 BD46     		mov	sp, r7
 9944 0024 02B0     		add	sp, sp, #8
 9945              		@ sp needed
 9946 0026 80BD     		pop	{r7, pc}
 9947              	.L780:
 9948              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 225


 9949              	.L779:
 9950 0028 00000000 		.word	devAddr
 9951              		.cfi_endproc
 9952              	.LFE214:
 9953              		.size	MPU6050_setYGyroOffset, .-MPU6050_setYGyroOffset
 9954              		.section	.text.MPU6050_getZGyroOffset,"ax",%progbits
 9955              		.align	2
 9956              		.global	MPU6050_getZGyroOffset
 9957              		.code	16
 9958              		.thumb_func
 9959              		.type	MPU6050_getZGyroOffset, %function
 9960              	MPU6050_getZGyroOffset:
 9961              	.LFB215:
2821:.\mpu6050.c   **** 
2822:.\mpu6050.c   **** // ZG_OFFS_TC register
2823:.\mpu6050.c   **** 
2824:.\mpu6050.c   **** int8_t MPU6050_getZGyroOffset() {
 9962              		.loc 1 2824 0
 9963              		.cfi_startproc
 9964 0000 80B5     		push	{r7, lr}
 9965              		.cfi_def_cfa_offset 8
 9966              		.cfi_offset 7, -8
 9967              		.cfi_offset 14, -4
 9968 0002 82B0     		sub	sp, sp, #8
 9969              		.cfi_def_cfa_offset 16
 9970 0004 02AF     		add	r7, sp, #8
 9971              		.cfi_def_cfa 7, 8
2825:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, bu
 9972              		.loc 1 2825 0
 9973 0006 084B     		ldr	r3, .L783
 9974 0008 1A78     		ldrb	r2, [r3]
 9975 000a 084B     		ldr	r3, .L783+4
 9976 000c 0093     		str	r3, [sp]
 9977 000e 101C     		mov	r0, r2
 9978 0010 0221     		mov	r1, #2
 9979 0012 0622     		mov	r2, #6
 9980 0014 0623     		mov	r3, #6
 9981 0016 FFF7FEFF 		bl	I2CReadBits
2826:.\mpu6050.c   ****     return buffer[0];
 9982              		.loc 1 2826 0
 9983 001a 044B     		ldr	r3, .L783+4
 9984 001c 1B78     		ldrb	r3, [r3]
 9985 001e DBB2     		uxtb	r3, r3
 9986 0020 5BB2     		sxtb	r3, r3
2827:.\mpu6050.c   **** }
 9987              		.loc 1 2827 0
 9988 0022 181C     		mov	r0, r3
 9989 0024 BD46     		mov	sp, r7
 9990              		@ sp needed
 9991 0026 80BD     		pop	{r7, pc}
 9992              	.L784:
 9993              		.align	2
 9994              	.L783:
 9995 0028 00000000 		.word	devAddr
 9996 002c 00000000 		.word	buffer
 9997              		.cfi_endproc
 9998              	.LFE215:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 226


 9999              		.size	MPU6050_getZGyroOffset, .-MPU6050_getZGyroOffset
 10000              		.section	.text.MPU6050_setZGyroOffset,"ax",%progbits
 10001              		.align	2
 10002              		.global	MPU6050_setZGyroOffset
 10003              		.code	16
 10004              		.thumb_func
 10005              		.type	MPU6050_setZGyroOffset, %function
 10006              	MPU6050_setZGyroOffset:
 10007              	.LFB216:
2828:.\mpu6050.c   **** void MPU6050_setZGyroOffset(int8_t offset) {
 10008              		.loc 1 2828 0
 10009              		.cfi_startproc
 10010 0000 80B5     		push	{r7, lr}
 10011              		.cfi_def_cfa_offset 8
 10012              		.cfi_offset 7, -8
 10013              		.cfi_offset 14, -4
 10014 0002 84B0     		sub	sp, sp, #16
 10015              		.cfi_def_cfa_offset 24
 10016 0004 02AF     		add	r7, sp, #8
 10017              		.cfi_def_cfa 7, 16
 10018 0006 021C     		mov	r2, r0
 10019 0008 FB1D     		add	r3, r7, #7
 10020 000a 1A70     		strb	r2, [r3]
2829:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, o
 10021              		.loc 1 2829 0
 10022 000c 064B     		ldr	r3, .L786
 10023 000e 1A78     		ldrb	r2, [r3]
 10024 0010 FB1D     		add	r3, r7, #7
 10025 0012 1B78     		ldrb	r3, [r3]
 10026 0014 0093     		str	r3, [sp]
 10027 0016 101C     		mov	r0, r2
 10028 0018 0221     		mov	r1, #2
 10029 001a 0622     		mov	r2, #6
 10030 001c 0623     		mov	r3, #6
 10031 001e FFF7FEFF 		bl	I2CWriteBits
2830:.\mpu6050.c   **** }
 10032              		.loc 1 2830 0
 10033 0022 BD46     		mov	sp, r7
 10034 0024 02B0     		add	sp, sp, #8
 10035              		@ sp needed
 10036 0026 80BD     		pop	{r7, pc}
 10037              	.L787:
 10038              		.align	2
 10039              	.L786:
 10040 0028 00000000 		.word	devAddr
 10041              		.cfi_endproc
 10042              	.LFE216:
 10043              		.size	MPU6050_setZGyroOffset, .-MPU6050_setZGyroOffset
 10044              		.section	.text.MPU6050_getXFineGain,"ax",%progbits
 10045              		.align	2
 10046              		.global	MPU6050_getXFineGain
 10047              		.code	16
 10048              		.thumb_func
 10049              		.type	MPU6050_getXFineGain, %function
 10050              	MPU6050_getXFineGain:
 10051              	.LFB217:
2831:.\mpu6050.c   **** 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 227


2832:.\mpu6050.c   **** // X_FINE_GAIN register
2833:.\mpu6050.c   **** 
2834:.\mpu6050.c   **** int8_t MPU6050_getXFineGain() {
 10052              		.loc 1 2834 0
 10053              		.cfi_startproc
 10054 0000 80B5     		push	{r7, lr}
 10055              		.cfi_def_cfa_offset 8
 10056              		.cfi_offset 7, -8
 10057              		.cfi_offset 14, -4
 10058 0002 00AF     		add	r7, sp, #0
 10059              		.cfi_def_cfa_register 7
2835:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_X_FINE_GAIN, buffer);
 10060              		.loc 1 2835 0
 10061 0004 074B     		ldr	r3, .L790
 10062 0006 1A78     		ldrb	r2, [r3]
 10063 0008 074B     		ldr	r3, .L790+4
 10064 000a 101C     		mov	r0, r2
 10065 000c 0321     		mov	r1, #3
 10066 000e 1A1C     		mov	r2, r3
 10067 0010 FFF7FEFF 		bl	I2CReadByte
2836:.\mpu6050.c   ****     return buffer[0];
 10068              		.loc 1 2836 0
 10069 0014 044B     		ldr	r3, .L790+4
 10070 0016 1B78     		ldrb	r3, [r3]
 10071 0018 DBB2     		uxtb	r3, r3
 10072 001a 5BB2     		sxtb	r3, r3
2837:.\mpu6050.c   **** }
 10073              		.loc 1 2837 0
 10074 001c 181C     		mov	r0, r3
 10075 001e BD46     		mov	sp, r7
 10076              		@ sp needed
 10077 0020 80BD     		pop	{r7, pc}
 10078              	.L791:
 10079 0022 C046     		.align	2
 10080              	.L790:
 10081 0024 00000000 		.word	devAddr
 10082 0028 00000000 		.word	buffer
 10083              		.cfi_endproc
 10084              	.LFE217:
 10085              		.size	MPU6050_getXFineGain, .-MPU6050_getXFineGain
 10086              		.section	.text.MPU6050_setXFineGain,"ax",%progbits
 10087              		.align	2
 10088              		.global	MPU6050_setXFineGain
 10089              		.code	16
 10090              		.thumb_func
 10091              		.type	MPU6050_setXFineGain, %function
 10092              	MPU6050_setXFineGain:
 10093              	.LFB218:
2838:.\mpu6050.c   **** void MPU6050_setXFineGain(int8_t gain) {
 10094              		.loc 1 2838 0
 10095              		.cfi_startproc
 10096 0000 80B5     		push	{r7, lr}
 10097              		.cfi_def_cfa_offset 8
 10098              		.cfi_offset 7, -8
 10099              		.cfi_offset 14, -4
 10100 0002 82B0     		sub	sp, sp, #8
 10101              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 228


 10102 0004 00AF     		add	r7, sp, #0
 10103              		.cfi_def_cfa_register 7
 10104 0006 021C     		mov	r2, r0
 10105 0008 FB1D     		add	r3, r7, #7
 10106 000a 1A70     		strb	r2, [r3]
2839:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_X_FINE_GAIN, gain);
 10107              		.loc 1 2839 0
 10108 000c 054B     		ldr	r3, .L793
 10109 000e 1A78     		ldrb	r2, [r3]
 10110 0010 FB1D     		add	r3, r7, #7
 10111 0012 1B78     		ldrb	r3, [r3]
 10112 0014 101C     		mov	r0, r2
 10113 0016 0321     		mov	r1, #3
 10114 0018 1A1C     		mov	r2, r3
 10115 001a FFF7FEFF 		bl	I2CWriteByte
2840:.\mpu6050.c   **** }
 10116              		.loc 1 2840 0
 10117 001e BD46     		mov	sp, r7
 10118 0020 02B0     		add	sp, sp, #8
 10119              		@ sp needed
 10120 0022 80BD     		pop	{r7, pc}
 10121              	.L794:
 10122              		.align	2
 10123              	.L793:
 10124 0024 00000000 		.word	devAddr
 10125              		.cfi_endproc
 10126              	.LFE218:
 10127              		.size	MPU6050_setXFineGain, .-MPU6050_setXFineGain
 10128              		.section	.text.MPU6050_getYFineGain,"ax",%progbits
 10129              		.align	2
 10130              		.global	MPU6050_getYFineGain
 10131              		.code	16
 10132              		.thumb_func
 10133              		.type	MPU6050_getYFineGain, %function
 10134              	MPU6050_getYFineGain:
 10135              	.LFB219:
2841:.\mpu6050.c   **** 
2842:.\mpu6050.c   **** // Y_FINE_GAIN register
2843:.\mpu6050.c   **** 
2844:.\mpu6050.c   **** int8_t MPU6050_getYFineGain() {
 10136              		.loc 1 2844 0
 10137              		.cfi_startproc
 10138 0000 80B5     		push	{r7, lr}
 10139              		.cfi_def_cfa_offset 8
 10140              		.cfi_offset 7, -8
 10141              		.cfi_offset 14, -4
 10142 0002 00AF     		add	r7, sp, #0
 10143              		.cfi_def_cfa_register 7
2845:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_Y_FINE_GAIN, buffer);
 10144              		.loc 1 2845 0
 10145 0004 074B     		ldr	r3, .L797
 10146 0006 1A78     		ldrb	r2, [r3]
 10147 0008 074B     		ldr	r3, .L797+4
 10148 000a 101C     		mov	r0, r2
 10149 000c 0421     		mov	r1, #4
 10150 000e 1A1C     		mov	r2, r3
 10151 0010 FFF7FEFF 		bl	I2CReadByte
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 229


2846:.\mpu6050.c   ****     return buffer[0];
 10152              		.loc 1 2846 0
 10153 0014 044B     		ldr	r3, .L797+4
 10154 0016 1B78     		ldrb	r3, [r3]
 10155 0018 DBB2     		uxtb	r3, r3
 10156 001a 5BB2     		sxtb	r3, r3
2847:.\mpu6050.c   **** }
 10157              		.loc 1 2847 0
 10158 001c 181C     		mov	r0, r3
 10159 001e BD46     		mov	sp, r7
 10160              		@ sp needed
 10161 0020 80BD     		pop	{r7, pc}
 10162              	.L798:
 10163 0022 C046     		.align	2
 10164              	.L797:
 10165 0024 00000000 		.word	devAddr
 10166 0028 00000000 		.word	buffer
 10167              		.cfi_endproc
 10168              	.LFE219:
 10169              		.size	MPU6050_getYFineGain, .-MPU6050_getYFineGain
 10170              		.section	.text.MPU6050_setYFineGain,"ax",%progbits
 10171              		.align	2
 10172              		.global	MPU6050_setYFineGain
 10173              		.code	16
 10174              		.thumb_func
 10175              		.type	MPU6050_setYFineGain, %function
 10176              	MPU6050_setYFineGain:
 10177              	.LFB220:
2848:.\mpu6050.c   **** void MPU6050_setYFineGain(int8_t gain) {
 10178              		.loc 1 2848 0
 10179              		.cfi_startproc
 10180 0000 80B5     		push	{r7, lr}
 10181              		.cfi_def_cfa_offset 8
 10182              		.cfi_offset 7, -8
 10183              		.cfi_offset 14, -4
 10184 0002 82B0     		sub	sp, sp, #8
 10185              		.cfi_def_cfa_offset 16
 10186 0004 00AF     		add	r7, sp, #0
 10187              		.cfi_def_cfa_register 7
 10188 0006 021C     		mov	r2, r0
 10189 0008 FB1D     		add	r3, r7, #7
 10190 000a 1A70     		strb	r2, [r3]
2849:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_Y_FINE_GAIN, gain);
 10191              		.loc 1 2849 0
 10192 000c 054B     		ldr	r3, .L800
 10193 000e 1A78     		ldrb	r2, [r3]
 10194 0010 FB1D     		add	r3, r7, #7
 10195 0012 1B78     		ldrb	r3, [r3]
 10196 0014 101C     		mov	r0, r2
 10197 0016 0421     		mov	r1, #4
 10198 0018 1A1C     		mov	r2, r3
 10199 001a FFF7FEFF 		bl	I2CWriteByte
2850:.\mpu6050.c   **** }
 10200              		.loc 1 2850 0
 10201 001e BD46     		mov	sp, r7
 10202 0020 02B0     		add	sp, sp, #8
 10203              		@ sp needed
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 230


 10204 0022 80BD     		pop	{r7, pc}
 10205              	.L801:
 10206              		.align	2
 10207              	.L800:
 10208 0024 00000000 		.word	devAddr
 10209              		.cfi_endproc
 10210              	.LFE220:
 10211              		.size	MPU6050_setYFineGain, .-MPU6050_setYFineGain
 10212              		.section	.text.MPU6050_getZFineGain,"ax",%progbits
 10213              		.align	2
 10214              		.global	MPU6050_getZFineGain
 10215              		.code	16
 10216              		.thumb_func
 10217              		.type	MPU6050_getZFineGain, %function
 10218              	MPU6050_getZFineGain:
 10219              	.LFB221:
2851:.\mpu6050.c   **** 
2852:.\mpu6050.c   **** // Z_FINE_GAIN register
2853:.\mpu6050.c   **** 
2854:.\mpu6050.c   **** int8_t MPU6050_getZFineGain() {
 10220              		.loc 1 2854 0
 10221              		.cfi_startproc
 10222 0000 80B5     		push	{r7, lr}
 10223              		.cfi_def_cfa_offset 8
 10224              		.cfi_offset 7, -8
 10225              		.cfi_offset 14, -4
 10226 0002 00AF     		add	r7, sp, #0
 10227              		.cfi_def_cfa_register 7
2855:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_Z_FINE_GAIN, buffer);
 10228              		.loc 1 2855 0
 10229 0004 074B     		ldr	r3, .L804
 10230 0006 1A78     		ldrb	r2, [r3]
 10231 0008 074B     		ldr	r3, .L804+4
 10232 000a 101C     		mov	r0, r2
 10233 000c 0521     		mov	r1, #5
 10234 000e 1A1C     		mov	r2, r3
 10235 0010 FFF7FEFF 		bl	I2CReadByte
2856:.\mpu6050.c   ****     return buffer[0];
 10236              		.loc 1 2856 0
 10237 0014 044B     		ldr	r3, .L804+4
 10238 0016 1B78     		ldrb	r3, [r3]
 10239 0018 DBB2     		uxtb	r3, r3
 10240 001a 5BB2     		sxtb	r3, r3
2857:.\mpu6050.c   **** }
 10241              		.loc 1 2857 0
 10242 001c 181C     		mov	r0, r3
 10243 001e BD46     		mov	sp, r7
 10244              		@ sp needed
 10245 0020 80BD     		pop	{r7, pc}
 10246              	.L805:
 10247 0022 C046     		.align	2
 10248              	.L804:
 10249 0024 00000000 		.word	devAddr
 10250 0028 00000000 		.word	buffer
 10251              		.cfi_endproc
 10252              	.LFE221:
 10253              		.size	MPU6050_getZFineGain, .-MPU6050_getZFineGain
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 231


 10254              		.section	.text.MPU6050_setZFineGain,"ax",%progbits
 10255              		.align	2
 10256              		.global	MPU6050_setZFineGain
 10257              		.code	16
 10258              		.thumb_func
 10259              		.type	MPU6050_setZFineGain, %function
 10260              	MPU6050_setZFineGain:
 10261              	.LFB222:
2858:.\mpu6050.c   **** void MPU6050_setZFineGain(int8_t gain) {
 10262              		.loc 1 2858 0
 10263              		.cfi_startproc
 10264 0000 80B5     		push	{r7, lr}
 10265              		.cfi_def_cfa_offset 8
 10266              		.cfi_offset 7, -8
 10267              		.cfi_offset 14, -4
 10268 0002 82B0     		sub	sp, sp, #8
 10269              		.cfi_def_cfa_offset 16
 10270 0004 00AF     		add	r7, sp, #0
 10271              		.cfi_def_cfa_register 7
 10272 0006 021C     		mov	r2, r0
 10273 0008 FB1D     		add	r3, r7, #7
 10274 000a 1A70     		strb	r2, [r3]
2859:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_Z_FINE_GAIN, gain);
 10275              		.loc 1 2859 0
 10276 000c 054B     		ldr	r3, .L807
 10277 000e 1A78     		ldrb	r2, [r3]
 10278 0010 FB1D     		add	r3, r7, #7
 10279 0012 1B78     		ldrb	r3, [r3]
 10280 0014 101C     		mov	r0, r2
 10281 0016 0521     		mov	r1, #5
 10282 0018 1A1C     		mov	r2, r3
 10283 001a FFF7FEFF 		bl	I2CWriteByte
2860:.\mpu6050.c   **** }
 10284              		.loc 1 2860 0
 10285 001e BD46     		mov	sp, r7
 10286 0020 02B0     		add	sp, sp, #8
 10287              		@ sp needed
 10288 0022 80BD     		pop	{r7, pc}
 10289              	.L808:
 10290              		.align	2
 10291              	.L807:
 10292 0024 00000000 		.word	devAddr
 10293              		.cfi_endproc
 10294              	.LFE222:
 10295              		.size	MPU6050_setZFineGain, .-MPU6050_setZFineGain
 10296              		.section	.text.MPU6050_getXAccelOffset,"ax",%progbits
 10297              		.align	2
 10298              		.global	MPU6050_getXAccelOffset
 10299              		.code	16
 10300              		.thumb_func
 10301              		.type	MPU6050_getXAccelOffset, %function
 10302              	MPU6050_getXAccelOffset:
 10303              	.LFB223:
2861:.\mpu6050.c   **** 
2862:.\mpu6050.c   **** // XA_OFFS_* registers
2863:.\mpu6050.c   **** 
2864:.\mpu6050.c   **** int16_t MPU6050_getXAccelOffset() {
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 232


 10304              		.loc 1 2864 0
 10305              		.cfi_startproc
 10306 0000 80B5     		push	{r7, lr}
 10307              		.cfi_def_cfa_offset 8
 10308              		.cfi_offset 7, -8
 10309              		.cfi_offset 14, -4
 10310 0002 00AF     		add	r7, sp, #0
 10311              		.cfi_def_cfa_register 7
2865:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
 10312              		.loc 1 2865 0
 10313 0004 0A4B     		ldr	r3, .L811
 10314 0006 1A78     		ldrb	r2, [r3]
 10315 0008 0A4B     		ldr	r3, .L811+4
 10316 000a 101C     		mov	r0, r2
 10317 000c 0621     		mov	r1, #6
 10318 000e 0222     		mov	r2, #2
 10319 0010 FFF7FEFF 		bl	I2CReadBytes
2866:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10320              		.loc 1 2866 0
 10321 0014 074B     		ldr	r3, .L811+4
 10322 0016 1B78     		ldrb	r3, [r3]
 10323 0018 1B02     		lsl	r3, r3, #8
 10324 001a 9AB2     		uxth	r2, r3
 10325 001c 054B     		ldr	r3, .L811+4
 10326 001e 5B78     		ldrb	r3, [r3, #1]
 10327 0020 9BB2     		uxth	r3, r3
 10328 0022 1343     		orr	r3, r2
 10329 0024 9BB2     		uxth	r3, r3
 10330 0026 1BB2     		sxth	r3, r3
2867:.\mpu6050.c   **** }
 10331              		.loc 1 2867 0
 10332 0028 181C     		mov	r0, r3
 10333 002a BD46     		mov	sp, r7
 10334              		@ sp needed
 10335 002c 80BD     		pop	{r7, pc}
 10336              	.L812:
 10337 002e C046     		.align	2
 10338              	.L811:
 10339 0030 00000000 		.word	devAddr
 10340 0034 00000000 		.word	buffer
 10341              		.cfi_endproc
 10342              	.LFE223:
 10343              		.size	MPU6050_getXAccelOffset, .-MPU6050_getXAccelOffset
 10344              		.section	.text.MPU6050_setXAccelOffset,"ax",%progbits
 10345              		.align	2
 10346              		.global	MPU6050_setXAccelOffset
 10347              		.code	16
 10348              		.thumb_func
 10349              		.type	MPU6050_setXAccelOffset, %function
 10350              	MPU6050_setXAccelOffset:
 10351              	.LFB224:
2868:.\mpu6050.c   **** void MPU6050_setXAccelOffset(int16_t offset) {
 10352              		.loc 1 2868 0
 10353              		.cfi_startproc
 10354 0000 80B5     		push	{r7, lr}
 10355              		.cfi_def_cfa_offset 8
 10356              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 233


 10357              		.cfi_offset 14, -4
 10358 0002 82B0     		sub	sp, sp, #8
 10359              		.cfi_def_cfa_offset 16
 10360 0004 00AF     		add	r7, sp, #0
 10361              		.cfi_def_cfa_register 7
 10362 0006 021C     		mov	r2, r0
 10363 0008 BB1D     		add	r3, r7, #6
 10364 000a 1A80     		strh	r2, [r3]
2869:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 10365              		.loc 1 2869 0
 10366 000c 054B     		ldr	r3, .L814
 10367 000e 1A78     		ldrb	r2, [r3]
 10368 0010 BB1D     		add	r3, r7, #6
 10369 0012 1B88     		ldrh	r3, [r3]
 10370 0014 101C     		mov	r0, r2
 10371 0016 0621     		mov	r1, #6
 10372 0018 1A1C     		mov	r2, r3
 10373 001a FFF7FEFF 		bl	I2CWriteWord
2870:.\mpu6050.c   **** }
 10374              		.loc 1 2870 0
 10375 001e BD46     		mov	sp, r7
 10376 0020 02B0     		add	sp, sp, #8
 10377              		@ sp needed
 10378 0022 80BD     		pop	{r7, pc}
 10379              	.L815:
 10380              		.align	2
 10381              	.L814:
 10382 0024 00000000 		.word	devAddr
 10383              		.cfi_endproc
 10384              	.LFE224:
 10385              		.size	MPU6050_setXAccelOffset, .-MPU6050_setXAccelOffset
 10386              		.section	.text.MPU6050_getYAccelOffset,"ax",%progbits
 10387              		.align	2
 10388              		.global	MPU6050_getYAccelOffset
 10389              		.code	16
 10390              		.thumb_func
 10391              		.type	MPU6050_getYAccelOffset, %function
 10392              	MPU6050_getYAccelOffset:
 10393              	.LFB225:
2871:.\mpu6050.c   **** 
2872:.\mpu6050.c   **** // YA_OFFS_* register
2873:.\mpu6050.c   **** 
2874:.\mpu6050.c   **** int16_t MPU6050_getYAccelOffset() {
 10394              		.loc 1 2874 0
 10395              		.cfi_startproc
 10396 0000 80B5     		push	{r7, lr}
 10397              		.cfi_def_cfa_offset 8
 10398              		.cfi_offset 7, -8
 10399              		.cfi_offset 14, -4
 10400 0002 00AF     		add	r7, sp, #0
 10401              		.cfi_def_cfa_register 7
2875:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
 10402              		.loc 1 2875 0
 10403 0004 0A4B     		ldr	r3, .L818
 10404 0006 1A78     		ldrb	r2, [r3]
 10405 0008 0A4B     		ldr	r3, .L818+4
 10406 000a 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 234


 10407 000c 0821     		mov	r1, #8
 10408 000e 0222     		mov	r2, #2
 10409 0010 FFF7FEFF 		bl	I2CReadBytes
2876:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10410              		.loc 1 2876 0
 10411 0014 074B     		ldr	r3, .L818+4
 10412 0016 1B78     		ldrb	r3, [r3]
 10413 0018 1B02     		lsl	r3, r3, #8
 10414 001a 9AB2     		uxth	r2, r3
 10415 001c 054B     		ldr	r3, .L818+4
 10416 001e 5B78     		ldrb	r3, [r3, #1]
 10417 0020 9BB2     		uxth	r3, r3
 10418 0022 1343     		orr	r3, r2
 10419 0024 9BB2     		uxth	r3, r3
 10420 0026 1BB2     		sxth	r3, r3
2877:.\mpu6050.c   **** }
 10421              		.loc 1 2877 0
 10422 0028 181C     		mov	r0, r3
 10423 002a BD46     		mov	sp, r7
 10424              		@ sp needed
 10425 002c 80BD     		pop	{r7, pc}
 10426              	.L819:
 10427 002e C046     		.align	2
 10428              	.L818:
 10429 0030 00000000 		.word	devAddr
 10430 0034 00000000 		.word	buffer
 10431              		.cfi_endproc
 10432              	.LFE225:
 10433              		.size	MPU6050_getYAccelOffset, .-MPU6050_getYAccelOffset
 10434              		.section	.text.MPU6050_setYAccelOffset,"ax",%progbits
 10435              		.align	2
 10436              		.global	MPU6050_setYAccelOffset
 10437              		.code	16
 10438              		.thumb_func
 10439              		.type	MPU6050_setYAccelOffset, %function
 10440              	MPU6050_setYAccelOffset:
 10441              	.LFB226:
2878:.\mpu6050.c   **** void MPU6050_setYAccelOffset(int16_t offset) {
 10442              		.loc 1 2878 0
 10443              		.cfi_startproc
 10444 0000 80B5     		push	{r7, lr}
 10445              		.cfi_def_cfa_offset 8
 10446              		.cfi_offset 7, -8
 10447              		.cfi_offset 14, -4
 10448 0002 82B0     		sub	sp, sp, #8
 10449              		.cfi_def_cfa_offset 16
 10450 0004 00AF     		add	r7, sp, #0
 10451              		.cfi_def_cfa_register 7
 10452 0006 021C     		mov	r2, r0
 10453 0008 BB1D     		add	r3, r7, #6
 10454 000a 1A80     		strh	r2, [r3]
2879:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 10455              		.loc 1 2879 0
 10456 000c 054B     		ldr	r3, .L821
 10457 000e 1A78     		ldrb	r2, [r3]
 10458 0010 BB1D     		add	r3, r7, #6
 10459 0012 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 235


 10460 0014 101C     		mov	r0, r2
 10461 0016 0821     		mov	r1, #8
 10462 0018 1A1C     		mov	r2, r3
 10463 001a FFF7FEFF 		bl	I2CWriteWord
2880:.\mpu6050.c   **** }
 10464              		.loc 1 2880 0
 10465 001e BD46     		mov	sp, r7
 10466 0020 02B0     		add	sp, sp, #8
 10467              		@ sp needed
 10468 0022 80BD     		pop	{r7, pc}
 10469              	.L822:
 10470              		.align	2
 10471              	.L821:
 10472 0024 00000000 		.word	devAddr
 10473              		.cfi_endproc
 10474              	.LFE226:
 10475              		.size	MPU6050_setYAccelOffset, .-MPU6050_setYAccelOffset
 10476              		.section	.text.MPU6050_getZAccelOffset,"ax",%progbits
 10477              		.align	2
 10478              		.global	MPU6050_getZAccelOffset
 10479              		.code	16
 10480              		.thumb_func
 10481              		.type	MPU6050_getZAccelOffset, %function
 10482              	MPU6050_getZAccelOffset:
 10483              	.LFB227:
2881:.\mpu6050.c   **** 
2882:.\mpu6050.c   **** // ZA_OFFS_* register
2883:.\mpu6050.c   **** 
2884:.\mpu6050.c   **** int16_t MPU6050_getZAccelOffset() {
 10484              		.loc 1 2884 0
 10485              		.cfi_startproc
 10486 0000 80B5     		push	{r7, lr}
 10487              		.cfi_def_cfa_offset 8
 10488              		.cfi_offset 7, -8
 10489              		.cfi_offset 14, -4
 10490 0002 00AF     		add	r7, sp, #0
 10491              		.cfi_def_cfa_register 7
2885:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
 10492              		.loc 1 2885 0
 10493 0004 0A4B     		ldr	r3, .L825
 10494 0006 1A78     		ldrb	r2, [r3]
 10495 0008 0A4B     		ldr	r3, .L825+4
 10496 000a 101C     		mov	r0, r2
 10497 000c 0A21     		mov	r1, #10
 10498 000e 0222     		mov	r2, #2
 10499 0010 FFF7FEFF 		bl	I2CReadBytes
2886:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10500              		.loc 1 2886 0
 10501 0014 074B     		ldr	r3, .L825+4
 10502 0016 1B78     		ldrb	r3, [r3]
 10503 0018 1B02     		lsl	r3, r3, #8
 10504 001a 9AB2     		uxth	r2, r3
 10505 001c 054B     		ldr	r3, .L825+4
 10506 001e 5B78     		ldrb	r3, [r3, #1]
 10507 0020 9BB2     		uxth	r3, r3
 10508 0022 1343     		orr	r3, r2
 10509 0024 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 236


 10510 0026 1BB2     		sxth	r3, r3
2887:.\mpu6050.c   **** }
 10511              		.loc 1 2887 0
 10512 0028 181C     		mov	r0, r3
 10513 002a BD46     		mov	sp, r7
 10514              		@ sp needed
 10515 002c 80BD     		pop	{r7, pc}
 10516              	.L826:
 10517 002e C046     		.align	2
 10518              	.L825:
 10519 0030 00000000 		.word	devAddr
 10520 0034 00000000 		.word	buffer
 10521              		.cfi_endproc
 10522              	.LFE227:
 10523              		.size	MPU6050_getZAccelOffset, .-MPU6050_getZAccelOffset
 10524              		.section	.text.MPU6050_setZAccelOffset,"ax",%progbits
 10525              		.align	2
 10526              		.global	MPU6050_setZAccelOffset
 10527              		.code	16
 10528              		.thumb_func
 10529              		.type	MPU6050_setZAccelOffset, %function
 10530              	MPU6050_setZAccelOffset:
 10531              	.LFB228:
2888:.\mpu6050.c   **** void MPU6050_setZAccelOffset(int16_t offset) {
 10532              		.loc 1 2888 0
 10533              		.cfi_startproc
 10534 0000 80B5     		push	{r7, lr}
 10535              		.cfi_def_cfa_offset 8
 10536              		.cfi_offset 7, -8
 10537              		.cfi_offset 14, -4
 10538 0002 82B0     		sub	sp, sp, #8
 10539              		.cfi_def_cfa_offset 16
 10540 0004 00AF     		add	r7, sp, #0
 10541              		.cfi_def_cfa_register 7
 10542 0006 021C     		mov	r2, r0
 10543 0008 BB1D     		add	r3, r7, #6
 10544 000a 1A80     		strh	r2, [r3]
2889:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 10545              		.loc 1 2889 0
 10546 000c 054B     		ldr	r3, .L828
 10547 000e 1A78     		ldrb	r2, [r3]
 10548 0010 BB1D     		add	r3, r7, #6
 10549 0012 1B88     		ldrh	r3, [r3]
 10550 0014 101C     		mov	r0, r2
 10551 0016 0A21     		mov	r1, #10
 10552 0018 1A1C     		mov	r2, r3
 10553 001a FFF7FEFF 		bl	I2CWriteWord
2890:.\mpu6050.c   **** }
 10554              		.loc 1 2890 0
 10555 001e BD46     		mov	sp, r7
 10556 0020 02B0     		add	sp, sp, #8
 10557              		@ sp needed
 10558 0022 80BD     		pop	{r7, pc}
 10559              	.L829:
 10560              		.align	2
 10561              	.L828:
 10562 0024 00000000 		.word	devAddr
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 237


 10563              		.cfi_endproc
 10564              	.LFE228:
 10565              		.size	MPU6050_setZAccelOffset, .-MPU6050_setZAccelOffset
 10566              		.section	.text.MPU6050_getXGyroOffsetUser,"ax",%progbits
 10567              		.align	2
 10568              		.global	MPU6050_getXGyroOffsetUser
 10569              		.code	16
 10570              		.thumb_func
 10571              		.type	MPU6050_getXGyroOffsetUser, %function
 10572              	MPU6050_getXGyroOffsetUser:
 10573              	.LFB229:
2891:.\mpu6050.c   **** 
2892:.\mpu6050.c   **** // XG_OFFS_USR* registers
2893:.\mpu6050.c   **** 
2894:.\mpu6050.c   **** int16_t MPU6050_getXGyroOffsetUser() {
 10574              		.loc 1 2894 0
 10575              		.cfi_startproc
 10576 0000 80B5     		push	{r7, lr}
 10577              		.cfi_def_cfa_offset 8
 10578              		.cfi_offset 7, -8
 10579              		.cfi_offset 14, -4
 10580 0002 00AF     		add	r7, sp, #0
 10581              		.cfi_def_cfa_register 7
2895:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
 10582              		.loc 1 2895 0
 10583 0004 0A4B     		ldr	r3, .L832
 10584 0006 1A78     		ldrb	r2, [r3]
 10585 0008 0A4B     		ldr	r3, .L832+4
 10586 000a 101C     		mov	r0, r2
 10587 000c 1321     		mov	r1, #19
 10588 000e 0222     		mov	r2, #2
 10589 0010 FFF7FEFF 		bl	I2CReadBytes
2896:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10590              		.loc 1 2896 0
 10591 0014 074B     		ldr	r3, .L832+4
 10592 0016 1B78     		ldrb	r3, [r3]
 10593 0018 1B02     		lsl	r3, r3, #8
 10594 001a 9AB2     		uxth	r2, r3
 10595 001c 054B     		ldr	r3, .L832+4
 10596 001e 5B78     		ldrb	r3, [r3, #1]
 10597 0020 9BB2     		uxth	r3, r3
 10598 0022 1343     		orr	r3, r2
 10599 0024 9BB2     		uxth	r3, r3
 10600 0026 1BB2     		sxth	r3, r3
2897:.\mpu6050.c   **** }
 10601              		.loc 1 2897 0
 10602 0028 181C     		mov	r0, r3
 10603 002a BD46     		mov	sp, r7
 10604              		@ sp needed
 10605 002c 80BD     		pop	{r7, pc}
 10606              	.L833:
 10607 002e C046     		.align	2
 10608              	.L832:
 10609 0030 00000000 		.word	devAddr
 10610 0034 00000000 		.word	buffer
 10611              		.cfi_endproc
 10612              	.LFE229:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 238


 10613              		.size	MPU6050_getXGyroOffsetUser, .-MPU6050_getXGyroOffsetUser
 10614              		.section	.text.MPU6050_setXGyroOffsetUser,"ax",%progbits
 10615              		.align	2
 10616              		.global	MPU6050_setXGyroOffsetUser
 10617              		.code	16
 10618              		.thumb_func
 10619              		.type	MPU6050_setXGyroOffsetUser, %function
 10620              	MPU6050_setXGyroOffsetUser:
 10621              	.LFB230:
2898:.\mpu6050.c   **** void MPU6050_setXGyroOffsetUser(int16_t offset) {
 10622              		.loc 1 2898 0
 10623              		.cfi_startproc
 10624 0000 80B5     		push	{r7, lr}
 10625              		.cfi_def_cfa_offset 8
 10626              		.cfi_offset 7, -8
 10627              		.cfi_offset 14, -4
 10628 0002 82B0     		sub	sp, sp, #8
 10629              		.cfi_def_cfa_offset 16
 10630 0004 00AF     		add	r7, sp, #0
 10631              		.cfi_def_cfa_register 7
 10632 0006 021C     		mov	r2, r0
 10633 0008 BB1D     		add	r3, r7, #6
 10634 000a 1A80     		strh	r2, [r3]
2899:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 10635              		.loc 1 2899 0
 10636 000c 054B     		ldr	r3, .L835
 10637 000e 1A78     		ldrb	r2, [r3]
 10638 0010 BB1D     		add	r3, r7, #6
 10639 0012 1B88     		ldrh	r3, [r3]
 10640 0014 101C     		mov	r0, r2
 10641 0016 1321     		mov	r1, #19
 10642 0018 1A1C     		mov	r2, r3
 10643 001a FFF7FEFF 		bl	I2CWriteWord
2900:.\mpu6050.c   **** }
 10644              		.loc 1 2900 0
 10645 001e BD46     		mov	sp, r7
 10646 0020 02B0     		add	sp, sp, #8
 10647              		@ sp needed
 10648 0022 80BD     		pop	{r7, pc}
 10649              	.L836:
 10650              		.align	2
 10651              	.L835:
 10652 0024 00000000 		.word	devAddr
 10653              		.cfi_endproc
 10654              	.LFE230:
 10655              		.size	MPU6050_setXGyroOffsetUser, .-MPU6050_setXGyroOffsetUser
 10656              		.section	.text.MPU6050_getYGyroOffsetUser,"ax",%progbits
 10657              		.align	2
 10658              		.global	MPU6050_getYGyroOffsetUser
 10659              		.code	16
 10660              		.thumb_func
 10661              		.type	MPU6050_getYGyroOffsetUser, %function
 10662              	MPU6050_getYGyroOffsetUser:
 10663              	.LFB231:
2901:.\mpu6050.c   **** 
2902:.\mpu6050.c   **** // YG_OFFS_USR* register
2903:.\mpu6050.c   **** 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 239


2904:.\mpu6050.c   **** int16_t MPU6050_getYGyroOffsetUser() {
 10664              		.loc 1 2904 0
 10665              		.cfi_startproc
 10666 0000 80B5     		push	{r7, lr}
 10667              		.cfi_def_cfa_offset 8
 10668              		.cfi_offset 7, -8
 10669              		.cfi_offset 14, -4
 10670 0002 00AF     		add	r7, sp, #0
 10671              		.cfi_def_cfa_register 7
2905:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
 10672              		.loc 1 2905 0
 10673 0004 0A4B     		ldr	r3, .L839
 10674 0006 1A78     		ldrb	r2, [r3]
 10675 0008 0A4B     		ldr	r3, .L839+4
 10676 000a 101C     		mov	r0, r2
 10677 000c 1521     		mov	r1, #21
 10678 000e 0222     		mov	r2, #2
 10679 0010 FFF7FEFF 		bl	I2CReadBytes
2906:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10680              		.loc 1 2906 0
 10681 0014 074B     		ldr	r3, .L839+4
 10682 0016 1B78     		ldrb	r3, [r3]
 10683 0018 1B02     		lsl	r3, r3, #8
 10684 001a 9AB2     		uxth	r2, r3
 10685 001c 054B     		ldr	r3, .L839+4
 10686 001e 5B78     		ldrb	r3, [r3, #1]
 10687 0020 9BB2     		uxth	r3, r3
 10688 0022 1343     		orr	r3, r2
 10689 0024 9BB2     		uxth	r3, r3
 10690 0026 1BB2     		sxth	r3, r3
2907:.\mpu6050.c   **** }
 10691              		.loc 1 2907 0
 10692 0028 181C     		mov	r0, r3
 10693 002a BD46     		mov	sp, r7
 10694              		@ sp needed
 10695 002c 80BD     		pop	{r7, pc}
 10696              	.L840:
 10697 002e C046     		.align	2
 10698              	.L839:
 10699 0030 00000000 		.word	devAddr
 10700 0034 00000000 		.word	buffer
 10701              		.cfi_endproc
 10702              	.LFE231:
 10703              		.size	MPU6050_getYGyroOffsetUser, .-MPU6050_getYGyroOffsetUser
 10704              		.section	.text.MPU6050_setYGyroOffsetUser,"ax",%progbits
 10705              		.align	2
 10706              		.global	MPU6050_setYGyroOffsetUser
 10707              		.code	16
 10708              		.thumb_func
 10709              		.type	MPU6050_setYGyroOffsetUser, %function
 10710              	MPU6050_setYGyroOffsetUser:
 10711              	.LFB232:
2908:.\mpu6050.c   **** void MPU6050_setYGyroOffsetUser(int16_t offset) {
 10712              		.loc 1 2908 0
 10713              		.cfi_startproc
 10714 0000 80B5     		push	{r7, lr}
 10715              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 240


 10716              		.cfi_offset 7, -8
 10717              		.cfi_offset 14, -4
 10718 0002 82B0     		sub	sp, sp, #8
 10719              		.cfi_def_cfa_offset 16
 10720 0004 00AF     		add	r7, sp, #0
 10721              		.cfi_def_cfa_register 7
 10722 0006 021C     		mov	r2, r0
 10723 0008 BB1D     		add	r3, r7, #6
 10724 000a 1A80     		strh	r2, [r3]
2909:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 10725              		.loc 1 2909 0
 10726 000c 054B     		ldr	r3, .L842
 10727 000e 1A78     		ldrb	r2, [r3]
 10728 0010 BB1D     		add	r3, r7, #6
 10729 0012 1B88     		ldrh	r3, [r3]
 10730 0014 101C     		mov	r0, r2
 10731 0016 1521     		mov	r1, #21
 10732 0018 1A1C     		mov	r2, r3
 10733 001a FFF7FEFF 		bl	I2CWriteWord
2910:.\mpu6050.c   **** }
 10734              		.loc 1 2910 0
 10735 001e BD46     		mov	sp, r7
 10736 0020 02B0     		add	sp, sp, #8
 10737              		@ sp needed
 10738 0022 80BD     		pop	{r7, pc}
 10739              	.L843:
 10740              		.align	2
 10741              	.L842:
 10742 0024 00000000 		.word	devAddr
 10743              		.cfi_endproc
 10744              	.LFE232:
 10745              		.size	MPU6050_setYGyroOffsetUser, .-MPU6050_setYGyroOffsetUser
 10746              		.section	.text.MPU6050_getZGyroOffsetUser,"ax",%progbits
 10747              		.align	2
 10748              		.global	MPU6050_getZGyroOffsetUser
 10749              		.code	16
 10750              		.thumb_func
 10751              		.type	MPU6050_getZGyroOffsetUser, %function
 10752              	MPU6050_getZGyroOffsetUser:
 10753              	.LFB233:
2911:.\mpu6050.c   **** 
2912:.\mpu6050.c   **** // ZG_OFFS_USR* register
2913:.\mpu6050.c   **** 
2914:.\mpu6050.c   **** int16_t MPU6050_getZGyroOffsetUser() {
 10754              		.loc 1 2914 0
 10755              		.cfi_startproc
 10756 0000 80B5     		push	{r7, lr}
 10757              		.cfi_def_cfa_offset 8
 10758              		.cfi_offset 7, -8
 10759              		.cfi_offset 14, -4
 10760 0002 00AF     		add	r7, sp, #0
 10761              		.cfi_def_cfa_register 7
2915:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
 10762              		.loc 1 2915 0
 10763 0004 0A4B     		ldr	r3, .L846
 10764 0006 1A78     		ldrb	r2, [r3]
 10765 0008 0A4B     		ldr	r3, .L846+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 241


 10766 000a 101C     		mov	r0, r2
 10767 000c 1721     		mov	r1, #23
 10768 000e 0222     		mov	r2, #2
 10769 0010 FFF7FEFF 		bl	I2CReadBytes
2916:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10770              		.loc 1 2916 0
 10771 0014 074B     		ldr	r3, .L846+4
 10772 0016 1B78     		ldrb	r3, [r3]
 10773 0018 1B02     		lsl	r3, r3, #8
 10774 001a 9AB2     		uxth	r2, r3
 10775 001c 054B     		ldr	r3, .L846+4
 10776 001e 5B78     		ldrb	r3, [r3, #1]
 10777 0020 9BB2     		uxth	r3, r3
 10778 0022 1343     		orr	r3, r2
 10779 0024 9BB2     		uxth	r3, r3
 10780 0026 1BB2     		sxth	r3, r3
2917:.\mpu6050.c   **** }
 10781              		.loc 1 2917 0
 10782 0028 181C     		mov	r0, r3
 10783 002a BD46     		mov	sp, r7
 10784              		@ sp needed
 10785 002c 80BD     		pop	{r7, pc}
 10786              	.L847:
 10787 002e C046     		.align	2
 10788              	.L846:
 10789 0030 00000000 		.word	devAddr
 10790 0034 00000000 		.word	buffer
 10791              		.cfi_endproc
 10792              	.LFE233:
 10793              		.size	MPU6050_getZGyroOffsetUser, .-MPU6050_getZGyroOffsetUser
 10794              		.section	.text.MPU6050_setZGyroOffsetUser,"ax",%progbits
 10795              		.align	2
 10796              		.global	MPU6050_setZGyroOffsetUser
 10797              		.code	16
 10798              		.thumb_func
 10799              		.type	MPU6050_setZGyroOffsetUser, %function
 10800              	MPU6050_setZGyroOffsetUser:
 10801              	.LFB234:
2918:.\mpu6050.c   **** void MPU6050_setZGyroOffsetUser(int16_t offset) {
 10802              		.loc 1 2918 0
 10803              		.cfi_startproc
 10804 0000 80B5     		push	{r7, lr}
 10805              		.cfi_def_cfa_offset 8
 10806              		.cfi_offset 7, -8
 10807              		.cfi_offset 14, -4
 10808 0002 82B0     		sub	sp, sp, #8
 10809              		.cfi_def_cfa_offset 16
 10810 0004 00AF     		add	r7, sp, #0
 10811              		.cfi_def_cfa_register 7
 10812 0006 021C     		mov	r2, r0
 10813 0008 BB1D     		add	r3, r7, #6
 10814 000a 1A80     		strh	r2, [r3]
2919:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 10815              		.loc 1 2919 0
 10816 000c 054B     		ldr	r3, .L849
 10817 000e 1A78     		ldrb	r2, [r3]
 10818 0010 BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 242


 10819 0012 1B88     		ldrh	r3, [r3]
 10820 0014 101C     		mov	r0, r2
 10821 0016 1721     		mov	r1, #23
 10822 0018 1A1C     		mov	r2, r3
 10823 001a FFF7FEFF 		bl	I2CWriteWord
2920:.\mpu6050.c   **** }
 10824              		.loc 1 2920 0
 10825 001e BD46     		mov	sp, r7
 10826 0020 02B0     		add	sp, sp, #8
 10827              		@ sp needed
 10828 0022 80BD     		pop	{r7, pc}
 10829              	.L850:
 10830              		.align	2
 10831              	.L849:
 10832 0024 00000000 		.word	devAddr
 10833              		.cfi_endproc
 10834              	.LFE234:
 10835              		.size	MPU6050_setZGyroOffsetUser, .-MPU6050_setZGyroOffsetUser
 10836              		.section	.text.MPU6050_getIntPLLReadyEnabled,"ax",%progbits
 10837              		.align	2
 10838              		.global	MPU6050_getIntPLLReadyEnabled
 10839              		.code	16
 10840              		.thumb_func
 10841              		.type	MPU6050_getIntPLLReadyEnabled, %function
 10842              	MPU6050_getIntPLLReadyEnabled:
 10843              	.LFB235:
2921:.\mpu6050.c   **** 
2922:.\mpu6050.c   **** // INT_ENABLE register (DMP functions)
2923:.\mpu6050.c   **** 
2924:.\mpu6050.c   **** bool MPU6050_getIntPLLReadyEnabled() {
 10844              		.loc 1 2924 0
 10845              		.cfi_startproc
 10846 0000 80B5     		push	{r7, lr}
 10847              		.cfi_def_cfa_offset 8
 10848              		.cfi_offset 7, -8
 10849              		.cfi_offset 14, -4
 10850 0002 00AF     		add	r7, sp, #0
 10851              		.cfi_def_cfa_register 7
2925:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, buffer);
 10852              		.loc 1 2925 0
 10853 0004 074B     		ldr	r3, .L853
 10854 0006 1A78     		ldrb	r2, [r3]
 10855 0008 074B     		ldr	r3, .L853+4
 10856 000a 101C     		mov	r0, r2
 10857 000c 3821     		mov	r1, #56
 10858 000e 0222     		mov	r2, #2
 10859 0010 FFF7FEFF 		bl	I2CReadBit
2926:.\mpu6050.c   ****     return buffer[0];
 10860              		.loc 1 2926 0
 10861 0014 044B     		ldr	r3, .L853+4
 10862 0016 1B78     		ldrb	r3, [r3]
 10863 0018 5A1E     		sub	r2, r3, #1
 10864 001a 9341     		sbc	r3, r3, r2
 10865 001c DBB2     		uxtb	r3, r3
2927:.\mpu6050.c   **** }
 10866              		.loc 1 2927 0
 10867 001e 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 243


 10868 0020 BD46     		mov	sp, r7
 10869              		@ sp needed
 10870 0022 80BD     		pop	{r7, pc}
 10871              	.L854:
 10872              		.align	2
 10873              	.L853:
 10874 0024 00000000 		.word	devAddr
 10875 0028 00000000 		.word	buffer
 10876              		.cfi_endproc
 10877              	.LFE235:
 10878              		.size	MPU6050_getIntPLLReadyEnabled, .-MPU6050_getIntPLLReadyEnabled
 10879              		.section	.text.MPU6050_setIntPLLReadyEnabled,"ax",%progbits
 10880              		.align	2
 10881              		.global	MPU6050_setIntPLLReadyEnabled
 10882              		.code	16
 10883              		.thumb_func
 10884              		.type	MPU6050_setIntPLLReadyEnabled, %function
 10885              	MPU6050_setIntPLLReadyEnabled:
 10886              	.LFB236:
2928:.\mpu6050.c   **** void MPU6050_setIntPLLReadyEnabled(bool enabled) {
 10887              		.loc 1 2928 0
 10888              		.cfi_startproc
 10889 0000 80B5     		push	{r7, lr}
 10890              		.cfi_def_cfa_offset 8
 10891              		.cfi_offset 7, -8
 10892              		.cfi_offset 14, -4
 10893 0002 82B0     		sub	sp, sp, #8
 10894              		.cfi_def_cfa_offset 16
 10895 0004 00AF     		add	r7, sp, #0
 10896              		.cfi_def_cfa_register 7
 10897 0006 021C     		mov	r2, r0
 10898 0008 FB1D     		add	r3, r7, #7
 10899 000a 1A70     		strb	r2, [r3]
2929:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, enabled);
 10900              		.loc 1 2929 0
 10901 000c 054B     		ldr	r3, .L856
 10902 000e 1A78     		ldrb	r2, [r3]
 10903 0010 FB1D     		add	r3, r7, #7
 10904 0012 1B78     		ldrb	r3, [r3]
 10905 0014 101C     		mov	r0, r2
 10906 0016 3821     		mov	r1, #56
 10907 0018 0222     		mov	r2, #2
 10908 001a FFF7FEFF 		bl	I2CWriteBit
2930:.\mpu6050.c   **** }
 10909              		.loc 1 2930 0
 10910 001e BD46     		mov	sp, r7
 10911 0020 02B0     		add	sp, sp, #8
 10912              		@ sp needed
 10913 0022 80BD     		pop	{r7, pc}
 10914              	.L857:
 10915              		.align	2
 10916              	.L856:
 10917 0024 00000000 		.word	devAddr
 10918              		.cfi_endproc
 10919              	.LFE236:
 10920              		.size	MPU6050_setIntPLLReadyEnabled, .-MPU6050_setIntPLLReadyEnabled
 10921              		.section	.text.MPU6050_getIntDMPEnabled,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 244


 10922              		.align	2
 10923              		.global	MPU6050_getIntDMPEnabled
 10924              		.code	16
 10925              		.thumb_func
 10926              		.type	MPU6050_getIntDMPEnabled, %function
 10927              	MPU6050_getIntDMPEnabled:
 10928              	.LFB237:
2931:.\mpu6050.c   **** bool MPU6050_getIntDMPEnabled() {
 10929              		.loc 1 2931 0
 10930              		.cfi_startproc
 10931 0000 80B5     		push	{r7, lr}
 10932              		.cfi_def_cfa_offset 8
 10933              		.cfi_offset 7, -8
 10934              		.cfi_offset 14, -4
 10935 0002 00AF     		add	r7, sp, #0
 10936              		.cfi_def_cfa_register 7
2932:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DMP_INT_BIT, buffer);
 10937              		.loc 1 2932 0
 10938 0004 074B     		ldr	r3, .L860
 10939 0006 1A78     		ldrb	r2, [r3]
 10940 0008 074B     		ldr	r3, .L860+4
 10941 000a 101C     		mov	r0, r2
 10942 000c 3821     		mov	r1, #56
 10943 000e 0122     		mov	r2, #1
 10944 0010 FFF7FEFF 		bl	I2CReadBit
2933:.\mpu6050.c   ****     return buffer[0];
 10945              		.loc 1 2933 0
 10946 0014 044B     		ldr	r3, .L860+4
 10947 0016 1B78     		ldrb	r3, [r3]
 10948 0018 5A1E     		sub	r2, r3, #1
 10949 001a 9341     		sbc	r3, r3, r2
 10950 001c DBB2     		uxtb	r3, r3
2934:.\mpu6050.c   **** }
 10951              		.loc 1 2934 0
 10952 001e 181C     		mov	r0, r3
 10953 0020 BD46     		mov	sp, r7
 10954              		@ sp needed
 10955 0022 80BD     		pop	{r7, pc}
 10956              	.L861:
 10957              		.align	2
 10958              	.L860:
 10959 0024 00000000 		.word	devAddr
 10960 0028 00000000 		.word	buffer
 10961              		.cfi_endproc
 10962              	.LFE237:
 10963              		.size	MPU6050_getIntDMPEnabled, .-MPU6050_getIntDMPEnabled
 10964              		.section	.text.MPU6050_setIntDMPEnabled,"ax",%progbits
 10965              		.align	2
 10966              		.global	MPU6050_setIntDMPEnabled
 10967              		.code	16
 10968              		.thumb_func
 10969              		.type	MPU6050_setIntDMPEnabled, %function
 10970              	MPU6050_setIntDMPEnabled:
 10971              	.LFB238:
2935:.\mpu6050.c   **** void MPU6050_setIntDMPEnabled(bool enabled) {
 10972              		.loc 1 2935 0
 10973              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 245


 10974 0000 80B5     		push	{r7, lr}
 10975              		.cfi_def_cfa_offset 8
 10976              		.cfi_offset 7, -8
 10977              		.cfi_offset 14, -4
 10978 0002 82B0     		sub	sp, sp, #8
 10979              		.cfi_def_cfa_offset 16
 10980 0004 00AF     		add	r7, sp, #0
 10981              		.cfi_def_cfa_register 7
 10982 0006 021C     		mov	r2, r0
 10983 0008 FB1D     		add	r3, r7, #7
 10984 000a 1A70     		strb	r2, [r3]
2936:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DMP_INT_BIT, enabled);
 10985              		.loc 1 2936 0
 10986 000c 054B     		ldr	r3, .L863
 10987 000e 1A78     		ldrb	r2, [r3]
 10988 0010 FB1D     		add	r3, r7, #7
 10989 0012 1B78     		ldrb	r3, [r3]
 10990 0014 101C     		mov	r0, r2
 10991 0016 3821     		mov	r1, #56
 10992 0018 0122     		mov	r2, #1
 10993 001a FFF7FEFF 		bl	I2CWriteBit
2937:.\mpu6050.c   **** }
 10994              		.loc 1 2937 0
 10995 001e BD46     		mov	sp, r7
 10996 0020 02B0     		add	sp, sp, #8
 10997              		@ sp needed
 10998 0022 80BD     		pop	{r7, pc}
 10999              	.L864:
 11000              		.align	2
 11001              	.L863:
 11002 0024 00000000 		.word	devAddr
 11003              		.cfi_endproc
 11004              	.LFE238:
 11005              		.size	MPU6050_setIntDMPEnabled, .-MPU6050_setIntDMPEnabled
 11006              		.section	.text.MPU6050_getDMPInt5Status,"ax",%progbits
 11007              		.align	2
 11008              		.global	MPU6050_getDMPInt5Status
 11009              		.code	16
 11010              		.thumb_func
 11011              		.type	MPU6050_getDMPInt5Status, %function
 11012              	MPU6050_getDMPInt5Status:
 11013              	.LFB239:
2938:.\mpu6050.c   **** 
2939:.\mpu6050.c   **** // DMP_INT_STATUS
2940:.\mpu6050.c   **** 
2941:.\mpu6050.c   **** bool MPU6050_getDMPInt5Status() {
 11014              		.loc 1 2941 0
 11015              		.cfi_startproc
 11016 0000 80B5     		push	{r7, lr}
 11017              		.cfi_def_cfa_offset 8
 11018              		.cfi_offset 7, -8
 11019              		.cfi_offset 14, -4
 11020 0002 00AF     		add	r7, sp, #0
 11021              		.cfi_def_cfa_register 7
2942:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_5_BIT, buffer);
 11022              		.loc 1 2942 0
 11023 0004 074B     		ldr	r3, .L867
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 246


 11024 0006 1A78     		ldrb	r2, [r3]
 11025 0008 074B     		ldr	r3, .L867+4
 11026 000a 101C     		mov	r0, r2
 11027 000c 3921     		mov	r1, #57
 11028 000e 0522     		mov	r2, #5
 11029 0010 FFF7FEFF 		bl	I2CReadBit
2943:.\mpu6050.c   ****     return buffer[0];
 11030              		.loc 1 2943 0
 11031 0014 044B     		ldr	r3, .L867+4
 11032 0016 1B78     		ldrb	r3, [r3]
 11033 0018 5A1E     		sub	r2, r3, #1
 11034 001a 9341     		sbc	r3, r3, r2
 11035 001c DBB2     		uxtb	r3, r3
2944:.\mpu6050.c   **** }
 11036              		.loc 1 2944 0
 11037 001e 181C     		mov	r0, r3
 11038 0020 BD46     		mov	sp, r7
 11039              		@ sp needed
 11040 0022 80BD     		pop	{r7, pc}
 11041              	.L868:
 11042              		.align	2
 11043              	.L867:
 11044 0024 00000000 		.word	devAddr
 11045 0028 00000000 		.word	buffer
 11046              		.cfi_endproc
 11047              	.LFE239:
 11048              		.size	MPU6050_getDMPInt5Status, .-MPU6050_getDMPInt5Status
 11049              		.section	.text.MPU6050_getDMPInt4Status,"ax",%progbits
 11050              		.align	2
 11051              		.global	MPU6050_getDMPInt4Status
 11052              		.code	16
 11053              		.thumb_func
 11054              		.type	MPU6050_getDMPInt4Status, %function
 11055              	MPU6050_getDMPInt4Status:
 11056              	.LFB240:
2945:.\mpu6050.c   **** bool MPU6050_getDMPInt4Status() {
 11057              		.loc 1 2945 0
 11058              		.cfi_startproc
 11059 0000 80B5     		push	{r7, lr}
 11060              		.cfi_def_cfa_offset 8
 11061              		.cfi_offset 7, -8
 11062              		.cfi_offset 14, -4
 11063 0002 00AF     		add	r7, sp, #0
 11064              		.cfi_def_cfa_register 7
2946:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_4_BIT, buffer);
 11065              		.loc 1 2946 0
 11066 0004 074B     		ldr	r3, .L871
 11067 0006 1A78     		ldrb	r2, [r3]
 11068 0008 074B     		ldr	r3, .L871+4
 11069 000a 101C     		mov	r0, r2
 11070 000c 3921     		mov	r1, #57
 11071 000e 0422     		mov	r2, #4
 11072 0010 FFF7FEFF 		bl	I2CReadBit
2947:.\mpu6050.c   ****     return buffer[0];
 11073              		.loc 1 2947 0
 11074 0014 044B     		ldr	r3, .L871+4
 11075 0016 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 247


 11076 0018 5A1E     		sub	r2, r3, #1
 11077 001a 9341     		sbc	r3, r3, r2
 11078 001c DBB2     		uxtb	r3, r3
2948:.\mpu6050.c   **** }
 11079              		.loc 1 2948 0
 11080 001e 181C     		mov	r0, r3
 11081 0020 BD46     		mov	sp, r7
 11082              		@ sp needed
 11083 0022 80BD     		pop	{r7, pc}
 11084              	.L872:
 11085              		.align	2
 11086              	.L871:
 11087 0024 00000000 		.word	devAddr
 11088 0028 00000000 		.word	buffer
 11089              		.cfi_endproc
 11090              	.LFE240:
 11091              		.size	MPU6050_getDMPInt4Status, .-MPU6050_getDMPInt4Status
 11092              		.section	.text.MPU6050_getDMPInt3Status,"ax",%progbits
 11093              		.align	2
 11094              		.global	MPU6050_getDMPInt3Status
 11095              		.code	16
 11096              		.thumb_func
 11097              		.type	MPU6050_getDMPInt3Status, %function
 11098              	MPU6050_getDMPInt3Status:
 11099              	.LFB241:
2949:.\mpu6050.c   **** bool MPU6050_getDMPInt3Status() {
 11100              		.loc 1 2949 0
 11101              		.cfi_startproc
 11102 0000 80B5     		push	{r7, lr}
 11103              		.cfi_def_cfa_offset 8
 11104              		.cfi_offset 7, -8
 11105              		.cfi_offset 14, -4
 11106 0002 00AF     		add	r7, sp, #0
 11107              		.cfi_def_cfa_register 7
2950:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_3_BIT, buffer);
 11108              		.loc 1 2950 0
 11109 0004 074B     		ldr	r3, .L875
 11110 0006 1A78     		ldrb	r2, [r3]
 11111 0008 074B     		ldr	r3, .L875+4
 11112 000a 101C     		mov	r0, r2
 11113 000c 3921     		mov	r1, #57
 11114 000e 0322     		mov	r2, #3
 11115 0010 FFF7FEFF 		bl	I2CReadBit
2951:.\mpu6050.c   ****     return buffer[0];
 11116              		.loc 1 2951 0
 11117 0014 044B     		ldr	r3, .L875+4
 11118 0016 1B78     		ldrb	r3, [r3]
 11119 0018 5A1E     		sub	r2, r3, #1
 11120 001a 9341     		sbc	r3, r3, r2
 11121 001c DBB2     		uxtb	r3, r3
2952:.\mpu6050.c   **** }
 11122              		.loc 1 2952 0
 11123 001e 181C     		mov	r0, r3
 11124 0020 BD46     		mov	sp, r7
 11125              		@ sp needed
 11126 0022 80BD     		pop	{r7, pc}
 11127              	.L876:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 248


 11128              		.align	2
 11129              	.L875:
 11130 0024 00000000 		.word	devAddr
 11131 0028 00000000 		.word	buffer
 11132              		.cfi_endproc
 11133              	.LFE241:
 11134              		.size	MPU6050_getDMPInt3Status, .-MPU6050_getDMPInt3Status
 11135              		.section	.text.MPU6050_getDMPInt2Status,"ax",%progbits
 11136              		.align	2
 11137              		.global	MPU6050_getDMPInt2Status
 11138              		.code	16
 11139              		.thumb_func
 11140              		.type	MPU6050_getDMPInt2Status, %function
 11141              	MPU6050_getDMPInt2Status:
 11142              	.LFB242:
2953:.\mpu6050.c   **** bool MPU6050_getDMPInt2Status() {
 11143              		.loc 1 2953 0
 11144              		.cfi_startproc
 11145 0000 80B5     		push	{r7, lr}
 11146              		.cfi_def_cfa_offset 8
 11147              		.cfi_offset 7, -8
 11148              		.cfi_offset 14, -4
 11149 0002 00AF     		add	r7, sp, #0
 11150              		.cfi_def_cfa_register 7
2954:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_2_BIT, buffer);
 11151              		.loc 1 2954 0
 11152 0004 074B     		ldr	r3, .L879
 11153 0006 1A78     		ldrb	r2, [r3]
 11154 0008 074B     		ldr	r3, .L879+4
 11155 000a 101C     		mov	r0, r2
 11156 000c 3921     		mov	r1, #57
 11157 000e 0222     		mov	r2, #2
 11158 0010 FFF7FEFF 		bl	I2CReadBit
2955:.\mpu6050.c   ****     return buffer[0];
 11159              		.loc 1 2955 0
 11160 0014 044B     		ldr	r3, .L879+4
 11161 0016 1B78     		ldrb	r3, [r3]
 11162 0018 5A1E     		sub	r2, r3, #1
 11163 001a 9341     		sbc	r3, r3, r2
 11164 001c DBB2     		uxtb	r3, r3
2956:.\mpu6050.c   **** }
 11165              		.loc 1 2956 0
 11166 001e 181C     		mov	r0, r3
 11167 0020 BD46     		mov	sp, r7
 11168              		@ sp needed
 11169 0022 80BD     		pop	{r7, pc}
 11170              	.L880:
 11171              		.align	2
 11172              	.L879:
 11173 0024 00000000 		.word	devAddr
 11174 0028 00000000 		.word	buffer
 11175              		.cfi_endproc
 11176              	.LFE242:
 11177              		.size	MPU6050_getDMPInt2Status, .-MPU6050_getDMPInt2Status
 11178              		.section	.text.MPU6050_getDMPInt1Status,"ax",%progbits
 11179              		.align	2
 11180              		.global	MPU6050_getDMPInt1Status
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 249


 11181              		.code	16
 11182              		.thumb_func
 11183              		.type	MPU6050_getDMPInt1Status, %function
 11184              	MPU6050_getDMPInt1Status:
 11185              	.LFB243:
2957:.\mpu6050.c   **** bool MPU6050_getDMPInt1Status() {
 11186              		.loc 1 2957 0
 11187              		.cfi_startproc
 11188 0000 80B5     		push	{r7, lr}
 11189              		.cfi_def_cfa_offset 8
 11190              		.cfi_offset 7, -8
 11191              		.cfi_offset 14, -4
 11192 0002 00AF     		add	r7, sp, #0
 11193              		.cfi_def_cfa_register 7
2958:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_1_BIT, buffer);
 11194              		.loc 1 2958 0
 11195 0004 074B     		ldr	r3, .L883
 11196 0006 1A78     		ldrb	r2, [r3]
 11197 0008 074B     		ldr	r3, .L883+4
 11198 000a 101C     		mov	r0, r2
 11199 000c 3921     		mov	r1, #57
 11200 000e 0122     		mov	r2, #1
 11201 0010 FFF7FEFF 		bl	I2CReadBit
2959:.\mpu6050.c   ****     return buffer[0];
 11202              		.loc 1 2959 0
 11203 0014 044B     		ldr	r3, .L883+4
 11204 0016 1B78     		ldrb	r3, [r3]
 11205 0018 5A1E     		sub	r2, r3, #1
 11206 001a 9341     		sbc	r3, r3, r2
 11207 001c DBB2     		uxtb	r3, r3
2960:.\mpu6050.c   **** }
 11208              		.loc 1 2960 0
 11209 001e 181C     		mov	r0, r3
 11210 0020 BD46     		mov	sp, r7
 11211              		@ sp needed
 11212 0022 80BD     		pop	{r7, pc}
 11213              	.L884:
 11214              		.align	2
 11215              	.L883:
 11216 0024 00000000 		.word	devAddr
 11217 0028 00000000 		.word	buffer
 11218              		.cfi_endproc
 11219              	.LFE243:
 11220              		.size	MPU6050_getDMPInt1Status, .-MPU6050_getDMPInt1Status
 11221              		.section	.text.MPU6050_getDMPInt0Status,"ax",%progbits
 11222              		.align	2
 11223              		.global	MPU6050_getDMPInt0Status
 11224              		.code	16
 11225              		.thumb_func
 11226              		.type	MPU6050_getDMPInt0Status, %function
 11227              	MPU6050_getDMPInt0Status:
 11228              	.LFB244:
2961:.\mpu6050.c   **** bool MPU6050_getDMPInt0Status() {
 11229              		.loc 1 2961 0
 11230              		.cfi_startproc
 11231 0000 80B5     		push	{r7, lr}
 11232              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 250


 11233              		.cfi_offset 7, -8
 11234              		.cfi_offset 14, -4
 11235 0002 00AF     		add	r7, sp, #0
 11236              		.cfi_def_cfa_register 7
2962:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_0_BIT, buffer);
 11237              		.loc 1 2962 0
 11238 0004 074B     		ldr	r3, .L887
 11239 0006 1A78     		ldrb	r2, [r3]
 11240 0008 074B     		ldr	r3, .L887+4
 11241 000a 101C     		mov	r0, r2
 11242 000c 3921     		mov	r1, #57
 11243 000e 0022     		mov	r2, #0
 11244 0010 FFF7FEFF 		bl	I2CReadBit
2963:.\mpu6050.c   ****     return buffer[0];
 11245              		.loc 1 2963 0
 11246 0014 044B     		ldr	r3, .L887+4
 11247 0016 1B78     		ldrb	r3, [r3]
 11248 0018 5A1E     		sub	r2, r3, #1
 11249 001a 9341     		sbc	r3, r3, r2
 11250 001c DBB2     		uxtb	r3, r3
2964:.\mpu6050.c   **** }
 11251              		.loc 1 2964 0
 11252 001e 181C     		mov	r0, r3
 11253 0020 BD46     		mov	sp, r7
 11254              		@ sp needed
 11255 0022 80BD     		pop	{r7, pc}
 11256              	.L888:
 11257              		.align	2
 11258              	.L887:
 11259 0024 00000000 		.word	devAddr
 11260 0028 00000000 		.word	buffer
 11261              		.cfi_endproc
 11262              	.LFE244:
 11263              		.size	MPU6050_getDMPInt0Status, .-MPU6050_getDMPInt0Status
 11264              		.section	.text.MPU6050_getIntPLLReadyStatus,"ax",%progbits
 11265              		.align	2
 11266              		.global	MPU6050_getIntPLLReadyStatus
 11267              		.code	16
 11268              		.thumb_func
 11269              		.type	MPU6050_getIntPLLReadyStatus, %function
 11270              	MPU6050_getIntPLLReadyStatus:
 11271              	.LFB245:
2965:.\mpu6050.c   **** 
2966:.\mpu6050.c   **** // INT_STATUS register (DMP functions)
2967:.\mpu6050.c   **** 
2968:.\mpu6050.c   **** bool MPU6050_getIntPLLReadyStatus() {
 11272              		.loc 1 2968 0
 11273              		.cfi_startproc
 11274 0000 80B5     		push	{r7, lr}
 11275              		.cfi_def_cfa_offset 8
 11276              		.cfi_offset 7, -8
 11277              		.cfi_offset 14, -4
 11278 0002 00AF     		add	r7, sp, #0
 11279              		.cfi_def_cfa_register 7
2969:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, buffer);
 11280              		.loc 1 2969 0
 11281 0004 074B     		ldr	r3, .L891
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 251


 11282 0006 1A78     		ldrb	r2, [r3]
 11283 0008 074B     		ldr	r3, .L891+4
 11284 000a 101C     		mov	r0, r2
 11285 000c 3A21     		mov	r1, #58
 11286 000e 0222     		mov	r2, #2
 11287 0010 FFF7FEFF 		bl	I2CReadBit
2970:.\mpu6050.c   ****     return buffer[0];
 11288              		.loc 1 2970 0
 11289 0014 044B     		ldr	r3, .L891+4
 11290 0016 1B78     		ldrb	r3, [r3]
 11291 0018 5A1E     		sub	r2, r3, #1
 11292 001a 9341     		sbc	r3, r3, r2
 11293 001c DBB2     		uxtb	r3, r3
2971:.\mpu6050.c   **** }
 11294              		.loc 1 2971 0
 11295 001e 181C     		mov	r0, r3
 11296 0020 BD46     		mov	sp, r7
 11297              		@ sp needed
 11298 0022 80BD     		pop	{r7, pc}
 11299              	.L892:
 11300              		.align	2
 11301              	.L891:
 11302 0024 00000000 		.word	devAddr
 11303 0028 00000000 		.word	buffer
 11304              		.cfi_endproc
 11305              	.LFE245:
 11306              		.size	MPU6050_getIntPLLReadyStatus, .-MPU6050_getIntPLLReadyStatus
 11307              		.section	.text.MPU6050_getIntDMPStatus,"ax",%progbits
 11308              		.align	2
 11309              		.global	MPU6050_getIntDMPStatus
 11310              		.code	16
 11311              		.thumb_func
 11312              		.type	MPU6050_getIntDMPStatus, %function
 11313              	MPU6050_getIntDMPStatus:
 11314              	.LFB246:
2972:.\mpu6050.c   **** bool MPU6050_getIntDMPStatus() {
 11315              		.loc 1 2972 0
 11316              		.cfi_startproc
 11317 0000 80B5     		push	{r7, lr}
 11318              		.cfi_def_cfa_offset 8
 11319              		.cfi_offset 7, -8
 11320              		.cfi_offset 14, -4
 11321 0002 00AF     		add	r7, sp, #0
 11322              		.cfi_def_cfa_register 7
2973:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DMP_INT_BIT, buffer);
 11323              		.loc 1 2973 0
 11324 0004 074B     		ldr	r3, .L895
 11325 0006 1A78     		ldrb	r2, [r3]
 11326 0008 074B     		ldr	r3, .L895+4
 11327 000a 101C     		mov	r0, r2
 11328 000c 3A21     		mov	r1, #58
 11329 000e 0122     		mov	r2, #1
 11330 0010 FFF7FEFF 		bl	I2CReadBit
2974:.\mpu6050.c   ****     return buffer[0];
 11331              		.loc 1 2974 0
 11332 0014 044B     		ldr	r3, .L895+4
 11333 0016 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 252


 11334 0018 5A1E     		sub	r2, r3, #1
 11335 001a 9341     		sbc	r3, r3, r2
 11336 001c DBB2     		uxtb	r3, r3
2975:.\mpu6050.c   **** }
 11337              		.loc 1 2975 0
 11338 001e 181C     		mov	r0, r3
 11339 0020 BD46     		mov	sp, r7
 11340              		@ sp needed
 11341 0022 80BD     		pop	{r7, pc}
 11342              	.L896:
 11343              		.align	2
 11344              	.L895:
 11345 0024 00000000 		.word	devAddr
 11346 0028 00000000 		.word	buffer
 11347              		.cfi_endproc
 11348              	.LFE246:
 11349              		.size	MPU6050_getIntDMPStatus, .-MPU6050_getIntDMPStatus
 11350              		.section	.text.MPU6050_getDMPEnabled,"ax",%progbits
 11351              		.align	2
 11352              		.global	MPU6050_getDMPEnabled
 11353              		.code	16
 11354              		.thumb_func
 11355              		.type	MPU6050_getDMPEnabled, %function
 11356              	MPU6050_getDMPEnabled:
 11357              	.LFB247:
2976:.\mpu6050.c   **** 
2977:.\mpu6050.c   **** // USER_CTRL register (DMP functions)
2978:.\mpu6050.c   **** 
2979:.\mpu6050.c   **** bool MPU6050_getDMPEnabled() {
 11358              		.loc 1 2979 0
 11359              		.cfi_startproc
 11360 0000 80B5     		push	{r7, lr}
 11361              		.cfi_def_cfa_offset 8
 11362              		.cfi_offset 7, -8
 11363              		.cfi_offset 14, -4
 11364 0002 00AF     		add	r7, sp, #0
 11365              		.cfi_def_cfa_register 7
2980:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
 11366              		.loc 1 2980 0
 11367 0004 074B     		ldr	r3, .L899
 11368 0006 1A78     		ldrb	r2, [r3]
 11369 0008 074B     		ldr	r3, .L899+4
 11370 000a 101C     		mov	r0, r2
 11371 000c 6A21     		mov	r1, #106
 11372 000e 0722     		mov	r2, #7
 11373 0010 FFF7FEFF 		bl	I2CReadBit
2981:.\mpu6050.c   ****     return buffer[0];
 11374              		.loc 1 2981 0
 11375 0014 044B     		ldr	r3, .L899+4
 11376 0016 1B78     		ldrb	r3, [r3]
 11377 0018 5A1E     		sub	r2, r3, #1
 11378 001a 9341     		sbc	r3, r3, r2
 11379 001c DBB2     		uxtb	r3, r3
2982:.\mpu6050.c   **** }
 11380              		.loc 1 2982 0
 11381 001e 181C     		mov	r0, r3
 11382 0020 BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 253


 11383              		@ sp needed
 11384 0022 80BD     		pop	{r7, pc}
 11385              	.L900:
 11386              		.align	2
 11387              	.L899:
 11388 0024 00000000 		.word	devAddr
 11389 0028 00000000 		.word	buffer
 11390              		.cfi_endproc
 11391              	.LFE247:
 11392              		.size	MPU6050_getDMPEnabled, .-MPU6050_getDMPEnabled
 11393              		.section	.text.MPU6050_setDMPEnabled,"ax",%progbits
 11394              		.align	2
 11395              		.global	MPU6050_setDMPEnabled
 11396              		.code	16
 11397              		.thumb_func
 11398              		.type	MPU6050_setDMPEnabled, %function
 11399              	MPU6050_setDMPEnabled:
 11400              	.LFB248:
2983:.\mpu6050.c   **** void MPU6050_setDMPEnabled(bool enabled) {
 11401              		.loc 1 2983 0
 11402              		.cfi_startproc
 11403 0000 80B5     		push	{r7, lr}
 11404              		.cfi_def_cfa_offset 8
 11405              		.cfi_offset 7, -8
 11406              		.cfi_offset 14, -4
 11407 0002 82B0     		sub	sp, sp, #8
 11408              		.cfi_def_cfa_offset 16
 11409 0004 00AF     		add	r7, sp, #0
 11410              		.cfi_def_cfa_register 7
 11411 0006 021C     		mov	r2, r0
 11412 0008 FB1D     		add	r3, r7, #7
 11413 000a 1A70     		strb	r2, [r3]
2984:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 11414              		.loc 1 2984 0
 11415 000c 054B     		ldr	r3, .L902
 11416 000e 1A78     		ldrb	r2, [r3]
 11417 0010 FB1D     		add	r3, r7, #7
 11418 0012 1B78     		ldrb	r3, [r3]
 11419 0014 101C     		mov	r0, r2
 11420 0016 6A21     		mov	r1, #106
 11421 0018 0722     		mov	r2, #7
 11422 001a FFF7FEFF 		bl	I2CWriteBit
2985:.\mpu6050.c   **** }
 11423              		.loc 1 2985 0
 11424 001e BD46     		mov	sp, r7
 11425 0020 02B0     		add	sp, sp, #8
 11426              		@ sp needed
 11427 0022 80BD     		pop	{r7, pc}
 11428              	.L903:
 11429              		.align	2
 11430              	.L902:
 11431 0024 00000000 		.word	devAddr
 11432              		.cfi_endproc
 11433              	.LFE248:
 11434              		.size	MPU6050_setDMPEnabled, .-MPU6050_setDMPEnabled
 11435              		.section	.text.MPU6050_resetDMP,"ax",%progbits
 11436              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 254


 11437              		.global	MPU6050_resetDMP
 11438              		.code	16
 11439              		.thumb_func
 11440              		.type	MPU6050_resetDMP, %function
 11441              	MPU6050_resetDMP:
 11442              	.LFB249:
2986:.\mpu6050.c   **** void MPU6050_resetDMP() {
 11443              		.loc 1 2986 0
 11444              		.cfi_startproc
 11445 0000 80B5     		push	{r7, lr}
 11446              		.cfi_def_cfa_offset 8
 11447              		.cfi_offset 7, -8
 11448              		.cfi_offset 14, -4
 11449 0002 00AF     		add	r7, sp, #0
 11450              		.cfi_def_cfa_register 7
2987:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 11451              		.loc 1 2987 0
 11452 0004 044B     		ldr	r3, .L905
 11453 0006 1B78     		ldrb	r3, [r3]
 11454 0008 181C     		mov	r0, r3
 11455 000a 6A21     		mov	r1, #106
 11456 000c 0322     		mov	r2, #3
 11457 000e 0123     		mov	r3, #1
 11458 0010 FFF7FEFF 		bl	I2CWriteBit
2988:.\mpu6050.c   **** }
 11459              		.loc 1 2988 0
 11460 0014 BD46     		mov	sp, r7
 11461              		@ sp needed
 11462 0016 80BD     		pop	{r7, pc}
 11463              	.L906:
 11464              		.align	2
 11465              	.L905:
 11466 0018 00000000 		.word	devAddr
 11467              		.cfi_endproc
 11468              	.LFE249:
 11469              		.size	MPU6050_resetDMP, .-MPU6050_resetDMP
 11470              		.section	.text.MPU6050_setMemoryBank,"ax",%progbits
 11471              		.align	2
 11472              		.global	MPU6050_setMemoryBank
 11473              		.code	16
 11474              		.thumb_func
 11475              		.type	MPU6050_setMemoryBank, %function
 11476              	MPU6050_setMemoryBank:
 11477              	.LFB250:
2989:.\mpu6050.c   **** 
2990:.\mpu6050.c   **** // BANK_SEL register
2991:.\mpu6050.c   **** 
2992:.\mpu6050.c   **** void MPU6050_setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 11478              		.loc 1 2992 0
 11479              		.cfi_startproc
 11480 0000 90B5     		push	{r4, r7, lr}
 11481              		.cfi_def_cfa_offset 12
 11482              		.cfi_offset 4, -12
 11483              		.cfi_offset 7, -8
 11484              		.cfi_offset 14, -4
 11485 0002 83B0     		sub	sp, sp, #12
 11486              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 255


 11487 0004 00AF     		add	r7, sp, #0
 11488              		.cfi_def_cfa_register 7
 11489 0006 041C     		mov	r4, r0
 11490 0008 081C     		mov	r0, r1
 11491 000a 111C     		mov	r1, r2
 11492 000c FB1D     		add	r3, r7, #7
 11493 000e 221C     		add	r2, r4, #0
 11494 0010 1A70     		strb	r2, [r3]
 11495 0012 BB1D     		add	r3, r7, #6
 11496 0014 021C     		add	r2, r0, #0
 11497 0016 1A70     		strb	r2, [r3]
 11498 0018 7B1D     		add	r3, r7, #5
 11499 001a 0A1C     		add	r2, r1, #0
 11500 001c 1A70     		strb	r2, [r3]
2993:.\mpu6050.c   ****     bank &= 0x1F;
 11501              		.loc 1 2993 0
 11502 001e FB1D     		add	r3, r7, #7
 11503 0020 FA1D     		add	r2, r7, #7
 11504 0022 1278     		ldrb	r2, [r2]
 11505 0024 1F21     		mov	r1, #31
 11506 0026 0A40     		and	r2, r1
 11507 0028 1A70     		strb	r2, [r3]
2994:.\mpu6050.c   ****     if (userBank) bank |= 0x20;
 11508              		.loc 1 2994 0
 11509 002a 7B1D     		add	r3, r7, #5
 11510 002c 1B78     		ldrb	r3, [r3]
 11511 002e 002B     		cmp	r3, #0
 11512 0030 05D0     		beq	.L908
 11513              		.loc 1 2994 0 is_stmt 0 discriminator 1
 11514 0032 FB1D     		add	r3, r7, #7
 11515 0034 FA1D     		add	r2, r7, #7
 11516 0036 1278     		ldrb	r2, [r2]
 11517 0038 2021     		mov	r1, #32
 11518 003a 0A43     		orr	r2, r1
 11519 003c 1A70     		strb	r2, [r3]
 11520              	.L908:
2995:.\mpu6050.c   ****     if (prefetchEnabled) bank |= 0x40;
 11521              		.loc 1 2995 0 is_stmt 1
 11522 003e BB1D     		add	r3, r7, #6
 11523 0040 1B78     		ldrb	r3, [r3]
 11524 0042 002B     		cmp	r3, #0
 11525 0044 05D0     		beq	.L909
 11526              		.loc 1 2995 0 is_stmt 0 discriminator 1
 11527 0046 FB1D     		add	r3, r7, #7
 11528 0048 FA1D     		add	r2, r7, #7
 11529 004a 1278     		ldrb	r2, [r2]
 11530 004c 4021     		mov	r1, #64
 11531 004e 0A43     		orr	r2, r1
 11532 0050 1A70     		strb	r2, [r3]
 11533              	.L909:
2996:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 11534              		.loc 1 2996 0 is_stmt 1
 11535 0052 064B     		ldr	r3, .L910
 11536 0054 1A78     		ldrb	r2, [r3]
 11537 0056 FB1D     		add	r3, r7, #7
 11538 0058 1B78     		ldrb	r3, [r3]
 11539 005a 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 256


 11540 005c 6D21     		mov	r1, #109
 11541 005e 1A1C     		mov	r2, r3
 11542 0060 FFF7FEFF 		bl	I2CWriteByte
2997:.\mpu6050.c   **** }
 11543              		.loc 1 2997 0
 11544 0064 BD46     		mov	sp, r7
 11545 0066 03B0     		add	sp, sp, #12
 11546              		@ sp needed
 11547 0068 90BD     		pop	{r4, r7, pc}
 11548              	.L911:
 11549 006a C046     		.align	2
 11550              	.L910:
 11551 006c 00000000 		.word	devAddr
 11552              		.cfi_endproc
 11553              	.LFE250:
 11554              		.size	MPU6050_setMemoryBank, .-MPU6050_setMemoryBank
 11555              		.section	.text.MPU6050_setMemoryStartAddress,"ax",%progbits
 11556              		.align	2
 11557              		.global	MPU6050_setMemoryStartAddress
 11558              		.code	16
 11559              		.thumb_func
 11560              		.type	MPU6050_setMemoryStartAddress, %function
 11561              	MPU6050_setMemoryStartAddress:
 11562              	.LFB251:
2998:.\mpu6050.c   **** 
2999:.\mpu6050.c   **** // MEM_START_ADDR register
3000:.\mpu6050.c   **** 
3001:.\mpu6050.c   **** void MPU6050_setMemoryStartAddress(uint8_t address) {
 11563              		.loc 1 3001 0
 11564              		.cfi_startproc
 11565 0000 80B5     		push	{r7, lr}
 11566              		.cfi_def_cfa_offset 8
 11567              		.cfi_offset 7, -8
 11568              		.cfi_offset 14, -4
 11569 0002 82B0     		sub	sp, sp, #8
 11570              		.cfi_def_cfa_offset 16
 11571 0004 00AF     		add	r7, sp, #0
 11572              		.cfi_def_cfa_register 7
 11573 0006 021C     		mov	r2, r0
 11574 0008 FB1D     		add	r3, r7, #7
 11575 000a 1A70     		strb	r2, [r3]
3002:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 11576              		.loc 1 3002 0
 11577 000c 054B     		ldr	r3, .L913
 11578 000e 1A78     		ldrb	r2, [r3]
 11579 0010 FB1D     		add	r3, r7, #7
 11580 0012 1B78     		ldrb	r3, [r3]
 11581 0014 101C     		mov	r0, r2
 11582 0016 6E21     		mov	r1, #110
 11583 0018 1A1C     		mov	r2, r3
 11584 001a FFF7FEFF 		bl	I2CWriteByte
3003:.\mpu6050.c   **** }
 11585              		.loc 1 3003 0
 11586 001e BD46     		mov	sp, r7
 11587 0020 02B0     		add	sp, sp, #8
 11588              		@ sp needed
 11589 0022 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 257


 11590              	.L914:
 11591              		.align	2
 11592              	.L913:
 11593 0024 00000000 		.word	devAddr
 11594              		.cfi_endproc
 11595              	.LFE251:
 11596              		.size	MPU6050_setMemoryStartAddress, .-MPU6050_setMemoryStartAddress
 11597              		.section	.text.MPU6050_readMemoryByte,"ax",%progbits
 11598              		.align	2
 11599              		.global	MPU6050_readMemoryByte
 11600              		.code	16
 11601              		.thumb_func
 11602              		.type	MPU6050_readMemoryByte, %function
 11603              	MPU6050_readMemoryByte:
 11604              	.LFB252:
3004:.\mpu6050.c   **** 
3005:.\mpu6050.c   **** // MEM_R_W register
3006:.\mpu6050.c   **** 
3007:.\mpu6050.c   **** uint8_t MPU6050_readMemoryByte() {
 11605              		.loc 1 3007 0
 11606              		.cfi_startproc
 11607 0000 80B5     		push	{r7, lr}
 11608              		.cfi_def_cfa_offset 8
 11609              		.cfi_offset 7, -8
 11610              		.cfi_offset 14, -4
 11611 0002 00AF     		add	r7, sp, #0
 11612              		.cfi_def_cfa_register 7
3008:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_MEM_R_W, buffer);
 11613              		.loc 1 3008 0
 11614 0004 064B     		ldr	r3, .L917
 11615 0006 1A78     		ldrb	r2, [r3]
 11616 0008 064B     		ldr	r3, .L917+4
 11617 000a 101C     		mov	r0, r2
 11618 000c 6F21     		mov	r1, #111
 11619 000e 1A1C     		mov	r2, r3
 11620 0010 FFF7FEFF 		bl	I2CReadByte
3009:.\mpu6050.c   ****     return buffer[0];
 11621              		.loc 1 3009 0
 11622 0014 034B     		ldr	r3, .L917+4
 11623 0016 1B78     		ldrb	r3, [r3]
3010:.\mpu6050.c   **** }
 11624              		.loc 1 3010 0
 11625 0018 181C     		mov	r0, r3
 11626 001a BD46     		mov	sp, r7
 11627              		@ sp needed
 11628 001c 80BD     		pop	{r7, pc}
 11629              	.L918:
 11630 001e C046     		.align	2
 11631              	.L917:
 11632 0020 00000000 		.word	devAddr
 11633 0024 00000000 		.word	buffer
 11634              		.cfi_endproc
 11635              	.LFE252:
 11636              		.size	MPU6050_readMemoryByte, .-MPU6050_readMemoryByte
 11637              		.section	.text.MPU6050_writeMemoryByte,"ax",%progbits
 11638              		.align	2
 11639              		.global	MPU6050_writeMemoryByte
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 258


 11640              		.code	16
 11641              		.thumb_func
 11642              		.type	MPU6050_writeMemoryByte, %function
 11643              	MPU6050_writeMemoryByte:
 11644              	.LFB253:
3011:.\mpu6050.c   **** void MPU6050_writeMemoryByte(uint8_t data) {
 11645              		.loc 1 3011 0
 11646              		.cfi_startproc
 11647 0000 80B5     		push	{r7, lr}
 11648              		.cfi_def_cfa_offset 8
 11649              		.cfi_offset 7, -8
 11650              		.cfi_offset 14, -4
 11651 0002 82B0     		sub	sp, sp, #8
 11652              		.cfi_def_cfa_offset 16
 11653 0004 00AF     		add	r7, sp, #0
 11654              		.cfi_def_cfa_register 7
 11655 0006 021C     		mov	r2, r0
 11656 0008 FB1D     		add	r3, r7, #7
 11657 000a 1A70     		strb	r2, [r3]
3012:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_MEM_R_W, data);
 11658              		.loc 1 3012 0
 11659 000c 054B     		ldr	r3, .L920
 11660 000e 1A78     		ldrb	r2, [r3]
 11661 0010 FB1D     		add	r3, r7, #7
 11662 0012 1B78     		ldrb	r3, [r3]
 11663 0014 101C     		mov	r0, r2
 11664 0016 6F21     		mov	r1, #111
 11665 0018 1A1C     		mov	r2, r3
 11666 001a FFF7FEFF 		bl	I2CWriteByte
3013:.\mpu6050.c   **** }
 11667              		.loc 1 3013 0
 11668 001e BD46     		mov	sp, r7
 11669 0020 02B0     		add	sp, sp, #8
 11670              		@ sp needed
 11671 0022 80BD     		pop	{r7, pc}
 11672              	.L921:
 11673              		.align	2
 11674              	.L920:
 11675 0024 00000000 		.word	devAddr
 11676              		.cfi_endproc
 11677              	.LFE253:
 11678              		.size	MPU6050_writeMemoryByte, .-MPU6050_writeMemoryByte
 11679              		.section	.text.MPU6050_readMemoryBlock,"ax",%progbits
 11680              		.align	2
 11681              		.global	MPU6050_readMemoryBlock
 11682              		.code	16
 11683              		.thumb_func
 11684              		.type	MPU6050_readMemoryBlock, %function
 11685              	MPU6050_readMemoryBlock:
 11686              	.LFB254:
3014:.\mpu6050.c   **** void MPU6050_readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 11687              		.loc 1 3014 0
 11688              		.cfi_startproc
 11689 0000 90B5     		push	{r4, r7, lr}
 11690              		.cfi_def_cfa_offset 12
 11691              		.cfi_offset 4, -12
 11692              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 259


 11693              		.cfi_offset 14, -4
 11694 0002 85B0     		sub	sp, sp, #20
 11695              		.cfi_def_cfa_offset 32
 11696 0004 00AF     		add	r7, sp, #0
 11697              		.cfi_def_cfa_register 7
 11698 0006 7860     		str	r0, [r7, #4]
 11699 0008 0C1C     		mov	r4, r1
 11700 000a 101C     		mov	r0, r2
 11701 000c 191C     		mov	r1, r3
 11702 000e BB1C     		add	r3, r7, #2
 11703 0010 221C     		add	r2, r4, #0
 11704 0012 1A80     		strh	r2, [r3]
 11705 0014 7B1C     		add	r3, r7, #1
 11706 0016 021C     		add	r2, r0, #0
 11707 0018 1A70     		strb	r2, [r3]
 11708 001a 3B1C     		mov	r3, r7
 11709 001c 0A1C     		add	r2, r1, #0
 11710 001e 1A70     		strb	r2, [r3]
3015:.\mpu6050.c   ****     MPU6050_setMemoryBank(bank, false, false);
 11711              		.loc 1 3015 0
 11712 0020 7B1C     		add	r3, r7, #1
 11713 0022 1B78     		ldrb	r3, [r3]
 11714 0024 181C     		mov	r0, r3
 11715 0026 0021     		mov	r1, #0
 11716 0028 0022     		mov	r2, #0
 11717 002a FFF7FEFF 		bl	MPU6050_setMemoryBank
3016:.\mpu6050.c   ****     MPU6050_setMemoryStartAddress(address);
 11718              		.loc 1 3016 0
 11719 002e 3B1C     		mov	r3, r7
 11720 0030 1B78     		ldrb	r3, [r3]
 11721 0032 181C     		mov	r0, r3
 11722 0034 FFF7FEFF 		bl	MPU6050_setMemoryStartAddress
3017:.\mpu6050.c   ****     uint8_t chunkSize;
3018:.\mpu6050.c   **** 	uint16_t i = 0;
 11723              		.loc 1 3018 0
 11724 0038 0C23     		mov	r3, #12
 11725 003a FB18     		add	r3, r7, r3
 11726 003c 0022     		mov	r2, #0
 11727 003e 1A80     		strh	r2, [r3]
3019:.\mpu6050.c   ****     while ( i < dataSize) {
 11728              		.loc 1 3019 0
 11729 0040 6CE0     		b	.L923
 11730              	.L927:
3020:.\mpu6050.c   ****         // determine correct chunk size according to bank position and data size
3021:.\mpu6050.c   ****         chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 11731              		.loc 1 3021 0
 11732 0042 0F23     		mov	r3, #15
 11733 0044 FB18     		add	r3, r7, r3
 11734 0046 1022     		mov	r2, #16
 11735 0048 1A70     		strb	r2, [r3]
3022:.\mpu6050.c   **** 
3023:.\mpu6050.c   ****         // make sure we don't go past the data size
3024:.\mpu6050.c   ****         if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 11736              		.loc 1 3024 0
 11737 004a 0C23     		mov	r3, #12
 11738 004c FB18     		add	r3, r7, r3
 11739 004e 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 260


 11740 0050 0F23     		mov	r3, #15
 11741 0052 FB18     		add	r3, r7, r3
 11742 0054 1B78     		ldrb	r3, [r3]
 11743 0056 D218     		add	r2, r2, r3
 11744 0058 BB1C     		add	r3, r7, #2
 11745 005a 1B88     		ldrh	r3, [r3]
 11746 005c 9A42     		cmp	r2, r3
 11747 005e 0ADD     		ble	.L924
 11748              		.loc 1 3024 0 is_stmt 0 discriminator 1
 11749 0060 BB1C     		add	r3, r7, #2
 11750 0062 1B88     		ldrh	r3, [r3]
 11751 0064 D9B2     		uxtb	r1, r3
 11752 0066 0C23     		mov	r3, #12
 11753 0068 FB18     		add	r3, r7, r3
 11754 006a 1B88     		ldrh	r3, [r3]
 11755 006c DAB2     		uxtb	r2, r3
 11756 006e 0F23     		mov	r3, #15
 11757 0070 FB18     		add	r3, r7, r3
 11758 0072 8A1A     		sub	r2, r1, r2
 11759 0074 1A70     		strb	r2, [r3]
 11760              	.L924:
3025:.\mpu6050.c   **** 
3026:.\mpu6050.c   ****         // make sure this chunk doesn't go past the bank boundary (256 bytes)
3027:.\mpu6050.c   ****         if (chunkSize > 256 - address) chunkSize = 256 - address;
 11761              		.loc 1 3027 0 is_stmt 1
 11762 0076 0F23     		mov	r3, #15
 11763 0078 FB18     		add	r3, r7, r3
 11764 007a 1A78     		ldrb	r2, [r3]
 11765 007c 3B1C     		mov	r3, r7
 11766 007e 1B78     		ldrb	r3, [r3]
 11767 0080 8021     		mov	r1, #128
 11768 0082 4900     		lsl	r1, r1, #1
 11769 0084 CB1A     		sub	r3, r1, r3
 11770 0086 9A42     		cmp	r2, r3
 11771 0088 05DD     		ble	.L925
 11772              		.loc 1 3027 0 is_stmt 0 discriminator 1
 11773 008a 0F23     		mov	r3, #15
 11774 008c FB18     		add	r3, r7, r3
 11775 008e 3A1C     		mov	r2, r7
 11776 0090 1278     		ldrb	r2, [r2]
 11777 0092 5242     		neg	r2, r2
 11778 0094 1A70     		strb	r2, [r3]
 11779              	.L925:
3028:.\mpu6050.c   **** 
3029:.\mpu6050.c   ****         // read the chunk of data as specified
3030:.\mpu6050.c   ****         I2CReadBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 11780              		.loc 1 3030 0 is_stmt 1
 11781 0096 264B     		ldr	r3, .L928
 11782 0098 1978     		ldrb	r1, [r3]
 11783 009a 0C23     		mov	r3, #12
 11784 009c FB18     		add	r3, r7, r3
 11785 009e 1B88     		ldrh	r3, [r3]
 11786 00a0 7A68     		ldr	r2, [r7, #4]
 11787 00a2 D418     		add	r4, r2, r3
 11788 00a4 0F23     		mov	r3, #15
 11789 00a6 FB18     		add	r3, r7, r3
 11790 00a8 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 261


 11791 00aa 081C     		mov	r0, r1
 11792 00ac 6F21     		mov	r1, #111
 11793 00ae 1A1C     		mov	r2, r3
 11794 00b0 231C     		mov	r3, r4
 11795 00b2 FFF7FEFF 		bl	I2CReadBytes
3031:.\mpu6050.c   ****         
3032:.\mpu6050.c   ****         // increase byte index by [chunkSize]
3033:.\mpu6050.c   ****         i += chunkSize;
 11796              		.loc 1 3033 0
 11797 00b6 0F23     		mov	r3, #15
 11798 00b8 FB18     		add	r3, r7, r3
 11799 00ba 1B78     		ldrb	r3, [r3]
 11800 00bc 99B2     		uxth	r1, r3
 11801 00be 0C23     		mov	r3, #12
 11802 00c0 FB18     		add	r3, r7, r3
 11803 00c2 0C22     		mov	r2, #12
 11804 00c4 BA18     		add	r2, r7, r2
 11805 00c6 1288     		ldrh	r2, [r2]
 11806 00c8 8A18     		add	r2, r1, r2
 11807 00ca 1A80     		strh	r2, [r3]
3034:.\mpu6050.c   **** 
3035:.\mpu6050.c   ****         // uint8_t automatically wraps to 0 at 256
3036:.\mpu6050.c   ****         address += chunkSize;
 11808              		.loc 1 3036 0
 11809 00cc 3B1C     		mov	r3, r7
 11810 00ce 391C     		mov	r1, r7
 11811 00d0 0F22     		mov	r2, #15
 11812 00d2 BA18     		add	r2, r7, r2
 11813 00d4 0978     		ldrb	r1, [r1]
 11814 00d6 1278     		ldrb	r2, [r2]
 11815 00d8 8A18     		add	r2, r1, r2
 11816 00da 1A70     		strb	r2, [r3]
 11817 00dc 7B1C     		add	r3, r7, #1
 11818 00de 7A1C     		add	r2, r7, #1
 11819 00e0 1278     		ldrb	r2, [r2]
 11820 00e2 1A70     		strb	r2, [r3]
3037:.\mpu6050.c   **** 
3038:.\mpu6050.c   ****         // if we aren't done, update bank (if necessary) and address
3039:.\mpu6050.c   ****         if (i < dataSize) {
 11821              		.loc 1 3039 0
 11822 00e4 0C23     		mov	r3, #12
 11823 00e6 FA18     		add	r2, r7, r3
 11824 00e8 BB1C     		add	r3, r7, #2
 11825 00ea 1288     		ldrh	r2, [r2]
 11826 00ec 1B88     		ldrh	r3, [r3]
 11827 00ee 9A42     		cmp	r2, r3
 11828 00f0 14D2     		bcs	.L923
3040:.\mpu6050.c   ****             if (address == 0) bank++;
 11829              		.loc 1 3040 0
 11830 00f2 3B1C     		mov	r3, r7
 11831 00f4 1B78     		ldrb	r3, [r3]
 11832 00f6 002B     		cmp	r3, #0
 11833 00f8 04D1     		bne	.L926
 11834              		.loc 1 3040 0 is_stmt 0 discriminator 1
 11835 00fa 7B1C     		add	r3, r7, #1
 11836 00fc 1A78     		ldrb	r2, [r3]
 11837 00fe 7B1C     		add	r3, r7, #1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 262


 11838 0100 0132     		add	r2, r2, #1
 11839 0102 1A70     		strb	r2, [r3]
 11840              	.L926:
3041:.\mpu6050.c   ****             MPU6050_setMemoryBank(bank, false, false);
 11841              		.loc 1 3041 0 is_stmt 1
 11842 0104 7B1C     		add	r3, r7, #1
 11843 0106 1B78     		ldrb	r3, [r3]
 11844 0108 181C     		mov	r0, r3
 11845 010a 0021     		mov	r1, #0
 11846 010c 0022     		mov	r2, #0
 11847 010e FFF7FEFF 		bl	MPU6050_setMemoryBank
3042:.\mpu6050.c   ****             MPU6050_setMemoryStartAddress(address);
 11848              		.loc 1 3042 0
 11849 0112 3B1C     		mov	r3, r7
 11850 0114 1B78     		ldrb	r3, [r3]
 11851 0116 181C     		mov	r0, r3
 11852 0118 FFF7FEFF 		bl	MPU6050_setMemoryStartAddress
 11853              	.L923:
3019:.\mpu6050.c   ****         // determine correct chunk size according to bank position and data size
 11854              		.loc 1 3019 0
 11855 011c 0C23     		mov	r3, #12
 11856 011e FA18     		add	r2, r7, r3
 11857 0120 BB1C     		add	r3, r7, #2
 11858 0122 1288     		ldrh	r2, [r2]
 11859 0124 1B88     		ldrh	r3, [r3]
 11860 0126 9A42     		cmp	r2, r3
 11861 0128 8BD3     		bcc	.L927
3043:.\mpu6050.c   ****         }
3044:.\mpu6050.c   ****     }
3045:.\mpu6050.c   **** }
 11862              		.loc 1 3045 0
 11863 012a BD46     		mov	sp, r7
 11864 012c 05B0     		add	sp, sp, #20
 11865              		@ sp needed
 11866 012e 90BD     		pop	{r4, r7, pc}
 11867              	.L929:
 11868              		.align	2
 11869              	.L928:
 11870 0130 00000000 		.word	devAddr
 11871              		.cfi_endproc
 11872              	.LFE254:
 11873              		.size	MPU6050_readMemoryBlock, .-MPU6050_readMemoryBlock
 11874              		.section	.text.MPU6050_getDMPConfig1,"ax",%progbits
 11875              		.align	2
 11876              		.global	MPU6050_getDMPConfig1
 11877              		.code	16
 11878              		.thumb_func
 11879              		.type	MPU6050_getDMPConfig1, %function
 11880              	MPU6050_getDMPConfig1:
 11881              	.LFB255:
3046:.\mpu6050.c   **** #if !(I2CDEV_IMPLEMENTATION == I2CDEV_MSP430)
3047:.\mpu6050.c   **** bool MPU6050_writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address
3048:.\mpu6050.c   ****     setMemoryBank(bank);
3049:.\mpu6050.c   ****     setMemoryStartAddress(address);
3050:.\mpu6050.c   ****     uint8_t chunkSize;
3051:.\mpu6050.c   ****     uint8_t *verifyBuffer;
3052:.\mpu6050.c   ****     uint8_t *progBuffer;
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 263


3053:.\mpu6050.c   ****     uint16_t i;
3054:.\mpu6050.c   ****     uint8_t j;
3055:.\mpu6050.c   ****     if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
3056:.\mpu6050.c   ****     if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
3057:.\mpu6050.c   ****     for (i = 0; i < dataSize;) {
3058:.\mpu6050.c   ****         // determine correct chunk size according to bank position and data size
3059:.\mpu6050.c   ****         chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
3060:.\mpu6050.c   **** 
3061:.\mpu6050.c   ****         // make sure we don't go past the data size
3062:.\mpu6050.c   ****         if (i + chunkSize > dataSize) chunkSize = dataSize - i;
3063:.\mpu6050.c   **** 
3064:.\mpu6050.c   ****         // make sure this chunk doesn't go past the bank boundary (256 bytes)
3065:.\mpu6050.c   ****         if (chunkSize > 256 - address) chunkSize = 256 - address;
3066:.\mpu6050.c   ****         
3067:.\mpu6050.c   ****         if (useProgMem) {
3068:.\mpu6050.c   ****             // write the chunk of data as specified
3069:.\mpu6050.c   ****             for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
3070:.\mpu6050.c   ****         } else {
3071:.\mpu6050.c   ****             // write the chunk of data as specified
3072:.\mpu6050.c   ****             progBuffer = (uint8_t *)data + i;
3073:.\mpu6050.c   ****         }
3074:.\mpu6050.c   **** 
3075:.\mpu6050.c   ****         I2CWriteBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
3076:.\mpu6050.c   **** 
3077:.\mpu6050.c   ****         // verify data if needed
3078:.\mpu6050.c   ****         if (verify && verifyBuffer) {
3079:.\mpu6050.c   ****             setMemoryBank(bank);
3080:.\mpu6050.c   ****             setMemoryStartAddress(address);
3081:.\mpu6050.c   ****             I2CReadBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
3082:.\mpu6050.c   ****             if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
3083:.\mpu6050.c   ****                 /*Serial.print("Block write verification error, bank ");
3084:.\mpu6050.c   ****                 Serial.print(bank, DEC);
3085:.\mpu6050.c   ****                 Serial.print(", address ");
3086:.\mpu6050.c   ****                 Serial.print(address, DEC);
3087:.\mpu6050.c   ****                 Serial.print("!\nExpected:");
3088:.\mpu6050.c   ****                 for (j = 0; j < chunkSize; j++) {
3089:.\mpu6050.c   ****                     Serial.print(" 0x");
3090:.\mpu6050.c   ****                     if (progBuffer[j] < 16) Serial.print("0");
3091:.\mpu6050.c   ****                     Serial.print(progBuffer[j], HEX);
3092:.\mpu6050.c   ****                 }
3093:.\mpu6050.c   ****                 Serial.print("\nReceived:");
3094:.\mpu6050.c   ****                 for (uint8_t j = 0; j < chunkSize; j++) {
3095:.\mpu6050.c   ****                     Serial.print(" 0x");
3096:.\mpu6050.c   ****                     if (verifyBuffer[i + j] < 16) Serial.print("0");
3097:.\mpu6050.c   ****                     Serial.print(verifyBuffer[i + j], HEX);
3098:.\mpu6050.c   ****                 }
3099:.\mpu6050.c   ****                 Serial.print("\n");*/
3100:.\mpu6050.c   ****                 free(verifyBuffer);
3101:.\mpu6050.c   ****                 if (useProgMem) free(progBuffer);
3102:.\mpu6050.c   ****                 return false; // uh oh.
3103:.\mpu6050.c   ****             }
3104:.\mpu6050.c   ****         }
3105:.\mpu6050.c   **** 
3106:.\mpu6050.c   ****         // increase byte index by [chunkSize]
3107:.\mpu6050.c   ****         i += chunkSize;
3108:.\mpu6050.c   **** 
3109:.\mpu6050.c   ****         // uint8_t automatically wraps to 0 at 256
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 264


3110:.\mpu6050.c   ****         address += chunkSize;
3111:.\mpu6050.c   **** 
3112:.\mpu6050.c   ****         // if we aren't done, update bank (if necessary) and address
3113:.\mpu6050.c   ****         if (i < dataSize) {
3114:.\mpu6050.c   ****             if (address == 0) bank++;
3115:.\mpu6050.c   ****             setMemoryBank(bank);
3116:.\mpu6050.c   ****             setMemoryStartAddress(address);
3117:.\mpu6050.c   ****         }
3118:.\mpu6050.c   ****     }
3119:.\mpu6050.c   ****     if (verify) free(verifyBuffer);
3120:.\mpu6050.c   ****     if (useProgMem) free(progBuffer);
3121:.\mpu6050.c   ****     return true;
3122:.\mpu6050.c   **** }
3123:.\mpu6050.c   **** bool MPU6050_writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t add
3124:.\mpu6050.c   ****     return writeMemoryBlock(data, dataSize, bank, address, verify, true);
3125:.\mpu6050.c   **** }
3126:.\mpu6050.c   **** bool MPU6050_writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
3127:.\mpu6050.c   ****     uint8_t *progBuffer, success, special;
3128:.\mpu6050.c   ****     uint16_t i, j;
3129:.\mpu6050.c   ****     if (useProgMem) {
3130:.\mpu6050.c   ****         progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
3131:.\mpu6050.c   ****     }
3132:.\mpu6050.c   **** 
3133:.\mpu6050.c   ****     // config set data is a long string of blocks with the following structure:
3134:.\mpu6050.c   ****     // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
3135:.\mpu6050.c   ****     uint8_t bank, offset, length;
3136:.\mpu6050.c   ****     for (i = 0; i < dataSize;) {
3137:.\mpu6050.c   ****         if (useProgMem) {
3138:.\mpu6050.c   ****             bank = pgm_read_byte(data + i++);
3139:.\mpu6050.c   ****             offset = pgm_read_byte(data + i++);
3140:.\mpu6050.c   ****             length = pgm_read_byte(data + i++);
3141:.\mpu6050.c   ****         } else {
3142:.\mpu6050.c   ****             bank = data[i++];
3143:.\mpu6050.c   ****             offset = data[i++];
3144:.\mpu6050.c   ****             length = data[i++];
3145:.\mpu6050.c   ****         }
3146:.\mpu6050.c   **** 
3147:.\mpu6050.c   ****         // write data or perform special action
3148:.\mpu6050.c   ****         if (length > 0) {
3149:.\mpu6050.c   ****             // regular block of data to write
3150:.\mpu6050.c   ****             /*Serial.print("Writing config block to bank ");
3151:.\mpu6050.c   ****             Serial.print(bank);
3152:.\mpu6050.c   ****             Serial.print(", offset ");
3153:.\mpu6050.c   ****             Serial.print(offset);
3154:.\mpu6050.c   ****             Serial.print(", length=");
3155:.\mpu6050.c   ****             Serial.println(length);*/
3156:.\mpu6050.c   ****             if (useProgMem) {
3157:.\mpu6050.c   ****                 if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length
3158:.\mpu6050.c   ****                 for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
3159:.\mpu6050.c   ****             } else {
3160:.\mpu6050.c   ****                 progBuffer = (uint8_t *)data + i;
3161:.\mpu6050.c   ****             }
3162:.\mpu6050.c   ****             success = writeMemoryBlock(progBuffer, length, bank, offset, true);
3163:.\mpu6050.c   ****             i += length;
3164:.\mpu6050.c   ****         } else {
3165:.\mpu6050.c   ****             // special instruction
3166:.\mpu6050.c   ****             // NOTE: this kind of behavior (what and when to do certain things)
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 265


3167:.\mpu6050.c   ****             // is totally undocumented. This code is in here based on observed
3168:.\mpu6050.c   ****             // behavior only, and exactly why (or even whether) it has to be here
3169:.\mpu6050.c   ****             // is anybody's guess for now.
3170:.\mpu6050.c   ****             if (useProgMem) {
3171:.\mpu6050.c   ****                 special = pgm_read_byte(data + i++);
3172:.\mpu6050.c   ****             } else {
3173:.\mpu6050.c   ****                 special = data[i++];
3174:.\mpu6050.c   ****             }
3175:.\mpu6050.c   ****             /*Serial.print("Special command code ");
3176:.\mpu6050.c   ****             Serial.print(special, HEX);
3177:.\mpu6050.c   ****             Serial.println(" found...");*/
3178:.\mpu6050.c   ****             if (special == 0x01) {
3179:.\mpu6050.c   ****                 // enable DMP-related interrupts
3180:.\mpu6050.c   ****                 
3181:.\mpu6050.c   ****                 //setIntZeroMotionEnabled(true);
3182:.\mpu6050.c   ****                 //setIntFIFOBufferOverflowEnabled(true);
3183:.\mpu6050.c   ****                 //setIntDMPEnabled(true);
3184:.\mpu6050.c   ****                 I2CWriteByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
3185:.\mpu6050.c   **** 
3186:.\mpu6050.c   ****                 success = true;
3187:.\mpu6050.c   ****             } else {
3188:.\mpu6050.c   ****                 // unknown special command
3189:.\mpu6050.c   ****                 success = false;
3190:.\mpu6050.c   ****             }
3191:.\mpu6050.c   ****         }
3192:.\mpu6050.c   ****         
3193:.\mpu6050.c   ****         if (!success) {
3194:.\mpu6050.c   ****             if (useProgMem) free(progBuffer);
3195:.\mpu6050.c   ****             return false; // uh oh
3196:.\mpu6050.c   ****         }
3197:.\mpu6050.c   ****     }
3198:.\mpu6050.c   ****     if (useProgMem) free(progBuffer);
3199:.\mpu6050.c   ****     return true;
3200:.\mpu6050.c   **** }
3201:.\mpu6050.c   **** 
3202:.\mpu6050.c   **** bool MPU6050_writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
3203:.\mpu6050.c   ****     return writeDMPConfigurationSet(data, dataSize, true);
3204:.\mpu6050.c   **** }
3205:.\mpu6050.c   **** #endif
3206:.\mpu6050.c   **** // DMP_CFG_1 register
3207:.\mpu6050.c   **** 
3208:.\mpu6050.c   **** uint8_t MPU6050_getDMPConfig1() {
 11882              		.loc 1 3208 0
 11883              		.cfi_startproc
 11884 0000 80B5     		push	{r7, lr}
 11885              		.cfi_def_cfa_offset 8
 11886              		.cfi_offset 7, -8
 11887              		.cfi_offset 14, -4
 11888 0002 00AF     		add	r7, sp, #0
 11889              		.cfi_def_cfa_register 7
3209:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
 11890              		.loc 1 3209 0
 11891 0004 064B     		ldr	r3, .L932
 11892 0006 1A78     		ldrb	r2, [r3]
 11893 0008 064B     		ldr	r3, .L932+4
 11894 000a 101C     		mov	r0, r2
 11895 000c 7021     		mov	r1, #112
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 266


 11896 000e 1A1C     		mov	r2, r3
 11897 0010 FFF7FEFF 		bl	I2CReadByte
3210:.\mpu6050.c   ****     return buffer[0];
 11898              		.loc 1 3210 0
 11899 0014 034B     		ldr	r3, .L932+4
 11900 0016 1B78     		ldrb	r3, [r3]
3211:.\mpu6050.c   **** }
 11901              		.loc 1 3211 0
 11902 0018 181C     		mov	r0, r3
 11903 001a BD46     		mov	sp, r7
 11904              		@ sp needed
 11905 001c 80BD     		pop	{r7, pc}
 11906              	.L933:
 11907 001e C046     		.align	2
 11908              	.L932:
 11909 0020 00000000 		.word	devAddr
 11910 0024 00000000 		.word	buffer
 11911              		.cfi_endproc
 11912              	.LFE255:
 11913              		.size	MPU6050_getDMPConfig1, .-MPU6050_getDMPConfig1
 11914              		.section	.text.MPU6050_setDMPConfig1,"ax",%progbits
 11915              		.align	2
 11916              		.global	MPU6050_setDMPConfig1
 11917              		.code	16
 11918              		.thumb_func
 11919              		.type	MPU6050_setDMPConfig1, %function
 11920              	MPU6050_setDMPConfig1:
 11921              	.LFB256:
3212:.\mpu6050.c   **** void MPU6050_setDMPConfig1(uint8_t config) {
 11922              		.loc 1 3212 0
 11923              		.cfi_startproc
 11924 0000 80B5     		push	{r7, lr}
 11925              		.cfi_def_cfa_offset 8
 11926              		.cfi_offset 7, -8
 11927              		.cfi_offset 14, -4
 11928 0002 82B0     		sub	sp, sp, #8
 11929              		.cfi_def_cfa_offset 16
 11930 0004 00AF     		add	r7, sp, #0
 11931              		.cfi_def_cfa_register 7
 11932 0006 021C     		mov	r2, r0
 11933 0008 FB1D     		add	r3, r7, #7
 11934 000a 1A70     		strb	r2, [r3]
3213:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 11935              		.loc 1 3213 0
 11936 000c 054B     		ldr	r3, .L935
 11937 000e 1A78     		ldrb	r2, [r3]
 11938 0010 FB1D     		add	r3, r7, #7
 11939 0012 1B78     		ldrb	r3, [r3]
 11940 0014 101C     		mov	r0, r2
 11941 0016 7021     		mov	r1, #112
 11942 0018 1A1C     		mov	r2, r3
 11943 001a FFF7FEFF 		bl	I2CWriteByte
3214:.\mpu6050.c   **** }
 11944              		.loc 1 3214 0
 11945 001e BD46     		mov	sp, r7
 11946 0020 02B0     		add	sp, sp, #8
 11947              		@ sp needed
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 267


 11948 0022 80BD     		pop	{r7, pc}
 11949              	.L936:
 11950              		.align	2
 11951              	.L935:
 11952 0024 00000000 		.word	devAddr
 11953              		.cfi_endproc
 11954              	.LFE256:
 11955              		.size	MPU6050_setDMPConfig1, .-MPU6050_setDMPConfig1
 11956              		.section	.text.MPU6050_getDMPConfig2,"ax",%progbits
 11957              		.align	2
 11958              		.global	MPU6050_getDMPConfig2
 11959              		.code	16
 11960              		.thumb_func
 11961              		.type	MPU6050_getDMPConfig2, %function
 11962              	MPU6050_getDMPConfig2:
 11963              	.LFB257:
3215:.\mpu6050.c   **** 
3216:.\mpu6050.c   **** // DMP_CFG_2 register
3217:.\mpu6050.c   **** 
3218:.\mpu6050.c   **** uint8_t MPU6050_getDMPConfig2() {
 11964              		.loc 1 3218 0
 11965              		.cfi_startproc
 11966 0000 80B5     		push	{r7, lr}
 11967              		.cfi_def_cfa_offset 8
 11968              		.cfi_offset 7, -8
 11969              		.cfi_offset 14, -4
 11970 0002 00AF     		add	r7, sp, #0
 11971              		.cfi_def_cfa_register 7
3219:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
 11972              		.loc 1 3219 0
 11973 0004 064B     		ldr	r3, .L939
 11974 0006 1A78     		ldrb	r2, [r3]
 11975 0008 064B     		ldr	r3, .L939+4
 11976 000a 101C     		mov	r0, r2
 11977 000c 7121     		mov	r1, #113
 11978 000e 1A1C     		mov	r2, r3
 11979 0010 FFF7FEFF 		bl	I2CReadByte
3220:.\mpu6050.c   ****     return buffer[0];
 11980              		.loc 1 3220 0
 11981 0014 034B     		ldr	r3, .L939+4
 11982 0016 1B78     		ldrb	r3, [r3]
3221:.\mpu6050.c   **** }
 11983              		.loc 1 3221 0
 11984 0018 181C     		mov	r0, r3
 11985 001a BD46     		mov	sp, r7
 11986              		@ sp needed
 11987 001c 80BD     		pop	{r7, pc}
 11988              	.L940:
 11989 001e C046     		.align	2
 11990              	.L939:
 11991 0020 00000000 		.word	devAddr
 11992 0024 00000000 		.word	buffer
 11993              		.cfi_endproc
 11994              	.LFE257:
 11995              		.size	MPU6050_getDMPConfig2, .-MPU6050_getDMPConfig2
 11996              		.section	.text.MPU6050_setDMPConfig2,"ax",%progbits
 11997              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 268


 11998              		.global	MPU6050_setDMPConfig2
 11999              		.code	16
 12000              		.thumb_func
 12001              		.type	MPU6050_setDMPConfig2, %function
 12002              	MPU6050_setDMPConfig2:
 12003              	.LFB258:
3222:.\mpu6050.c   **** void MPU6050_setDMPConfig2(uint8_t config) {
 12004              		.loc 1 3222 0
 12005              		.cfi_startproc
 12006 0000 80B5     		push	{r7, lr}
 12007              		.cfi_def_cfa_offset 8
 12008              		.cfi_offset 7, -8
 12009              		.cfi_offset 14, -4
 12010 0002 82B0     		sub	sp, sp, #8
 12011              		.cfi_def_cfa_offset 16
 12012 0004 00AF     		add	r7, sp, #0
 12013              		.cfi_def_cfa_register 7
 12014 0006 021C     		mov	r2, r0
 12015 0008 FB1D     		add	r3, r7, #7
 12016 000a 1A70     		strb	r2, [r3]
3223:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 12017              		.loc 1 3223 0
 12018 000c 054B     		ldr	r3, .L942
 12019 000e 1A78     		ldrb	r2, [r3]
 12020 0010 FB1D     		add	r3, r7, #7
 12021 0012 1B78     		ldrb	r3, [r3]
 12022 0014 101C     		mov	r0, r2
 12023 0016 7121     		mov	r1, #113
 12024 0018 1A1C     		mov	r2, r3
 12025 001a FFF7FEFF 		bl	I2CWriteByte
3224:.\mpu6050.c   **** }
 12026              		.loc 1 3224 0
 12027 001e BD46     		mov	sp, r7
 12028 0020 02B0     		add	sp, sp, #8
 12029              		@ sp needed
 12030 0022 80BD     		pop	{r7, pc}
 12031              	.L943:
 12032              		.align	2
 12033              	.L942:
 12034 0024 00000000 		.word	devAddr
 12035              		.cfi_endproc
 12036              	.LFE258:
 12037              		.size	MPU6050_setDMPConfig2, .-MPU6050_setDMPConfig2
 12038              		.section	.text.MPU6050_setup_compass,"ax",%progbits
 12039              		.align	2
 12040              		.global	MPU6050_setup_compass
 12041              		.code	16
 12042              		.thumb_func
 12043              		.type	MPU6050_setup_compass, %function
 12044              	MPU6050_setup_compass:
 12045              	.LFB259:
3225:.\mpu6050.c   **** 
3226:.\mpu6050.c   **** 
3227:.\mpu6050.c   **** #define BIT_I2C_READ 0x80
3228:.\mpu6050.c   **** #define AKM_REG_ST1         (0x02)
3229:.\mpu6050.c   **** #define AKM_REG_HXL			(0x03)
3230:.\mpu6050.c   **** #define BIT_SLAVE_EN        (0x80)
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 269


3231:.\mpu6050.c   **** #define AKM_REG_CNTL        (0x0A)
3232:.\mpu6050.c   **** #define SUPPORTS_AK89xx_HIGH_SENS   (0x00)
3233:.\mpu6050.c   **** #define AKM_SINGLE_MEASUREMENT  (0x01 | SUPPORTS_AK89xx_HIGH_SENS)
3234:.\mpu6050.c   **** #define BIT_I2C_MST_VDDIO   (0x80)
3235:.\mpu6050.c   **** /** Setup Magnetometer to write to external sensor data registers
3236:.\mpu6050.c   ****  * based on motion_driver-2.0 sample code in inv_mpu.c
3237:.\mpu6050.c   ****  */
3238:.\mpu6050.c   **** void MPU6050_setup_compass() {
 12046              		.loc 1 3238 0
 12047              		.cfi_startproc
 12048 0000 80B5     		push	{r7, lr}
 12049              		.cfi_def_cfa_offset 8
 12050              		.cfi_offset 7, -8
 12051              		.cfi_offset 14, -4
 12052 0002 00AF     		add	r7, sp, #0
 12053              		.cfi_def_cfa_register 7
3239:.\mpu6050.c   **** //todo make more general and use MPU6050 methods and defines
3240:.\mpu6050.c   **** 	MPU6050_setI2CBypassEnabled(false);
 12054              		.loc 1 3240 0
 12055 0004 0020     		mov	r0, #0
 12056 0006 FFF7FEFF 		bl	MPU6050_setI2CBypassEnabled
3241:.\mpu6050.c   **** 	//    mpu.setWaitForExternalSensorEnabled(true);
3242:.\mpu6050.c   **** 	//    mpu.setSlaveAddress(0,MPU6050_ADDRESS_COMPASS);
3243:.\mpu6050.c   **** 	//    mpu.setSlaveAddress(1,MPU6050_ADDRESS_COMPASS);
3244:.\mpu6050.c   **** 
3245:.\mpu6050.c   ****     /* Set up master mode, master clock, and ES bit. */
3246:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_MST_CTRL, 0x40);
 12057              		.loc 1 3246 0
 12058 000a 6820     		mov	r0, #104
 12059 000c 2421     		mov	r1, #36
 12060 000e 4022     		mov	r2, #64
 12061 0010 FFF7FEFF 		bl	I2CWriteByte
3247:.\mpu6050.c   ****     /* Slave 0 reads from AKM data registers. */
3248:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV0_ADDR, BIT_I2C_READ | MPU6050_ADDRESS_
 12062              		.loc 1 3248 0
 12063 0014 6820     		mov	r0, #104
 12064 0016 2521     		mov	r1, #37
 12065 0018 8C22     		mov	r2, #140
 12066 001a FFF7FEFF 		bl	I2CWriteByte
3249:.\mpu6050.c   ****     /* Compass reads start at this register, the first data register. */
3250:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV0_REG, AKM_REG_HXL);
 12067              		.loc 1 3250 0
 12068 001e 6820     		mov	r0, #104
 12069 0020 2621     		mov	r1, #38
 12070 0022 0322     		mov	r2, #3
 12071 0024 FFF7FEFF 		bl	I2CWriteByte
3251:.\mpu6050.c   ****     /* Enable slave 0, 6-byte reads. */
3252:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV0_CTRL, BIT_SLAVE_EN | 6);
 12072              		.loc 1 3252 0
 12073 0028 6820     		mov	r0, #104
 12074 002a 2721     		mov	r1, #39
 12075 002c 8622     		mov	r2, #134
 12076 002e FFF7FEFF 		bl	I2CWriteByte
3253:.\mpu6050.c   ****     /* Slave 1 changes AKM measurement mode. */
3254:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_ADDR, MPU6050_ADDRESS_COMPASS);
 12077              		.loc 1 3254 0
 12078 0032 6820     		mov	r0, #104
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 270


 12079 0034 2821     		mov	r1, #40
 12080 0036 0C22     		mov	r2, #12
 12081 0038 FFF7FEFF 		bl	I2CWriteByte
3255:.\mpu6050.c   ****     /* AKM measurement mode register. */
3256:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_REG, AKM_REG_CNTL);
 12082              		.loc 1 3256 0
 12083 003c 6820     		mov	r0, #104
 12084 003e 2921     		mov	r1, #41
 12085 0040 0A22     		mov	r2, #10
 12086 0042 FFF7FEFF 		bl	I2CWriteByte
3257:.\mpu6050.c   ****     /* Enable slave 1, 1-byte writes. */
3258:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_CTRL, BIT_SLAVE_EN | 1);
 12087              		.loc 1 3258 0
 12088 0046 6820     		mov	r0, #104
 12089 0048 2A21     		mov	r1, #42
 12090 004a 8122     		mov	r2, #129
 12091 004c FFF7FEFF 		bl	I2CWriteByte
3259:.\mpu6050.c   ****     /* Set slave 1 data. */
3260:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_DO,AKM_SINGLE_MEASUREMENT);
 12092              		.loc 1 3260 0
 12093 0050 6820     		mov	r0, #104
 12094 0052 6421     		mov	r1, #100
 12095 0054 0122     		mov	r2, #1
 12096 0056 FFF7FEFF 		bl	I2CWriteByte
3261:.\mpu6050.c   ****     /* Trigger slave 0 and slave 1 actions at each sample. */
3262:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_MST_DELAY_CTRL, 0x03);
 12097              		.loc 1 3262 0
 12098 005a 6820     		mov	r0, #104
 12099 005c 6721     		mov	r1, #103
 12100 005e 0322     		mov	r2, #3
 12101 0060 FFF7FEFF 		bl	I2CWriteByte
3263:.\mpu6050.c   **** #ifdef MPU9150
3264:.\mpu6050.c   ****     /* For the MPU9150, the auxiliary I2C bus needs to be set to VDD. */
3265:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_YG_OFFS_TC, BIT_I2C_MST_VDDIO);
3266:.\mpu6050.c   **** #endif
3267:.\mpu6050.c   ****     //enable I2C Master Mode
3268:.\mpu6050.c   ****     MPU6050_setI2CMasterModeEnabled(true);
 12102              		.loc 1 3268 0
 12103 0064 0120     		mov	r0, #1
 12104 0066 FFF7FEFF 		bl	MPU6050_setI2CMasterModeEnabled
3269:.\mpu6050.c   **** }
 12105              		.loc 1 3269 0
 12106 006a BD46     		mov	sp, r7
 12107              		@ sp needed
 12108 006c 80BD     		pop	{r7, pc}
 12109              		.cfi_endproc
 12110              	.LFE259:
 12111              		.size	MPU6050_setup_compass, .-MPU6050_setup_compass
 12112 006e C046     		.text
 12113              	.Letext0:
 12114              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 12115              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 12116              		.file 4 ".\\mpu6050.h"
 12117              		.section	.debug_info,"",%progbits
 12118              	.Ldebug_info0:
 12119 0000 A6210000 		.4byte	0x21a6
 12120 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 271


 12121 0006 00000000 		.4byte	.Ldebug_abbrev0
 12122 000a 04       		.byte	0x4
 12123 000b 01       		.uleb128 0x1
 12124 000c EA1B0000 		.4byte	.LASF312
 12125 0010 01       		.byte	0x1
 12126 0011 D5120000 		.4byte	.LASF313
 12127 0015 4E060000 		.4byte	.LASF314
 12128 0019 00000000 		.4byte	.Ldebug_ranges0+0
 12129 001d 00000000 		.4byte	0
 12130 0021 00000000 		.4byte	.Ldebug_line0
 12131 0025 02       		.uleb128 0x2
 12132 0026 85030000 		.4byte	.LASF0
 12133 002a 02       		.byte	0x2
 12134 002b 1B       		.byte	0x1b
 12135 002c 30000000 		.4byte	0x30
 12136 0030 03       		.uleb128 0x3
 12137 0031 01       		.byte	0x1
 12138 0032 06       		.byte	0x6
 12139 0033 75040000 		.4byte	.LASF2
 12140 0037 02       		.uleb128 0x2
 12141 0038 4D010000 		.4byte	.LASF1
 12142 003c 02       		.byte	0x2
 12143 003d 1D       		.byte	0x1d
 12144 003e 42000000 		.4byte	0x42
 12145 0042 03       		.uleb128 0x3
 12146 0043 01       		.byte	0x1
 12147 0044 08       		.byte	0x8
 12148 0045 59130000 		.4byte	.LASF3
 12149 0049 02       		.uleb128 0x2
 12150 004a 54090000 		.4byte	.LASF4
 12151 004e 02       		.byte	0x2
 12152 004f 29       		.byte	0x29
 12153 0050 54000000 		.4byte	0x54
 12154 0054 03       		.uleb128 0x3
 12155 0055 02       		.byte	0x2
 12156 0056 05       		.byte	0x5
 12157 0057 D8130000 		.4byte	.LASF5
 12158 005b 02       		.uleb128 0x2
 12159 005c A6160000 		.4byte	.LASF6
 12160 0060 02       		.byte	0x2
 12161 0061 2B       		.byte	0x2b
 12162 0062 66000000 		.4byte	0x66
 12163 0066 03       		.uleb128 0x3
 12164 0067 02       		.byte	0x2
 12165 0068 07       		.byte	0x7
 12166 0069 250C0000 		.4byte	.LASF7
 12167 006d 03       		.uleb128 0x3
 12168 006e 04       		.byte	0x4
 12169 006f 05       		.byte	0x5
 12170 0070 CA050000 		.4byte	.LASF8
 12171 0074 02       		.uleb128 0x2
 12172 0075 D7080000 		.4byte	.LASF9
 12173 0079 02       		.byte	0x2
 12174 007a 41       		.byte	0x41
 12175 007b 7F000000 		.4byte	0x7f
 12176 007f 03       		.uleb128 0x3
 12177 0080 04       		.byte	0x4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 272


 12178 0081 07       		.byte	0x7
 12179 0082 240B0000 		.4byte	.LASF10
 12180 0086 03       		.uleb128 0x3
 12181 0087 08       		.byte	0x8
 12182 0088 05       		.byte	0x5
 12183 0089 67040000 		.4byte	.LASF11
 12184 008d 03       		.uleb128 0x3
 12185 008e 08       		.byte	0x8
 12186 008f 07       		.byte	0x7
 12187 0090 9B020000 		.4byte	.LASF12
 12188 0094 04       		.uleb128 0x4
 12189 0095 04       		.byte	0x4
 12190 0096 05       		.byte	0x5
 12191 0097 696E7400 		.ascii	"int\000"
 12192 009b 03       		.uleb128 0x3
 12193 009c 04       		.byte	0x4
 12194 009d 07       		.byte	0x7
 12195 009e 550A0000 		.4byte	.LASF13
 12196 00a2 02       		.uleb128 0x2
 12197 00a3 A1180000 		.4byte	.LASF14
 12198 00a7 03       		.byte	0x3
 12199 00a8 14       		.byte	0x14
 12200 00a9 25000000 		.4byte	0x25
 12201 00ad 02       		.uleb128 0x2
 12202 00ae CF1A0000 		.4byte	.LASF15
 12203 00b2 03       		.byte	0x3
 12204 00b3 15       		.byte	0x15
 12205 00b4 37000000 		.4byte	0x37
 12206 00b8 02       		.uleb128 0x2
 12207 00b9 40040000 		.4byte	.LASF16
 12208 00bd 03       		.byte	0x3
 12209 00be 20       		.byte	0x20
 12210 00bf 49000000 		.4byte	0x49
 12211 00c3 02       		.uleb128 0x2
 12212 00c4 2D070000 		.4byte	.LASF17
 12213 00c8 03       		.byte	0x3
 12214 00c9 21       		.byte	0x21
 12215 00ca 5B000000 		.4byte	0x5b
 12216 00ce 02       		.uleb128 0x2
 12217 00cf B2150000 		.4byte	.LASF18
 12218 00d3 03       		.byte	0x3
 12219 00d4 2D       		.byte	0x2d
 12220 00d5 74000000 		.4byte	0x74
 12221 00d9 05       		.uleb128 0x5
 12222 00da 46020000 		.4byte	.LASF19
 12223 00de 01       		.byte	0x1
 12224 00df 2D       		.byte	0x2d
 12225 00e0 00000000 		.4byte	.LFB0
 12226 00e4 14000000 		.4byte	.LFE0-.LFB0
 12227 00e8 01       		.uleb128 0x1
 12228 00e9 9C       		.byte	0x9c
 12229 00ea 06       		.uleb128 0x6
 12230 00eb 9D1A0000 		.4byte	.LASF24
 12231 00ef 01       		.byte	0x1
 12232 00f0 37       		.byte	0x37
 12233 00f1 00000000 		.4byte	.LFB1
 12234 00f5 20000000 		.4byte	.LFE1-.LFB1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 273


 12235 00f9 01       		.uleb128 0x1
 12236 00fa 9C       		.byte	0x9c
 12237 00fb 0E010000 		.4byte	0x10e
 12238 00ff 07       		.uleb128 0x7
 12239 0100 CD0F0000 		.4byte	.LASF26
 12240 0104 01       		.byte	0x1
 12241 0105 37       		.byte	0x37
 12242 0106 AD000000 		.4byte	0xad
 12243 010a 02       		.uleb128 0x2
 12244 010b 91       		.byte	0x91
 12245 010c 77       		.sleb128 -9
 12246 010d 00       		.byte	0
 12247 010e 08       		.uleb128 0x8
 12248 010f 510C0000 		.4byte	.LASF20
 12249 0113 01       		.byte	0x1
 12250 0114 42       		.byte	0x42
 12251 0115 00000000 		.4byte	.LFB2
 12252 0119 20000000 		.4byte	.LFE2-.LFB2
 12253 011d 01       		.uleb128 0x1
 12254 011e 9C       		.byte	0x9c
 12255 011f 09       		.uleb128 0x9
 12256 0120 A2080000 		.4byte	.LASF22
 12257 0124 01       		.byte	0x1
 12258 0125 4D       		.byte	0x4d
 12259 0126 34010000 		.4byte	0x134
 12260 012a 00000000 		.4byte	.LFB3
 12261 012e 18000000 		.4byte	.LFE3-.LFB3
 12262 0132 01       		.uleb128 0x1
 12263 0133 9C       		.byte	0x9c
 12264 0134 03       		.uleb128 0x3
 12265 0135 01       		.byte	0x1
 12266 0136 02       		.byte	0x2
 12267 0137 53130000 		.4byte	.LASF21
 12268 013b 09       		.uleb128 0x9
 12269 013c 44000000 		.4byte	.LASF23
 12270 0140 01       		.byte	0x1
 12271 0141 59       		.byte	0x59
 12272 0142 AD000000 		.4byte	0xad
 12273 0146 00000000 		.4byte	.LFB4
 12274 014a 28000000 		.4byte	.LFE4-.LFB4
 12275 014e 01       		.uleb128 0x1
 12276 014f 9C       		.byte	0x9c
 12277 0150 0A       		.uleb128 0xa
 12278 0151 69050000 		.4byte	.LASF25
 12279 0155 01       		.byte	0x1
 12280 0156 63       		.byte	0x63
 12281 0157 00000000 		.4byte	.LFB5
 12282 015b 28000000 		.4byte	.LFE5-.LFB5
 12283 015f 01       		.uleb128 0x1
 12284 0160 9C       		.byte	0x9c
 12285 0161 74010000 		.4byte	0x174
 12286 0165 07       		.uleb128 0x7
 12287 0166 020C0000 		.4byte	.LASF27
 12288 016a 01       		.byte	0x1
 12289 016b 63       		.byte	0x63
 12290 016c AD000000 		.4byte	0xad
 12291 0170 02       		.uleb128 0x2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 274


 12292 0171 91       		.byte	0x91
 12293 0172 77       		.sleb128 -9
 12294 0173 00       		.byte	0
 12295 0174 09       		.uleb128 0x9
 12296 0175 49100000 		.4byte	.LASF28
 12297 0179 01       		.byte	0x1
 12298 017a 7E       		.byte	0x7e
 12299 017b AD000000 		.4byte	0xad
 12300 017f 00000000 		.4byte	.LFB6
 12301 0183 28000000 		.4byte	.LFE6-.LFB6
 12302 0187 01       		.uleb128 0x1
 12303 0188 9C       		.byte	0x9c
 12304 0189 0A       		.uleb128 0xa
 12305 018a 5D000000 		.4byte	.LASF29
 12306 018e 01       		.byte	0x1
 12307 018f 87       		.byte	0x87
 12308 0190 00000000 		.4byte	.LFB7
 12309 0194 28000000 		.4byte	.LFE7-.LFB7
 12310 0198 01       		.uleb128 0x1
 12311 0199 9C       		.byte	0x9c
 12312 019a AD010000 		.4byte	0x1ad
 12313 019e 07       		.uleb128 0x7
 12314 019f B5040000 		.4byte	.LASF30
 12315 01a3 01       		.byte	0x1
 12316 01a4 87       		.byte	0x87
 12317 01a5 AD000000 		.4byte	0xad
 12318 01a9 02       		.uleb128 0x2
 12319 01aa 91       		.byte	0x91
 12320 01ab 77       		.sleb128 -9
 12321 01ac 00       		.byte	0
 12322 01ad 09       		.uleb128 0x9
 12323 01ae 5A1A0000 		.4byte	.LASF31
 12324 01b2 01       		.byte	0x1
 12325 01b3 A8       		.byte	0xa8
 12326 01b4 AD000000 		.4byte	0xad
 12327 01b8 00000000 		.4byte	.LFB8
 12328 01bc 2C000000 		.4byte	.LFE8-.LFB8
 12329 01c0 01       		.uleb128 0x1
 12330 01c1 9C       		.byte	0x9c
 12331 01c2 0A       		.uleb128 0xa
 12332 01c3 D6060000 		.4byte	.LASF32
 12333 01c7 01       		.byte	0x1
 12334 01c8 B1       		.byte	0xb1
 12335 01c9 00000000 		.4byte	.LFB9
 12336 01cd 2C000000 		.4byte	.LFE9-.LFB9
 12337 01d1 01       		.uleb128 0x1
 12338 01d2 9C       		.byte	0x9c
 12339 01d3 E6010000 		.4byte	0x1e6
 12340 01d7 07       		.uleb128 0x7
 12341 01d8 0C1B0000 		.4byte	.LASF33
 12342 01dc 01       		.byte	0x1
 12343 01dd B1       		.byte	0xb1
 12344 01de AD000000 		.4byte	0xad
 12345 01e2 02       		.uleb128 0x2
 12346 01e3 91       		.byte	0x91
 12347 01e4 77       		.sleb128 -9
 12348 01e5 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 275


 12349 01e6 09       		.uleb128 0x9
 12350 01e7 B91B0000 		.4byte	.LASF34
 12351 01eb 01       		.byte	0x1
 12352 01ec D0       		.byte	0xd0
 12353 01ed AD000000 		.4byte	0xad
 12354 01f1 00000000 		.4byte	.LFB10
 12355 01f5 2C000000 		.4byte	.LFE10-.LFB10
 12356 01f9 01       		.uleb128 0x1
 12357 01fa 9C       		.byte	0x9c
 12358 01fb 0A       		.uleb128 0xa
 12359 01fc 880F0000 		.4byte	.LASF35
 12360 0200 01       		.byte	0x1
 12361 0201 DC       		.byte	0xdc
 12362 0202 00000000 		.4byte	.LFB11
 12363 0206 2C000000 		.4byte	.LFE11-.LFB11
 12364 020a 01       		.uleb128 0x1
 12365 020b 9C       		.byte	0x9c
 12366 020c 1F020000 		.4byte	0x21f
 12367 0210 07       		.uleb128 0x7
 12368 0211 4E160000 		.4byte	.LASF36
 12369 0215 01       		.byte	0x1
 12370 0216 DC       		.byte	0xdc
 12371 0217 AD000000 		.4byte	0xad
 12372 021b 02       		.uleb128 0x2
 12373 021c 91       		.byte	0x91
 12374 021d 77       		.sleb128 -9
 12375 021e 00       		.byte	0
 12376 021f 09       		.uleb128 0x9
 12377 0220 581D0000 		.4byte	.LASF37
 12378 0224 01       		.byte	0x1
 12379 0225 F3       		.byte	0xf3
 12380 0226 AD000000 		.4byte	0xad
 12381 022a 00000000 		.4byte	.LFB12
 12382 022e 2C000000 		.4byte	.LFE12-.LFB12
 12383 0232 01       		.uleb128 0x1
 12384 0233 9C       		.byte	0x9c
 12385 0234 0A       		.uleb128 0xa
 12386 0235 B4130000 		.4byte	.LASF38
 12387 0239 01       		.byte	0x1
 12388 023a FF       		.byte	0xff
 12389 023b 00000000 		.4byte	.LFB13
 12390 023f 2C000000 		.4byte	.LFE13-.LFB13
 12391 0243 01       		.uleb128 0x1
 12392 0244 9C       		.byte	0x9c
 12393 0245 58020000 		.4byte	0x258
 12394 0249 07       		.uleb128 0x7
 12395 024a 6D110000 		.4byte	.LASF39
 12396 024e 01       		.byte	0x1
 12397 024f FF       		.byte	0xff
 12398 0250 AD000000 		.4byte	0xad
 12399 0254 02       		.uleb128 0x2
 12400 0255 91       		.byte	0x91
 12401 0256 77       		.sleb128 -9
 12402 0257 00       		.byte	0
 12403 0258 0B       		.uleb128 0xb
 12404 0259 AB100000 		.4byte	.LASF40
 12405 025d 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 276


 12406 025e 0901     		.2byte	0x109
 12407 0260 34010000 		.4byte	0x134
 12408 0264 00000000 		.4byte	.LFB14
 12409 0268 2C000000 		.4byte	.LFE14-.LFB14
 12410 026c 01       		.uleb128 0x1
 12411 026d 9C       		.byte	0x9c
 12412 026e 0C       		.uleb128 0xc
 12413 026f 57140000 		.4byte	.LASF41
 12414 0273 01       		.byte	0x1
 12415 0274 1101     		.2byte	0x111
 12416 0276 00000000 		.4byte	.LFB15
 12417 027a 28000000 		.4byte	.LFE15-.LFB15
 12418 027e 01       		.uleb128 0x1
 12419 027f 9C       		.byte	0x9c
 12420 0280 94020000 		.4byte	0x294
 12421 0284 0D       		.uleb128 0xd
 12422 0285 EC150000 		.4byte	.LASF42
 12423 0289 01       		.byte	0x1
 12424 028a 1101     		.2byte	0x111
 12425 028c 34010000 		.4byte	0x134
 12426 0290 02       		.uleb128 0x2
 12427 0291 91       		.byte	0x91
 12428 0292 77       		.sleb128 -9
 12429 0293 00       		.byte	0
 12430 0294 0B       		.uleb128 0xb
 12431 0295 BA140000 		.4byte	.LASF43
 12432 0299 01       		.byte	0x1
 12433 029a 1801     		.2byte	0x118
 12434 029c 34010000 		.4byte	0x134
 12435 02a0 00000000 		.4byte	.LFB16
 12436 02a4 2C000000 		.4byte	.LFE16-.LFB16
 12437 02a8 01       		.uleb128 0x1
 12438 02a9 9C       		.byte	0x9c
 12439 02aa 0C       		.uleb128 0xc
 12440 02ab 44180000 		.4byte	.LASF44
 12441 02af 01       		.byte	0x1
 12442 02b0 2001     		.2byte	0x120
 12443 02b2 00000000 		.4byte	.LFB17
 12444 02b6 28000000 		.4byte	.LFE17-.LFB17
 12445 02ba 01       		.uleb128 0x1
 12446 02bb 9C       		.byte	0x9c
 12447 02bc D0020000 		.4byte	0x2d0
 12448 02c0 0D       		.uleb128 0xd
 12449 02c1 EC150000 		.4byte	.LASF42
 12450 02c5 01       		.byte	0x1
 12451 02c6 2001     		.2byte	0x120
 12452 02c8 34010000 		.4byte	0x134
 12453 02cc 02       		.uleb128 0x2
 12454 02cd 91       		.byte	0x91
 12455 02ce 77       		.sleb128 -9
 12456 02cf 00       		.byte	0
 12457 02d0 0B       		.uleb128 0xb
 12458 02d1 DB180000 		.4byte	.LASF45
 12459 02d5 01       		.byte	0x1
 12460 02d6 2701     		.2byte	0x127
 12461 02d8 34010000 		.4byte	0x134
 12462 02dc 00000000 		.4byte	.LFB18
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 277


 12463 02e0 2C000000 		.4byte	.LFE18-.LFB18
 12464 02e4 01       		.uleb128 0x1
 12465 02e5 9C       		.byte	0x9c
 12466 02e6 0C       		.uleb128 0xc
 12467 02e7 EE1D0000 		.4byte	.LASF46
 12468 02eb 01       		.byte	0x1
 12469 02ec 2F01     		.2byte	0x12f
 12470 02ee 00000000 		.4byte	.LFB19
 12471 02f2 28000000 		.4byte	.LFE19-.LFB19
 12472 02f6 01       		.uleb128 0x1
 12473 02f7 9C       		.byte	0x9c
 12474 02f8 0C030000 		.4byte	0x30c
 12475 02fc 0D       		.uleb128 0xd
 12476 02fd EC150000 		.4byte	.LASF42
 12477 0301 01       		.byte	0x1
 12478 0302 2F01     		.2byte	0x12f
 12479 0304 34010000 		.4byte	0x134
 12480 0308 02       		.uleb128 0x2
 12481 0309 91       		.byte	0x91
 12482 030a 77       		.sleb128 -9
 12483 030b 00       		.byte	0
 12484 030c 0B       		.uleb128 0xb
 12485 030d 34130000 		.4byte	.LASF47
 12486 0311 01       		.byte	0x1
 12487 0312 4301     		.2byte	0x143
 12488 0314 AD000000 		.4byte	0xad
 12489 0318 00000000 		.4byte	.LFB20
 12490 031c 2C000000 		.4byte	.LFE20-.LFB20
 12491 0320 01       		.uleb128 0x1
 12492 0321 9C       		.byte	0x9c
 12493 0322 0C       		.uleb128 0xc
 12494 0323 F3060000 		.4byte	.LASF48
 12495 0327 01       		.byte	0x1
 12496 0328 4B01     		.2byte	0x14b
 12497 032a 00000000 		.4byte	.LFB21
 12498 032e 2C000000 		.4byte	.LFE21-.LFB21
 12499 0332 01       		.uleb128 0x1
 12500 0333 9C       		.byte	0x9c
 12501 0334 48030000 		.4byte	0x348
 12502 0338 0D       		.uleb128 0xd
 12503 0339 6D110000 		.4byte	.LASF39
 12504 033d 01       		.byte	0x1
 12505 033e 4B01     		.2byte	0x14b
 12506 0340 AD000000 		.4byte	0xad
 12507 0344 02       		.uleb128 0x2
 12508 0345 91       		.byte	0x91
 12509 0346 77       		.sleb128 -9
 12510 0347 00       		.byte	0
 12511 0348 0B       		.uleb128 0xb
 12512 0349 6F190000 		.4byte	.LASF49
 12513 034d 01       		.byte	0x1
 12514 034e 7101     		.2byte	0x171
 12515 0350 AD000000 		.4byte	0xad
 12516 0354 00000000 		.4byte	.LFB22
 12517 0358 2C000000 		.4byte	.LFE22-.LFB22
 12518 035c 01       		.uleb128 0x1
 12519 035d 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 278


 12520 035e 0C       		.uleb128 0xc
 12521 035f 350E0000 		.4byte	.LASF50
 12522 0363 01       		.byte	0x1
 12523 0364 7B01     		.2byte	0x17b
 12524 0366 00000000 		.4byte	.LFB23
 12525 036a 2C000000 		.4byte	.LFE23-.LFB23
 12526 036e 01       		.uleb128 0x1
 12527 036f 9C       		.byte	0x9c
 12528 0370 84030000 		.4byte	0x384
 12529 0374 0D       		.uleb128 0xd
 12530 0375 63110000 		.4byte	.LASF51
 12531 0379 01       		.byte	0x1
 12532 037a 7B01     		.2byte	0x17b
 12533 037c AD000000 		.4byte	0xad
 12534 0380 02       		.uleb128 0x2
 12535 0381 91       		.byte	0x91
 12536 0382 77       		.sleb128 -9
 12537 0383 00       		.byte	0
 12538 0384 0B       		.uleb128 0xb
 12539 0385 771A0000 		.4byte	.LASF52
 12540 0389 01       		.byte	0x1
 12541 038a 9001     		.2byte	0x190
 12542 038c AD000000 		.4byte	0xad
 12543 0390 00000000 		.4byte	.LFB24
 12544 0394 28000000 		.4byte	.LFE24-.LFB24
 12545 0398 01       		.uleb128 0x1
 12546 0399 9C       		.byte	0x9c
 12547 039a 0C       		.uleb128 0xc
 12548 039b A30D0000 		.4byte	.LASF53
 12549 039f 01       		.byte	0x1
 12550 03a0 9901     		.2byte	0x199
 12551 03a2 00000000 		.4byte	.LFB25
 12552 03a6 28000000 		.4byte	.LFE25-.LFB25
 12553 03aa 01       		.uleb128 0x1
 12554 03ab 9C       		.byte	0x9c
 12555 03ac C0030000 		.4byte	0x3c0
 12556 03b0 0D       		.uleb128 0xd
 12557 03b1 2A130000 		.4byte	.LASF54
 12558 03b5 01       		.byte	0x1
 12559 03b6 9901     		.2byte	0x199
 12560 03b8 AD000000 		.4byte	0xad
 12561 03bc 02       		.uleb128 0x2
 12562 03bd 91       		.byte	0x91
 12563 03be 77       		.sleb128 -9
 12564 03bf 00       		.byte	0
 12565 03c0 0B       		.uleb128 0xb
 12566 03c1 7C180000 		.4byte	.LASF55
 12567 03c5 01       		.byte	0x1
 12568 03c6 B001     		.2byte	0x1b0
 12569 03c8 AD000000 		.4byte	0xad
 12570 03cc 00000000 		.4byte	.LFB26
 12571 03d0 28000000 		.4byte	.LFE26-.LFB26
 12572 03d4 01       		.uleb128 0x1
 12573 03d5 9C       		.byte	0x9c
 12574 03d6 0C       		.uleb128 0xc
 12575 03d7 550B0000 		.4byte	.LASF56
 12576 03db 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 279


 12577 03dc B901     		.2byte	0x1b9
 12578 03de 00000000 		.4byte	.LFB27
 12579 03e2 28000000 		.4byte	.LFE27-.LFB27
 12580 03e6 01       		.uleb128 0x1
 12581 03e7 9C       		.byte	0x9c
 12582 03e8 FC030000 		.4byte	0x3fc
 12583 03ec 0D       		.uleb128 0xd
 12584 03ed 74090000 		.4byte	.LASF57
 12585 03f1 01       		.byte	0x1
 12586 03f2 B901     		.2byte	0x1b9
 12587 03f4 AD000000 		.4byte	0xad
 12588 03f8 02       		.uleb128 0x2
 12589 03f9 91       		.byte	0x91
 12590 03fa 77       		.sleb128 -9
 12591 03fb 00       		.byte	0
 12592 03fc 0B       		.uleb128 0xb
 12593 03fd 2B0D0000 		.4byte	.LASF58
 12594 0401 01       		.byte	0x1
 12595 0402 D201     		.2byte	0x1d2
 12596 0404 AD000000 		.4byte	0xad
 12597 0408 00000000 		.4byte	.LFB28
 12598 040c 28000000 		.4byte	.LFE28-.LFB28
 12599 0410 01       		.uleb128 0x1
 12600 0411 9C       		.byte	0x9c
 12601 0412 0C       		.uleb128 0xc
 12602 0413 F5040000 		.4byte	.LASF59
 12603 0417 01       		.byte	0x1
 12604 0418 DB01     		.2byte	0x1db
 12605 041a 00000000 		.4byte	.LFB29
 12606 041e 28000000 		.4byte	.LFE29-.LFB29
 12607 0422 01       		.uleb128 0x1
 12608 0423 9C       		.byte	0x9c
 12609 0424 38040000 		.4byte	0x438
 12610 0428 0D       		.uleb128 0xd
 12611 0429 2A130000 		.4byte	.LASF54
 12612 042d 01       		.byte	0x1
 12613 042e DB01     		.2byte	0x1db
 12614 0430 AD000000 		.4byte	0xad
 12615 0434 02       		.uleb128 0x2
 12616 0435 91       		.byte	0x91
 12617 0436 77       		.sleb128 -9
 12618 0437 00       		.byte	0
 12619 0438 0B       		.uleb128 0xb
 12620 0439 6C1E0000 		.4byte	.LASF60
 12621 043d 01       		.byte	0x1
 12622 043e F001     		.2byte	0x1f0
 12623 0440 AD000000 		.4byte	0xad
 12624 0444 00000000 		.4byte	.LFB30
 12625 0448 28000000 		.4byte	.LFE30-.LFB30
 12626 044c 01       		.uleb128 0x1
 12627 044d 9C       		.byte	0x9c
 12628 044e 0C       		.uleb128 0xc
 12629 044f B3060000 		.4byte	.LASF61
 12630 0453 01       		.byte	0x1
 12631 0454 F901     		.2byte	0x1f9
 12632 0456 00000000 		.4byte	.LFB31
 12633 045a 28000000 		.4byte	.LFE31-.LFB31
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 280


 12634 045e 01       		.uleb128 0x1
 12635 045f 9C       		.byte	0x9c
 12636 0460 74040000 		.4byte	0x474
 12637 0464 0D       		.uleb128 0xd
 12638 0465 74090000 		.4byte	.LASF57
 12639 0469 01       		.byte	0x1
 12640 046a F901     		.2byte	0x1f9
 12641 046c AD000000 		.4byte	0xad
 12642 0470 02       		.uleb128 0x2
 12643 0471 91       		.byte	0x91
 12644 0472 77       		.sleb128 -9
 12645 0473 00       		.byte	0
 12646 0474 0B       		.uleb128 0xb
 12647 0475 FA130000 		.4byte	.LASF62
 12648 0479 01       		.byte	0x1
 12649 047a 1802     		.2byte	0x218
 12650 047c AD000000 		.4byte	0xad
 12651 0480 00000000 		.4byte	.LFB32
 12652 0484 28000000 		.4byte	.LFE32-.LFB32
 12653 0488 01       		.uleb128 0x1
 12654 0489 9C       		.byte	0x9c
 12655 048a 0C       		.uleb128 0xc
 12656 048b 7D090000 		.4byte	.LASF63
 12657 048f 01       		.byte	0x1
 12658 0490 2102     		.2byte	0x221
 12659 0492 00000000 		.4byte	.LFB33
 12660 0496 28000000 		.4byte	.LFE33-.LFB33
 12661 049a 01       		.uleb128 0x1
 12662 049b 9C       		.byte	0x9c
 12663 049c B0040000 		.4byte	0x4b0
 12664 04a0 0D       		.uleb128 0xd
 12665 04a1 2A130000 		.4byte	.LASF54
 12666 04a5 01       		.byte	0x1
 12667 04a6 2102     		.2byte	0x221
 12668 04a8 AD000000 		.4byte	0xad
 12669 04ac 02       		.uleb128 0x2
 12670 04ad 91       		.byte	0x91
 12671 04ae 77       		.sleb128 -9
 12672 04af 00       		.byte	0
 12673 04b0 0B       		.uleb128 0xb
 12674 04b1 43120000 		.4byte	.LASF64
 12675 04b5 01       		.byte	0x1
 12676 04b6 3702     		.2byte	0x237
 12677 04b8 AD000000 		.4byte	0xad
 12678 04bc 00000000 		.4byte	.LFB34
 12679 04c0 28000000 		.4byte	.LFE34-.LFB34
 12680 04c4 01       		.uleb128 0x1
 12681 04c5 9C       		.byte	0x9c
 12682 04c6 0C       		.uleb128 0xc
 12683 04c7 8D1C0000 		.4byte	.LASF65
 12684 04cb 01       		.byte	0x1
 12685 04cc 4002     		.2byte	0x240
 12686 04ce 00000000 		.4byte	.LFB35
 12687 04d2 28000000 		.4byte	.LFE35-.LFB35
 12688 04d6 01       		.uleb128 0x1
 12689 04d7 9C       		.byte	0x9c
 12690 04d8 EC040000 		.4byte	0x4ec
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 281


 12691 04dc 0D       		.uleb128 0xd
 12692 04dd 74090000 		.4byte	.LASF57
 12693 04e1 01       		.byte	0x1
 12694 04e2 4002     		.2byte	0x240
 12695 04e4 AD000000 		.4byte	0xad
 12696 04e8 02       		.uleb128 0x2
 12697 04e9 91       		.byte	0x91
 12698 04ea 77       		.sleb128 -9
 12699 04eb 00       		.byte	0
 12700 04ec 0B       		.uleb128 0xb
 12701 04ed B2020000 		.4byte	.LASF66
 12702 04f1 01       		.byte	0x1
 12703 04f2 4C02     		.2byte	0x24c
 12704 04f4 34010000 		.4byte	0x134
 12705 04f8 00000000 		.4byte	.LFB36
 12706 04fc 2C000000 		.4byte	.LFE36-.LFB36
 12707 0500 01       		.uleb128 0x1
 12708 0501 9C       		.byte	0x9c
 12709 0502 0C       		.uleb128 0xc
 12710 0503 DD170000 		.4byte	.LASF67
 12711 0507 01       		.byte	0x1
 12712 0508 5502     		.2byte	0x255
 12713 050a 00000000 		.4byte	.LFB37
 12714 050e 28000000 		.4byte	.LFE37-.LFB37
 12715 0512 01       		.uleb128 0x1
 12716 0513 9C       		.byte	0x9c
 12717 0514 28050000 		.4byte	0x528
 12718 0518 0D       		.uleb128 0xd
 12719 0519 EC150000 		.4byte	.LASF42
 12720 051d 01       		.byte	0x1
 12721 051e 5502     		.2byte	0x255
 12722 0520 34010000 		.4byte	0x134
 12723 0524 02       		.uleb128 0x2
 12724 0525 91       		.byte	0x91
 12725 0526 77       		.sleb128 -9
 12726 0527 00       		.byte	0
 12727 0528 0B       		.uleb128 0xb
 12728 0529 F4150000 		.4byte	.LASF68
 12729 052d 01       		.byte	0x1
 12730 052e 5E02     		.2byte	0x25e
 12731 0530 34010000 		.4byte	0x134
 12732 0534 00000000 		.4byte	.LFB38
 12733 0538 2C000000 		.4byte	.LFE38-.LFB38
 12734 053c 01       		.uleb128 0x1
 12735 053d 9C       		.byte	0x9c
 12736 053e 0C       		.uleb128 0xc
 12737 053f 27120000 		.4byte	.LASF69
 12738 0543 01       		.byte	0x1
 12739 0544 6702     		.2byte	0x267
 12740 0546 00000000 		.4byte	.LFB39
 12741 054a 28000000 		.4byte	.LFE39-.LFB39
 12742 054e 01       		.uleb128 0x1
 12743 054f 9C       		.byte	0x9c
 12744 0550 64050000 		.4byte	0x564
 12745 0554 0D       		.uleb128 0xd
 12746 0555 EC150000 		.4byte	.LASF42
 12747 0559 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 282


 12748 055a 6702     		.2byte	0x267
 12749 055c 34010000 		.4byte	0x134
 12750 0560 02       		.uleb128 0x2
 12751 0561 91       		.byte	0x91
 12752 0562 77       		.sleb128 -9
 12753 0563 00       		.byte	0
 12754 0564 0B       		.uleb128 0xb
 12755 0565 7A0B0000 		.4byte	.LASF70
 12756 0569 01       		.byte	0x1
 12757 056a 7002     		.2byte	0x270
 12758 056c 34010000 		.4byte	0x134
 12759 0570 00000000 		.4byte	.LFB40
 12760 0574 2C000000 		.4byte	.LFE40-.LFB40
 12761 0578 01       		.uleb128 0x1
 12762 0579 9C       		.byte	0x9c
 12763 057a 0C       		.uleb128 0xc
 12764 057b 08020000 		.4byte	.LASF71
 12765 057f 01       		.byte	0x1
 12766 0580 7902     		.2byte	0x279
 12767 0582 00000000 		.4byte	.LFB41
 12768 0586 28000000 		.4byte	.LFE41-.LFB41
 12769 058a 01       		.uleb128 0x1
 12770 058b 9C       		.byte	0x9c
 12771 058c A0050000 		.4byte	0x5a0
 12772 0590 0D       		.uleb128 0xd
 12773 0591 EC150000 		.4byte	.LASF42
 12774 0595 01       		.byte	0x1
 12775 0596 7902     		.2byte	0x279
 12776 0598 34010000 		.4byte	0x134
 12777 059c 02       		.uleb128 0x2
 12778 059d 91       		.byte	0x91
 12779 059e 77       		.sleb128 -9
 12780 059f 00       		.byte	0
 12781 05a0 0B       		.uleb128 0xb
 12782 05a1 0C040000 		.4byte	.LASF72
 12783 05a5 01       		.byte	0x1
 12784 05a6 8202     		.2byte	0x282
 12785 05a8 34010000 		.4byte	0x134
 12786 05ac 00000000 		.4byte	.LFB42
 12787 05b0 2C000000 		.4byte	.LFE42-.LFB42
 12788 05b4 01       		.uleb128 0x1
 12789 05b5 9C       		.byte	0x9c
 12790 05b6 0C       		.uleb128 0xc
 12791 05b7 9A050000 		.4byte	.LASF73
 12792 05bb 01       		.byte	0x1
 12793 05bc 8B02     		.2byte	0x28b
 12794 05be 00000000 		.4byte	.LFB43
 12795 05c2 28000000 		.4byte	.LFE43-.LFB43
 12796 05c6 01       		.uleb128 0x1
 12797 05c7 9C       		.byte	0x9c
 12798 05c8 DC050000 		.4byte	0x5dc
 12799 05cc 0D       		.uleb128 0xd
 12800 05cd EC150000 		.4byte	.LASF42
 12801 05d1 01       		.byte	0x1
 12802 05d2 8B02     		.2byte	0x28b
 12803 05d4 34010000 		.4byte	0x134
 12804 05d8 02       		.uleb128 0x2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 283


 12805 05d9 91       		.byte	0x91
 12806 05da 77       		.sleb128 -9
 12807 05db 00       		.byte	0
 12808 05dc 0B       		.uleb128 0xb
 12809 05dd 1F0A0000 		.4byte	.LASF74
 12810 05e1 01       		.byte	0x1
 12811 05e2 9502     		.2byte	0x295
 12812 05e4 34010000 		.4byte	0x134
 12813 05e8 00000000 		.4byte	.LFB44
 12814 05ec 2C000000 		.4byte	.LFE44-.LFB44
 12815 05f0 01       		.uleb128 0x1
 12816 05f1 9C       		.byte	0x9c
 12817 05f2 0C       		.uleb128 0xc
 12818 05f3 83000000 		.4byte	.LASF75
 12819 05f7 01       		.byte	0x1
 12820 05f8 9E02     		.2byte	0x29e
 12821 05fa 00000000 		.4byte	.LFB45
 12822 05fe 28000000 		.4byte	.LFE45-.LFB45
 12823 0602 01       		.uleb128 0x1
 12824 0603 9C       		.byte	0x9c
 12825 0604 18060000 		.4byte	0x618
 12826 0608 0D       		.uleb128 0xd
 12827 0609 EC150000 		.4byte	.LASF42
 12828 060d 01       		.byte	0x1
 12829 060e 9E02     		.2byte	0x29e
 12830 0610 34010000 		.4byte	0x134
 12831 0614 02       		.uleb128 0x2
 12832 0615 91       		.byte	0x91
 12833 0616 77       		.sleb128 -9
 12834 0617 00       		.byte	0
 12835 0618 0B       		.uleb128 0xb
 12836 0619 D6030000 		.4byte	.LASF76
 12837 061d 01       		.byte	0x1
 12838 061e A702     		.2byte	0x2a7
 12839 0620 34010000 		.4byte	0x134
 12840 0624 00000000 		.4byte	.LFB46
 12841 0628 2C000000 		.4byte	.LFE46-.LFB46
 12842 062c 01       		.uleb128 0x1
 12843 062d 9C       		.byte	0x9c
 12844 062e 0C       		.uleb128 0xc
 12845 062f D8040000 		.4byte	.LASF77
 12846 0633 01       		.byte	0x1
 12847 0634 B002     		.2byte	0x2b0
 12848 0636 00000000 		.4byte	.LFB47
 12849 063a 28000000 		.4byte	.LFE47-.LFB47
 12850 063e 01       		.uleb128 0x1
 12851 063f 9C       		.byte	0x9c
 12852 0640 54060000 		.4byte	0x654
 12853 0644 0D       		.uleb128 0xd
 12854 0645 EC150000 		.4byte	.LASF42
 12855 0649 01       		.byte	0x1
 12856 064a B002     		.2byte	0x2b0
 12857 064c 34010000 		.4byte	0x134
 12858 0650 02       		.uleb128 0x2
 12859 0651 91       		.byte	0x91
 12860 0652 77       		.sleb128 -9
 12861 0653 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 284


 12862 0654 0B       		.uleb128 0xb
 12863 0655 36070000 		.4byte	.LASF78
 12864 0659 01       		.byte	0x1
 12865 065a B902     		.2byte	0x2b9
 12866 065c 34010000 		.4byte	0x134
 12867 0660 00000000 		.4byte	.LFB48
 12868 0664 2C000000 		.4byte	.LFE48-.LFB48
 12869 0668 01       		.uleb128 0x1
 12870 0669 9C       		.byte	0x9c
 12871 066a 0C       		.uleb128 0xc
 12872 066b 4F170000 		.4byte	.LASF79
 12873 066f 01       		.byte	0x1
 12874 0670 C202     		.2byte	0x2c2
 12875 0672 00000000 		.4byte	.LFB49
 12876 0676 28000000 		.4byte	.LFE49-.LFB49
 12877 067a 01       		.uleb128 0x1
 12878 067b 9C       		.byte	0x9c
 12879 067c 90060000 		.4byte	0x690
 12880 0680 0D       		.uleb128 0xd
 12881 0681 EC150000 		.4byte	.LASF42
 12882 0685 01       		.byte	0x1
 12883 0686 C202     		.2byte	0x2c2
 12884 0688 34010000 		.4byte	0x134
 12885 068c 02       		.uleb128 0x2
 12886 068d 91       		.byte	0x91
 12887 068e 77       		.sleb128 -9
 12888 068f 00       		.byte	0
 12889 0690 0B       		.uleb128 0xb
 12890 0691 640C0000 		.4byte	.LASF80
 12891 0695 01       		.byte	0x1
 12892 0696 CB02     		.2byte	0x2cb
 12893 0698 34010000 		.4byte	0x134
 12894 069c 00000000 		.4byte	.LFB50
 12895 06a0 2C000000 		.4byte	.LFE50-.LFB50
 12896 06a4 01       		.uleb128 0x1
 12897 06a5 9C       		.byte	0x9c
 12898 06a6 0C       		.uleb128 0xc
 12899 06a7 95150000 		.4byte	.LASF81
 12900 06ab 01       		.byte	0x1
 12901 06ac D402     		.2byte	0x2d4
 12902 06ae 00000000 		.4byte	.LFB51
 12903 06b2 28000000 		.4byte	.LFE51-.LFB51
 12904 06b6 01       		.uleb128 0x1
 12905 06b7 9C       		.byte	0x9c
 12906 06b8 CC060000 		.4byte	0x6cc
 12907 06bc 0D       		.uleb128 0xd
 12908 06bd EC150000 		.4byte	.LASF42
 12909 06c1 01       		.byte	0x1
 12910 06c2 D402     		.2byte	0x2d4
 12911 06c4 34010000 		.4byte	0x134
 12912 06c8 02       		.uleb128 0x2
 12913 06c9 91       		.byte	0x91
 12914 06ca 77       		.sleb128 -9
 12915 06cb 00       		.byte	0
 12916 06cc 0B       		.uleb128 0xb
 12917 06cd 83190000 		.4byte	.LASF82
 12918 06d1 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 285


 12919 06d2 E902     		.2byte	0x2e9
 12920 06d4 34010000 		.4byte	0x134
 12921 06d8 00000000 		.4byte	.LFB52
 12922 06dc 2C000000 		.4byte	.LFE52-.LFB52
 12923 06e0 01       		.uleb128 0x1
 12924 06e1 9C       		.byte	0x9c
 12925 06e2 0C       		.uleb128 0xc
 12926 06e3 B8030000 		.4byte	.LASF83
 12927 06e7 01       		.byte	0x1
 12928 06e8 F202     		.2byte	0x2f2
 12929 06ea 00000000 		.4byte	.LFB53
 12930 06ee 28000000 		.4byte	.LFE53-.LFB53
 12931 06f2 01       		.uleb128 0x1
 12932 06f3 9C       		.byte	0x9c
 12933 06f4 08070000 		.4byte	0x708
 12934 06f8 0D       		.uleb128 0xd
 12935 06f9 EC150000 		.4byte	.LASF42
 12936 06fd 01       		.byte	0x1
 12937 06fe F202     		.2byte	0x2f2
 12938 0700 34010000 		.4byte	0x134
 12939 0704 02       		.uleb128 0x2
 12940 0705 91       		.byte	0x91
 12941 0706 77       		.sleb128 -9
 12942 0707 00       		.byte	0
 12943 0708 0B       		.uleb128 0xb
 12944 0709 73020000 		.4byte	.LASF84
 12945 070d 01       		.byte	0x1
 12946 070e 0003     		.2byte	0x300
 12947 0710 34010000 		.4byte	0x134
 12948 0714 00000000 		.4byte	.LFB54
 12949 0718 2C000000 		.4byte	.LFE54-.LFB54
 12950 071c 01       		.uleb128 0x1
 12951 071d 9C       		.byte	0x9c
 12952 071e 0C       		.uleb128 0xc
 12953 071f E60C0000 		.4byte	.LASF85
 12954 0723 01       		.byte	0x1
 12955 0724 0903     		.2byte	0x309
 12956 0726 00000000 		.4byte	.LFB55
 12957 072a 28000000 		.4byte	.LFE55-.LFB55
 12958 072e 01       		.uleb128 0x1
 12959 072f 9C       		.byte	0x9c
 12960 0730 44070000 		.4byte	0x744
 12961 0734 0D       		.uleb128 0xd
 12962 0735 EC150000 		.4byte	.LASF42
 12963 0739 01       		.byte	0x1
 12964 073a 0903     		.2byte	0x309
 12965 073c 34010000 		.4byte	0x134
 12966 0740 02       		.uleb128 0x2
 12967 0741 91       		.byte	0x91
 12968 0742 77       		.sleb128 -9
 12969 0743 00       		.byte	0
 12970 0744 0B       		.uleb128 0xb
 12971 0745 370F0000 		.4byte	.LASF86
 12972 0749 01       		.byte	0x1
 12973 074a 1203     		.2byte	0x312
 12974 074c 34010000 		.4byte	0x134
 12975 0750 00000000 		.4byte	.LFB56
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 286


 12976 0754 2C000000 		.4byte	.LFE56-.LFB56
 12977 0758 01       		.uleb128 0x1
 12978 0759 9C       		.byte	0x9c
 12979 075a 0C       		.uleb128 0xc
 12980 075b EE0F0000 		.4byte	.LASF87
 12981 075f 01       		.byte	0x1
 12982 0760 1B03     		.2byte	0x31b
 12983 0762 00000000 		.4byte	.LFB57
 12984 0766 28000000 		.4byte	.LFE57-.LFB57
 12985 076a 01       		.uleb128 0x1
 12986 076b 9C       		.byte	0x9c
 12987 076c 80070000 		.4byte	0x780
 12988 0770 0D       		.uleb128 0xd
 12989 0771 EC150000 		.4byte	.LASF42
 12990 0775 01       		.byte	0x1
 12991 0776 1B03     		.2byte	0x31b
 12992 0778 34010000 		.4byte	0x134
 12993 077c 02       		.uleb128 0x2
 12994 077d 91       		.byte	0x91
 12995 077e 77       		.sleb128 -9
 12996 077f 00       		.byte	0
 12997 0780 0B       		.uleb128 0xb
 12998 0781 081E0000 		.4byte	.LASF88
 12999 0785 01       		.byte	0x1
 13000 0786 2803     		.2byte	0x328
 13001 0788 34010000 		.4byte	0x134
 13002 078c 00000000 		.4byte	.LFB58
 13003 0790 2C000000 		.4byte	.LFE58-.LFB58
 13004 0794 01       		.uleb128 0x1
 13005 0795 9C       		.byte	0x9c
 13006 0796 0C       		.uleb128 0xc
 13007 0797 FF120000 		.4byte	.LASF89
 13008 079b 01       		.byte	0x1
 13009 079c 3103     		.2byte	0x331
 13010 079e 00000000 		.4byte	.LFB59
 13011 07a2 28000000 		.4byte	.LFE59-.LFB59
 13012 07a6 01       		.uleb128 0x1
 13013 07a7 9C       		.byte	0x9c
 13014 07a8 BC070000 		.4byte	0x7bc
 13015 07ac 0D       		.uleb128 0xd
 13016 07ad EC150000 		.4byte	.LASF42
 13017 07b1 01       		.byte	0x1
 13018 07b2 3103     		.2byte	0x331
 13019 07b4 34010000 		.4byte	0x134
 13020 07b8 02       		.uleb128 0x2
 13021 07b9 91       		.byte	0x91
 13022 07ba 77       		.sleb128 -9
 13023 07bb 00       		.byte	0
 13024 07bc 0B       		.uleb128 0xb
 13025 07bd 2D100000 		.4byte	.LASF90
 13026 07c1 01       		.byte	0x1
 13027 07c2 5103     		.2byte	0x351
 13028 07c4 AD000000 		.4byte	0xad
 13029 07c8 00000000 		.4byte	.LFB60
 13030 07cc 2C000000 		.4byte	.LFE60-.LFB60
 13031 07d0 01       		.uleb128 0x1
 13032 07d1 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 287


 13033 07d2 0C       		.uleb128 0xc
 13034 07d3 A7070000 		.4byte	.LASF91
 13035 07d7 01       		.byte	0x1
 13036 07d8 5903     		.2byte	0x359
 13037 07da 00000000 		.4byte	.LFB61
 13038 07de 2C000000 		.4byte	.LFE61-.LFB61
 13039 07e2 01       		.uleb128 0x1
 13040 07e3 9C       		.byte	0x9c
 13041 07e4 F8070000 		.4byte	0x7f8
 13042 07e8 0D       		.uleb128 0xd
 13043 07e9 E41B0000 		.4byte	.LASF92
 13044 07ed 01       		.byte	0x1
 13045 07ee 5903     		.2byte	0x359
 13046 07f0 AD000000 		.4byte	0xad
 13047 07f4 02       		.uleb128 0x2
 13048 07f5 91       		.byte	0x91
 13049 07f6 77       		.sleb128 -9
 13050 07f7 00       		.byte	0
 13051 07f8 0E       		.uleb128 0xe
 13052 07f9 2C000000 		.4byte	.LASF94
 13053 07fd 01       		.byte	0x1
 13054 07fe 8803     		.2byte	0x388
 13055 0800 AD000000 		.4byte	0xad
 13056 0804 00000000 		.4byte	.LFB62
 13057 0808 4C000000 		.4byte	.LFE62-.LFB62
 13058 080c 01       		.uleb128 0x1
 13059 080d 9C       		.byte	0x9c
 13060 080e 22080000 		.4byte	0x822
 13061 0812 0F       		.uleb128 0xf
 13062 0813 6E756D00 		.ascii	"num\000"
 13063 0817 01       		.byte	0x1
 13064 0818 8803     		.2byte	0x388
 13065 081a AD000000 		.4byte	0xad
 13066 081e 02       		.uleb128 0x2
 13067 081f 91       		.byte	0x91
 13068 0820 77       		.sleb128 -9
 13069 0821 00       		.byte	0
 13070 0822 0C       		.uleb128 0xc
 13071 0823 82050000 		.4byte	.LASF93
 13072 0827 01       		.byte	0x1
 13073 0828 9303     		.2byte	0x393
 13074 082a 00000000 		.4byte	.LFB63
 13075 082e 48000000 		.4byte	.LFE63-.LFB63
 13076 0832 01       		.uleb128 0x1
 13077 0833 9C       		.byte	0x9c
 13078 0834 57080000 		.4byte	0x857
 13079 0838 0F       		.uleb128 0xf
 13080 0839 6E756D00 		.ascii	"num\000"
 13081 083d 01       		.byte	0x1
 13082 083e 9303     		.2byte	0x393
 13083 0840 AD000000 		.4byte	0xad
 13084 0844 02       		.uleb128 0x2
 13085 0845 91       		.byte	0x91
 13086 0846 77       		.sleb128 -9
 13087 0847 0D       		.uleb128 0xd
 13088 0848 CD0F0000 		.4byte	.LASF26
 13089 084c 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 288


 13090 084d 9303     		.2byte	0x393
 13091 084f AD000000 		.4byte	0xad
 13092 0853 02       		.uleb128 0x2
 13093 0854 91       		.byte	0x91
 13094 0855 76       		.sleb128 -10
 13095 0856 00       		.byte	0
 13096 0857 0E       		.uleb128 0xe
 13097 0858 F8170000 		.4byte	.LASF95
 13098 085c 01       		.byte	0x1
 13099 085d A203     		.2byte	0x3a2
 13100 085f AD000000 		.4byte	0xad
 13101 0863 00000000 		.4byte	.LFB64
 13102 0867 4C000000 		.4byte	.LFE64-.LFB64
 13103 086b 01       		.uleb128 0x1
 13104 086c 9C       		.byte	0x9c
 13105 086d 81080000 		.4byte	0x881
 13106 0871 0F       		.uleb128 0xf
 13107 0872 6E756D00 		.ascii	"num\000"
 13108 0876 01       		.byte	0x1
 13109 0877 A203     		.2byte	0x3a2
 13110 0879 AD000000 		.4byte	0xad
 13111 087d 02       		.uleb128 0x2
 13112 087e 91       		.byte	0x91
 13113 087f 77       		.sleb128 -9
 13114 0880 00       		.byte	0
 13115 0881 0C       		.uleb128 0xc
 13116 0882 AA1D0000 		.4byte	.LASF96
 13117 0886 01       		.byte	0x1
 13118 0887 AD03     		.2byte	0x3ad
 13119 0889 00000000 		.4byte	.LFB65
 13120 088d 48000000 		.4byte	.LFE65-.LFB65
 13121 0891 01       		.uleb128 0x1
 13122 0892 9C       		.byte	0x9c
 13123 0893 B6080000 		.4byte	0x8b6
 13124 0897 0F       		.uleb128 0xf
 13125 0898 6E756D00 		.ascii	"num\000"
 13126 089c 01       		.byte	0x1
 13127 089d AD03     		.2byte	0x3ad
 13128 089f AD000000 		.4byte	0xad
 13129 08a3 02       		.uleb128 0x2
 13130 08a4 91       		.byte	0x91
 13131 08a5 77       		.sleb128 -9
 13132 08a6 0F       		.uleb128 0xf
 13133 08a7 72656700 		.ascii	"reg\000"
 13134 08ab 01       		.byte	0x1
 13135 08ac AD03     		.2byte	0x3ad
 13136 08ae AD000000 		.4byte	0xad
 13137 08b2 02       		.uleb128 0x2
 13138 08b3 91       		.byte	0x91
 13139 08b4 76       		.sleb128 -10
 13140 08b5 00       		.byte	0
 13141 08b6 0E       		.uleb128 0xe
 13142 08b7 00170000 		.4byte	.LASF97
 13143 08bb 01       		.byte	0x1
 13144 08bc B803     		.2byte	0x3b8
 13145 08be 34010000 		.4byte	0x134
 13146 08c2 00000000 		.4byte	.LFB66
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 289


 13147 08c6 54000000 		.4byte	.LFE66-.LFB66
 13148 08ca 01       		.uleb128 0x1
 13149 08cb 9C       		.byte	0x9c
 13150 08cc E0080000 		.4byte	0x8e0
 13151 08d0 0F       		.uleb128 0xf
 13152 08d1 6E756D00 		.ascii	"num\000"
 13153 08d5 01       		.byte	0x1
 13154 08d6 B803     		.2byte	0x3b8
 13155 08d8 AD000000 		.4byte	0xad
 13156 08dc 02       		.uleb128 0x2
 13157 08dd 91       		.byte	0x91
 13158 08de 77       		.sleb128 -9
 13159 08df 00       		.byte	0
 13160 08e0 0C       		.uleb128 0xc
 13161 08e1 CE0C0000 		.4byte	.LASF98
 13162 08e5 01       		.byte	0x1
 13163 08e6 C303     		.2byte	0x3c3
 13164 08e8 00000000 		.4byte	.LFB67
 13165 08ec 48000000 		.4byte	.LFE67-.LFB67
 13166 08f0 01       		.uleb128 0x1
 13167 08f1 9C       		.byte	0x9c
 13168 08f2 15090000 		.4byte	0x915
 13169 08f6 0F       		.uleb128 0xf
 13170 08f7 6E756D00 		.ascii	"num\000"
 13171 08fb 01       		.byte	0x1
 13172 08fc C303     		.2byte	0x3c3
 13173 08fe AD000000 		.4byte	0xad
 13174 0902 02       		.uleb128 0x2
 13175 0903 91       		.byte	0x91
 13176 0904 77       		.sleb128 -9
 13177 0905 0D       		.uleb128 0xd
 13178 0906 EC150000 		.4byte	.LASF42
 13179 090a 01       		.byte	0x1
 13180 090b C303     		.2byte	0x3c3
 13181 090d 34010000 		.4byte	0x134
 13182 0911 02       		.uleb128 0x2
 13183 0912 91       		.byte	0x91
 13184 0913 76       		.sleb128 -10
 13185 0914 00       		.byte	0
 13186 0915 0E       		.uleb128 0xe
 13187 0916 0C030000 		.4byte	.LASF99
 13188 091a 01       		.byte	0x1
 13189 091b D203     		.2byte	0x3d2
 13190 091d 34010000 		.4byte	0x134
 13191 0921 00000000 		.4byte	.LFB68
 13192 0925 54000000 		.4byte	.LFE68-.LFB68
 13193 0929 01       		.uleb128 0x1
 13194 092a 9C       		.byte	0x9c
 13195 092b 3F090000 		.4byte	0x93f
 13196 092f 0F       		.uleb128 0xf
 13197 0930 6E756D00 		.ascii	"num\000"
 13198 0934 01       		.byte	0x1
 13199 0935 D203     		.2byte	0x3d2
 13200 0937 AD000000 		.4byte	0xad
 13201 093b 02       		.uleb128 0x2
 13202 093c 91       		.byte	0x91
 13203 093d 77       		.sleb128 -9
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 290


 13204 093e 00       		.byte	0
 13205 093f 0C       		.uleb128 0xc
 13206 0940 A5090000 		.4byte	.LASF100
 13207 0944 01       		.byte	0x1
 13208 0945 DD03     		.2byte	0x3dd
 13209 0947 00000000 		.4byte	.LFB69
 13210 094b 48000000 		.4byte	.LFE69-.LFB69
 13211 094f 01       		.uleb128 0x1
 13212 0950 9C       		.byte	0x9c
 13213 0951 74090000 		.4byte	0x974
 13214 0955 0F       		.uleb128 0xf
 13215 0956 6E756D00 		.ascii	"num\000"
 13216 095a 01       		.byte	0x1
 13217 095b DD03     		.2byte	0x3dd
 13218 095d AD000000 		.4byte	0xad
 13219 0961 02       		.uleb128 0x2
 13220 0962 91       		.byte	0x91
 13221 0963 77       		.sleb128 -9
 13222 0964 0D       		.uleb128 0xd
 13223 0965 EC150000 		.4byte	.LASF42
 13224 0969 01       		.byte	0x1
 13225 096a DD03     		.2byte	0x3dd
 13226 096c 34010000 		.4byte	0x134
 13227 0970 02       		.uleb128 0x2
 13228 0971 91       		.byte	0x91
 13229 0972 76       		.sleb128 -10
 13230 0973 00       		.byte	0
 13231 0974 0E       		.uleb128 0xe
 13232 0975 C50A0000 		.4byte	.LASF101
 13233 0979 01       		.byte	0x1
 13234 097a EB03     		.2byte	0x3eb
 13235 097c 34010000 		.4byte	0x134
 13236 0980 00000000 		.4byte	.LFB70
 13237 0984 54000000 		.4byte	.LFE70-.LFB70
 13238 0988 01       		.uleb128 0x1
 13239 0989 9C       		.byte	0x9c
 13240 098a 9E090000 		.4byte	0x99e
 13241 098e 0F       		.uleb128 0xf
 13242 098f 6E756D00 		.ascii	"num\000"
 13243 0993 01       		.byte	0x1
 13244 0994 EB03     		.2byte	0x3eb
 13245 0996 AD000000 		.4byte	0xad
 13246 099a 02       		.uleb128 0x2
 13247 099b 91       		.byte	0x91
 13248 099c 77       		.sleb128 -9
 13249 099d 00       		.byte	0
 13250 099e 0C       		.uleb128 0xc
 13251 099f CE160000 		.4byte	.LASF102
 13252 09a3 01       		.byte	0x1
 13253 09a4 F603     		.2byte	0x3f6
 13254 09a6 00000000 		.4byte	.LFB71
 13255 09aa 48000000 		.4byte	.LFE71-.LFB71
 13256 09ae 01       		.uleb128 0x1
 13257 09af 9C       		.byte	0x9c
 13258 09b0 D3090000 		.4byte	0x9d3
 13259 09b4 0F       		.uleb128 0xf
 13260 09b5 6E756D00 		.ascii	"num\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 291


 13261 09b9 01       		.byte	0x1
 13262 09ba F603     		.2byte	0x3f6
 13263 09bc AD000000 		.4byte	0xad
 13264 09c0 02       		.uleb128 0x2
 13265 09c1 91       		.byte	0x91
 13266 09c2 77       		.sleb128 -9
 13267 09c3 0D       		.uleb128 0xd
 13268 09c4 4E160000 		.4byte	.LASF36
 13269 09c8 01       		.byte	0x1
 13270 09c9 F603     		.2byte	0x3f6
 13271 09cb 34010000 		.4byte	0x134
 13272 09cf 02       		.uleb128 0x2
 13273 09d0 91       		.byte	0x91
 13274 09d1 76       		.sleb128 -10
 13275 09d2 00       		.byte	0
 13276 09d3 0E       		.uleb128 0xe
 13277 09d4 6F0D0000 		.4byte	.LASF103
 13278 09d8 01       		.byte	0x1
 13279 09d9 0504     		.2byte	0x405
 13280 09db 34010000 		.4byte	0x134
 13281 09df 00000000 		.4byte	.LFB72
 13282 09e3 54000000 		.4byte	.LFE72-.LFB72
 13283 09e7 01       		.uleb128 0x1
 13284 09e8 9C       		.byte	0x9c
 13285 09e9 FD090000 		.4byte	0x9fd
 13286 09ed 0F       		.uleb128 0xf
 13287 09ee 6E756D00 		.ascii	"num\000"
 13288 09f2 01       		.byte	0x1
 13289 09f3 0504     		.2byte	0x405
 13290 09f5 AD000000 		.4byte	0xad
 13291 09f9 02       		.uleb128 0x2
 13292 09fa 91       		.byte	0x91
 13293 09fb 77       		.sleb128 -9
 13294 09fc 00       		.byte	0
 13295 09fd 0C       		.uleb128 0xc
 13296 09fe 03150000 		.4byte	.LASF104
 13297 0a02 01       		.byte	0x1
 13298 0a03 1004     		.2byte	0x410
 13299 0a05 00000000 		.4byte	.LFB73
 13300 0a09 48000000 		.4byte	.LFE73-.LFB73
 13301 0a0d 01       		.uleb128 0x1
 13302 0a0e 9C       		.byte	0x9c
 13303 0a0f 320A0000 		.4byte	0xa32
 13304 0a13 0F       		.uleb128 0xf
 13305 0a14 6E756D00 		.ascii	"num\000"
 13306 0a18 01       		.byte	0x1
 13307 0a19 1004     		.2byte	0x410
 13308 0a1b AD000000 		.4byte	0xad
 13309 0a1f 02       		.uleb128 0x2
 13310 0a20 91       		.byte	0x91
 13311 0a21 77       		.sleb128 -9
 13312 0a22 0D       		.uleb128 0xd
 13313 0a23 EC150000 		.4byte	.LASF42
 13314 0a27 01       		.byte	0x1
 13315 0a28 1004     		.2byte	0x410
 13316 0a2a 34010000 		.4byte	0x134
 13317 0a2e 02       		.uleb128 0x2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 292


 13318 0a2f 91       		.byte	0x91
 13319 0a30 76       		.sleb128 -10
 13320 0a31 00       		.byte	0
 13321 0a32 0E       		.uleb128 0xe
 13322 0a33 88010000 		.4byte	.LASF105
 13323 0a37 01       		.byte	0x1
 13324 0a38 1B04     		.2byte	0x41b
 13325 0a3a AD000000 		.4byte	0xad
 13326 0a3e 00000000 		.4byte	.LFB74
 13327 0a42 50000000 		.4byte	.LFE74-.LFB74
 13328 0a46 01       		.uleb128 0x1
 13329 0a47 9C       		.byte	0x9c
 13330 0a48 5C0A0000 		.4byte	0xa5c
 13331 0a4c 0F       		.uleb128 0xf
 13332 0a4d 6E756D00 		.ascii	"num\000"
 13333 0a51 01       		.byte	0x1
 13334 0a52 1B04     		.2byte	0x41b
 13335 0a54 AD000000 		.4byte	0xad
 13336 0a58 02       		.uleb128 0x2
 13337 0a59 91       		.byte	0x91
 13338 0a5a 77       		.sleb128 -9
 13339 0a5b 00       		.byte	0
 13340 0a5c 0C       		.uleb128 0xc
 13341 0a5d 651B0000 		.4byte	.LASF106
 13342 0a61 01       		.byte	0x1
 13343 0a62 2604     		.2byte	0x426
 13344 0a64 00000000 		.4byte	.LFB75
 13345 0a68 4C000000 		.4byte	.LFE75-.LFB75
 13346 0a6c 01       		.uleb128 0x1
 13347 0a6d 9C       		.byte	0x9c
 13348 0a6e 910A0000 		.4byte	0xa91
 13349 0a72 0F       		.uleb128 0xf
 13350 0a73 6E756D00 		.ascii	"num\000"
 13351 0a77 01       		.byte	0x1
 13352 0a78 2604     		.2byte	0x426
 13353 0a7a AD000000 		.4byte	0xad
 13354 0a7e 02       		.uleb128 0x2
 13355 0a7f 91       		.byte	0x91
 13356 0a80 77       		.sleb128 -9
 13357 0a81 0D       		.uleb128 0xd
 13358 0a82 2D160000 		.4byte	.LASF107
 13359 0a86 01       		.byte	0x1
 13360 0a87 2604     		.2byte	0x426
 13361 0a89 AD000000 		.4byte	0xad
 13362 0a8d 02       		.uleb128 0x2
 13363 0a8e 91       		.byte	0x91
 13364 0a8f 76       		.sleb128 -10
 13365 0a90 00       		.byte	0
 13366 0a91 0B       		.uleb128 0xb
 13367 0a92 D4140000 		.4byte	.LASF108
 13368 0a96 01       		.byte	0x1
 13369 0a97 3604     		.2byte	0x436
 13370 0a99 AD000000 		.4byte	0xad
 13371 0a9d 00000000 		.4byte	.LFB76
 13372 0aa1 28000000 		.4byte	.LFE76-.LFB76
 13373 0aa5 01       		.uleb128 0x1
 13374 0aa6 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 293


 13375 0aa7 0C       		.uleb128 0xc
 13376 0aa8 0D1A0000 		.4byte	.LASF109
 13377 0aac 01       		.byte	0x1
 13378 0aad 3F04     		.2byte	0x43f
 13379 0aaf 00000000 		.4byte	.LFB77
 13380 0ab3 28000000 		.4byte	.LFE77-.LFB77
 13381 0ab7 01       		.uleb128 0x1
 13382 0ab8 9C       		.byte	0x9c
 13383 0ab9 CD0A0000 		.4byte	0xacd
 13384 0abd 0D       		.uleb128 0xd
 13385 0abe CD0F0000 		.4byte	.LASF26
 13386 0ac2 01       		.byte	0x1
 13387 0ac3 3F04     		.2byte	0x43f
 13388 0ac5 AD000000 		.4byte	0xad
 13389 0ac9 02       		.uleb128 0x2
 13390 0aca 91       		.byte	0x91
 13391 0acb 77       		.sleb128 -9
 13392 0acc 00       		.byte	0
 13393 0acd 0B       		.uleb128 0xb
 13394 0ace 3B0A0000 		.4byte	.LASF110
 13395 0ad2 01       		.byte	0x1
 13396 0ad3 4904     		.2byte	0x449
 13397 0ad5 AD000000 		.4byte	0xad
 13398 0ad9 00000000 		.4byte	.LFB78
 13399 0add 28000000 		.4byte	.LFE78-.LFB78
 13400 0ae1 01       		.uleb128 0x1
 13401 0ae2 9C       		.byte	0x9c
 13402 0ae3 0C       		.uleb128 0xc
 13403 0ae4 34160000 		.4byte	.LASF111
 13404 0ae8 01       		.byte	0x1
 13405 0ae9 5204     		.2byte	0x452
 13406 0aeb 00000000 		.4byte	.LFB79
 13407 0aef 28000000 		.4byte	.LFE79-.LFB79
 13408 0af3 01       		.uleb128 0x1
 13409 0af4 9C       		.byte	0x9c
 13410 0af5 090B0000 		.4byte	0xb09
 13411 0af9 0F       		.uleb128 0xf
 13412 0afa 72656700 		.ascii	"reg\000"
 13413 0afe 01       		.byte	0x1
 13414 0aff 5204     		.2byte	0x452
 13415 0b01 AD000000 		.4byte	0xad
 13416 0b05 02       		.uleb128 0x2
 13417 0b06 91       		.byte	0x91
 13418 0b07 77       		.sleb128 -9
 13419 0b08 00       		.byte	0
 13420 0b09 0C       		.uleb128 0xc
 13421 0b0a 620A0000 		.4byte	.LASF112
 13422 0b0e 01       		.byte	0x1
 13423 0b0f 5B04     		.2byte	0x45b
 13424 0b11 00000000 		.4byte	.LFB80
 13425 0b15 28000000 		.4byte	.LFE80-.LFB80
 13426 0b19 01       		.uleb128 0x1
 13427 0b1a 9C       		.byte	0x9c
 13428 0b1b 2F0B0000 		.4byte	0xb2f
 13429 0b1f 0D       		.uleb128 0xd
 13430 0b20 080C0000 		.4byte	.LASF113
 13431 0b24 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 294


 13432 0b25 5B04     		.2byte	0x45b
 13433 0b27 AD000000 		.4byte	0xad
 13434 0b2b 02       		.uleb128 0x2
 13435 0b2c 91       		.byte	0x91
 13436 0b2d 77       		.sleb128 -9
 13437 0b2e 00       		.byte	0
 13438 0b2f 0B       		.uleb128 0xb
 13439 0b30 E1120000 		.4byte	.LASF114
 13440 0b34 01       		.byte	0x1
 13441 0b35 6404     		.2byte	0x464
 13442 0b37 34010000 		.4byte	0x134
 13443 0b3b 00000000 		.4byte	.LFB81
 13444 0b3f 2C000000 		.4byte	.LFE81-.LFB81
 13445 0b43 01       		.uleb128 0x1
 13446 0b44 9C       		.byte	0x9c
 13447 0b45 0C       		.uleb128 0xc
 13448 0b46 81170000 		.4byte	.LASF115
 13449 0b4a 01       		.byte	0x1
 13450 0b4b 6D04     		.2byte	0x46d
 13451 0b4d 00000000 		.4byte	.LFB82
 13452 0b51 28000000 		.4byte	.LFE82-.LFB82
 13453 0b55 01       		.uleb128 0x1
 13454 0b56 9C       		.byte	0x9c
 13455 0b57 6B0B0000 		.4byte	0xb6b
 13456 0b5b 0D       		.uleb128 0xd
 13457 0b5c EC150000 		.4byte	.LASF42
 13458 0b60 01       		.byte	0x1
 13459 0b61 6D04     		.2byte	0x46d
 13460 0b63 34010000 		.4byte	0x134
 13461 0b67 02       		.uleb128 0x2
 13462 0b68 91       		.byte	0x91
 13463 0b69 77       		.sleb128 -9
 13464 0b6a 00       		.byte	0
 13465 0b6b 0B       		.uleb128 0xb
 13466 0b6c 24020000 		.4byte	.LASF116
 13467 0b70 01       		.byte	0x1
 13468 0b71 7904     		.2byte	0x479
 13469 0b73 34010000 		.4byte	0x134
 13470 0b77 00000000 		.4byte	.LFB83
 13471 0b7b 2C000000 		.4byte	.LFE83-.LFB83
 13472 0b7f 01       		.uleb128 0x1
 13473 0b80 9C       		.byte	0x9c
 13474 0b81 0C       		.uleb128 0xc
 13475 0b82 E2070000 		.4byte	.LASF117
 13476 0b86 01       		.byte	0x1
 13477 0b87 8204     		.2byte	0x482
 13478 0b89 00000000 		.4byte	.LFB84
 13479 0b8d 28000000 		.4byte	.LFE84-.LFB84
 13480 0b91 01       		.uleb128 0x1
 13481 0b92 9C       		.byte	0x9c
 13482 0b93 A70B0000 		.4byte	0xba7
 13483 0b97 0D       		.uleb128 0xd
 13484 0b98 EC150000 		.4byte	.LASF42
 13485 0b9c 01       		.byte	0x1
 13486 0b9d 8204     		.2byte	0x482
 13487 0b9f 34010000 		.4byte	0x134
 13488 0ba3 02       		.uleb128 0x2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 295


 13489 0ba4 91       		.byte	0x91
 13490 0ba5 77       		.sleb128 -9
 13491 0ba6 00       		.byte	0
 13492 0ba7 0B       		.uleb128 0xb
 13493 0ba8 59100000 		.4byte	.LASF118
 13494 0bac 01       		.byte	0x1
 13495 0bad 8E04     		.2byte	0x48e
 13496 0baf 34010000 		.4byte	0x134
 13497 0bb3 00000000 		.4byte	.LFB85
 13498 0bb7 2C000000 		.4byte	.LFE85-.LFB85
 13499 0bbb 01       		.uleb128 0x1
 13500 0bbc 9C       		.byte	0x9c
 13501 0bbd 0C       		.uleb128 0xc
 13502 0bbe 61080000 		.4byte	.LASF119
 13503 0bc2 01       		.byte	0x1
 13504 0bc3 9704     		.2byte	0x497
 13505 0bc5 00000000 		.4byte	.LFB86
 13506 0bc9 28000000 		.4byte	.LFE86-.LFB86
 13507 0bcd 01       		.uleb128 0x1
 13508 0bce 9C       		.byte	0x9c
 13509 0bcf E30B0000 		.4byte	0xbe3
 13510 0bd3 0D       		.uleb128 0xd
 13511 0bd4 4E160000 		.4byte	.LASF36
 13512 0bd8 01       		.byte	0x1
 13513 0bd9 9704     		.2byte	0x497
 13514 0bdb 34010000 		.4byte	0x134
 13515 0bdf 02       		.uleb128 0x2
 13516 0be0 91       		.byte	0x91
 13517 0be1 77       		.sleb128 -9
 13518 0be2 00       		.byte	0
 13519 0be3 0B       		.uleb128 0xb
 13520 0be4 0E0D0000 		.4byte	.LASF120
 13521 0be8 01       		.byte	0x1
 13522 0be9 A904     		.2byte	0x4a9
 13523 0beb AD000000 		.4byte	0xad
 13524 0bef 00000000 		.4byte	.LFB87
 13525 0bf3 2C000000 		.4byte	.LFE87-.LFB87
 13526 0bf7 01       		.uleb128 0x1
 13527 0bf8 9C       		.byte	0x9c
 13528 0bf9 0C       		.uleb128 0xc
 13529 0bfa 490E0000 		.4byte	.LASF121
 13530 0bfe 01       		.byte	0x1
 13531 0bff B204     		.2byte	0x4b2
 13532 0c01 00000000 		.4byte	.LFB88
 13533 0c05 2C000000 		.4byte	.LFE88-.LFB88
 13534 0c09 01       		.uleb128 0x1
 13535 0c0a 9C       		.byte	0x9c
 13536 0c0b 1F0C0000 		.4byte	0xc1f
 13537 0c0f 0D       		.uleb128 0xd
 13538 0c10 D2130000 		.4byte	.LASF122
 13539 0c14 01       		.byte	0x1
 13540 0c15 B204     		.2byte	0x4b2
 13541 0c17 AD000000 		.4byte	0xad
 13542 0c1b 02       		.uleb128 0x2
 13543 0c1c 91       		.byte	0x91
 13544 0c1d 77       		.sleb128 -9
 13545 0c1e 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 296


 13546 0c1f 0B       		.uleb128 0xb
 13547 0c20 B41A0000 		.4byte	.LASF123
 13548 0c24 01       		.byte	0x1
 13549 0c25 BB04     		.2byte	0x4bb
 13550 0c27 AD000000 		.4byte	0xad
 13551 0c2b 00000000 		.4byte	.LFB89
 13552 0c2f 28000000 		.4byte	.LFE89-.LFB89
 13553 0c33 01       		.uleb128 0x1
 13554 0c34 9C       		.byte	0x9c
 13555 0c35 0B       		.uleb128 0xb
 13556 0c36 F20E0000 		.4byte	.LASF124
 13557 0c3a 01       		.byte	0x1
 13558 0c3b CB04     		.2byte	0x4cb
 13559 0c3d 34010000 		.4byte	0x134
 13560 0c41 00000000 		.4byte	.LFB90
 13561 0c45 2C000000 		.4byte	.LFE90-.LFB90
 13562 0c49 01       		.uleb128 0x1
 13563 0c4a 9C       		.byte	0x9c
 13564 0c4b 0B       		.uleb128 0xb
 13565 0c4c 0E000000 		.4byte	.LASF125
 13566 0c50 01       		.byte	0x1
 13567 0c51 D704     		.2byte	0x4d7
 13568 0c53 34010000 		.4byte	0x134
 13569 0c57 00000000 		.4byte	.LFB91
 13570 0c5b 2C000000 		.4byte	.LFE91-.LFB91
 13571 0c5f 01       		.uleb128 0x1
 13572 0c60 9C       		.byte	0x9c
 13573 0c61 0B       		.uleb128 0xb
 13574 0c62 BB150000 		.4byte	.LASF126
 13575 0c66 01       		.byte	0x1
 13576 0c67 E204     		.2byte	0x4e2
 13577 0c69 34010000 		.4byte	0x134
 13578 0c6d 00000000 		.4byte	.LFB92
 13579 0c71 2C000000 		.4byte	.LFE92-.LFB92
 13580 0c75 01       		.uleb128 0x1
 13581 0c76 9C       		.byte	0x9c
 13582 0c77 0B       		.uleb128 0xb
 13583 0c78 6D000000 		.4byte	.LASF127
 13584 0c7c 01       		.byte	0x1
 13585 0c7d ED04     		.2byte	0x4ed
 13586 0c7f 34010000 		.4byte	0x134
 13587 0c83 00000000 		.4byte	.LFB93
 13588 0c87 2C000000 		.4byte	.LFE93-.LFB93
 13589 0c8b 01       		.uleb128 0x1
 13590 0c8c 9C       		.byte	0x9c
 13591 0c8d 0B       		.uleb128 0xb
 13592 0c8e B80C0000 		.4byte	.LASF128
 13593 0c92 01       		.byte	0x1
 13594 0c93 F804     		.2byte	0x4f8
 13595 0c95 34010000 		.4byte	0x134
 13596 0c99 00000000 		.4byte	.LFB94
 13597 0c9d 2C000000 		.4byte	.LFE94-.LFB94
 13598 0ca1 01       		.uleb128 0x1
 13599 0ca2 9C       		.byte	0x9c
 13600 0ca3 0B       		.uleb128 0xb
 13601 0ca4 D6150000 		.4byte	.LASF129
 13602 0ca8 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 297


 13603 0ca9 0305     		.2byte	0x503
 13604 0cab 34010000 		.4byte	0x134
 13605 0caf 00000000 		.4byte	.LFB95
 13606 0cb3 2C000000 		.4byte	.LFE95-.LFB95
 13607 0cb7 01       		.uleb128 0x1
 13608 0cb8 9C       		.byte	0x9c
 13609 0cb9 0B       		.uleb128 0xb
 13610 0cba 81040000 		.4byte	.LASF130
 13611 0cbe 01       		.byte	0x1
 13612 0cbf 0E05     		.2byte	0x50e
 13613 0cc1 34010000 		.4byte	0x134
 13614 0cc5 00000000 		.4byte	.LFB96
 13615 0cc9 2C000000 		.4byte	.LFE96-.LFB96
 13616 0ccd 01       		.uleb128 0x1
 13617 0cce 9C       		.byte	0x9c
 13618 0ccf 0B       		.uleb128 0xb
 13619 0cd0 441A0000 		.4byte	.LASF131
 13620 0cd4 01       		.byte	0x1
 13621 0cd5 1905     		.2byte	0x519
 13622 0cd7 34010000 		.4byte	0x134
 13623 0cdb 00000000 		.4byte	.LFB97
 13624 0cdf 2C000000 		.4byte	.LFE97-.LFB97
 13625 0ce3 01       		.uleb128 0x1
 13626 0ce4 9C       		.byte	0x9c
 13627 0ce5 0B       		.uleb128 0xb
 13628 0ce6 E2080000 		.4byte	.LASF132
 13629 0cea 01       		.byte	0x1
 13630 0ceb 2605     		.2byte	0x526
 13631 0ced 34010000 		.4byte	0x134
 13632 0cf1 00000000 		.4byte	.LFB98
 13633 0cf5 2C000000 		.4byte	.LFE98-.LFB98
 13634 0cf9 01       		.uleb128 0x1
 13635 0cfa 9C       		.byte	0x9c
 13636 0cfb 0C       		.uleb128 0xc
 13637 0cfc A1110000 		.4byte	.LASF133
 13638 0d00 01       		.byte	0x1
 13639 0d01 3005     		.2byte	0x530
 13640 0d03 00000000 		.4byte	.LFB99
 13641 0d07 28000000 		.4byte	.LFE99-.LFB99
 13642 0d0b 01       		.uleb128 0x1
 13643 0d0c 9C       		.byte	0x9c
 13644 0d0d 210D0000 		.4byte	0xd21
 13645 0d11 0D       		.uleb128 0xd
 13646 0d12 4E160000 		.4byte	.LASF36
 13647 0d16 01       		.byte	0x1
 13648 0d17 3005     		.2byte	0x530
 13649 0d19 34010000 		.4byte	0x134
 13650 0d1d 02       		.uleb128 0x2
 13651 0d1e 91       		.byte	0x91
 13652 0d1f 77       		.sleb128 -9
 13653 0d20 00       		.byte	0
 13654 0d21 0B       		.uleb128 0xb
 13655 0d22 8F1E0000 		.4byte	.LASF134
 13656 0d26 01       		.byte	0x1
 13657 0d27 3905     		.2byte	0x539
 13658 0d29 34010000 		.4byte	0x134
 13659 0d2d 00000000 		.4byte	.LFB100
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 298


 13660 0d31 2C000000 		.4byte	.LFE100-.LFB100
 13661 0d35 01       		.uleb128 0x1
 13662 0d36 9C       		.byte	0x9c
 13663 0d37 0C       		.uleb128 0xc
 13664 0d38 331E0000 		.4byte	.LASF135
 13665 0d3c 01       		.byte	0x1
 13666 0d3d 4305     		.2byte	0x543
 13667 0d3f 00000000 		.4byte	.LFB101
 13668 0d43 28000000 		.4byte	.LFE101-.LFB101
 13669 0d47 01       		.uleb128 0x1
 13670 0d48 9C       		.byte	0x9c
 13671 0d49 5D0D0000 		.4byte	0xd5d
 13672 0d4d 0D       		.uleb128 0xd
 13673 0d4e 00000000 		.4byte	.LASF136
 13674 0d52 01       		.byte	0x1
 13675 0d53 4305     		.2byte	0x543
 13676 0d55 34010000 		.4byte	0x134
 13677 0d59 02       		.uleb128 0x2
 13678 0d5a 91       		.byte	0x91
 13679 0d5b 77       		.sleb128 -9
 13680 0d5c 00       		.byte	0
 13681 0d5d 0B       		.uleb128 0xb
 13682 0d5e 801B0000 		.4byte	.LASF137
 13683 0d62 01       		.byte	0x1
 13684 0d63 4C05     		.2byte	0x54c
 13685 0d65 34010000 		.4byte	0x134
 13686 0d69 00000000 		.4byte	.LFB102
 13687 0d6d 2C000000 		.4byte	.LFE102-.LFB102
 13688 0d71 01       		.uleb128 0x1
 13689 0d72 9C       		.byte	0x9c
 13690 0d73 0C       		.uleb128 0xc
 13691 0d74 C1180000 		.4byte	.LASF138
 13692 0d78 01       		.byte	0x1
 13693 0d79 5605     		.2byte	0x556
 13694 0d7b 00000000 		.4byte	.LFB103
 13695 0d7f 28000000 		.4byte	.LFE103-.LFB103
 13696 0d83 01       		.uleb128 0x1
 13697 0d84 9C       		.byte	0x9c
 13698 0d85 990D0000 		.4byte	0xd99
 13699 0d89 0D       		.uleb128 0xd
 13700 0d8a 26000000 		.4byte	.LASF139
 13701 0d8e 01       		.byte	0x1
 13702 0d8f 5605     		.2byte	0x556
 13703 0d91 34010000 		.4byte	0x134
 13704 0d95 02       		.uleb128 0x2
 13705 0d96 91       		.byte	0x91
 13706 0d97 77       		.sleb128 -9
 13707 0d98 00       		.byte	0
 13708 0d99 0B       		.uleb128 0xb
 13709 0d9a E2090000 		.4byte	.LASF140
 13710 0d9e 01       		.byte	0x1
 13711 0d9f 5F05     		.2byte	0x55f
 13712 0da1 34010000 		.4byte	0x134
 13713 0da5 00000000 		.4byte	.LFB104
 13714 0da9 2C000000 		.4byte	.LFE104-.LFB104
 13715 0dad 01       		.uleb128 0x1
 13716 0dae 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 299


 13717 0daf 0C       		.uleb128 0xc
 13718 0db0 D71A0000 		.4byte	.LASF141
 13719 0db4 01       		.byte	0x1
 13720 0db5 6905     		.2byte	0x569
 13721 0db7 00000000 		.4byte	.LFB105
 13722 0dbb 28000000 		.4byte	.LFE105-.LFB105
 13723 0dbf 01       		.uleb128 0x1
 13724 0dc0 9C       		.byte	0x9c
 13725 0dc1 D50D0000 		.4byte	0xdd5
 13726 0dc5 0D       		.uleb128 0xd
 13727 0dc6 56150000 		.4byte	.LASF142
 13728 0dca 01       		.byte	0x1
 13729 0dcb 6905     		.2byte	0x569
 13730 0dcd 34010000 		.4byte	0x134
 13731 0dd1 02       		.uleb128 0x2
 13732 0dd2 91       		.byte	0x91
 13733 0dd3 77       		.sleb128 -9
 13734 0dd4 00       		.byte	0
 13735 0dd5 0B       		.uleb128 0xb
 13736 0dd6 53160000 		.4byte	.LASF143
 13737 0dda 01       		.byte	0x1
 13738 0ddb 7205     		.2byte	0x572
 13739 0ddd 34010000 		.4byte	0x134
 13740 0de1 00000000 		.4byte	.LFB106
 13741 0de5 2C000000 		.4byte	.LFE106-.LFB106
 13742 0de9 01       		.uleb128 0x1
 13743 0dea 9C       		.byte	0x9c
 13744 0deb 0C       		.uleb128 0xc
 13745 0dec 360B0000 		.4byte	.LASF144
 13746 0df0 01       		.byte	0x1
 13747 0df1 7C05     		.2byte	0x57c
 13748 0df3 00000000 		.4byte	.LFB107
 13749 0df7 28000000 		.4byte	.LFE107-.LFB107
 13750 0dfb 01       		.uleb128 0x1
 13751 0dfc 9C       		.byte	0x9c
 13752 0dfd 110E0000 		.4byte	0xe11
 13753 0e01 0D       		.uleb128 0xd
 13754 0e02 020C0000 		.4byte	.LASF27
 13755 0e06 01       		.byte	0x1
 13756 0e07 7C05     		.2byte	0x57c
 13757 0e09 34010000 		.4byte	0x134
 13758 0e0d 02       		.uleb128 0x2
 13759 0e0e 91       		.byte	0x91
 13760 0e0f 77       		.sleb128 -9
 13761 0e10 00       		.byte	0
 13762 0e11 0B       		.uleb128 0xb
 13763 0e12 2D050000 		.4byte	.LASF145
 13764 0e16 01       		.byte	0x1
 13765 0e17 8505     		.2byte	0x585
 13766 0e19 34010000 		.4byte	0x134
 13767 0e1d 00000000 		.4byte	.LFB108
 13768 0e21 2C000000 		.4byte	.LFE108-.LFB108
 13769 0e25 01       		.uleb128 0x1
 13770 0e26 9C       		.byte	0x9c
 13771 0e27 0C       		.uleb128 0xc
 13772 0e28 40080000 		.4byte	.LASF146
 13773 0e2c 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 300


 13774 0e2d 8F05     		.2byte	0x58f
 13775 0e2f 00000000 		.4byte	.LFB109
 13776 0e33 28000000 		.4byte	.LFE109-.LFB109
 13777 0e37 01       		.uleb128 0x1
 13778 0e38 9C       		.byte	0x9c
 13779 0e39 4D0E0000 		.4byte	0xe4d
 13780 0e3d 0D       		.uleb128 0xd
 13781 0e3e EC150000 		.4byte	.LASF42
 13782 0e42 01       		.byte	0x1
 13783 0e43 8F05     		.2byte	0x58f
 13784 0e45 34010000 		.4byte	0x134
 13785 0e49 02       		.uleb128 0x2
 13786 0e4a 91       		.byte	0x91
 13787 0e4b 77       		.sleb128 -9
 13788 0e4c 00       		.byte	0
 13789 0e4d 0B       		.uleb128 0xb
 13790 0e4e EE0D0000 		.4byte	.LASF147
 13791 0e52 01       		.byte	0x1
 13792 0e53 9D05     		.2byte	0x59d
 13793 0e55 34010000 		.4byte	0x134
 13794 0e59 00000000 		.4byte	.LFB110
 13795 0e5d 2C000000 		.4byte	.LFE110-.LFB110
 13796 0e61 01       		.uleb128 0x1
 13797 0e62 9C       		.byte	0x9c
 13798 0e63 0C       		.uleb128 0xc
 13799 0e64 BA190000 		.4byte	.LASF148
 13800 0e68 01       		.byte	0x1
 13801 0e69 AC05     		.2byte	0x5ac
 13802 0e6b 00000000 		.4byte	.LFB111
 13803 0e6f 28000000 		.4byte	.LFE111-.LFB111
 13804 0e73 01       		.uleb128 0x1
 13805 0e74 9C       		.byte	0x9c
 13806 0e75 890E0000 		.4byte	0xe89
 13807 0e79 0D       		.uleb128 0xd
 13808 0e7a EC150000 		.4byte	.LASF42
 13809 0e7e 01       		.byte	0x1
 13810 0e7f AC05     		.2byte	0x5ac
 13811 0e81 34010000 		.4byte	0x134
 13812 0e85 02       		.uleb128 0x2
 13813 0e86 91       		.byte	0x91
 13814 0e87 77       		.sleb128 -9
 13815 0e88 00       		.byte	0
 13816 0e89 0B       		.uleb128 0xb
 13817 0e8a 870A0000 		.4byte	.LASF149
 13818 0e8e 01       		.byte	0x1
 13819 0e8f B805     		.2byte	0x5b8
 13820 0e91 34010000 		.4byte	0x134
 13821 0e95 00000000 		.4byte	.LFB112
 13822 0e99 2C000000 		.4byte	.LFE112-.LFB112
 13823 0e9d 01       		.uleb128 0x1
 13824 0e9e 9C       		.byte	0x9c
 13825 0e9f 0C       		.uleb128 0xc
 13826 0ea0 261A0000 		.4byte	.LASF150
 13827 0ea4 01       		.byte	0x1
 13828 0ea5 C505     		.2byte	0x5c5
 13829 0ea7 00000000 		.4byte	.LFB113
 13830 0eab 28000000 		.4byte	.LFE113-.LFB113
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 301


 13831 0eaf 01       		.uleb128 0x1
 13832 0eb0 9C       		.byte	0x9c
 13833 0eb1 C50E0000 		.4byte	0xec5
 13834 0eb5 0D       		.uleb128 0xd
 13835 0eb6 EC150000 		.4byte	.LASF42
 13836 0eba 01       		.byte	0x1
 13837 0ebb C505     		.2byte	0x5c5
 13838 0ebd 34010000 		.4byte	0x134
 13839 0ec1 02       		.uleb128 0x2
 13840 0ec2 91       		.byte	0x91
 13841 0ec3 77       		.sleb128 -9
 13842 0ec4 00       		.byte	0
 13843 0ec5 0B       		.uleb128 0xb
 13844 0ec6 22140000 		.4byte	.LASF151
 13845 0eca 01       		.byte	0x1
 13846 0ecb D205     		.2byte	0x5d2
 13847 0ecd AD000000 		.4byte	0xad
 13848 0ed1 00000000 		.4byte	.LFB114
 13849 0ed5 28000000 		.4byte	.LFE114-.LFB114
 13850 0ed9 01       		.uleb128 0x1
 13851 0eda 9C       		.byte	0x9c
 13852 0edb 0C       		.uleb128 0xc
 13853 0edc 11180000 		.4byte	.LASF152
 13854 0ee0 01       		.byte	0x1
 13855 0ee1 DE05     		.2byte	0x5de
 13856 0ee3 00000000 		.4byte	.LFB115
 13857 0ee7 28000000 		.4byte	.LFE115-.LFB115
 13858 0eeb 01       		.uleb128 0x1
 13859 0eec 9C       		.byte	0x9c
 13860 0eed 010F0000 		.4byte	0xf01
 13861 0ef1 0D       		.uleb128 0xd
 13862 0ef2 EC150000 		.4byte	.LASF42
 13863 0ef6 01       		.byte	0x1
 13864 0ef7 DE05     		.2byte	0x5de
 13865 0ef9 AD000000 		.4byte	0xad
 13866 0efd 02       		.uleb128 0x2
 13867 0efe 91       		.byte	0x91
 13868 0eff 77       		.sleb128 -9
 13869 0f00 00       		.byte	0
 13870 0f01 0B       		.uleb128 0xb
 13871 0f02 30110000 		.4byte	.LASF153
 13872 0f06 01       		.byte	0x1
 13873 0f07 E705     		.2byte	0x5e7
 13874 0f09 34010000 		.4byte	0x134
 13875 0f0d 00000000 		.4byte	.LFB116
 13876 0f11 2C000000 		.4byte	.LFE116-.LFB116
 13877 0f15 01       		.uleb128 0x1
 13878 0f16 9C       		.byte	0x9c
 13879 0f17 0C       		.uleb128 0xc
 13880 0f18 22080000 		.4byte	.LASF154
 13881 0f1c 01       		.byte	0x1
 13882 0f1d F105     		.2byte	0x5f1
 13883 0f1f 00000000 		.4byte	.LFB117
 13884 0f23 28000000 		.4byte	.LFE117-.LFB117
 13885 0f27 01       		.uleb128 0x1
 13886 0f28 9C       		.byte	0x9c
 13887 0f29 3D0F0000 		.4byte	0xf3d
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 302


 13888 0f2d 0D       		.uleb128 0xd
 13889 0f2e EC150000 		.4byte	.LASF42
 13890 0f32 01       		.byte	0x1
 13891 0f33 F105     		.2byte	0x5f1
 13892 0f35 34010000 		.4byte	0x134
 13893 0f39 02       		.uleb128 0x2
 13894 0f3a 91       		.byte	0x91
 13895 0f3b 77       		.sleb128 -9
 13896 0f3c 00       		.byte	0
 13897 0f3d 0B       		.uleb128 0xb
 13898 0f3e 111B0000 		.4byte	.LASF155
 13899 0f42 01       		.byte	0x1
 13900 0f43 FA05     		.2byte	0x5fa
 13901 0f45 34010000 		.4byte	0x134
 13902 0f49 00000000 		.4byte	.LFB118
 13903 0f4d 2C000000 		.4byte	.LFE118-.LFB118
 13904 0f51 01       		.uleb128 0x1
 13905 0f52 9C       		.byte	0x9c
 13906 0f53 0C       		.uleb128 0xc
 13907 0f54 74100000 		.4byte	.LASF156
 13908 0f58 01       		.byte	0x1
 13909 0f59 0406     		.2byte	0x604
 13910 0f5b 00000000 		.4byte	.LFB119
 13911 0f5f 28000000 		.4byte	.LFE119-.LFB119
 13912 0f63 01       		.uleb128 0x1
 13913 0f64 9C       		.byte	0x9c
 13914 0f65 790F0000 		.4byte	0xf79
 13915 0f69 0D       		.uleb128 0xd
 13916 0f6a EC150000 		.4byte	.LASF42
 13917 0f6e 01       		.byte	0x1
 13918 0f6f 0406     		.2byte	0x604
 13919 0f71 34010000 		.4byte	0x134
 13920 0f75 02       		.uleb128 0x2
 13921 0f76 91       		.byte	0x91
 13922 0f77 77       		.sleb128 -9
 13923 0f78 00       		.byte	0
 13924 0f79 0B       		.uleb128 0xb
 13925 0f7a BA110000 		.4byte	.LASF157
 13926 0f7e 01       		.byte	0x1
 13927 0f7f 0D06     		.2byte	0x60d
 13928 0f81 34010000 		.4byte	0x134
 13929 0f85 00000000 		.4byte	.LFB120
 13930 0f89 2C000000 		.4byte	.LFE120-.LFB120
 13931 0f8d 01       		.uleb128 0x1
 13932 0f8e 9C       		.byte	0x9c
 13933 0f8f 0C       		.uleb128 0xc
 13934 0f90 65030000 		.4byte	.LASF158
 13935 0f94 01       		.byte	0x1
 13936 0f95 1706     		.2byte	0x617
 13937 0f97 00000000 		.4byte	.LFB121
 13938 0f9b 28000000 		.4byte	.LFE121-.LFB121
 13939 0f9f 01       		.uleb128 0x1
 13940 0fa0 9C       		.byte	0x9c
 13941 0fa1 B50F0000 		.4byte	0xfb5
 13942 0fa5 0D       		.uleb128 0xd
 13943 0fa6 EC150000 		.4byte	.LASF42
 13944 0faa 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 303


 13945 0fab 1706     		.2byte	0x617
 13946 0fad 34010000 		.4byte	0x134
 13947 0fb1 02       		.uleb128 0x2
 13948 0fb2 91       		.byte	0x91
 13949 0fb3 77       		.sleb128 -9
 13950 0fb4 00       		.byte	0
 13951 0fb5 0B       		.uleb128 0xb
 13952 0fb6 FF110000 		.4byte	.LASF159
 13953 0fba 01       		.byte	0x1
 13954 0fbb 2006     		.2byte	0x620
 13955 0fbd 34010000 		.4byte	0x134
 13956 0fc1 00000000 		.4byte	.LFB122
 13957 0fc5 2C000000 		.4byte	.LFE122-.LFB122
 13958 0fc9 01       		.uleb128 0x1
 13959 0fca 9C       		.byte	0x9c
 13960 0fcb 0C       		.uleb128 0xc
 13961 0fcc 0F0F0000 		.4byte	.LASF160
 13962 0fd0 01       		.byte	0x1
 13963 0fd1 2A06     		.2byte	0x62a
 13964 0fd3 00000000 		.4byte	.LFB123
 13965 0fd7 28000000 		.4byte	.LFE123-.LFB123
 13966 0fdb 01       		.uleb128 0x1
 13967 0fdc 9C       		.byte	0x9c
 13968 0fdd F10F0000 		.4byte	0xff1
 13969 0fe1 0D       		.uleb128 0xd
 13970 0fe2 EC150000 		.4byte	.LASF42
 13971 0fe6 01       		.byte	0x1
 13972 0fe7 2A06     		.2byte	0x62a
 13973 0fe9 34010000 		.4byte	0x134
 13974 0fed 02       		.uleb128 0x2
 13975 0fee 91       		.byte	0x91
 13976 0fef 77       		.sleb128 -9
 13977 0ff0 00       		.byte	0
 13978 0ff1 0B       		.uleb128 0xb
 13979 0ff2 E6050000 		.4byte	.LASF161
 13980 0ff6 01       		.byte	0x1
 13981 0ff7 3406     		.2byte	0x634
 13982 0ff9 34010000 		.4byte	0x134
 13983 0ffd 00000000 		.4byte	.LFB124
 13984 1001 2C000000 		.4byte	.LFE124-.LFB124
 13985 1005 01       		.uleb128 0x1
 13986 1006 9C       		.byte	0x9c
 13987 1007 0C       		.uleb128 0xc
 13988 1008 18170000 		.4byte	.LASF162
 13989 100c 01       		.byte	0x1
 13990 100d 3E06     		.2byte	0x63e
 13991 100f 00000000 		.4byte	.LFB125
 13992 1013 28000000 		.4byte	.LFE125-.LFB125
 13993 1017 01       		.uleb128 0x1
 13994 1018 9C       		.byte	0x9c
 13995 1019 2D100000 		.4byte	0x102d
 13996 101d 0D       		.uleb128 0xd
 13997 101e EC150000 		.4byte	.LASF42
 13998 1022 01       		.byte	0x1
 13999 1023 3E06     		.2byte	0x63e
 14000 1025 34010000 		.4byte	0x134
 14001 1029 02       		.uleb128 0x2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 304


 14002 102a 91       		.byte	0x91
 14003 102b 77       		.sleb128 -9
 14004 102c 00       		.byte	0
 14005 102d 0B       		.uleb128 0xb
 14006 102e CD020000 		.4byte	.LASF163
 14007 1032 01       		.byte	0x1
 14008 1033 4806     		.2byte	0x648
 14009 1035 34010000 		.4byte	0x134
 14010 1039 00000000 		.4byte	.LFB126
 14011 103d 2C000000 		.4byte	.LFE126-.LFB126
 14012 1041 01       		.uleb128 0x1
 14013 1042 9C       		.byte	0x9c
 14014 1043 0C       		.uleb128 0xc
 14015 1044 38140000 		.4byte	.LASF164
 14016 1048 01       		.byte	0x1
 14017 1049 5206     		.2byte	0x652
 14018 104b 00000000 		.4byte	.LFB127
 14019 104f 28000000 		.4byte	.LFE127-.LFB127
 14020 1053 01       		.uleb128 0x1
 14021 1054 9C       		.byte	0x9c
 14022 1055 69100000 		.4byte	0x1069
 14023 1059 0D       		.uleb128 0xd
 14024 105a EC150000 		.4byte	.LASF42
 14025 105e 01       		.byte	0x1
 14026 105f 5206     		.2byte	0x652
 14027 1061 34010000 		.4byte	0x134
 14028 1065 02       		.uleb128 0x2
 14029 1066 91       		.byte	0x91
 14030 1067 77       		.sleb128 -9
 14031 1068 00       		.byte	0
 14032 1069 0B       		.uleb128 0xb
 14033 106a 781C0000 		.4byte	.LASF165
 14034 106e 01       		.byte	0x1
 14035 106f 5F06     		.2byte	0x65f
 14036 1071 AD000000 		.4byte	0xad
 14037 1075 00000000 		.4byte	.LFB128
 14038 1079 28000000 		.4byte	.LFE128-.LFB128
 14039 107d 01       		.uleb128 0x1
 14040 107e 9C       		.byte	0x9c
 14041 107f 0B       		.uleb128 0xb
 14042 1080 82130000 		.4byte	.LASF166
 14043 1084 01       		.byte	0x1
 14044 1085 6A06     		.2byte	0x66a
 14045 1087 34010000 		.4byte	0x134
 14046 108b 00000000 		.4byte	.LFB129
 14047 108f 2C000000 		.4byte	.LFE129-.LFB129
 14048 1093 01       		.uleb128 0x1
 14049 1094 9C       		.byte	0x9c
 14050 1095 0B       		.uleb128 0xb
 14051 1096 F5180000 		.4byte	.LASF167
 14052 109a 01       		.byte	0x1
 14053 109b 7506     		.2byte	0x675
 14054 109d 34010000 		.4byte	0x134
 14055 10a1 00000000 		.4byte	.LFB130
 14056 10a5 2C000000 		.4byte	.LFE130-.LFB130
 14057 10a9 01       		.uleb128 0x1
 14058 10aa 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 305


 14059 10ab 0B       		.uleb128 0xb
 14060 10ac 461B0000 		.4byte	.LASF168
 14061 10b0 01       		.byte	0x1
 14062 10b1 8006     		.2byte	0x680
 14063 10b3 34010000 		.4byte	0x134
 14064 10b7 00000000 		.4byte	.LFB131
 14065 10bb 2C000000 		.4byte	.LFE131-.LFB131
 14066 10bf 01       		.uleb128 0x1
 14067 10c0 9C       		.byte	0x9c
 14068 10c1 0B       		.uleb128 0xb
 14069 10c2 73110000 		.4byte	.LASF169
 14070 10c6 01       		.byte	0x1
 14071 10c7 8B06     		.2byte	0x68b
 14072 10c9 34010000 		.4byte	0x134
 14073 10cd 00000000 		.4byte	.LFB132
 14074 10d1 2C000000 		.4byte	.LFE132-.LFB132
 14075 10d5 01       		.uleb128 0x1
 14076 10d6 9C       		.byte	0x9c
 14077 10d7 0B       		.uleb128 0xb
 14078 10d8 5E180000 		.4byte	.LASF170
 14079 10dc 01       		.byte	0x1
 14080 10dd 9706     		.2byte	0x697
 14081 10df 34010000 		.4byte	0x134
 14082 10e3 00000000 		.4byte	.LFB133
 14083 10e7 2C000000 		.4byte	.LFE133-.LFB133
 14084 10eb 01       		.uleb128 0x1
 14085 10ec 9C       		.byte	0x9c
 14086 10ed 0B       		.uleb128 0xb
 14087 10ee B9080000 		.4byte	.LASF171
 14088 10f2 01       		.byte	0x1
 14089 10f3 A206     		.2byte	0x6a2
 14090 10f5 34010000 		.4byte	0x134
 14091 10f9 00000000 		.4byte	.LFB134
 14092 10fd 2C000000 		.4byte	.LFE134-.LFB134
 14093 1101 01       		.uleb128 0x1
 14094 1102 9C       		.byte	0x9c
 14095 1103 0C       		.uleb128 0xc
 14096 1104 D3050000 		.4byte	.LASF172
 14097 1108 01       		.byte	0x1
 14098 1109 B906     		.2byte	0x6b9
 14099 110b 00000000 		.4byte	.LFB135
 14100 110f EC000000 		.4byte	.LFE135-.LFB135
 14101 1113 01       		.uleb128 0x1
 14102 1114 9C       		.byte	0x9c
 14103 1115 98110000 		.4byte	0x1198
 14104 1119 0F       		.uleb128 0xf
 14105 111a 617800   		.ascii	"ax\000"
 14106 111d 01       		.byte	0x1
 14107 111e B906     		.2byte	0x6b9
 14108 1120 98110000 		.4byte	0x1198
 14109 1124 02       		.uleb128 0x2
 14110 1125 91       		.byte	0x91
 14111 1126 74       		.sleb128 -12
 14112 1127 0F       		.uleb128 0xf
 14113 1128 617900   		.ascii	"ay\000"
 14114 112b 01       		.byte	0x1
 14115 112c B906     		.2byte	0x6b9
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 306


 14116 112e 98110000 		.4byte	0x1198
 14117 1132 02       		.uleb128 0x2
 14118 1133 91       		.byte	0x91
 14119 1134 70       		.sleb128 -16
 14120 1135 0F       		.uleb128 0xf
 14121 1136 617A00   		.ascii	"az\000"
 14122 1139 01       		.byte	0x1
 14123 113a B906     		.2byte	0x6b9
 14124 113c 98110000 		.4byte	0x1198
 14125 1140 02       		.uleb128 0x2
 14126 1141 91       		.byte	0x91
 14127 1142 6C       		.sleb128 -20
 14128 1143 0F       		.uleb128 0xf
 14129 1144 677800   		.ascii	"gx\000"
 14130 1147 01       		.byte	0x1
 14131 1148 B906     		.2byte	0x6b9
 14132 114a 98110000 		.4byte	0x1198
 14133 114e 02       		.uleb128 0x2
 14134 114f 91       		.byte	0x91
 14135 1150 68       		.sleb128 -24
 14136 1151 0F       		.uleb128 0xf
 14137 1152 677900   		.ascii	"gy\000"
 14138 1155 01       		.byte	0x1
 14139 1156 B906     		.2byte	0x6b9
 14140 1158 98110000 		.4byte	0x1198
 14141 115c 02       		.uleb128 0x2
 14142 115d 91       		.byte	0x91
 14143 115e 00       		.sleb128 0
 14144 115f 0F       		.uleb128 0xf
 14145 1160 677A00   		.ascii	"gz\000"
 14146 1163 01       		.byte	0x1
 14147 1164 B906     		.2byte	0x6b9
 14148 1166 98110000 		.4byte	0x1198
 14149 116a 02       		.uleb128 0x2
 14150 116b 91       		.byte	0x91
 14151 116c 04       		.sleb128 4
 14152 116d 0F       		.uleb128 0xf
 14153 116e 6D7800   		.ascii	"mx\000"
 14154 1171 01       		.byte	0x1
 14155 1172 B906     		.2byte	0x6b9
 14156 1174 98110000 		.4byte	0x1198
 14157 1178 02       		.uleb128 0x2
 14158 1179 91       		.byte	0x91
 14159 117a 08       		.sleb128 8
 14160 117b 0F       		.uleb128 0xf
 14161 117c 6D7900   		.ascii	"my\000"
 14162 117f 01       		.byte	0x1
 14163 1180 B906     		.2byte	0x6b9
 14164 1182 98110000 		.4byte	0x1198
 14165 1186 02       		.uleb128 0x2
 14166 1187 91       		.byte	0x91
 14167 1188 0C       		.sleb128 12
 14168 1189 0F       		.uleb128 0xf
 14169 118a 6D7A00   		.ascii	"mz\000"
 14170 118d 01       		.byte	0x1
 14171 118e B906     		.2byte	0x6b9
 14172 1190 98110000 		.4byte	0x1198
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 307


 14173 1194 02       		.uleb128 0x2
 14174 1195 91       		.byte	0x91
 14175 1196 10       		.sleb128 16
 14176 1197 00       		.byte	0
 14177 1198 10       		.uleb128 0x10
 14178 1199 04       		.byte	0x4
 14179 119a B8000000 		.4byte	0xb8
 14180 119e 0C       		.uleb128 0xc
 14181 119f 2E1D0000 		.4byte	.LASF173
 14182 11a3 01       		.byte	0x1
 14183 11a4 DC06     		.2byte	0x6dc
 14184 11a6 00000000 		.4byte	.LFB136
 14185 11aa 00010000 		.4byte	.LFE136-.LFB136
 14186 11ae 01       		.uleb128 0x1
 14187 11af 9C       		.byte	0x9c
 14188 11b0 40120000 		.4byte	0x1240
 14189 11b4 0F       		.uleb128 0xf
 14190 11b5 617800   		.ascii	"ax\000"
 14191 11b8 01       		.byte	0x1
 14192 11b9 DC06     		.2byte	0x6dc
 14193 11bb 98110000 		.4byte	0x1198
 14194 11bf 02       		.uleb128 0x2
 14195 11c0 91       		.byte	0x91
 14196 11c1 74       		.sleb128 -12
 14197 11c2 0F       		.uleb128 0xf
 14198 11c3 617900   		.ascii	"ay\000"
 14199 11c6 01       		.byte	0x1
 14200 11c7 DC06     		.2byte	0x6dc
 14201 11c9 98110000 		.4byte	0x1198
 14202 11cd 02       		.uleb128 0x2
 14203 11ce 91       		.byte	0x91
 14204 11cf 70       		.sleb128 -16
 14205 11d0 0F       		.uleb128 0xf
 14206 11d1 617A00   		.ascii	"az\000"
 14207 11d4 01       		.byte	0x1
 14208 11d5 DC06     		.2byte	0x6dc
 14209 11d7 98110000 		.4byte	0x1198
 14210 11db 02       		.uleb128 0x2
 14211 11dc 91       		.byte	0x91
 14212 11dd 6C       		.sleb128 -20
 14213 11de 0F       		.uleb128 0xf
 14214 11df 677800   		.ascii	"gx\000"
 14215 11e2 01       		.byte	0x1
 14216 11e3 DC06     		.2byte	0x6dc
 14217 11e5 98110000 		.4byte	0x1198
 14218 11e9 02       		.uleb128 0x2
 14219 11ea 91       		.byte	0x91
 14220 11eb 68       		.sleb128 -24
 14221 11ec 0F       		.uleb128 0xf
 14222 11ed 677900   		.ascii	"gy\000"
 14223 11f0 01       		.byte	0x1
 14224 11f1 DC06     		.2byte	0x6dc
 14225 11f3 98110000 		.4byte	0x1198
 14226 11f7 02       		.uleb128 0x2
 14227 11f8 91       		.byte	0x91
 14228 11f9 00       		.sleb128 0
 14229 11fa 0F       		.uleb128 0xf
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 308


 14230 11fb 677A00   		.ascii	"gz\000"
 14231 11fe 01       		.byte	0x1
 14232 11ff DC06     		.2byte	0x6dc
 14233 1201 98110000 		.4byte	0x1198
 14234 1205 02       		.uleb128 0x2
 14235 1206 91       		.byte	0x91
 14236 1207 04       		.sleb128 4
 14237 1208 0F       		.uleb128 0xf
 14238 1209 6D7800   		.ascii	"mx\000"
 14239 120c 01       		.byte	0x1
 14240 120d DC06     		.2byte	0x6dc
 14241 120f 98110000 		.4byte	0x1198
 14242 1213 02       		.uleb128 0x2
 14243 1214 91       		.byte	0x91
 14244 1215 08       		.sleb128 8
 14245 1216 0F       		.uleb128 0xf
 14246 1217 6D7900   		.ascii	"my\000"
 14247 121a 01       		.byte	0x1
 14248 121b DC06     		.2byte	0x6dc
 14249 121d 98110000 		.4byte	0x1198
 14250 1221 02       		.uleb128 0x2
 14251 1222 91       		.byte	0x91
 14252 1223 0C       		.sleb128 12
 14253 1224 0F       		.uleb128 0xf
 14254 1225 6D7A00   		.ascii	"mz\000"
 14255 1228 01       		.byte	0x1
 14256 1229 DC06     		.2byte	0x6dc
 14257 122b 98110000 		.4byte	0x1198
 14258 122f 02       		.uleb128 0x2
 14259 1230 91       		.byte	0x91
 14260 1231 10       		.sleb128 16
 14261 1232 0F       		.uleb128 0xf
 14262 1233 7400     		.ascii	"t\000"
 14263 1235 01       		.byte	0x1
 14264 1236 DC06     		.2byte	0x6dc
 14265 1238 98110000 		.4byte	0x1198
 14266 123c 02       		.uleb128 0x2
 14267 123d 91       		.byte	0x91
 14268 123e 14       		.sleb128 20
 14269 123f 00       		.byte	0
 14270 1240 0C       		.uleb128 0xc
 14271 1241 82150000 		.4byte	.LASF174
 14272 1245 01       		.byte	0x1
 14273 1246 F906     		.2byte	0x6f9
 14274 1248 00000000 		.4byte	.LFB137
 14275 124c B0000000 		.4byte	.LFE137-.LFB137
 14276 1250 01       		.uleb128 0x1
 14277 1251 9C       		.byte	0x9c
 14278 1252 AB120000 		.4byte	0x12ab
 14279 1256 0F       		.uleb128 0xf
 14280 1257 617800   		.ascii	"ax\000"
 14281 125a 01       		.byte	0x1
 14282 125b F906     		.2byte	0x6f9
 14283 125d 98110000 		.4byte	0x1198
 14284 1261 02       		.uleb128 0x2
 14285 1262 91       		.byte	0x91
 14286 1263 74       		.sleb128 -12
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 309


 14287 1264 0F       		.uleb128 0xf
 14288 1265 617900   		.ascii	"ay\000"
 14289 1268 01       		.byte	0x1
 14290 1269 F906     		.2byte	0x6f9
 14291 126b 98110000 		.4byte	0x1198
 14292 126f 02       		.uleb128 0x2
 14293 1270 91       		.byte	0x91
 14294 1271 70       		.sleb128 -16
 14295 1272 0F       		.uleb128 0xf
 14296 1273 617A00   		.ascii	"az\000"
 14297 1276 01       		.byte	0x1
 14298 1277 F906     		.2byte	0x6f9
 14299 1279 98110000 		.4byte	0x1198
 14300 127d 02       		.uleb128 0x2
 14301 127e 91       		.byte	0x91
 14302 127f 6C       		.sleb128 -20
 14303 1280 0F       		.uleb128 0xf
 14304 1281 677800   		.ascii	"gx\000"
 14305 1284 01       		.byte	0x1
 14306 1285 F906     		.2byte	0x6f9
 14307 1287 98110000 		.4byte	0x1198
 14308 128b 02       		.uleb128 0x2
 14309 128c 91       		.byte	0x91
 14310 128d 68       		.sleb128 -24
 14311 128e 0F       		.uleb128 0xf
 14312 128f 677900   		.ascii	"gy\000"
 14313 1292 01       		.byte	0x1
 14314 1293 F906     		.2byte	0x6f9
 14315 1295 98110000 		.4byte	0x1198
 14316 1299 02       		.uleb128 0x2
 14317 129a 91       		.byte	0x91
 14318 129b 00       		.sleb128 0
 14319 129c 0F       		.uleb128 0xf
 14320 129d 677A00   		.ascii	"gz\000"
 14321 12a0 01       		.byte	0x1
 14322 12a1 F906     		.2byte	0x6f9
 14323 12a3 98110000 		.4byte	0x1198
 14324 12a7 02       		.uleb128 0x2
 14325 12a8 91       		.byte	0x91
 14326 12a9 04       		.sleb128 4
 14327 12aa 00       		.byte	0
 14328 12ab 0C       		.uleb128 0xc
 14329 12ac C9170000 		.4byte	.LASF175
 14330 12b0 01       		.byte	0x1
 14331 12b1 1207     		.2byte	0x712
 14332 12b3 00000000 		.4byte	.LFB138
 14333 12b7 C8000000 		.4byte	.LFE138-.LFB138
 14334 12bb 01       		.uleb128 0x1
 14335 12bc 9C       		.byte	0x9c
 14336 12bd 23130000 		.4byte	0x1323
 14337 12c1 0F       		.uleb128 0xf
 14338 12c2 617800   		.ascii	"ax\000"
 14339 12c5 01       		.byte	0x1
 14340 12c6 1207     		.2byte	0x712
 14341 12c8 98110000 		.4byte	0x1198
 14342 12cc 02       		.uleb128 0x2
 14343 12cd 91       		.byte	0x91
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 310


 14344 12ce 74       		.sleb128 -12
 14345 12cf 0F       		.uleb128 0xf
 14346 12d0 617900   		.ascii	"ay\000"
 14347 12d3 01       		.byte	0x1
 14348 12d4 1207     		.2byte	0x712
 14349 12d6 98110000 		.4byte	0x1198
 14350 12da 02       		.uleb128 0x2
 14351 12db 91       		.byte	0x91
 14352 12dc 70       		.sleb128 -16
 14353 12dd 0F       		.uleb128 0xf
 14354 12de 617A00   		.ascii	"az\000"
 14355 12e1 01       		.byte	0x1
 14356 12e2 1207     		.2byte	0x712
 14357 12e4 98110000 		.4byte	0x1198
 14358 12e8 02       		.uleb128 0x2
 14359 12e9 91       		.byte	0x91
 14360 12ea 6C       		.sleb128 -20
 14361 12eb 0F       		.uleb128 0xf
 14362 12ec 677800   		.ascii	"gx\000"
 14363 12ef 01       		.byte	0x1
 14364 12f0 1207     		.2byte	0x712
 14365 12f2 98110000 		.4byte	0x1198
 14366 12f6 02       		.uleb128 0x2
 14367 12f7 91       		.byte	0x91
 14368 12f8 68       		.sleb128 -24
 14369 12f9 0F       		.uleb128 0xf
 14370 12fa 677900   		.ascii	"gy\000"
 14371 12fd 01       		.byte	0x1
 14372 12fe 1207     		.2byte	0x712
 14373 1300 98110000 		.4byte	0x1198
 14374 1304 02       		.uleb128 0x2
 14375 1305 91       		.byte	0x91
 14376 1306 00       		.sleb128 0
 14377 1307 0F       		.uleb128 0xf
 14378 1308 677A00   		.ascii	"gz\000"
 14379 130b 01       		.byte	0x1
 14380 130c 1207     		.2byte	0x712
 14381 130e 98110000 		.4byte	0x1198
 14382 1312 02       		.uleb128 0x2
 14383 1313 91       		.byte	0x91
 14384 1314 04       		.sleb128 4
 14385 1315 0F       		.uleb128 0xf
 14386 1316 7400     		.ascii	"t\000"
 14387 1318 01       		.byte	0x1
 14388 1319 1207     		.2byte	0x712
 14389 131b 98110000 		.4byte	0x1198
 14390 131f 02       		.uleb128 0x2
 14391 1320 91       		.byte	0x91
 14392 1321 08       		.sleb128 8
 14393 1322 00       		.byte	0
 14394 1323 0C       		.uleb128 0xc
 14395 1324 E6000000 		.4byte	.LASF176
 14396 1328 01       		.byte	0x1
 14397 1329 4107     		.2byte	0x741
 14398 132b 00000000 		.4byte	.LFB139
 14399 132f 6C000000 		.4byte	.LFE139-.LFB139
 14400 1333 01       		.uleb128 0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 311


 14401 1334 9C       		.byte	0x9c
 14402 1335 61130000 		.4byte	0x1361
 14403 1339 0F       		.uleb128 0xf
 14404 133a 7800     		.ascii	"x\000"
 14405 133c 01       		.byte	0x1
 14406 133d 4107     		.2byte	0x741
 14407 133f 98110000 		.4byte	0x1198
 14408 1343 02       		.uleb128 0x2
 14409 1344 91       		.byte	0x91
 14410 1345 74       		.sleb128 -12
 14411 1346 0F       		.uleb128 0xf
 14412 1347 7900     		.ascii	"y\000"
 14413 1349 01       		.byte	0x1
 14414 134a 4107     		.2byte	0x741
 14415 134c 98110000 		.4byte	0x1198
 14416 1350 02       		.uleb128 0x2
 14417 1351 91       		.byte	0x91
 14418 1352 70       		.sleb128 -16
 14419 1353 0F       		.uleb128 0xf
 14420 1354 7A00     		.ascii	"z\000"
 14421 1356 01       		.byte	0x1
 14422 1357 4107     		.2byte	0x741
 14423 1359 98110000 		.4byte	0x1198
 14424 135d 02       		.uleb128 0x2
 14425 135e 91       		.byte	0x91
 14426 135f 6C       		.sleb128 -20
 14427 1360 00       		.byte	0
 14428 1361 0B       		.uleb128 0xb
 14429 1362 05060000 		.4byte	.LASF177
 14430 1366 01       		.byte	0x1
 14431 1367 4C07     		.2byte	0x74c
 14432 1369 B8000000 		.4byte	0xb8
 14433 136d 00000000 		.4byte	.LFB140
 14434 1371 38000000 		.4byte	.LFE140-.LFB140
 14435 1375 01       		.uleb128 0x1
 14436 1376 9C       		.byte	0x9c
 14437 1377 0B       		.uleb128 0xb
 14438 1378 35060000 		.4byte	.LASF178
 14439 137c 01       		.byte	0x1
 14440 137d 5507     		.2byte	0x755
 14441 137f B8000000 		.4byte	0xb8
 14442 1383 00000000 		.4byte	.LFB141
 14443 1387 38000000 		.4byte	.LFE141-.LFB141
 14444 138b 01       		.uleb128 0x1
 14445 138c 9C       		.byte	0x9c
 14446 138d 0B       		.uleb128 0xb
 14447 138e 2D1B0000 		.4byte	.LASF179
 14448 1392 01       		.byte	0x1
 14449 1393 5E07     		.2byte	0x75e
 14450 1395 B8000000 		.4byte	0xb8
 14451 1399 00000000 		.4byte	.LFB142
 14452 139d 38000000 		.4byte	.LFE142-.LFB142
 14453 13a1 01       		.uleb128 0x1
 14454 13a2 9C       		.byte	0x9c
 14455 13a3 0B       		.uleb128 0xb
 14456 13a4 CB090000 		.4byte	.LASF180
 14457 13a8 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 312


 14458 13a9 6907     		.2byte	0x769
 14459 13ab B8000000 		.4byte	0xb8
 14460 13af 00000000 		.4byte	.LFB143
 14461 13b3 38000000 		.4byte	.LFE143-.LFB143
 14462 13b7 01       		.uleb128 0x1
 14463 13b8 9C       		.byte	0x9c
 14464 13b9 0C       		.uleb128 0xc
 14465 13ba 19050000 		.4byte	.LASF181
 14466 13be 01       		.byte	0x1
 14467 13bf 9007     		.2byte	0x790
 14468 13c1 00000000 		.4byte	.LFB144
 14469 13c5 6C000000 		.4byte	.LFE144-.LFB144
 14470 13c9 01       		.uleb128 0x1
 14471 13ca 9C       		.byte	0x9c
 14472 13cb F7130000 		.4byte	0x13f7
 14473 13cf 0F       		.uleb128 0xf
 14474 13d0 7800     		.ascii	"x\000"
 14475 13d2 01       		.byte	0x1
 14476 13d3 9007     		.2byte	0x790
 14477 13d5 98110000 		.4byte	0x1198
 14478 13d9 02       		.uleb128 0x2
 14479 13da 91       		.byte	0x91
 14480 13db 74       		.sleb128 -12
 14481 13dc 0F       		.uleb128 0xf
 14482 13dd 7900     		.ascii	"y\000"
 14483 13df 01       		.byte	0x1
 14484 13e0 9007     		.2byte	0x790
 14485 13e2 98110000 		.4byte	0x1198
 14486 13e6 02       		.uleb128 0x2
 14487 13e7 91       		.byte	0x91
 14488 13e8 70       		.sleb128 -16
 14489 13e9 0F       		.uleb128 0xf
 14490 13ea 7A00     		.ascii	"z\000"
 14491 13ec 01       		.byte	0x1
 14492 13ed 9007     		.2byte	0x790
 14493 13ef 98110000 		.4byte	0x1198
 14494 13f3 02       		.uleb128 0x2
 14495 13f4 91       		.byte	0x91
 14496 13f5 6C       		.sleb128 -20
 14497 13f6 00       		.byte	0
 14498 13f7 0B       		.uleb128 0xb
 14499 13f8 53070000 		.4byte	.LASF182
 14500 13fc 01       		.byte	0x1
 14501 13fd 9B07     		.2byte	0x79b
 14502 13ff B8000000 		.4byte	0xb8
 14503 1403 00000000 		.4byte	.LFB145
 14504 1407 38000000 		.4byte	.LFE145-.LFB145
 14505 140b 01       		.uleb128 0x1
 14506 140c 9C       		.byte	0x9c
 14507 140d 0B       		.uleb128 0xb
 14508 140e 68070000 		.4byte	.LASF183
 14509 1412 01       		.byte	0x1
 14510 1413 A407     		.2byte	0x7a4
 14511 1415 B8000000 		.4byte	0xb8
 14512 1419 00000000 		.4byte	.LFB146
 14513 141d 38000000 		.4byte	.LFE146-.LFB146
 14514 1421 01       		.uleb128 0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 313


 14515 1422 9C       		.byte	0x9c
 14516 1423 0B       		.uleb128 0xb
 14517 1424 7D070000 		.4byte	.LASF184
 14518 1428 01       		.byte	0x1
 14519 1429 AD07     		.2byte	0x7ad
 14520 142b B8000000 		.4byte	0xb8
 14521 142f 00000000 		.4byte	.LFB147
 14522 1433 38000000 		.4byte	.LFE147-.LFB147
 14523 1437 01       		.uleb128 0x1
 14524 1438 9C       		.byte	0x9c
 14525 1439 0E       		.uleb128 0xe
 14526 143a D6190000 		.4byte	.LASF185
 14527 143e 01       		.byte	0x1
 14528 143f FE07     		.2byte	0x7fe
 14529 1441 AD000000 		.4byte	0xad
 14530 1445 00000000 		.4byte	.LFB148
 14531 1449 34000000 		.4byte	.LFE148-.LFB148
 14532 144d 01       		.uleb128 0x1
 14533 144e 9C       		.byte	0x9c
 14534 144f 63140000 		.4byte	0x1463
 14535 1453 0D       		.uleb128 0xd
 14536 1454 7E0A0000 		.4byte	.LASF186
 14537 1458 01       		.byte	0x1
 14538 1459 FE07     		.2byte	0x7fe
 14539 145b 94000000 		.4byte	0x94
 14540 145f 02       		.uleb128 0x2
 14541 1460 91       		.byte	0x91
 14542 1461 74       		.sleb128 -12
 14543 1462 00       		.byte	0
 14544 1463 0E       		.uleb128 0xe
 14545 1464 47030000 		.4byte	.LASF187
 14546 1468 01       		.byte	0x1
 14547 1469 0708     		.2byte	0x807
 14548 146b C3000000 		.4byte	0xc3
 14549 146f 00000000 		.4byte	.LFB149
 14550 1473 44000000 		.4byte	.LFE149-.LFB149
 14551 1477 01       		.uleb128 0x1
 14552 1478 9C       		.byte	0x9c
 14553 1479 8D140000 		.4byte	0x148d
 14554 147d 0D       		.uleb128 0xd
 14555 147e 7E0A0000 		.4byte	.LASF186
 14556 1482 01       		.byte	0x1
 14557 1483 0708     		.2byte	0x807
 14558 1485 94000000 		.4byte	0x94
 14559 1489 02       		.uleb128 0x2
 14560 148a 91       		.byte	0x91
 14561 148b 74       		.sleb128 -12
 14562 148c 00       		.byte	0
 14563 148d 0E       		.uleb128 0xe
 14564 148e 9A1B0000 		.4byte	.LASF188
 14565 1492 01       		.byte	0x1
 14566 1493 1008     		.2byte	0x810
 14567 1495 CE000000 		.4byte	0xce
 14568 1499 00000000 		.4byte	.LFB150
 14569 149d 4C000000 		.4byte	.LFE150-.LFB150
 14570 14a1 01       		.uleb128 0x1
 14571 14a2 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 314


 14572 14a3 B7140000 		.4byte	0x14b7
 14573 14a7 0D       		.uleb128 0xd
 14574 14a8 7E0A0000 		.4byte	.LASF186
 14575 14ac 01       		.byte	0x1
 14576 14ad 1008     		.2byte	0x810
 14577 14af 94000000 		.4byte	0x94
 14578 14b3 02       		.uleb128 0x2
 14579 14b4 91       		.byte	0x91
 14580 14b5 74       		.sleb128 -12
 14581 14b6 00       		.byte	0
 14582 14b7 0B       		.uleb128 0xb
 14583 14b8 29030000 		.4byte	.LASF189
 14584 14bc 01       		.byte	0x1
 14585 14bd 1C08     		.2byte	0x81c
 14586 14bf 34010000 		.4byte	0x134
 14587 14c3 00000000 		.4byte	.LFB151
 14588 14c7 2C000000 		.4byte	.LFE151-.LFB151
 14589 14cb 01       		.uleb128 0x1
 14590 14cc 9C       		.byte	0x9c
 14591 14cd 0B       		.uleb128 0xb
 14592 14ce 010A0000 		.4byte	.LASF190
 14593 14d2 01       		.byte	0x1
 14594 14d3 2508     		.2byte	0x825
 14595 14d5 34010000 		.4byte	0x134
 14596 14d9 00000000 		.4byte	.LFB152
 14597 14dd 2C000000 		.4byte	.LFE152-.LFB152
 14598 14e1 01       		.uleb128 0x1
 14599 14e2 9C       		.byte	0x9c
 14600 14e3 0B       		.uleb128 0xb
 14601 14e4 04080000 		.4byte	.LASF191
 14602 14e8 01       		.byte	0x1
 14603 14e9 2E08     		.2byte	0x82e
 14604 14eb 34010000 		.4byte	0x134
 14605 14ef 00000000 		.4byte	.LFB153
 14606 14f3 2C000000 		.4byte	.LFE153-.LFB153
 14607 14f7 01       		.uleb128 0x1
 14608 14f8 9C       		.byte	0x9c
 14609 14f9 0B       		.uleb128 0xb
 14610 14fa 97040000 		.4byte	.LASF192
 14611 14fe 01       		.byte	0x1
 14612 14ff 3708     		.2byte	0x837
 14613 1501 34010000 		.4byte	0x134
 14614 1505 00000000 		.4byte	.LFB154
 14615 1509 2C000000 		.4byte	.LFE154-.LFB154
 14616 150d 01       		.uleb128 0x1
 14617 150e 9C       		.byte	0x9c
 14618 150f 0B       		.uleb128 0xb
 14619 1510 38150000 		.4byte	.LASF193
 14620 1514 01       		.byte	0x1
 14621 1515 4008     		.2byte	0x840
 14622 1517 34010000 		.4byte	0x134
 14623 151b 00000000 		.4byte	.LFB155
 14624 151f 2C000000 		.4byte	.LFE155-.LFB155
 14625 1523 01       		.uleb128 0x1
 14626 1524 9C       		.byte	0x9c
 14627 1525 0B       		.uleb128 0xb
 14628 1526 B1010000 		.4byte	.LASF194
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 315


 14629 152a 01       		.byte	0x1
 14630 152b 4908     		.2byte	0x849
 14631 152d 34010000 		.4byte	0x134
 14632 1531 00000000 		.4byte	.LFB156
 14633 1535 2C000000 		.4byte	.LFE156-.LFB156
 14634 1539 01       		.uleb128 0x1
 14635 153a 9C       		.byte	0x9c
 14636 153b 0B       		.uleb128 0xb
 14637 153c BA040000 		.4byte	.LASF195
 14638 1540 01       		.byte	0x1
 14639 1541 5208     		.2byte	0x852
 14640 1543 34010000 		.4byte	0x134
 14641 1547 00000000 		.4byte	.LFB157
 14642 154b 2C000000 		.4byte	.LFE157-.LFB157
 14643 154f 01       		.uleb128 0x1
 14644 1550 9C       		.byte	0x9c
 14645 1551 0C       		.uleb128 0xc
 14646 1552 67130000 		.4byte	.LASF196
 14647 1556 01       		.byte	0x1
 14648 1557 6108     		.2byte	0x861
 14649 1559 00000000 		.4byte	.LFB158
 14650 155d 40000000 		.4byte	.LFE158-.LFB158
 14651 1561 01       		.uleb128 0x1
 14652 1562 9C       		.byte	0x9c
 14653 1563 86150000 		.4byte	0x1586
 14654 1567 0F       		.uleb128 0xf
 14655 1568 6E756D00 		.ascii	"num\000"
 14656 156c 01       		.byte	0x1
 14657 156d 6108     		.2byte	0x861
 14658 156f AD000000 		.4byte	0xad
 14659 1573 02       		.uleb128 0x2
 14660 1574 91       		.byte	0x91
 14661 1575 77       		.sleb128 -9
 14662 1576 0D       		.uleb128 0xd
 14663 1577 080C0000 		.4byte	.LASF113
 14664 157b 01       		.byte	0x1
 14665 157c 6108     		.2byte	0x861
 14666 157e AD000000 		.4byte	0xad
 14667 1582 02       		.uleb128 0x2
 14668 1583 91       		.byte	0x91
 14669 1584 76       		.sleb128 -10
 14670 1585 00       		.byte	0
 14671 1586 0B       		.uleb128 0xb
 14672 1587 5C150000 		.4byte	.LASF197
 14673 158b 01       		.byte	0x1
 14674 158c 7008     		.2byte	0x870
 14675 158e 34010000 		.4byte	0x134
 14676 1592 00000000 		.4byte	.LFB159
 14677 1596 2C000000 		.4byte	.LFE159-.LFB159
 14678 159a 01       		.uleb128 0x1
 14679 159b 9C       		.byte	0x9c
 14680 159c 0C       		.uleb128 0xc
 14681 159d 7C080000 		.4byte	.LASF198
 14682 15a1 01       		.byte	0x1
 14683 15a2 7A08     		.2byte	0x87a
 14684 15a4 00000000 		.4byte	.LFB160
 14685 15a8 28000000 		.4byte	.LFE160-.LFB160
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 316


 14686 15ac 01       		.uleb128 0x1
 14687 15ad 9C       		.byte	0x9c
 14688 15ae C2150000 		.4byte	0x15c2
 14689 15b2 0D       		.uleb128 0xd
 14690 15b3 EC150000 		.4byte	.LASF42
 14691 15b7 01       		.byte	0x1
 14692 15b8 7A08     		.2byte	0x87a
 14693 15ba 34010000 		.4byte	0x134
 14694 15be 02       		.uleb128 0x2
 14695 15bf 91       		.byte	0x91
 14696 15c0 77       		.sleb128 -9
 14697 15c1 00       		.byte	0
 14698 15c2 0E       		.uleb128 0xe
 14699 15c3 D50E0000 		.4byte	.LASF199
 14700 15c7 01       		.byte	0x1
 14701 15c8 8F08     		.2byte	0x88f
 14702 15ca 34010000 		.4byte	0x134
 14703 15ce 00000000 		.4byte	.LFB161
 14704 15d2 44000000 		.4byte	.LFE161-.LFB161
 14705 15d6 01       		.uleb128 0x1
 14706 15d7 9C       		.byte	0x9c
 14707 15d8 EC150000 		.4byte	0x15ec
 14708 15dc 0F       		.uleb128 0xf
 14709 15dd 6E756D00 		.ascii	"num\000"
 14710 15e1 01       		.byte	0x1
 14711 15e2 8F08     		.2byte	0x88f
 14712 15e4 AD000000 		.4byte	0xad
 14713 15e8 02       		.uleb128 0x2
 14714 15e9 91       		.byte	0x91
 14715 15ea 77       		.sleb128 -9
 14716 15eb 00       		.byte	0
 14717 15ec 0C       		.uleb128 0xc
 14718 15ed 6B0F0000 		.4byte	.LASF200
 14719 15f1 01       		.byte	0x1
 14720 15f2 9B08     		.2byte	0x89b
 14721 15f4 00000000 		.4byte	.LFB162
 14722 15f8 34000000 		.4byte	.LFE162-.LFB162
 14723 15fc 01       		.uleb128 0x1
 14724 15fd 9C       		.byte	0x9c
 14725 15fe 21160000 		.4byte	0x1621
 14726 1602 0F       		.uleb128 0xf
 14727 1603 6E756D00 		.ascii	"num\000"
 14728 1607 01       		.byte	0x1
 14729 1608 9B08     		.2byte	0x89b
 14730 160a AD000000 		.4byte	0xad
 14731 160e 02       		.uleb128 0x2
 14732 160f 91       		.byte	0x91
 14733 1610 6F       		.sleb128 -17
 14734 1611 0D       		.uleb128 0xd
 14735 1612 EC150000 		.4byte	.LASF42
 14736 1616 01       		.byte	0x1
 14737 1617 9B08     		.2byte	0x89b
 14738 1619 34010000 		.4byte	0x134
 14739 161d 02       		.uleb128 0x2
 14740 161e 91       		.byte	0x91
 14741 161f 6E       		.sleb128 -18
 14742 1620 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 317


 14743 1621 11       		.uleb128 0x11
 14744 1622 1B090000 		.4byte	.LASF201
 14745 1626 01       		.byte	0x1
 14746 1627 A708     		.2byte	0x8a7
 14747 1629 00000000 		.4byte	.LFB163
 14748 162d 1C000000 		.4byte	.LFE163-.LFB163
 14749 1631 01       		.uleb128 0x1
 14750 1632 9C       		.byte	0x9c
 14751 1633 11       		.uleb128 0x11
 14752 1634 4D1E0000 		.4byte	.LASF202
 14753 1638 01       		.byte	0x1
 14754 1639 B008     		.2byte	0x8b0
 14755 163b 00000000 		.4byte	.LFB164
 14756 163f 1C000000 		.4byte	.LFE164-.LFB164
 14757 1643 01       		.uleb128 0x1
 14758 1644 9C       		.byte	0x9c
 14759 1645 11       		.uleb128 0x11
 14760 1646 F81C0000 		.4byte	.LASF203
 14761 164a 01       		.byte	0x1
 14762 164b B908     		.2byte	0x8b9
 14763 164d 00000000 		.4byte	.LFB165
 14764 1651 1C000000 		.4byte	.LFE165-.LFB165
 14765 1655 01       		.uleb128 0x1
 14766 1656 9C       		.byte	0x9c
 14767 1657 0B       		.uleb128 0xb
 14768 1658 DA110000 		.4byte	.LASF204
 14769 165c 01       		.byte	0x1
 14770 165d CD08     		.2byte	0x8cd
 14771 165f AD000000 		.4byte	0xad
 14772 1663 00000000 		.4byte	.LFB166
 14773 1667 2C000000 		.4byte	.LFE166-.LFB166
 14774 166b 01       		.uleb128 0x1
 14775 166c 9C       		.byte	0x9c
 14776 166d 0C       		.uleb128 0xc
 14777 166e C90D0000 		.4byte	.LASF205
 14778 1672 01       		.byte	0x1
 14779 1673 D708     		.2byte	0x8d7
 14780 1675 00000000 		.4byte	.LFB167
 14781 1679 2C000000 		.4byte	.LFE167-.LFB167
 14782 167d 01       		.uleb128 0x1
 14783 167e 9C       		.byte	0x9c
 14784 167f 93160000 		.4byte	0x1693
 14785 1683 0D       		.uleb128 0xd
 14786 1684 D2130000 		.4byte	.LASF122
 14787 1688 01       		.byte	0x1
 14788 1689 D708     		.2byte	0x8d7
 14789 168b AD000000 		.4byte	0xad
 14790 168f 02       		.uleb128 0x2
 14791 1690 91       		.byte	0x91
 14792 1691 77       		.sleb128 -9
 14793 1692 00       		.byte	0
 14794 1693 0B       		.uleb128 0xb
 14795 1694 CB1C0000 		.4byte	.LASF206
 14796 1698 01       		.byte	0x1
 14797 1699 F408     		.2byte	0x8f4
 14798 169b AD000000 		.4byte	0xad
 14799 169f 00000000 		.4byte	.LFB168
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 318


 14800 16a3 2C000000 		.4byte	.LFE168-.LFB168
 14801 16a7 01       		.uleb128 0x1
 14802 16a8 9C       		.byte	0x9c
 14803 16a9 0C       		.uleb128 0xc
 14804 16aa DF0A0000 		.4byte	.LASF207
 14805 16ae 01       		.byte	0x1
 14806 16af FE08     		.2byte	0x8fe
 14807 16b1 00000000 		.4byte	.LFB169
 14808 16b5 2C000000 		.4byte	.LFE169-.LFB169
 14809 16b9 01       		.uleb128 0x1
 14810 16ba 9C       		.byte	0x9c
 14811 16bb CF160000 		.4byte	0x16cf
 14812 16bf 0D       		.uleb128 0xd
 14813 16c0 AE0B0000 		.4byte	.LASF208
 14814 16c4 01       		.byte	0x1
 14815 16c5 FE08     		.2byte	0x8fe
 14816 16c7 AD000000 		.4byte	0xad
 14817 16cb 02       		.uleb128 0x2
 14818 16cc 91       		.byte	0x91
 14819 16cd 77       		.sleb128 -9
 14820 16ce 00       		.byte	0
 14821 16cf 0B       		.uleb128 0xb
 14822 16d0 0A0E0000 		.4byte	.LASF209
 14823 16d4 01       		.byte	0x1
 14824 16d5 1809     		.2byte	0x918
 14825 16d7 AD000000 		.4byte	0xad
 14826 16db 00000000 		.4byte	.LFB170
 14827 16df 2C000000 		.4byte	.LFE170-.LFB170
 14828 16e3 01       		.uleb128 0x1
 14829 16e4 9C       		.byte	0x9c
 14830 16e5 0C       		.uleb128 0xc
 14831 16e6 B80B0000 		.4byte	.LASF210
 14832 16ea 01       		.byte	0x1
 14833 16eb 2209     		.2byte	0x922
 14834 16ed 00000000 		.4byte	.LFB171
 14835 16f1 2C000000 		.4byte	.LFE171-.LFB171
 14836 16f5 01       		.uleb128 0x1
 14837 16f6 9C       		.byte	0x9c
 14838 16f7 0B170000 		.4byte	0x170b
 14839 16fb 0D       		.uleb128 0xd
 14840 16fc AE0B0000 		.4byte	.LASF208
 14841 1700 01       		.byte	0x1
 14842 1701 2209     		.2byte	0x922
 14843 1703 AD000000 		.4byte	0xad
 14844 1707 02       		.uleb128 0x2
 14845 1708 91       		.byte	0x91
 14846 1709 77       		.sleb128 -9
 14847 170a 00       		.byte	0
 14848 170b 0B       		.uleb128 0xb
 14849 170c 1E060000 		.4byte	.LASF211
 14850 1710 01       		.byte	0x1
 14851 1711 3009     		.2byte	0x930
 14852 1713 34010000 		.4byte	0x134
 14853 1717 00000000 		.4byte	.LFB172
 14854 171b 2C000000 		.4byte	.LFE172-.LFB172
 14855 171f 01       		.uleb128 0x1
 14856 1720 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 319


 14857 1721 0C       		.uleb128 0xc
 14858 1722 E4100000 		.4byte	.LASF212
 14859 1726 01       		.byte	0x1
 14860 1727 3A09     		.2byte	0x93a
 14861 1729 00000000 		.4byte	.LFB173
 14862 172d 28000000 		.4byte	.LFE173-.LFB173
 14863 1731 01       		.uleb128 0x1
 14864 1732 9C       		.byte	0x9c
 14865 1733 47170000 		.4byte	0x1747
 14866 1737 0D       		.uleb128 0xd
 14867 1738 EC150000 		.4byte	.LASF42
 14868 173c 01       		.byte	0x1
 14869 173d 3A09     		.2byte	0x93a
 14870 173f 34010000 		.4byte	0x134
 14871 1743 02       		.uleb128 0x2
 14872 1744 91       		.byte	0x91
 14873 1745 77       		.sleb128 -9
 14874 1746 00       		.byte	0
 14875 1747 0B       		.uleb128 0xb
 14876 1748 EC020000 		.4byte	.LASF213
 14877 174c 01       		.byte	0x1
 14878 174d 4809     		.2byte	0x948
 14879 174f 34010000 		.4byte	0x134
 14880 1753 00000000 		.4byte	.LFB174
 14881 1757 2C000000 		.4byte	.LFE174-.LFB174
 14882 175b 01       		.uleb128 0x1
 14883 175c 9C       		.byte	0x9c
 14884 175d 0C       		.uleb128 0xc
 14885 175e 16010000 		.4byte	.LASF214
 14886 1762 01       		.byte	0x1
 14887 1763 5209     		.2byte	0x952
 14888 1765 00000000 		.4byte	.LFB175
 14889 1769 28000000 		.4byte	.LFE175-.LFB175
 14890 176d 01       		.uleb128 0x1
 14891 176e 9C       		.byte	0x9c
 14892 176f 83170000 		.4byte	0x1783
 14893 1773 0D       		.uleb128 0xd
 14894 1774 EC150000 		.4byte	.LASF42
 14895 1778 01       		.byte	0x1
 14896 1779 5209     		.2byte	0x952
 14897 177b 34010000 		.4byte	0x134
 14898 177f 02       		.uleb128 0x2
 14899 1780 91       		.byte	0x91
 14900 1781 77       		.sleb128 -9
 14901 1782 00       		.byte	0
 14902 1783 0C       		.uleb128 0xc
 14903 1784 F3030000 		.4byte	.LASF215
 14904 1788 01       		.byte	0x1
 14905 1789 5909     		.2byte	0x959
 14906 178b 00000000 		.4byte	.LFB176
 14907 178f 28000000 		.4byte	.LFE176-.LFB176
 14908 1793 01       		.uleb128 0x1
 14909 1794 9C       		.byte	0x9c
 14910 1795 A9170000 		.4byte	0x17a9
 14911 1799 0D       		.uleb128 0xd
 14912 179a EC150000 		.4byte	.LASF42
 14913 179e 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 320


 14914 179f 5909     		.2byte	0x959
 14915 17a1 34010000 		.4byte	0x134
 14916 17a5 02       		.uleb128 0x2
 14917 17a6 91       		.byte	0x91
 14918 17a7 77       		.sleb128 -9
 14919 17a8 00       		.byte	0
 14920 17a9 11       		.uleb128 0x11
 14921 17aa A91E0000 		.4byte	.LASF216
 14922 17ae 01       		.byte	0x1
 14923 17af 6209     		.2byte	0x962
 14924 17b1 00000000 		.4byte	.LFB177
 14925 17b5 1C000000 		.4byte	.LFE177-.LFB177
 14926 17b9 01       		.uleb128 0x1
 14927 17ba 9C       		.byte	0x9c
 14928 17bb 11       		.uleb128 0x11
 14929 17bc 3D090000 		.4byte	.LASF217
 14930 17c0 01       		.byte	0x1
 14931 17c1 6B09     		.2byte	0x96b
 14932 17c3 00000000 		.4byte	.LFB178
 14933 17c7 1C000000 		.4byte	.LFE178-.LFB178
 14934 17cb 01       		.uleb128 0x1
 14935 17cc 9C       		.byte	0x9c
 14936 17cd 11       		.uleb128 0x11
 14937 17ce 73010000 		.4byte	.LASF218
 14938 17d2 01       		.byte	0x1
 14939 17d3 7A09     		.2byte	0x97a
 14940 17d5 00000000 		.4byte	.LFB179
 14941 17d9 1C000000 		.4byte	.LFE179-.LFB179
 14942 17dd 01       		.uleb128 0x1
 14943 17de 9C       		.byte	0x9c
 14944 17df 11       		.uleb128 0x11
 14945 17e0 A3010000 		.4byte	.LASF219
 14946 17e4 01       		.byte	0x1
 14947 17e5 8509     		.2byte	0x985
 14948 17e7 00000000 		.4byte	.LFB180
 14949 17eb 1C000000 		.4byte	.LFE180-.LFB180
 14950 17ef 01       		.uleb128 0x1
 14951 17f0 9C       		.byte	0x9c
 14952 17f1 0B       		.uleb128 0xb
 14953 17f2 0D0C0000 		.4byte	.LASF220
 14954 17f6 01       		.byte	0x1
 14955 17f7 9409     		.2byte	0x994
 14956 17f9 34010000 		.4byte	0x134
 14957 17fd 00000000 		.4byte	.LFB181
 14958 1801 2C000000 		.4byte	.LFE181-.LFB181
 14959 1805 01       		.uleb128 0x1
 14960 1806 9C       		.byte	0x9c
 14961 1807 0C       		.uleb128 0xc
 14962 1808 57190000 		.4byte	.LASF221
 14963 180c 01       		.byte	0x1
 14964 180d 9E09     		.2byte	0x99e
 14965 180f 00000000 		.4byte	.LFB182
 14966 1813 28000000 		.4byte	.LFE182-.LFB182
 14967 1817 01       		.uleb128 0x1
 14968 1818 9C       		.byte	0x9c
 14969 1819 2D180000 		.4byte	0x182d
 14970 181d 0D       		.uleb128 0xd
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 321


 14971 181e EC150000 		.4byte	.LASF42
 14972 1822 01       		.byte	0x1
 14973 1823 9E09     		.2byte	0x99e
 14974 1825 34010000 		.4byte	0x134
 14975 1829 02       		.uleb128 0x2
 14976 182a 91       		.byte	0x91
 14977 182b 77       		.sleb128 -9
 14978 182c 00       		.byte	0
 14979 182d 0B       		.uleb128 0xb
 14980 182e 57010000 		.4byte	.LASF222
 14981 1832 01       		.byte	0x1
 14982 1833 A909     		.2byte	0x9a9
 14983 1835 34010000 		.4byte	0x134
 14984 1839 00000000 		.4byte	.LFB183
 14985 183d 2C000000 		.4byte	.LFE183-.LFB183
 14986 1841 01       		.uleb128 0x1
 14987 1842 9C       		.byte	0x9c
 14988 1843 0C       		.uleb128 0xc
 14989 1844 10190000 		.4byte	.LASF223
 14990 1848 01       		.byte	0x1
 14991 1849 B309     		.2byte	0x9b3
 14992 184b 00000000 		.4byte	.LFB184
 14993 184f 28000000 		.4byte	.LFE184-.LFB184
 14994 1853 01       		.uleb128 0x1
 14995 1854 9C       		.byte	0x9c
 14996 1855 69180000 		.4byte	0x1869
 14997 1859 0D       		.uleb128 0xd
 14998 185a EC150000 		.4byte	.LASF42
 14999 185e 01       		.byte	0x1
 15000 185f B309     		.2byte	0x9b3
 15001 1861 34010000 		.4byte	0x134
 15002 1865 02       		.uleb128 0x2
 15003 1866 91       		.byte	0x91
 15004 1867 77       		.sleb128 -9
 15005 1868 00       		.byte	0
 15006 1869 0B       		.uleb128 0xb
 15007 186a C9000000 		.4byte	.LASF224
 15008 186e 01       		.byte	0x1
 15009 186f C109     		.2byte	0x9c1
 15010 1871 34010000 		.4byte	0x134
 15011 1875 00000000 		.4byte	.LFB185
 15012 1879 2C000000 		.4byte	.LFE185-.LFB185
 15013 187d 01       		.uleb128 0x1
 15014 187e 9C       		.byte	0x9c
 15015 187f 0C       		.uleb128 0xc
 15016 1880 B1160000 		.4byte	.LASF225
 15017 1884 01       		.byte	0x1
 15018 1885 CF09     		.2byte	0x9cf
 15019 1887 00000000 		.4byte	.LFB186
 15020 188b 30000000 		.4byte	.LFE186-.LFB186
 15021 188f 01       		.uleb128 0x1
 15022 1890 9C       		.byte	0x9c
 15023 1891 A5180000 		.4byte	0x18a5
 15024 1895 0D       		.uleb128 0xd
 15025 1896 EC150000 		.4byte	.LASF42
 15026 189a 01       		.byte	0x1
 15027 189b CF09     		.2byte	0x9cf
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 322


 15028 189d 34010000 		.4byte	0x134
 15029 18a1 02       		.uleb128 0x2
 15030 18a2 91       		.byte	0x91
 15031 18a3 77       		.sleb128 -9
 15032 18a4 00       		.byte	0
 15033 18a5 0B       		.uleb128 0xb
 15034 18a6 8E030000 		.4byte	.LASF226
 15035 18aa 01       		.byte	0x1
 15036 18ab D909     		.2byte	0x9d9
 15037 18ad AD000000 		.4byte	0xad
 15038 18b1 00000000 		.4byte	.LFB187
 15039 18b5 2C000000 		.4byte	.LFE187-.LFB187
 15040 18b9 01       		.uleb128 0x1
 15041 18ba 9C       		.byte	0x9c
 15042 18bb 0C       		.uleb128 0xc
 15043 18bc B41C0000 		.4byte	.LASF227
 15044 18c0 01       		.byte	0x1
 15045 18c1 FB09     		.2byte	0x9fb
 15046 18c3 00000000 		.4byte	.LFB188
 15047 18c7 2C000000 		.4byte	.LFE188-.LFB188
 15048 18cb 01       		.uleb128 0x1
 15049 18cc 9C       		.byte	0x9c
 15050 18cd E1180000 		.4byte	0x18e1
 15051 18d1 0D       		.uleb128 0xd
 15052 18d2 540F0000 		.4byte	.LASF228
 15053 18d6 01       		.byte	0x1
 15054 18d7 FB09     		.2byte	0x9fb
 15055 18d9 AD000000 		.4byte	0xad
 15056 18dd 02       		.uleb128 0x2
 15057 18de 91       		.byte	0x91
 15058 18df 77       		.sleb128 -9
 15059 18e0 00       		.byte	0
 15060 18e1 0B       		.uleb128 0xb
 15061 18e2 A1190000 		.4byte	.LASF229
 15062 18e6 01       		.byte	0x1
 15063 18e7 180A     		.2byte	0xa18
 15064 18e9 AD000000 		.4byte	0xad
 15065 18ed 00000000 		.4byte	.LFB189
 15066 18f1 2C000000 		.4byte	.LFE189-.LFB189
 15067 18f5 01       		.uleb128 0x1
 15068 18f6 9C       		.byte	0x9c
 15069 18f7 0C       		.uleb128 0xc
 15070 18f8 B0000000 		.4byte	.LASF230
 15071 18fc 01       		.byte	0x1
 15072 18fd 200A     		.2byte	0xa20
 15073 18ff 00000000 		.4byte	.LFB190
 15074 1903 2C000000 		.4byte	.LFE190-.LFB190
 15075 1907 01       		.uleb128 0x1
 15076 1908 9C       		.byte	0x9c
 15077 1909 1D190000 		.4byte	0x191d
 15078 190d 0D       		.uleb128 0xd
 15079 190e AE030000 		.4byte	.LASF231
 15080 1912 01       		.byte	0x1
 15081 1913 200A     		.2byte	0xa20
 15082 1915 AD000000 		.4byte	0xad
 15083 1919 02       		.uleb128 0x2
 15084 191a 91       		.byte	0x91
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 323


 15085 191b 77       		.sleb128 -9
 15086 191c 00       		.byte	0
 15087 191d 0B       		.uleb128 0xb
 15088 191e 9F120000 		.4byte	.LASF232
 15089 1922 01       		.byte	0x1
 15090 1923 2A0A     		.2byte	0xa2a
 15091 1925 34010000 		.4byte	0x134
 15092 1929 00000000 		.4byte	.LFB191
 15093 192d 2C000000 		.4byte	.LFE191-.LFB191
 15094 1931 01       		.uleb128 0x1
 15095 1932 9C       		.byte	0x9c
 15096 1933 0C       		.uleb128 0xc
 15097 1934 4F0D0000 		.4byte	.LASF233
 15098 1938 01       		.byte	0x1
 15099 1939 340A     		.2byte	0xa34
 15100 193b 00000000 		.4byte	.LFB192
 15101 193f 28000000 		.4byte	.LFE192-.LFB192
 15102 1943 01       		.uleb128 0x1
 15103 1944 9C       		.byte	0x9c
 15104 1945 59190000 		.4byte	0x1959
 15105 1949 0D       		.uleb128 0xd
 15106 194a EC150000 		.4byte	.LASF42
 15107 194e 01       		.byte	0x1
 15108 194f 340A     		.2byte	0xa34
 15109 1951 34010000 		.4byte	0x134
 15110 1955 02       		.uleb128 0x2
 15111 1956 91       		.byte	0x91
 15112 1957 77       		.sleb128 -9
 15113 1958 00       		.byte	0
 15114 1959 0B       		.uleb128 0xb
 15115 195a FB080000 		.4byte	.LASF234
 15116 195e 01       		.byte	0x1
 15117 195f 3D0A     		.2byte	0xa3d
 15118 1961 34010000 		.4byte	0x134
 15119 1965 00000000 		.4byte	.LFB193
 15120 1969 2C000000 		.4byte	.LFE193-.LFB193
 15121 196d 01       		.uleb128 0x1
 15122 196e 9C       		.byte	0x9c
 15123 196f 0C       		.uleb128 0xc
 15124 1970 53020000 		.4byte	.LASF235
 15125 1974 01       		.byte	0x1
 15126 1975 470A     		.2byte	0xa47
 15127 1977 00000000 		.4byte	.LFB194
 15128 197b 28000000 		.4byte	.LFE194-.LFB194
 15129 197f 01       		.uleb128 0x1
 15130 1980 9C       		.byte	0x9c
 15131 1981 95190000 		.4byte	0x1995
 15132 1985 0D       		.uleb128 0xd
 15133 1986 EC150000 		.4byte	.LASF42
 15134 198a 01       		.byte	0x1
 15135 198b 470A     		.2byte	0xa47
 15136 198d 34010000 		.4byte	0x134
 15137 1991 02       		.uleb128 0x2
 15138 1992 91       		.byte	0x91
 15139 1993 77       		.sleb128 -9
 15140 1994 00       		.byte	0
 15141 1995 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 324


 15142 1996 10110000 		.4byte	.LASF236
 15143 199a 01       		.byte	0x1
 15144 199b 500A     		.2byte	0xa50
 15145 199d 34010000 		.4byte	0x134
 15146 19a1 00000000 		.4byte	.LFB195
 15147 19a5 2C000000 		.4byte	.LFE195-.LFB195
 15148 19a9 01       		.uleb128 0x1
 15149 19aa 9C       		.byte	0x9c
 15150 19ab 0C       		.uleb128 0xc
 15151 19ac 980C0000 		.4byte	.LASF237
 15152 19b0 01       		.byte	0x1
 15153 19b1 5A0A     		.2byte	0xa5a
 15154 19b3 00000000 		.4byte	.LFB196
 15155 19b7 28000000 		.4byte	.LFE196-.LFB196
 15156 19bb 01       		.uleb128 0x1
 15157 19bc 9C       		.byte	0x9c
 15158 19bd D1190000 		.4byte	0x19d1
 15159 19c1 0D       		.uleb128 0xd
 15160 19c2 EC150000 		.4byte	.LASF42
 15161 19c6 01       		.byte	0x1
 15162 19c7 5A0A     		.2byte	0xa5a
 15163 19c9 34010000 		.4byte	0x134
 15164 19cd 02       		.uleb128 0x2
 15165 19ce 91       		.byte	0x91
 15166 19cf 77       		.sleb128 -9
 15167 19d0 00       		.byte	0
 15168 19d1 0B       		.uleb128 0xb
 15169 19d2 C5100000 		.4byte	.LASF238
 15170 19d6 01       		.byte	0x1
 15171 19d7 630A     		.2byte	0xa63
 15172 19d9 34010000 		.4byte	0x134
 15173 19dd 00000000 		.4byte	.LFB197
 15174 19e1 2C000000 		.4byte	.LFE197-.LFB197
 15175 19e5 01       		.uleb128 0x1
 15176 19e6 9C       		.byte	0x9c
 15177 19e7 0C       		.uleb128 0xc
 15178 19e8 48040000 		.4byte	.LASF239
 15179 19ec 01       		.byte	0x1
 15180 19ed 6D0A     		.2byte	0xa6d
 15181 19ef 00000000 		.4byte	.LFB198
 15182 19f3 28000000 		.4byte	.LFE198-.LFB198
 15183 19f7 01       		.uleb128 0x1
 15184 19f8 9C       		.byte	0x9c
 15185 19f9 0D1A0000 		.4byte	0x1a0d
 15186 19fd 0D       		.uleb128 0xd
 15187 19fe EC150000 		.4byte	.LASF42
 15188 1a02 01       		.byte	0x1
 15189 1a03 6D0A     		.2byte	0xa6d
 15190 1a05 34010000 		.4byte	0x134
 15191 1a09 02       		.uleb128 0x2
 15192 1a0a 91       		.byte	0x91
 15193 1a0b 77       		.sleb128 -9
 15194 1a0c 00       		.byte	0
 15195 1a0d 0B       		.uleb128 0xb
 15196 1a0e 840E0000 		.4byte	.LASF240
 15197 1a12 01       		.byte	0x1
 15198 1a13 760A     		.2byte	0xa76
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 325


 15199 1a15 34010000 		.4byte	0x134
 15200 1a19 00000000 		.4byte	.LFB199
 15201 1a1d 2C000000 		.4byte	.LFE199-.LFB199
 15202 1a21 01       		.uleb128 0x1
 15203 1a22 9C       		.byte	0x9c
 15204 1a23 0C       		.uleb128 0xc
 15205 1a24 C3070000 		.4byte	.LASF241
 15206 1a28 01       		.byte	0x1
 15207 1a29 800A     		.2byte	0xa80
 15208 1a2b 00000000 		.4byte	.LFB200
 15209 1a2f 28000000 		.4byte	.LFE200-.LFB200
 15210 1a33 01       		.uleb128 0x1
 15211 1a34 9C       		.byte	0x9c
 15212 1a35 491A0000 		.4byte	0x1a49
 15213 1a39 0D       		.uleb128 0xd
 15214 1a3a EC150000 		.4byte	.LASF42
 15215 1a3e 01       		.byte	0x1
 15216 1a3f 800A     		.2byte	0xa80
 15217 1a41 34010000 		.4byte	0x134
 15218 1a45 02       		.uleb128 0x2
 15219 1a46 91       		.byte	0x91
 15220 1a47 77       		.sleb128 -9
 15221 1a48 00       		.byte	0
 15222 1a49 0B       		.uleb128 0xb
 15223 1a4a E30B0000 		.4byte	.LASF242
 15224 1a4e 01       		.byte	0x1
 15225 1a4f 890A     		.2byte	0xa89
 15226 1a51 34010000 		.4byte	0x134
 15227 1a55 00000000 		.4byte	.LFB201
 15228 1a59 2C000000 		.4byte	.LFE201-.LFB201
 15229 1a5d 01       		.uleb128 0x1
 15230 1a5e 9C       		.byte	0x9c
 15231 1a5f 0C       		.uleb128 0xc
 15232 1a60 6A120000 		.4byte	.LASF243
 15233 1a64 01       		.byte	0x1
 15234 1a65 930A     		.2byte	0xa93
 15235 1a67 00000000 		.4byte	.LFB202
 15236 1a6b 28000000 		.4byte	.LFE202-.LFB202
 15237 1a6f 01       		.uleb128 0x1
 15238 1a70 9C       		.byte	0x9c
 15239 1a71 851A0000 		.4byte	0x1a85
 15240 1a75 0D       		.uleb128 0xd
 15241 1a76 EC150000 		.4byte	.LASF42
 15242 1a7a 01       		.byte	0x1
 15243 1a7b 930A     		.2byte	0xa93
 15244 1a7d 34010000 		.4byte	0x134
 15245 1a81 02       		.uleb128 0x2
 15246 1a82 91       		.byte	0x91
 15247 1a83 77       		.sleb128 -9
 15248 1a84 00       		.byte	0
 15249 1a85 0B       		.uleb128 0xb
 15250 1a86 9F130000 		.4byte	.LASF244
 15251 1a8a 01       		.byte	0x1
 15252 1a8b A00A     		.2byte	0xaa0
 15253 1a8d C3000000 		.4byte	0xc3
 15254 1a91 00000000 		.4byte	.LFB203
 15255 1a95 38000000 		.4byte	.LFE203-.LFB203
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 326


 15256 1a99 01       		.uleb128 0x1
 15257 1a9a 9C       		.byte	0x9c
 15258 1a9b 0B       		.uleb128 0xb
 15259 1a9c 19160000 		.4byte	.LASF245
 15260 1aa0 01       		.byte	0x1
 15261 1aa1 C00A     		.2byte	0xac0
 15262 1aa3 AD000000 		.4byte	0xad
 15263 1aa7 00000000 		.4byte	.LFB204
 15264 1aab 28000000 		.4byte	.LFE204-.LFB204
 15265 1aaf 01       		.uleb128 0x1
 15266 1ab0 9C       		.byte	0x9c
 15267 1ab1 0C       		.uleb128 0xc
 15268 1ab2 23150000 		.4byte	.LASF246
 15269 1ab6 01       		.byte	0x1
 15270 1ab7 C40A     		.2byte	0xac4
 15271 1ab9 00000000 		.4byte	.LFB205
 15272 1abd 2C000000 		.4byte	.LFE205-.LFB205
 15273 1ac1 01       		.uleb128 0x1
 15274 1ac2 9C       		.byte	0x9c
 15275 1ac3 E61A0000 		.4byte	0x1ae6
 15276 1ac7 0D       		.uleb128 0xd
 15277 1ac8 080C0000 		.4byte	.LASF113
 15278 1acc 01       		.byte	0x1
 15279 1acd C40A     		.2byte	0xac4
 15280 1acf E61A0000 		.4byte	0x1ae6
 15281 1ad3 02       		.uleb128 0x2
 15282 1ad4 91       		.byte	0x91
 15283 1ad5 74       		.sleb128 -12
 15284 1ad6 0D       		.uleb128 0xd
 15285 1ad7 2D160000 		.4byte	.LASF107
 15286 1adb 01       		.byte	0x1
 15287 1adc C40A     		.2byte	0xac4
 15288 1ade AD000000 		.4byte	0xad
 15289 1ae2 02       		.uleb128 0x2
 15290 1ae3 91       		.byte	0x91
 15291 1ae4 73       		.sleb128 -13
 15292 1ae5 00       		.byte	0
 15293 1ae6 10       		.uleb128 0x10
 15294 1ae7 04       		.byte	0x4
 15295 1ae8 AD000000 		.4byte	0xad
 15296 1aec 0C       		.uleb128 0xc
 15297 1aed 43190000 		.4byte	.LASF247
 15298 1af1 01       		.byte	0x1
 15299 1af2 CB0A     		.2byte	0xacb
 15300 1af4 00000000 		.4byte	.LFB206
 15301 1af8 28000000 		.4byte	.LFE206-.LFB206
 15302 1afc 01       		.uleb128 0x1
 15303 1afd 9C       		.byte	0x9c
 15304 1afe 121B0000 		.4byte	0x1b12
 15305 1b02 0D       		.uleb128 0xd
 15306 1b03 080C0000 		.4byte	.LASF113
 15307 1b07 01       		.byte	0x1
 15308 1b08 CB0A     		.2byte	0xacb
 15309 1b0a AD000000 		.4byte	0xad
 15310 1b0e 02       		.uleb128 0x2
 15311 1b0f 91       		.byte	0x91
 15312 1b10 77       		.sleb128 -9
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 327


 15313 1b11 00       		.byte	0
 15314 1b12 0B       		.uleb128 0xb
 15315 1b13 8F0D0000 		.4byte	.LASF248
 15316 1b17 01       		.byte	0x1
 15317 1b18 D80A     		.2byte	0xad8
 15318 1b1a AD000000 		.4byte	0xad
 15319 1b1e 00000000 		.4byte	.LFB207
 15320 1b22 2C000000 		.4byte	.LFE207-.LFB207
 15321 1b26 01       		.uleb128 0x1
 15322 1b27 9C       		.byte	0x9c
 15323 1b28 0C       		.uleb128 0xc
 15324 1b29 B6050000 		.4byte	.LASF249
 15325 1b2d 01       		.byte	0x1
 15326 1b2e E50A     		.2byte	0xae5
 15327 1b30 00000000 		.4byte	.LFB208
 15328 1b34 2C000000 		.4byte	.LFE208-.LFB208
 15329 1b38 01       		.uleb128 0x1
 15330 1b39 9C       		.byte	0x9c
 15331 1b3a 4D1B0000 		.4byte	0x1b4d
 15332 1b3e 0F       		.uleb128 0xf
 15333 1b3f 696400   		.ascii	"id\000"
 15334 1b42 01       		.byte	0x1
 15335 1b43 E50A     		.2byte	0xae5
 15336 1b45 AD000000 		.4byte	0xad
 15337 1b49 02       		.uleb128 0x2
 15338 1b4a 91       		.byte	0x91
 15339 1b4b 77       		.sleb128 -9
 15340 1b4c 00       		.byte	0
 15341 1b4d 0B       		.uleb128 0xb
 15342 1b4e 0C0B0000 		.4byte	.LASF250
 15343 1b52 01       		.byte	0x1
 15344 1b53 ED0A     		.2byte	0xaed
 15345 1b55 AD000000 		.4byte	0xad
 15346 1b59 00000000 		.4byte	.LFB209
 15347 1b5d 28000000 		.4byte	.LFE209-.LFB209
 15348 1b61 01       		.uleb128 0x1
 15349 1b62 9C       		.byte	0x9c
 15350 1b63 0C       		.uleb128 0xc
 15351 1b64 27180000 		.4byte	.LASF251
 15352 1b68 01       		.byte	0x1
 15353 1b69 F10A     		.2byte	0xaf1
 15354 1b6b 00000000 		.4byte	.LFB210
 15355 1b6f 28000000 		.4byte	.LFE210-.LFB210
 15356 1b73 01       		.uleb128 0x1
 15357 1b74 9C       		.byte	0x9c
 15358 1b75 891B0000 		.4byte	0x1b89
 15359 1b79 0D       		.uleb128 0xd
 15360 1b7a EC150000 		.4byte	.LASF42
 15361 1b7e 01       		.byte	0x1
 15362 1b7f F10A     		.2byte	0xaf1
 15363 1b81 34010000 		.4byte	0x134
 15364 1b85 02       		.uleb128 0x2
 15365 1b86 91       		.byte	0x91
 15366 1b87 77       		.sleb128 -9
 15367 1b88 00       		.byte	0
 15368 1b89 0B       		.uleb128 0xb
 15369 1b8a B2170000 		.4byte	.LASF252
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 328


 15370 1b8e 01       		.byte	0x1
 15371 1b8f F40A     		.2byte	0xaf4
 15372 1b91 A2000000 		.4byte	0xa2
 15373 1b95 00000000 		.4byte	.LFB211
 15374 1b99 30000000 		.4byte	.LFE211-.LFB211
 15375 1b9d 01       		.uleb128 0x1
 15376 1b9e 9C       		.byte	0x9c
 15377 1b9f 0C       		.uleb128 0xc
 15378 1ba0 2C190000 		.4byte	.LASF253
 15379 1ba4 01       		.byte	0x1
 15380 1ba5 F80A     		.2byte	0xaf8
 15381 1ba7 00000000 		.4byte	.LFB212
 15382 1bab 2C000000 		.4byte	.LFE212-.LFB212
 15383 1baf 01       		.uleb128 0x1
 15384 1bb0 9C       		.byte	0x9c
 15385 1bb1 C51B0000 		.4byte	0x1bc5
 15386 1bb5 0D       		.uleb128 0xd
 15387 1bb6 36090000 		.4byte	.LASF254
 15388 1bba 01       		.byte	0x1
 15389 1bbb F80A     		.2byte	0xaf8
 15390 1bbd A2000000 		.4byte	0xa2
 15391 1bc1 02       		.uleb128 0x2
 15392 1bc2 91       		.byte	0x91
 15393 1bc3 77       		.sleb128 -9
 15394 1bc4 00       		.byte	0
 15395 1bc5 0B       		.uleb128 0xb
 15396 1bc6 36010000 		.4byte	.LASF255
 15397 1bca 01       		.byte	0x1
 15398 1bcb FE0A     		.2byte	0xafe
 15399 1bcd A2000000 		.4byte	0xa2
 15400 1bd1 00000000 		.4byte	.LFB213
 15401 1bd5 30000000 		.4byte	.LFE213-.LFB213
 15402 1bd9 01       		.uleb128 0x1
 15403 1bda 9C       		.byte	0x9c
 15404 1bdb 0C       		.uleb128 0xc
 15405 1bdc 810C0000 		.4byte	.LASF256
 15406 1be0 01       		.byte	0x1
 15407 1be1 020B     		.2byte	0xb02
 15408 1be3 00000000 		.4byte	.LFB214
 15409 1be7 2C000000 		.4byte	.LFE214-.LFB214
 15410 1beb 01       		.uleb128 0x1
 15411 1bec 9C       		.byte	0x9c
 15412 1bed 011C0000 		.4byte	0x1c01
 15413 1bf1 0D       		.uleb128 0xd
 15414 1bf2 36090000 		.4byte	.LASF254
 15415 1bf6 01       		.byte	0x1
 15416 1bf7 020B     		.2byte	0xb02
 15417 1bf9 A2000000 		.4byte	0xa2
 15418 1bfd 02       		.uleb128 0x2
 15419 1bfe 91       		.byte	0x91
 15420 1bff 77       		.sleb128 -9
 15421 1c00 00       		.byte	0
 15422 1c01 0B       		.uleb128 0xb
 15423 1c02 CD1B0000 		.4byte	.LASF257
 15424 1c06 01       		.byte	0x1
 15425 1c07 080B     		.2byte	0xb08
 15426 1c09 A2000000 		.4byte	0xa2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 329


 15427 1c0d 00000000 		.4byte	.LFB215
 15428 1c11 30000000 		.4byte	.LFE215-.LFB215
 15429 1c15 01       		.uleb128 0x1
 15430 1c16 9C       		.byte	0x9c
 15431 1c17 0C       		.uleb128 0xc
 15432 1c18 931D0000 		.4byte	.LASF258
 15433 1c1c 01       		.byte	0x1
 15434 1c1d 0C0B     		.2byte	0xb0c
 15435 1c1f 00000000 		.4byte	.LFB216
 15436 1c23 2C000000 		.4byte	.LFE216-.LFB216
 15437 1c27 01       		.uleb128 0x1
 15438 1c28 9C       		.byte	0x9c
 15439 1c29 3D1C0000 		.4byte	0x1c3d
 15440 1c2d 0D       		.uleb128 0xd
 15441 1c2e 36090000 		.4byte	.LASF254
 15442 1c32 01       		.byte	0x1
 15443 1c33 0C0B     		.2byte	0xb0c
 15444 1c35 A2000000 		.4byte	0xa2
 15445 1c39 02       		.uleb128 0x2
 15446 1c3a 91       		.byte	0x91
 15447 1c3b 77       		.sleb128 -9
 15448 1c3c 00       		.byte	0
 15449 1c3d 0B       		.uleb128 0xb
 15450 1c3e C31D0000 		.4byte	.LASF259
 15451 1c42 01       		.byte	0x1
 15452 1c43 120B     		.2byte	0xb12
 15453 1c45 A2000000 		.4byte	0xa2
 15454 1c49 00000000 		.4byte	.LFB217
 15455 1c4d 2C000000 		.4byte	.LFE217-.LFB217
 15456 1c51 01       		.uleb128 0x1
 15457 1c52 9C       		.byte	0x9c
 15458 1c53 0C       		.uleb128 0xc
 15459 1c54 4E110000 		.4byte	.LASF260
 15460 1c58 01       		.byte	0x1
 15461 1c59 160B     		.2byte	0xb16
 15462 1c5b 00000000 		.4byte	.LFB218
 15463 1c5f 28000000 		.4byte	.LFE218-.LFB218
 15464 1c63 01       		.uleb128 0x1
 15465 1c64 9C       		.byte	0x9c
 15466 1c65 791C0000 		.4byte	0x1c79
 15467 1c69 0D       		.uleb128 0xd
 15468 1c6a FA120000 		.4byte	.LASF261
 15469 1c6e 01       		.byte	0x1
 15470 1c6f 160B     		.2byte	0xb16
 15471 1c71 A2000000 		.4byte	0xa2
 15472 1c75 02       		.uleb128 0x2
 15473 1c76 91       		.byte	0x91
 15474 1c77 77       		.sleb128 -9
 15475 1c78 00       		.byte	0
 15476 1c79 0B       		.uleb128 0xb
 15477 1c7a FB100000 		.4byte	.LASF262
 15478 1c7e 01       		.byte	0x1
 15479 1c7f 1C0B     		.2byte	0xb1c
 15480 1c81 A2000000 		.4byte	0xa2
 15481 1c85 00000000 		.4byte	.LFB219
 15482 1c89 2C000000 		.4byte	.LFE219-.LFB219
 15483 1c8d 01       		.uleb128 0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 330


 15484 1c8e 9C       		.byte	0x9c
 15485 1c8f 0C       		.uleb128 0xc
 15486 1c90 71140000 		.4byte	.LASF263
 15487 1c94 01       		.byte	0x1
 15488 1c95 200B     		.2byte	0xb20
 15489 1c97 00000000 		.4byte	.LFB220
 15490 1c9b 28000000 		.4byte	.LFE220-.LFB220
 15491 1c9f 01       		.uleb128 0x1
 15492 1ca0 9C       		.byte	0x9c
 15493 1ca1 B51C0000 		.4byte	0x1cb5
 15494 1ca5 0D       		.uleb128 0xd
 15495 1ca6 FA120000 		.4byte	.LASF261
 15496 1caa 01       		.byte	0x1
 15497 1cab 200B     		.2byte	0xb20
 15498 1cad A2000000 		.4byte	0xa2
 15499 1cb1 02       		.uleb128 0x2
 15500 1cb2 91       		.byte	0x91
 15501 1cb3 77       		.sleb128 -9
 15502 1cb4 00       		.byte	0
 15503 1cb5 0B       		.uleb128 0xb
 15504 1cb6 92070000 		.4byte	.LASF264
 15505 1cba 01       		.byte	0x1
 15506 1cbb 260B     		.2byte	0xb26
 15507 1cbd A2000000 		.4byte	0xa2
 15508 1cc1 00000000 		.4byte	.LFB221
 15509 1cc5 2C000000 		.4byte	.LFE221-.LFB221
 15510 1cc9 01       		.uleb128 0x1
 15511 1cca 9C       		.byte	0x9c
 15512 1ccb 0C       		.uleb128 0xc
 15513 1ccc 6C170000 		.4byte	.LASF265
 15514 1cd0 01       		.byte	0x1
 15515 1cd1 2A0B     		.2byte	0xb2a
 15516 1cd3 00000000 		.4byte	.LFB222
 15517 1cd7 28000000 		.4byte	.LFE222-.LFB222
 15518 1cdb 01       		.uleb128 0x1
 15519 1cdc 9C       		.byte	0x9c
 15520 1cdd F11C0000 		.4byte	0x1cf1
 15521 1ce1 0D       		.uleb128 0xd
 15522 1ce2 FA120000 		.4byte	.LASF261
 15523 1ce6 01       		.byte	0x1
 15524 1ce7 2A0B     		.2byte	0xb2a
 15525 1ce9 A2000000 		.4byte	0xa2
 15526 1ced 02       		.uleb128 0x2
 15527 1cee 91       		.byte	0x91
 15528 1cef 77       		.sleb128 -9
 15529 1cf0 00       		.byte	0
 15530 1cf1 0B       		.uleb128 0xb
 15531 1cf2 E8160000 		.4byte	.LASF266
 15532 1cf6 01       		.byte	0x1
 15533 1cf7 300B     		.2byte	0xb30
 15534 1cf9 B8000000 		.4byte	0xb8
 15535 1cfd 00000000 		.4byte	.LFB223
 15536 1d01 38000000 		.4byte	.LFE223-.LFB223
 15537 1d05 01       		.uleb128 0x1
 15538 1d06 9C       		.byte	0x9c
 15539 1d07 0C       		.uleb128 0xc
 15540 1d08 9A170000 		.4byte	.LASF267
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 331


 15541 1d0c 01       		.byte	0x1
 15542 1d0d 340B     		.2byte	0xb34
 15543 1d0f 00000000 		.4byte	.LFB224
 15544 1d13 28000000 		.4byte	.LFE224-.LFB224
 15545 1d17 01       		.uleb128 0x1
 15546 1d18 9C       		.byte	0x9c
 15547 1d19 2D1D0000 		.4byte	0x1d2d
 15548 1d1d 0D       		.uleb128 0xd
 15549 1d1e 36090000 		.4byte	.LASF254
 15550 1d22 01       		.byte	0x1
 15551 1d23 340B     		.2byte	0xb34
 15552 1d25 B8000000 		.4byte	0xb8
 15553 1d29 02       		.uleb128 0x2
 15554 1d2a 91       		.byte	0x91
 15555 1d2b 76       		.sleb128 -10
 15556 1d2c 00       		.byte	0
 15557 1d2d 0B       		.uleb128 0xb
 15558 1d2e FE000000 		.4byte	.LASF268
 15559 1d32 01       		.byte	0x1
 15560 1d33 3A0B     		.2byte	0xb3a
 15561 1d35 B8000000 		.4byte	0xb8
 15562 1d39 00000000 		.4byte	.LFB225
 15563 1d3d 38000000 		.4byte	.LFE225-.LFB225
 15564 1d41 01       		.uleb128 0x1
 15565 1d42 9C       		.byte	0x9c
 15566 1d43 0C       		.uleb128 0xc
 15567 1d44 E2130000 		.4byte	.LASF269
 15568 1d48 01       		.byte	0x1
 15569 1d49 3E0B     		.2byte	0xb3e
 15570 1d4b 00000000 		.4byte	.LFB226
 15571 1d4f 28000000 		.4byte	.LFE226-.LFB226
 15572 1d53 01       		.uleb128 0x1
 15573 1d54 9C       		.byte	0x9c
 15574 1d55 691D0000 		.4byte	0x1d69
 15575 1d59 0D       		.uleb128 0xd
 15576 1d5a 36090000 		.4byte	.LASF254
 15577 1d5e 01       		.byte	0x1
 15578 1d5f 3E0B     		.2byte	0xb3e
 15579 1d61 B8000000 		.4byte	0xb8
 15580 1d65 02       		.uleb128 0x2
 15581 1d66 91       		.byte	0x91
 15582 1d67 76       		.sleb128 -10
 15583 1d68 00       		.byte	0
 15584 1d69 0B       		.uleb128 0xb
 15585 1d6a 9C0F0000 		.4byte	.LASF270
 15586 1d6e 01       		.byte	0x1
 15587 1d6f 440B     		.2byte	0xb44
 15588 1d71 B8000000 		.4byte	0xb8
 15589 1d75 00000000 		.4byte	.LFB227
 15590 1d79 38000000 		.4byte	.LFE227-.LFB227
 15591 1d7d 01       		.uleb128 0x1
 15592 1d7e 9C       		.byte	0x9c
 15593 1d7f 0C       		.uleb128 0xc
 15594 1d80 15100000 		.4byte	.LASF271
 15595 1d84 01       		.byte	0x1
 15596 1d85 480B     		.2byte	0xb48
 15597 1d87 00000000 		.4byte	.LFB228
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 332


 15598 1d8b 28000000 		.4byte	.LFE228-.LFB228
 15599 1d8f 01       		.uleb128 0x1
 15600 1d90 9C       		.byte	0x9c
 15601 1d91 A51D0000 		.4byte	0x1da5
 15602 1d95 0D       		.uleb128 0xd
 15603 1d96 36090000 		.4byte	.LASF254
 15604 1d9a 01       		.byte	0x1
 15605 1d9b 480B     		.2byte	0xb48
 15606 1d9d B8000000 		.4byte	0xb8
 15607 1da1 02       		.uleb128 0x2
 15608 1da2 91       		.byte	0x91
 15609 1da3 76       		.sleb128 -10
 15610 1da4 00       		.byte	0
 15611 1da5 0B       		.uleb128 0xb
 15612 1da6 4E050000 		.4byte	.LASF272
 15613 1daa 01       		.byte	0x1
 15614 1dab 4E0B     		.2byte	0xb4e
 15615 1dad B8000000 		.4byte	0xb8
 15616 1db1 00000000 		.4byte	.LFB229
 15617 1db5 38000000 		.4byte	.LFE229-.LFB229
 15618 1db9 01       		.uleb128 0x1
 15619 1dba 9C       		.byte	0x9c
 15620 1dbb 0C       		.uleb128 0xc
 15621 1dbc 90100000 		.4byte	.LASF273
 15622 1dc0 01       		.byte	0x1
 15623 1dc1 520B     		.2byte	0xb52
 15624 1dc3 00000000 		.4byte	.LFB230
 15625 1dc7 28000000 		.4byte	.LFE230-.LFB230
 15626 1dcb 01       		.uleb128 0x1
 15627 1dcc 9C       		.byte	0x9c
 15628 1dcd E11D0000 		.4byte	0x1de1
 15629 1dd1 0D       		.uleb128 0xd
 15630 1dd2 36090000 		.4byte	.LASF254
 15631 1dd6 01       		.byte	0x1
 15632 1dd7 520B     		.2byte	0xb52
 15633 1dd9 B8000000 		.4byte	0xb8
 15634 1ddd 02       		.uleb128 0x2
 15635 1dde 91       		.byte	0x91
 15636 1ddf 76       		.sleb128 -10
 15637 1de0 00       		.byte	0
 15638 1de1 0B       		.uleb128 0xb
 15639 1de2 12070000 		.4byte	.LASF274
 15640 1de6 01       		.byte	0x1
 15641 1de7 580B     		.2byte	0xb58
 15642 1de9 B8000000 		.4byte	0xb8
 15643 1ded 00000000 		.4byte	.LFB231
 15644 1df1 38000000 		.4byte	.LFE231-.LFB231
 15645 1df5 01       		.uleb128 0x1
 15646 1df6 9C       		.byte	0x9c
 15647 1df7 0C       		.uleb128 0xc
 15648 1df8 9F140000 		.4byte	.LASF275
 15649 1dfc 01       		.byte	0x1
 15650 1dfd 5C0B     		.2byte	0xb5c
 15651 1dff 00000000 		.4byte	.LFB232
 15652 1e03 28000000 		.4byte	.LFE232-.LFB232
 15653 1e07 01       		.uleb128 0x1
 15654 1e08 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 333


 15655 1e09 1D1E0000 		.4byte	0x1e1d
 15656 1e0d 0D       		.uleb128 0xd
 15657 1e0e 36090000 		.4byte	.LASF254
 15658 1e12 01       		.byte	0x1
 15659 1e13 5C0B     		.2byte	0xb5c
 15660 1e15 B8000000 		.4byte	0xb8
 15661 1e19 02       		.uleb128 0x2
 15662 1e1a 91       		.byte	0x91
 15663 1e1b 76       		.sleb128 -10
 15664 1e1c 00       		.byte	0
 15665 1e1d 0B       		.uleb128 0xb
 15666 1e1e BA0E0000 		.4byte	.LASF276
 15667 1e22 01       		.byte	0x1
 15668 1e23 620B     		.2byte	0xb62
 15669 1e25 B8000000 		.4byte	0xb8
 15670 1e29 00000000 		.4byte	.LFB233
 15671 1e2d 38000000 		.4byte	.LFE233-.LFB233
 15672 1e31 01       		.uleb128 0x1
 15673 1e32 9C       		.byte	0x9c
 15674 1e33 0C       		.uleb128 0xc
 15675 1e34 CF010000 		.4byte	.LASF277
 15676 1e38 01       		.byte	0x1
 15677 1e39 660B     		.2byte	0xb66
 15678 1e3b 00000000 		.4byte	.LFB234
 15679 1e3f 28000000 		.4byte	.LFE234-.LFB234
 15680 1e43 01       		.uleb128 0x1
 15681 1e44 9C       		.byte	0x9c
 15682 1e45 591E0000 		.4byte	0x1e59
 15683 1e49 0D       		.uleb128 0xd
 15684 1e4a 36090000 		.4byte	.LASF254
 15685 1e4e 01       		.byte	0x1
 15686 1e4f 660B     		.2byte	0xb66
 15687 1e51 B8000000 		.4byte	0xb8
 15688 1e55 02       		.uleb128 0x2
 15689 1e56 91       		.byte	0x91
 15690 1e57 76       		.sleb128 -10
 15691 1e58 00       		.byte	0
 15692 1e59 0B       		.uleb128 0xb
 15693 1e5a EA010000 		.4byte	.LASF278
 15694 1e5e 01       		.byte	0x1
 15695 1e5f 6C0B     		.2byte	0xb6c
 15696 1e61 34010000 		.4byte	0x134
 15697 1e65 00000000 		.4byte	.LFB235
 15698 1e69 2C000000 		.4byte	.LFE235-.LFB235
 15699 1e6d 01       		.uleb128 0x1
 15700 1e6e 9C       		.byte	0x9c
 15701 1e6f 0C       		.uleb128 0xc
 15702 1e70 88160000 		.4byte	.LASF279
 15703 1e74 01       		.byte	0x1
 15704 1e75 700B     		.2byte	0xb70
 15705 1e77 00000000 		.4byte	.LFB236
 15706 1e7b 28000000 		.4byte	.LFE236-.LFB236
 15707 1e7f 01       		.uleb128 0x1
 15708 1e80 9C       		.byte	0x9c
 15709 1e81 951E0000 		.4byte	0x1e95
 15710 1e85 0D       		.uleb128 0xd
 15711 1e86 EC150000 		.4byte	.LASF42
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 334


 15712 1e8a 01       		.byte	0x1
 15713 1e8b 700B     		.2byte	0xb70
 15714 1e8d 34010000 		.4byte	0x134
 15715 1e91 02       		.uleb128 0x2
 15716 1e92 91       		.byte	0x91
 15717 1e93 77       		.sleb128 -9
 15718 1e94 00       		.byte	0
 15719 1e95 0B       		.uleb128 0xb
 15720 1e96 86140000 		.4byte	.LASF280
 15721 1e9a 01       		.byte	0x1
 15722 1e9b 730B     		.2byte	0xb73
 15723 1e9d 34010000 		.4byte	0x134
 15724 1ea1 00000000 		.4byte	.LFB237
 15725 1ea5 2C000000 		.4byte	.LFE237-.LFB237
 15726 1ea9 01       		.uleb128 0x1
 15727 1eaa 9C       		.byte	0x9c
 15728 1eab 0C       		.uleb128 0xc
 15729 1eac A50A0000 		.4byte	.LASF281
 15730 1eb0 01       		.byte	0x1
 15731 1eb1 770B     		.2byte	0xb77
 15732 1eb3 00000000 		.4byte	.LFB238
 15733 1eb7 28000000 		.4byte	.LFE238-.LFB238
 15734 1ebb 01       		.uleb128 0x1
 15735 1ebc 9C       		.byte	0x9c
 15736 1ebd D11E0000 		.4byte	0x1ed1
 15737 1ec1 0D       		.uleb128 0xd
 15738 1ec2 EC150000 		.4byte	.LASF42
 15739 1ec6 01       		.byte	0x1
 15740 1ec7 770B     		.2byte	0xb77
 15741 1ec9 34010000 		.4byte	0x134
 15742 1ecd 02       		.uleb128 0x2
 15743 1ece 91       		.byte	0x91
 15744 1ecf 77       		.sleb128 -9
 15745 1ed0 00       		.byte	0
 15746 1ed1 0B       		.uleb128 0xb
 15747 1ed2 380C0000 		.4byte	.LASF282
 15748 1ed6 01       		.byte	0x1
 15749 1ed7 7D0B     		.2byte	0xb7d
 15750 1ed9 34010000 		.4byte	0x134
 15751 1edd 00000000 		.4byte	.LFB239
 15752 1ee1 2C000000 		.4byte	.LFE239-.LFB239
 15753 1ee5 01       		.uleb128 0x1
 15754 1ee6 9C       		.byte	0x9c
 15755 1ee7 0B       		.uleb128 0xb
 15756 1ee8 F4190000 		.4byte	.LASF283
 15757 1eec 01       		.byte	0x1
 15758 1eed 810B     		.2byte	0xb81
 15759 1eef 34010000 		.4byte	0x134
 15760 1ef3 00000000 		.4byte	.LFB240
 15761 1ef7 2C000000 		.4byte	.LFE240-.LFB240
 15762 1efb 01       		.uleb128 0x1
 15763 1efc 9C       		.byte	0x9c
 15764 1efd 0B       		.uleb128 0xb
 15765 1efe D50F0000 		.4byte	.LASF284
 15766 1f02 01       		.byte	0x1
 15767 1f03 850B     		.2byte	0xb85
 15768 1f05 34010000 		.4byte	0x134
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 335


 15769 1f09 00000000 		.4byte	.LFB241
 15770 1f0d 2C000000 		.4byte	.LFE241-.LFB241
 15771 1f11 01       		.uleb128 0x1
 15772 1f12 9C       		.byte	0x9c
 15773 1f13 0B       		.uleb128 0xb
 15774 1f14 A8180000 		.4byte	.LASF285
 15775 1f18 01       		.byte	0x1
 15776 1f19 890B     		.2byte	0xb89
 15777 1f1b 34010000 		.4byte	0x134
 15778 1f1f 00000000 		.4byte	.LFB242
 15779 1f23 2C000000 		.4byte	.LFE242-.LFB242
 15780 1f27 01       		.uleb128 0x1
 15781 1f28 9C       		.byte	0x9c
 15782 1f29 0B       		.uleb128 0xb
 15783 1f2a 151D0000 		.4byte	.LASF286
 15784 1f2e 01       		.byte	0x1
 15785 1f2f 8D0B     		.2byte	0xb8d
 15786 1f31 34010000 		.4byte	0x134
 15787 1f35 00000000 		.4byte	.LFB243
 15788 1f39 2C000000 		.4byte	.LFE243-.LFB243
 15789 1f3d 01       		.uleb128 0x1
 15790 1f3e 9C       		.byte	0x9c
 15791 1f3f 0B       		.uleb128 0xb
 15792 1f40 B40F0000 		.4byte	.LASF287
 15793 1f44 01       		.byte	0x1
 15794 1f45 910B     		.2byte	0xb91
 15795 1f47 34010000 		.4byte	0x134
 15796 1f4b 00000000 		.4byte	.LFB244
 15797 1f4f 2C000000 		.4byte	.LFE244-.LFB244
 15798 1f53 01       		.uleb128 0x1
 15799 1f54 9C       		.byte	0x9c
 15800 1f55 0B       		.uleb128 0xb
 15801 1f56 761D0000 		.4byte	.LASF288
 15802 1f5a 01       		.byte	0x1
 15803 1f5b 980B     		.2byte	0xb98
 15804 1f5d 34010000 		.4byte	0x134
 15805 1f61 00000000 		.4byte	.LFB245
 15806 1f65 2C000000 		.4byte	.LFE245-.LFB245
 15807 1f69 01       		.uleb128 0x1
 15808 1f6a 9C       		.byte	0x9c
 15809 1f6b 0B       		.uleb128 0xb
 15810 1f6c 28040000 		.4byte	.LASF289
 15811 1f70 01       		.byte	0x1
 15812 1f71 9C0B     		.2byte	0xb9c
 15813 1f73 34010000 		.4byte	0x134
 15814 1f77 00000000 		.4byte	.LFB246
 15815 1f7b 2C000000 		.4byte	.LFE246-.LFB246
 15816 1f7f 01       		.uleb128 0x1
 15817 1f80 9C       		.byte	0x9c
 15818 1f81 0B       		.uleb128 0xb
 15819 1f82 ED140000 		.4byte	.LASF290
 15820 1f86 01       		.byte	0x1
 15821 1f87 A30B     		.2byte	0xba3
 15822 1f89 34010000 		.4byte	0x134
 15823 1f8d 00000000 		.4byte	.LFB247
 15824 1f91 2C000000 		.4byte	.LFE247-.LFB247
 15825 1f95 01       		.uleb128 0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 336


 15826 1f96 9C       		.byte	0x9c
 15827 1f97 0C       		.uleb128 0xc
 15828 1f98 421D0000 		.4byte	.LASF291
 15829 1f9c 01       		.byte	0x1
 15830 1f9d A70B     		.2byte	0xba7
 15831 1f9f 00000000 		.4byte	.LFB248
 15832 1fa3 28000000 		.4byte	.LFE248-.LFB248
 15833 1fa7 01       		.uleb128 0x1
 15834 1fa8 9C       		.byte	0x9c
 15835 1fa9 BD1F0000 		.4byte	0x1fbd
 15836 1fad 0D       		.uleb128 0xd
 15837 1fae EC150000 		.4byte	.LASF42
 15838 1fb2 01       		.byte	0x1
 15839 1fb3 A70B     		.2byte	0xba7
 15840 1fb5 34010000 		.4byte	0x134
 15841 1fb9 02       		.uleb128 0x2
 15842 1fba 91       		.byte	0x91
 15843 1fbb 77       		.sleb128 -9
 15844 1fbc 00       		.byte	0
 15845 1fbd 11       		.uleb128 0x11
 15846 1fbe 9F000000 		.4byte	.LASF292
 15847 1fc2 01       		.byte	0x1
 15848 1fc3 AA0B     		.2byte	0xbaa
 15849 1fc5 00000000 		.4byte	.LFB249
 15850 1fc9 1C000000 		.4byte	.LFE249-.LFB249
 15851 1fcd 01       		.uleb128 0x1
 15852 1fce 9C       		.byte	0x9c
 15853 1fcf 0C       		.uleb128 0xc
 15854 1fd0 F61A0000 		.4byte	.LASF293
 15855 1fd4 01       		.byte	0x1
 15856 1fd5 B00B     		.2byte	0xbb0
 15857 1fd7 00000000 		.4byte	.LFB250
 15858 1fdb 70000000 		.4byte	.LFE250-.LFB250
 15859 1fdf 01       		.uleb128 0x1
 15860 1fe0 9C       		.byte	0x9c
 15861 1fe1 13200000 		.4byte	0x2013
 15862 1fe5 0D       		.uleb128 0xd
 15863 1fe6 3F180000 		.4byte	.LASF294
 15864 1fea 01       		.byte	0x1
 15865 1feb B00B     		.2byte	0xbb0
 15866 1fed AD000000 		.4byte	0xad
 15867 1ff1 02       		.uleb128 0x2
 15868 1ff2 91       		.byte	0x91
 15869 1ff3 6F       		.sleb128 -17
 15870 1ff4 0D       		.uleb128 0xd
 15871 1ff5 5B0F0000 		.4byte	.LASF295
 15872 1ff9 01       		.byte	0x1
 15873 1ffa B00B     		.2byte	0xbb0
 15874 1ffc 34010000 		.4byte	0x134
 15875 2000 02       		.uleb128 0x2
 15876 2001 91       		.byte	0x91
 15877 2002 6E       		.sleb128 -18
 15878 2003 0D       		.uleb128 0xd
 15879 2004 A5030000 		.4byte	.LASF296
 15880 2008 01       		.byte	0x1
 15881 2009 B00B     		.2byte	0xbb0
 15882 200b 34010000 		.4byte	0x134
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 337


 15883 200f 02       		.uleb128 0x2
 15884 2010 91       		.byte	0x91
 15885 2011 6D       		.sleb128 -19
 15886 2012 00       		.byte	0
 15887 2013 0C       		.uleb128 0xc
 15888 2014 660E0000 		.4byte	.LASF297
 15889 2018 01       		.byte	0x1
 15890 2019 B90B     		.2byte	0xbb9
 15891 201b 00000000 		.4byte	.LFB251
 15892 201f 28000000 		.4byte	.LFE251-.LFB251
 15893 2023 01       		.uleb128 0x1
 15894 2024 9C       		.byte	0x9c
 15895 2025 39200000 		.4byte	0x2039
 15896 2029 0D       		.uleb128 0xd
 15897 202a CD0F0000 		.4byte	.LASF26
 15898 202e 01       		.byte	0x1
 15899 202f B90B     		.2byte	0xbb9
 15900 2031 AD000000 		.4byte	0xad
 15901 2035 02       		.uleb128 0x2
 15902 2036 91       		.byte	0x91
 15903 2037 77       		.sleb128 -9
 15904 2038 00       		.byte	0
 15905 2039 0B       		.uleb128 0xb
 15906 203a A30E0000 		.4byte	.LASF298
 15907 203e 01       		.byte	0x1
 15908 203f BF0B     		.2byte	0xbbf
 15909 2041 AD000000 		.4byte	0xad
 15910 2045 00000000 		.4byte	.LFB252
 15911 2049 28000000 		.4byte	.LFE252-.LFB252
 15912 204d 01       		.uleb128 0x1
 15913 204e 9C       		.byte	0x9c
 15914 204f 0C       		.uleb128 0xc
 15915 2050 37170000 		.4byte	.LASF299
 15916 2054 01       		.byte	0x1
 15917 2055 C30B     		.2byte	0xbc3
 15918 2057 00000000 		.4byte	.LFB253
 15919 205b 28000000 		.4byte	.LFE253-.LFB253
 15920 205f 01       		.uleb128 0x1
 15921 2060 9C       		.byte	0x9c
 15922 2061 75200000 		.4byte	0x2075
 15923 2065 0D       		.uleb128 0xd
 15924 2066 080C0000 		.4byte	.LASF113
 15925 206a 01       		.byte	0x1
 15926 206b C30B     		.2byte	0xbc3
 15927 206d AD000000 		.4byte	0xad
 15928 2071 02       		.uleb128 0x2
 15929 2072 91       		.byte	0x91
 15930 2073 77       		.sleb128 -9
 15931 2074 00       		.byte	0
 15932 2075 0C       		.uleb128 0xc
 15933 2076 960B0000 		.4byte	.LASF300
 15934 207a 01       		.byte	0x1
 15935 207b C60B     		.2byte	0xbc6
 15936 207d 00000000 		.4byte	.LFB254
 15937 2081 34010000 		.4byte	.LFE254-.LFB254
 15938 2085 01       		.uleb128 0x1
 15939 2086 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 338


 15940 2087 E4200000 		.4byte	0x20e4
 15941 208b 0D       		.uleb128 0xd
 15942 208c 080C0000 		.4byte	.LASF113
 15943 2090 01       		.byte	0x1
 15944 2091 C60B     		.2byte	0xbc6
 15945 2093 E61A0000 		.4byte	0x1ae6
 15946 2097 02       		.uleb128 0x2
 15947 2098 91       		.byte	0x91
 15948 2099 64       		.sleb128 -28
 15949 209a 0D       		.uleb128 0xd
 15950 209b C2090000 		.4byte	.LASF301
 15951 209f 01       		.byte	0x1
 15952 20a0 C60B     		.2byte	0xbc6
 15953 20a2 C3000000 		.4byte	0xc3
 15954 20a6 02       		.uleb128 0x2
 15955 20a7 91       		.byte	0x91
 15956 20a8 62       		.sleb128 -30
 15957 20a9 0D       		.uleb128 0xd
 15958 20aa 3F180000 		.4byte	.LASF294
 15959 20ae 01       		.byte	0x1
 15960 20af C60B     		.2byte	0xbc6
 15961 20b1 AD000000 		.4byte	0xad
 15962 20b5 02       		.uleb128 0x2
 15963 20b6 91       		.byte	0x91
 15964 20b7 61       		.sleb128 -31
 15965 20b8 0D       		.uleb128 0xd
 15966 20b9 CD0F0000 		.4byte	.LASF26
 15967 20bd 01       		.byte	0x1
 15968 20be C60B     		.2byte	0xbc6
 15969 20c0 AD000000 		.4byte	0xad
 15970 20c4 02       		.uleb128 0x2
 15971 20c5 91       		.byte	0x91
 15972 20c6 60       		.sleb128 -32
 15973 20c7 12       		.uleb128 0x12
 15974 20c8 0B100000 		.4byte	.LASF302
 15975 20cc 01       		.byte	0x1
 15976 20cd C90B     		.2byte	0xbc9
 15977 20cf AD000000 		.4byte	0xad
 15978 20d3 02       		.uleb128 0x2
 15979 20d4 91       		.byte	0x91
 15980 20d5 6F       		.sleb128 -17
 15981 20d6 13       		.uleb128 0x13
 15982 20d7 6900     		.ascii	"i\000"
 15983 20d9 01       		.byte	0x1
 15984 20da CA0B     		.2byte	0xbca
 15985 20dc C3000000 		.4byte	0xc3
 15986 20e0 02       		.uleb128 0x2
 15987 20e1 91       		.byte	0x91
 15988 20e2 6C       		.sleb128 -20
 15989 20e3 00       		.byte	0
 15990 20e4 0B       		.uleb128 0xb
 15991 20e5 89120000 		.4byte	.LASF303
 15992 20e9 01       		.byte	0x1
 15993 20ea 880C     		.2byte	0xc88
 15994 20ec AD000000 		.4byte	0xad
 15995 20f0 00000000 		.4byte	.LFB255
 15996 20f4 28000000 		.4byte	.LFE255-.LFB255
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 339


 15997 20f8 01       		.uleb128 0x1
 15998 20f9 9C       		.byte	0x9c
 15999 20fa 0C       		.uleb128 0xc
 16000 20fb D81D0000 		.4byte	.LASF304
 16001 20ff 01       		.byte	0x1
 16002 2100 8C0C     		.2byte	0xc8c
 16003 2102 00000000 		.4byte	.LFB256
 16004 2106 28000000 		.4byte	.LFE256-.LFB256
 16005 210a 01       		.uleb128 0x1
 16006 210b 9C       		.byte	0x9c
 16007 210c 20210000 		.4byte	0x2120
 16008 2110 0D       		.uleb128 0xd
 16009 2111 BE0A0000 		.4byte	.LASF305
 16010 2115 01       		.byte	0x1
 16011 2116 8C0C     		.2byte	0xc8c
 16012 2118 AD000000 		.4byte	0xad
 16013 211c 02       		.uleb128 0x2
 16014 211d 91       		.byte	0x91
 16015 211e 77       		.sleb128 -9
 16016 211f 00       		.byte	0
 16017 2120 0B       		.uleb128 0xb
 16018 2121 BF120000 		.4byte	.LASF306
 16019 2125 01       		.byte	0x1
 16020 2126 920C     		.2byte	0xc92
 16021 2128 AD000000 		.4byte	0xad
 16022 212c 00000000 		.4byte	.LFB257
 16023 2130 28000000 		.4byte	.LFE257-.LFB257
 16024 2134 01       		.uleb128 0x1
 16025 2135 9C       		.byte	0x9c
 16026 2136 0C       		.uleb128 0xc
 16027 2137 72160000 		.4byte	.LASF307
 16028 213b 01       		.byte	0x1
 16029 213c 960C     		.2byte	0xc96
 16030 213e 00000000 		.4byte	.LFB258
 16031 2142 28000000 		.4byte	.LFE258-.LFB258
 16032 2146 01       		.uleb128 0x1
 16033 2147 9C       		.byte	0x9c
 16034 2148 5C210000 		.4byte	0x215c
 16035 214c 0D       		.uleb128 0xd
 16036 214d BE0A0000 		.4byte	.LASF305
 16037 2151 01       		.byte	0x1
 16038 2152 960C     		.2byte	0xc96
 16039 2154 AD000000 		.4byte	0xad
 16040 2158 02       		.uleb128 0x2
 16041 2159 91       		.byte	0x91
 16042 215a 77       		.sleb128 -9
 16043 215b 00       		.byte	0
 16044 215c 11       		.uleb128 0x11
 16045 215d 5E090000 		.4byte	.LASF308
 16046 2161 01       		.byte	0x1
 16047 2162 A60C     		.2byte	0xca6
 16048 2164 00000000 		.4byte	.LFB259
 16049 2168 6E000000 		.4byte	.LFE259-.LFB259
 16050 216c 01       		.uleb128 0x1
 16051 216d 9C       		.byte	0x9c
 16052 216e 14       		.uleb128 0x14
 16053 216f 06000000 		.4byte	.LASF310
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 340


 16054 2173 04       		.byte	0x4
 16055 2174 9101     		.2byte	0x191
 16056 2176 AD000000 		.4byte	0xad
 16057 217a 05       		.uleb128 0x5
 16058 217b 03       		.byte	0x3
 16059 217c 00000000 		.4byte	devAddr
 16060 2180 15       		.uleb128 0x15
 16061 2181 AD000000 		.4byte	0xad
 16062 2185 90210000 		.4byte	0x2190
 16063 2189 16       		.uleb128 0x16
 16064 218a 90210000 		.4byte	0x2190
 16065 218e 15       		.byte	0x15
 16066 218f 00       		.byte	0
 16067 2190 03       		.uleb128 0x3
 16068 2191 04       		.byte	0x4
 16069 2192 07       		.byte	0x7
 16070 2193 10160000 		.4byte	.LASF309
 16071 2197 14       		.uleb128 0x14
 16072 2198 9A110000 		.4byte	.LASF311
 16073 219c 04       		.byte	0x4
 16074 219d 9201     		.2byte	0x192
 16075 219f 80210000 		.4byte	0x2180
 16076 21a3 05       		.uleb128 0x5
 16077 21a4 03       		.byte	0x3
 16078 21a5 00000000 		.4byte	buffer
 16079 21a9 00       		.byte	0
 16080              		.section	.debug_abbrev,"",%progbits
 16081              	.Ldebug_abbrev0:
 16082 0000 01       		.uleb128 0x1
 16083 0001 11       		.uleb128 0x11
 16084 0002 01       		.byte	0x1
 16085 0003 25       		.uleb128 0x25
 16086 0004 0E       		.uleb128 0xe
 16087 0005 13       		.uleb128 0x13
 16088 0006 0B       		.uleb128 0xb
 16089 0007 03       		.uleb128 0x3
 16090 0008 0E       		.uleb128 0xe
 16091 0009 1B       		.uleb128 0x1b
 16092 000a 0E       		.uleb128 0xe
 16093 000b 55       		.uleb128 0x55
 16094 000c 17       		.uleb128 0x17
 16095 000d 11       		.uleb128 0x11
 16096 000e 01       		.uleb128 0x1
 16097 000f 10       		.uleb128 0x10
 16098 0010 17       		.uleb128 0x17
 16099 0011 00       		.byte	0
 16100 0012 00       		.byte	0
 16101 0013 02       		.uleb128 0x2
 16102 0014 16       		.uleb128 0x16
 16103 0015 00       		.byte	0
 16104 0016 03       		.uleb128 0x3
 16105 0017 0E       		.uleb128 0xe
 16106 0018 3A       		.uleb128 0x3a
 16107 0019 0B       		.uleb128 0xb
 16108 001a 3B       		.uleb128 0x3b
 16109 001b 0B       		.uleb128 0xb
 16110 001c 49       		.uleb128 0x49
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 341


 16111 001d 13       		.uleb128 0x13
 16112 001e 00       		.byte	0
 16113 001f 00       		.byte	0
 16114 0020 03       		.uleb128 0x3
 16115 0021 24       		.uleb128 0x24
 16116 0022 00       		.byte	0
 16117 0023 0B       		.uleb128 0xb
 16118 0024 0B       		.uleb128 0xb
 16119 0025 3E       		.uleb128 0x3e
 16120 0026 0B       		.uleb128 0xb
 16121 0027 03       		.uleb128 0x3
 16122 0028 0E       		.uleb128 0xe
 16123 0029 00       		.byte	0
 16124 002a 00       		.byte	0
 16125 002b 04       		.uleb128 0x4
 16126 002c 24       		.uleb128 0x24
 16127 002d 00       		.byte	0
 16128 002e 0B       		.uleb128 0xb
 16129 002f 0B       		.uleb128 0xb
 16130 0030 3E       		.uleb128 0x3e
 16131 0031 0B       		.uleb128 0xb
 16132 0032 03       		.uleb128 0x3
 16133 0033 08       		.uleb128 0x8
 16134 0034 00       		.byte	0
 16135 0035 00       		.byte	0
 16136 0036 05       		.uleb128 0x5
 16137 0037 2E       		.uleb128 0x2e
 16138 0038 00       		.byte	0
 16139 0039 3F       		.uleb128 0x3f
 16140 003a 19       		.uleb128 0x19
 16141 003b 03       		.uleb128 0x3
 16142 003c 0E       		.uleb128 0xe
 16143 003d 3A       		.uleb128 0x3a
 16144 003e 0B       		.uleb128 0xb
 16145 003f 3B       		.uleb128 0x3b
 16146 0040 0B       		.uleb128 0xb
 16147 0041 11       		.uleb128 0x11
 16148 0042 01       		.uleb128 0x1
 16149 0043 12       		.uleb128 0x12
 16150 0044 06       		.uleb128 0x6
 16151 0045 40       		.uleb128 0x40
 16152 0046 18       		.uleb128 0x18
 16153 0047 9742     		.uleb128 0x2117
 16154 0049 19       		.uleb128 0x19
 16155 004a 00       		.byte	0
 16156 004b 00       		.byte	0
 16157 004c 06       		.uleb128 0x6
 16158 004d 2E       		.uleb128 0x2e
 16159 004e 01       		.byte	0x1
 16160 004f 3F       		.uleb128 0x3f
 16161 0050 19       		.uleb128 0x19
 16162 0051 03       		.uleb128 0x3
 16163 0052 0E       		.uleb128 0xe
 16164 0053 3A       		.uleb128 0x3a
 16165 0054 0B       		.uleb128 0xb
 16166 0055 3B       		.uleb128 0x3b
 16167 0056 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 342


 16168 0057 27       		.uleb128 0x27
 16169 0058 19       		.uleb128 0x19
 16170 0059 11       		.uleb128 0x11
 16171 005a 01       		.uleb128 0x1
 16172 005b 12       		.uleb128 0x12
 16173 005c 06       		.uleb128 0x6
 16174 005d 40       		.uleb128 0x40
 16175 005e 18       		.uleb128 0x18
 16176 005f 9742     		.uleb128 0x2117
 16177 0061 19       		.uleb128 0x19
 16178 0062 01       		.uleb128 0x1
 16179 0063 13       		.uleb128 0x13
 16180 0064 00       		.byte	0
 16181 0065 00       		.byte	0
 16182 0066 07       		.uleb128 0x7
 16183 0067 05       		.uleb128 0x5
 16184 0068 00       		.byte	0
 16185 0069 03       		.uleb128 0x3
 16186 006a 0E       		.uleb128 0xe
 16187 006b 3A       		.uleb128 0x3a
 16188 006c 0B       		.uleb128 0xb
 16189 006d 3B       		.uleb128 0x3b
 16190 006e 0B       		.uleb128 0xb
 16191 006f 49       		.uleb128 0x49
 16192 0070 13       		.uleb128 0x13
 16193 0071 02       		.uleb128 0x2
 16194 0072 18       		.uleb128 0x18
 16195 0073 00       		.byte	0
 16196 0074 00       		.byte	0
 16197 0075 08       		.uleb128 0x8
 16198 0076 2E       		.uleb128 0x2e
 16199 0077 00       		.byte	0
 16200 0078 3F       		.uleb128 0x3f
 16201 0079 19       		.uleb128 0x19
 16202 007a 03       		.uleb128 0x3
 16203 007b 0E       		.uleb128 0xe
 16204 007c 3A       		.uleb128 0x3a
 16205 007d 0B       		.uleb128 0xb
 16206 007e 3B       		.uleb128 0x3b
 16207 007f 0B       		.uleb128 0xb
 16208 0080 11       		.uleb128 0x11
 16209 0081 01       		.uleb128 0x1
 16210 0082 12       		.uleb128 0x12
 16211 0083 06       		.uleb128 0x6
 16212 0084 40       		.uleb128 0x40
 16213 0085 18       		.uleb128 0x18
 16214 0086 9642     		.uleb128 0x2116
 16215 0088 19       		.uleb128 0x19
 16216 0089 00       		.byte	0
 16217 008a 00       		.byte	0
 16218 008b 09       		.uleb128 0x9
 16219 008c 2E       		.uleb128 0x2e
 16220 008d 00       		.byte	0
 16221 008e 3F       		.uleb128 0x3f
 16222 008f 19       		.uleb128 0x19
 16223 0090 03       		.uleb128 0x3
 16224 0091 0E       		.uleb128 0xe
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 343


 16225 0092 3A       		.uleb128 0x3a
 16226 0093 0B       		.uleb128 0xb
 16227 0094 3B       		.uleb128 0x3b
 16228 0095 0B       		.uleb128 0xb
 16229 0096 49       		.uleb128 0x49
 16230 0097 13       		.uleb128 0x13
 16231 0098 11       		.uleb128 0x11
 16232 0099 01       		.uleb128 0x1
 16233 009a 12       		.uleb128 0x12
 16234 009b 06       		.uleb128 0x6
 16235 009c 40       		.uleb128 0x40
 16236 009d 18       		.uleb128 0x18
 16237 009e 9642     		.uleb128 0x2116
 16238 00a0 19       		.uleb128 0x19
 16239 00a1 00       		.byte	0
 16240 00a2 00       		.byte	0
 16241 00a3 0A       		.uleb128 0xa
 16242 00a4 2E       		.uleb128 0x2e
 16243 00a5 01       		.byte	0x1
 16244 00a6 3F       		.uleb128 0x3f
 16245 00a7 19       		.uleb128 0x19
 16246 00a8 03       		.uleb128 0x3
 16247 00a9 0E       		.uleb128 0xe
 16248 00aa 3A       		.uleb128 0x3a
 16249 00ab 0B       		.uleb128 0xb
 16250 00ac 3B       		.uleb128 0x3b
 16251 00ad 0B       		.uleb128 0xb
 16252 00ae 27       		.uleb128 0x27
 16253 00af 19       		.uleb128 0x19
 16254 00b0 11       		.uleb128 0x11
 16255 00b1 01       		.uleb128 0x1
 16256 00b2 12       		.uleb128 0x12
 16257 00b3 06       		.uleb128 0x6
 16258 00b4 40       		.uleb128 0x40
 16259 00b5 18       		.uleb128 0x18
 16260 00b6 9642     		.uleb128 0x2116
 16261 00b8 19       		.uleb128 0x19
 16262 00b9 01       		.uleb128 0x1
 16263 00ba 13       		.uleb128 0x13
 16264 00bb 00       		.byte	0
 16265 00bc 00       		.byte	0
 16266 00bd 0B       		.uleb128 0xb
 16267 00be 2E       		.uleb128 0x2e
 16268 00bf 00       		.byte	0
 16269 00c0 3F       		.uleb128 0x3f
 16270 00c1 19       		.uleb128 0x19
 16271 00c2 03       		.uleb128 0x3
 16272 00c3 0E       		.uleb128 0xe
 16273 00c4 3A       		.uleb128 0x3a
 16274 00c5 0B       		.uleb128 0xb
 16275 00c6 3B       		.uleb128 0x3b
 16276 00c7 05       		.uleb128 0x5
 16277 00c8 49       		.uleb128 0x49
 16278 00c9 13       		.uleb128 0x13
 16279 00ca 11       		.uleb128 0x11
 16280 00cb 01       		.uleb128 0x1
 16281 00cc 12       		.uleb128 0x12
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 344


 16282 00cd 06       		.uleb128 0x6
 16283 00ce 40       		.uleb128 0x40
 16284 00cf 18       		.uleb128 0x18
 16285 00d0 9642     		.uleb128 0x2116
 16286 00d2 19       		.uleb128 0x19
 16287 00d3 00       		.byte	0
 16288 00d4 00       		.byte	0
 16289 00d5 0C       		.uleb128 0xc
 16290 00d6 2E       		.uleb128 0x2e
 16291 00d7 01       		.byte	0x1
 16292 00d8 3F       		.uleb128 0x3f
 16293 00d9 19       		.uleb128 0x19
 16294 00da 03       		.uleb128 0x3
 16295 00db 0E       		.uleb128 0xe
 16296 00dc 3A       		.uleb128 0x3a
 16297 00dd 0B       		.uleb128 0xb
 16298 00de 3B       		.uleb128 0x3b
 16299 00df 05       		.uleb128 0x5
 16300 00e0 27       		.uleb128 0x27
 16301 00e1 19       		.uleb128 0x19
 16302 00e2 11       		.uleb128 0x11
 16303 00e3 01       		.uleb128 0x1
 16304 00e4 12       		.uleb128 0x12
 16305 00e5 06       		.uleb128 0x6
 16306 00e6 40       		.uleb128 0x40
 16307 00e7 18       		.uleb128 0x18
 16308 00e8 9642     		.uleb128 0x2116
 16309 00ea 19       		.uleb128 0x19
 16310 00eb 01       		.uleb128 0x1
 16311 00ec 13       		.uleb128 0x13
 16312 00ed 00       		.byte	0
 16313 00ee 00       		.byte	0
 16314 00ef 0D       		.uleb128 0xd
 16315 00f0 05       		.uleb128 0x5
 16316 00f1 00       		.byte	0
 16317 00f2 03       		.uleb128 0x3
 16318 00f3 0E       		.uleb128 0xe
 16319 00f4 3A       		.uleb128 0x3a
 16320 00f5 0B       		.uleb128 0xb
 16321 00f6 3B       		.uleb128 0x3b
 16322 00f7 05       		.uleb128 0x5
 16323 00f8 49       		.uleb128 0x49
 16324 00f9 13       		.uleb128 0x13
 16325 00fa 02       		.uleb128 0x2
 16326 00fb 18       		.uleb128 0x18
 16327 00fc 00       		.byte	0
 16328 00fd 00       		.byte	0
 16329 00fe 0E       		.uleb128 0xe
 16330 00ff 2E       		.uleb128 0x2e
 16331 0100 01       		.byte	0x1
 16332 0101 3F       		.uleb128 0x3f
 16333 0102 19       		.uleb128 0x19
 16334 0103 03       		.uleb128 0x3
 16335 0104 0E       		.uleb128 0xe
 16336 0105 3A       		.uleb128 0x3a
 16337 0106 0B       		.uleb128 0xb
 16338 0107 3B       		.uleb128 0x3b
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 345


 16339 0108 05       		.uleb128 0x5
 16340 0109 27       		.uleb128 0x27
 16341 010a 19       		.uleb128 0x19
 16342 010b 49       		.uleb128 0x49
 16343 010c 13       		.uleb128 0x13
 16344 010d 11       		.uleb128 0x11
 16345 010e 01       		.uleb128 0x1
 16346 010f 12       		.uleb128 0x12
 16347 0110 06       		.uleb128 0x6
 16348 0111 40       		.uleb128 0x40
 16349 0112 18       		.uleb128 0x18
 16350 0113 9642     		.uleb128 0x2116
 16351 0115 19       		.uleb128 0x19
 16352 0116 01       		.uleb128 0x1
 16353 0117 13       		.uleb128 0x13
 16354 0118 00       		.byte	0
 16355 0119 00       		.byte	0
 16356 011a 0F       		.uleb128 0xf
 16357 011b 05       		.uleb128 0x5
 16358 011c 00       		.byte	0
 16359 011d 03       		.uleb128 0x3
 16360 011e 08       		.uleb128 0x8
 16361 011f 3A       		.uleb128 0x3a
 16362 0120 0B       		.uleb128 0xb
 16363 0121 3B       		.uleb128 0x3b
 16364 0122 05       		.uleb128 0x5
 16365 0123 49       		.uleb128 0x49
 16366 0124 13       		.uleb128 0x13
 16367 0125 02       		.uleb128 0x2
 16368 0126 18       		.uleb128 0x18
 16369 0127 00       		.byte	0
 16370 0128 00       		.byte	0
 16371 0129 10       		.uleb128 0x10
 16372 012a 0F       		.uleb128 0xf
 16373 012b 00       		.byte	0
 16374 012c 0B       		.uleb128 0xb
 16375 012d 0B       		.uleb128 0xb
 16376 012e 49       		.uleb128 0x49
 16377 012f 13       		.uleb128 0x13
 16378 0130 00       		.byte	0
 16379 0131 00       		.byte	0
 16380 0132 11       		.uleb128 0x11
 16381 0133 2E       		.uleb128 0x2e
 16382 0134 00       		.byte	0
 16383 0135 3F       		.uleb128 0x3f
 16384 0136 19       		.uleb128 0x19
 16385 0137 03       		.uleb128 0x3
 16386 0138 0E       		.uleb128 0xe
 16387 0139 3A       		.uleb128 0x3a
 16388 013a 0B       		.uleb128 0xb
 16389 013b 3B       		.uleb128 0x3b
 16390 013c 05       		.uleb128 0x5
 16391 013d 11       		.uleb128 0x11
 16392 013e 01       		.uleb128 0x1
 16393 013f 12       		.uleb128 0x12
 16394 0140 06       		.uleb128 0x6
 16395 0141 40       		.uleb128 0x40
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 346


 16396 0142 18       		.uleb128 0x18
 16397 0143 9642     		.uleb128 0x2116
 16398 0145 19       		.uleb128 0x19
 16399 0146 00       		.byte	0
 16400 0147 00       		.byte	0
 16401 0148 12       		.uleb128 0x12
 16402 0149 34       		.uleb128 0x34
 16403 014a 00       		.byte	0
 16404 014b 03       		.uleb128 0x3
 16405 014c 0E       		.uleb128 0xe
 16406 014d 3A       		.uleb128 0x3a
 16407 014e 0B       		.uleb128 0xb
 16408 014f 3B       		.uleb128 0x3b
 16409 0150 05       		.uleb128 0x5
 16410 0151 49       		.uleb128 0x49
 16411 0152 13       		.uleb128 0x13
 16412 0153 02       		.uleb128 0x2
 16413 0154 18       		.uleb128 0x18
 16414 0155 00       		.byte	0
 16415 0156 00       		.byte	0
 16416 0157 13       		.uleb128 0x13
 16417 0158 34       		.uleb128 0x34
 16418 0159 00       		.byte	0
 16419 015a 03       		.uleb128 0x3
 16420 015b 08       		.uleb128 0x8
 16421 015c 3A       		.uleb128 0x3a
 16422 015d 0B       		.uleb128 0xb
 16423 015e 3B       		.uleb128 0x3b
 16424 015f 05       		.uleb128 0x5
 16425 0160 49       		.uleb128 0x49
 16426 0161 13       		.uleb128 0x13
 16427 0162 02       		.uleb128 0x2
 16428 0163 18       		.uleb128 0x18
 16429 0164 00       		.byte	0
 16430 0165 00       		.byte	0
 16431 0166 14       		.uleb128 0x14
 16432 0167 34       		.uleb128 0x34
 16433 0168 00       		.byte	0
 16434 0169 03       		.uleb128 0x3
 16435 016a 0E       		.uleb128 0xe
 16436 016b 3A       		.uleb128 0x3a
 16437 016c 0B       		.uleb128 0xb
 16438 016d 3B       		.uleb128 0x3b
 16439 016e 05       		.uleb128 0x5
 16440 016f 49       		.uleb128 0x49
 16441 0170 13       		.uleb128 0x13
 16442 0171 3F       		.uleb128 0x3f
 16443 0172 19       		.uleb128 0x19
 16444 0173 02       		.uleb128 0x2
 16445 0174 18       		.uleb128 0x18
 16446 0175 00       		.byte	0
 16447 0176 00       		.byte	0
 16448 0177 15       		.uleb128 0x15
 16449 0178 01       		.uleb128 0x1
 16450 0179 01       		.byte	0x1
 16451 017a 49       		.uleb128 0x49
 16452 017b 13       		.uleb128 0x13
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 347


 16453 017c 01       		.uleb128 0x1
 16454 017d 13       		.uleb128 0x13
 16455 017e 00       		.byte	0
 16456 017f 00       		.byte	0
 16457 0180 16       		.uleb128 0x16
 16458 0181 21       		.uleb128 0x21
 16459 0182 00       		.byte	0
 16460 0183 49       		.uleb128 0x49
 16461 0184 13       		.uleb128 0x13
 16462 0185 2F       		.uleb128 0x2f
 16463 0186 0B       		.uleb128 0xb
 16464 0187 00       		.byte	0
 16465 0188 00       		.byte	0
 16466 0189 00       		.byte	0
 16467              		.section	.debug_aranges,"",%progbits
 16468 0000 34080000 		.4byte	0x834
 16469 0004 0200     		.2byte	0x2
 16470 0006 00000000 		.4byte	.Ldebug_info0
 16471 000a 04       		.byte	0x4
 16472 000b 00       		.byte	0
 16473 000c 0000     		.2byte	0
 16474 000e 0000     		.2byte	0
 16475 0010 00000000 		.4byte	.LFB0
 16476 0014 14000000 		.4byte	.LFE0-.LFB0
 16477 0018 00000000 		.4byte	.LFB1
 16478 001c 20000000 		.4byte	.LFE1-.LFB1
 16479 0020 00000000 		.4byte	.LFB2
 16480 0024 20000000 		.4byte	.LFE2-.LFB2
 16481 0028 00000000 		.4byte	.LFB3
 16482 002c 18000000 		.4byte	.LFE3-.LFB3
 16483 0030 00000000 		.4byte	.LFB4
 16484 0034 28000000 		.4byte	.LFE4-.LFB4
 16485 0038 00000000 		.4byte	.LFB5
 16486 003c 28000000 		.4byte	.LFE5-.LFB5
 16487 0040 00000000 		.4byte	.LFB6
 16488 0044 28000000 		.4byte	.LFE6-.LFB6
 16489 0048 00000000 		.4byte	.LFB7
 16490 004c 28000000 		.4byte	.LFE7-.LFB7
 16491 0050 00000000 		.4byte	.LFB8
 16492 0054 2C000000 		.4byte	.LFE8-.LFB8
 16493 0058 00000000 		.4byte	.LFB9
 16494 005c 2C000000 		.4byte	.LFE9-.LFB9
 16495 0060 00000000 		.4byte	.LFB10
 16496 0064 2C000000 		.4byte	.LFE10-.LFB10
 16497 0068 00000000 		.4byte	.LFB11
 16498 006c 2C000000 		.4byte	.LFE11-.LFB11
 16499 0070 00000000 		.4byte	.LFB12
 16500 0074 2C000000 		.4byte	.LFE12-.LFB12
 16501 0078 00000000 		.4byte	.LFB13
 16502 007c 2C000000 		.4byte	.LFE13-.LFB13
 16503 0080 00000000 		.4byte	.LFB14
 16504 0084 2C000000 		.4byte	.LFE14-.LFB14
 16505 0088 00000000 		.4byte	.LFB15
 16506 008c 28000000 		.4byte	.LFE15-.LFB15
 16507 0090 00000000 		.4byte	.LFB16
 16508 0094 2C000000 		.4byte	.LFE16-.LFB16
 16509 0098 00000000 		.4byte	.LFB17
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 348


 16510 009c 28000000 		.4byte	.LFE17-.LFB17
 16511 00a0 00000000 		.4byte	.LFB18
 16512 00a4 2C000000 		.4byte	.LFE18-.LFB18
 16513 00a8 00000000 		.4byte	.LFB19
 16514 00ac 28000000 		.4byte	.LFE19-.LFB19
 16515 00b0 00000000 		.4byte	.LFB20
 16516 00b4 2C000000 		.4byte	.LFE20-.LFB20
 16517 00b8 00000000 		.4byte	.LFB21
 16518 00bc 2C000000 		.4byte	.LFE21-.LFB21
 16519 00c0 00000000 		.4byte	.LFB22
 16520 00c4 2C000000 		.4byte	.LFE22-.LFB22
 16521 00c8 00000000 		.4byte	.LFB23
 16522 00cc 2C000000 		.4byte	.LFE23-.LFB23
 16523 00d0 00000000 		.4byte	.LFB24
 16524 00d4 28000000 		.4byte	.LFE24-.LFB24
 16525 00d8 00000000 		.4byte	.LFB25
 16526 00dc 28000000 		.4byte	.LFE25-.LFB25
 16527 00e0 00000000 		.4byte	.LFB26
 16528 00e4 28000000 		.4byte	.LFE26-.LFB26
 16529 00e8 00000000 		.4byte	.LFB27
 16530 00ec 28000000 		.4byte	.LFE27-.LFB27
 16531 00f0 00000000 		.4byte	.LFB28
 16532 00f4 28000000 		.4byte	.LFE28-.LFB28
 16533 00f8 00000000 		.4byte	.LFB29
 16534 00fc 28000000 		.4byte	.LFE29-.LFB29
 16535 0100 00000000 		.4byte	.LFB30
 16536 0104 28000000 		.4byte	.LFE30-.LFB30
 16537 0108 00000000 		.4byte	.LFB31
 16538 010c 28000000 		.4byte	.LFE31-.LFB31
 16539 0110 00000000 		.4byte	.LFB32
 16540 0114 28000000 		.4byte	.LFE32-.LFB32
 16541 0118 00000000 		.4byte	.LFB33
 16542 011c 28000000 		.4byte	.LFE33-.LFB33
 16543 0120 00000000 		.4byte	.LFB34
 16544 0124 28000000 		.4byte	.LFE34-.LFB34
 16545 0128 00000000 		.4byte	.LFB35
 16546 012c 28000000 		.4byte	.LFE35-.LFB35
 16547 0130 00000000 		.4byte	.LFB36
 16548 0134 2C000000 		.4byte	.LFE36-.LFB36
 16549 0138 00000000 		.4byte	.LFB37
 16550 013c 28000000 		.4byte	.LFE37-.LFB37
 16551 0140 00000000 		.4byte	.LFB38
 16552 0144 2C000000 		.4byte	.LFE38-.LFB38
 16553 0148 00000000 		.4byte	.LFB39
 16554 014c 28000000 		.4byte	.LFE39-.LFB39
 16555 0150 00000000 		.4byte	.LFB40
 16556 0154 2C000000 		.4byte	.LFE40-.LFB40
 16557 0158 00000000 		.4byte	.LFB41
 16558 015c 28000000 		.4byte	.LFE41-.LFB41
 16559 0160 00000000 		.4byte	.LFB42
 16560 0164 2C000000 		.4byte	.LFE42-.LFB42
 16561 0168 00000000 		.4byte	.LFB43
 16562 016c 28000000 		.4byte	.LFE43-.LFB43
 16563 0170 00000000 		.4byte	.LFB44
 16564 0174 2C000000 		.4byte	.LFE44-.LFB44
 16565 0178 00000000 		.4byte	.LFB45
 16566 017c 28000000 		.4byte	.LFE45-.LFB45
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 349


 16567 0180 00000000 		.4byte	.LFB46
 16568 0184 2C000000 		.4byte	.LFE46-.LFB46
 16569 0188 00000000 		.4byte	.LFB47
 16570 018c 28000000 		.4byte	.LFE47-.LFB47
 16571 0190 00000000 		.4byte	.LFB48
 16572 0194 2C000000 		.4byte	.LFE48-.LFB48
 16573 0198 00000000 		.4byte	.LFB49
 16574 019c 28000000 		.4byte	.LFE49-.LFB49
 16575 01a0 00000000 		.4byte	.LFB50
 16576 01a4 2C000000 		.4byte	.LFE50-.LFB50
 16577 01a8 00000000 		.4byte	.LFB51
 16578 01ac 28000000 		.4byte	.LFE51-.LFB51
 16579 01b0 00000000 		.4byte	.LFB52
 16580 01b4 2C000000 		.4byte	.LFE52-.LFB52
 16581 01b8 00000000 		.4byte	.LFB53
 16582 01bc 28000000 		.4byte	.LFE53-.LFB53
 16583 01c0 00000000 		.4byte	.LFB54
 16584 01c4 2C000000 		.4byte	.LFE54-.LFB54
 16585 01c8 00000000 		.4byte	.LFB55
 16586 01cc 28000000 		.4byte	.LFE55-.LFB55
 16587 01d0 00000000 		.4byte	.LFB56
 16588 01d4 2C000000 		.4byte	.LFE56-.LFB56
 16589 01d8 00000000 		.4byte	.LFB57
 16590 01dc 28000000 		.4byte	.LFE57-.LFB57
 16591 01e0 00000000 		.4byte	.LFB58
 16592 01e4 2C000000 		.4byte	.LFE58-.LFB58
 16593 01e8 00000000 		.4byte	.LFB59
 16594 01ec 28000000 		.4byte	.LFE59-.LFB59
 16595 01f0 00000000 		.4byte	.LFB60
 16596 01f4 2C000000 		.4byte	.LFE60-.LFB60
 16597 01f8 00000000 		.4byte	.LFB61
 16598 01fc 2C000000 		.4byte	.LFE61-.LFB61
 16599 0200 00000000 		.4byte	.LFB62
 16600 0204 4C000000 		.4byte	.LFE62-.LFB62
 16601 0208 00000000 		.4byte	.LFB63
 16602 020c 48000000 		.4byte	.LFE63-.LFB63
 16603 0210 00000000 		.4byte	.LFB64
 16604 0214 4C000000 		.4byte	.LFE64-.LFB64
 16605 0218 00000000 		.4byte	.LFB65
 16606 021c 48000000 		.4byte	.LFE65-.LFB65
 16607 0220 00000000 		.4byte	.LFB66
 16608 0224 54000000 		.4byte	.LFE66-.LFB66
 16609 0228 00000000 		.4byte	.LFB67
 16610 022c 48000000 		.4byte	.LFE67-.LFB67
 16611 0230 00000000 		.4byte	.LFB68
 16612 0234 54000000 		.4byte	.LFE68-.LFB68
 16613 0238 00000000 		.4byte	.LFB69
 16614 023c 48000000 		.4byte	.LFE69-.LFB69
 16615 0240 00000000 		.4byte	.LFB70
 16616 0244 54000000 		.4byte	.LFE70-.LFB70
 16617 0248 00000000 		.4byte	.LFB71
 16618 024c 48000000 		.4byte	.LFE71-.LFB71
 16619 0250 00000000 		.4byte	.LFB72
 16620 0254 54000000 		.4byte	.LFE72-.LFB72
 16621 0258 00000000 		.4byte	.LFB73
 16622 025c 48000000 		.4byte	.LFE73-.LFB73
 16623 0260 00000000 		.4byte	.LFB74
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 350


 16624 0264 50000000 		.4byte	.LFE74-.LFB74
 16625 0268 00000000 		.4byte	.LFB75
 16626 026c 4C000000 		.4byte	.LFE75-.LFB75
 16627 0270 00000000 		.4byte	.LFB76
 16628 0274 28000000 		.4byte	.LFE76-.LFB76
 16629 0278 00000000 		.4byte	.LFB77
 16630 027c 28000000 		.4byte	.LFE77-.LFB77
 16631 0280 00000000 		.4byte	.LFB78
 16632 0284 28000000 		.4byte	.LFE78-.LFB78
 16633 0288 00000000 		.4byte	.LFB79
 16634 028c 28000000 		.4byte	.LFE79-.LFB79
 16635 0290 00000000 		.4byte	.LFB80
 16636 0294 28000000 		.4byte	.LFE80-.LFB80
 16637 0298 00000000 		.4byte	.LFB81
 16638 029c 2C000000 		.4byte	.LFE81-.LFB81
 16639 02a0 00000000 		.4byte	.LFB82
 16640 02a4 28000000 		.4byte	.LFE82-.LFB82
 16641 02a8 00000000 		.4byte	.LFB83
 16642 02ac 2C000000 		.4byte	.LFE83-.LFB83
 16643 02b0 00000000 		.4byte	.LFB84
 16644 02b4 28000000 		.4byte	.LFE84-.LFB84
 16645 02b8 00000000 		.4byte	.LFB85
 16646 02bc 2C000000 		.4byte	.LFE85-.LFB85
 16647 02c0 00000000 		.4byte	.LFB86
 16648 02c4 28000000 		.4byte	.LFE86-.LFB86
 16649 02c8 00000000 		.4byte	.LFB87
 16650 02cc 2C000000 		.4byte	.LFE87-.LFB87
 16651 02d0 00000000 		.4byte	.LFB88
 16652 02d4 2C000000 		.4byte	.LFE88-.LFB88
 16653 02d8 00000000 		.4byte	.LFB89
 16654 02dc 28000000 		.4byte	.LFE89-.LFB89
 16655 02e0 00000000 		.4byte	.LFB90
 16656 02e4 2C000000 		.4byte	.LFE90-.LFB90
 16657 02e8 00000000 		.4byte	.LFB91
 16658 02ec 2C000000 		.4byte	.LFE91-.LFB91
 16659 02f0 00000000 		.4byte	.LFB92
 16660 02f4 2C000000 		.4byte	.LFE92-.LFB92
 16661 02f8 00000000 		.4byte	.LFB93
 16662 02fc 2C000000 		.4byte	.LFE93-.LFB93
 16663 0300 00000000 		.4byte	.LFB94
 16664 0304 2C000000 		.4byte	.LFE94-.LFB94
 16665 0308 00000000 		.4byte	.LFB95
 16666 030c 2C000000 		.4byte	.LFE95-.LFB95
 16667 0310 00000000 		.4byte	.LFB96
 16668 0314 2C000000 		.4byte	.LFE96-.LFB96
 16669 0318 00000000 		.4byte	.LFB97
 16670 031c 2C000000 		.4byte	.LFE97-.LFB97
 16671 0320 00000000 		.4byte	.LFB98
 16672 0324 2C000000 		.4byte	.LFE98-.LFB98
 16673 0328 00000000 		.4byte	.LFB99
 16674 032c 28000000 		.4byte	.LFE99-.LFB99
 16675 0330 00000000 		.4byte	.LFB100
 16676 0334 2C000000 		.4byte	.LFE100-.LFB100
 16677 0338 00000000 		.4byte	.LFB101
 16678 033c 28000000 		.4byte	.LFE101-.LFB101
 16679 0340 00000000 		.4byte	.LFB102
 16680 0344 2C000000 		.4byte	.LFE102-.LFB102
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 351


 16681 0348 00000000 		.4byte	.LFB103
 16682 034c 28000000 		.4byte	.LFE103-.LFB103
 16683 0350 00000000 		.4byte	.LFB104
 16684 0354 2C000000 		.4byte	.LFE104-.LFB104
 16685 0358 00000000 		.4byte	.LFB105
 16686 035c 28000000 		.4byte	.LFE105-.LFB105
 16687 0360 00000000 		.4byte	.LFB106
 16688 0364 2C000000 		.4byte	.LFE106-.LFB106
 16689 0368 00000000 		.4byte	.LFB107
 16690 036c 28000000 		.4byte	.LFE107-.LFB107
 16691 0370 00000000 		.4byte	.LFB108
 16692 0374 2C000000 		.4byte	.LFE108-.LFB108
 16693 0378 00000000 		.4byte	.LFB109
 16694 037c 28000000 		.4byte	.LFE109-.LFB109
 16695 0380 00000000 		.4byte	.LFB110
 16696 0384 2C000000 		.4byte	.LFE110-.LFB110
 16697 0388 00000000 		.4byte	.LFB111
 16698 038c 28000000 		.4byte	.LFE111-.LFB111
 16699 0390 00000000 		.4byte	.LFB112
 16700 0394 2C000000 		.4byte	.LFE112-.LFB112
 16701 0398 00000000 		.4byte	.LFB113
 16702 039c 28000000 		.4byte	.LFE113-.LFB113
 16703 03a0 00000000 		.4byte	.LFB114
 16704 03a4 28000000 		.4byte	.LFE114-.LFB114
 16705 03a8 00000000 		.4byte	.LFB115
 16706 03ac 28000000 		.4byte	.LFE115-.LFB115
 16707 03b0 00000000 		.4byte	.LFB116
 16708 03b4 2C000000 		.4byte	.LFE116-.LFB116
 16709 03b8 00000000 		.4byte	.LFB117
 16710 03bc 28000000 		.4byte	.LFE117-.LFB117
 16711 03c0 00000000 		.4byte	.LFB118
 16712 03c4 2C000000 		.4byte	.LFE118-.LFB118
 16713 03c8 00000000 		.4byte	.LFB119
 16714 03cc 28000000 		.4byte	.LFE119-.LFB119
 16715 03d0 00000000 		.4byte	.LFB120
 16716 03d4 2C000000 		.4byte	.LFE120-.LFB120
 16717 03d8 00000000 		.4byte	.LFB121
 16718 03dc 28000000 		.4byte	.LFE121-.LFB121
 16719 03e0 00000000 		.4byte	.LFB122
 16720 03e4 2C000000 		.4byte	.LFE122-.LFB122
 16721 03e8 00000000 		.4byte	.LFB123
 16722 03ec 28000000 		.4byte	.LFE123-.LFB123
 16723 03f0 00000000 		.4byte	.LFB124
 16724 03f4 2C000000 		.4byte	.LFE124-.LFB124
 16725 03f8 00000000 		.4byte	.LFB125
 16726 03fc 28000000 		.4byte	.LFE125-.LFB125
 16727 0400 00000000 		.4byte	.LFB126
 16728 0404 2C000000 		.4byte	.LFE126-.LFB126
 16729 0408 00000000 		.4byte	.LFB127
 16730 040c 28000000 		.4byte	.LFE127-.LFB127
 16731 0410 00000000 		.4byte	.LFB128
 16732 0414 28000000 		.4byte	.LFE128-.LFB128
 16733 0418 00000000 		.4byte	.LFB129
 16734 041c 2C000000 		.4byte	.LFE129-.LFB129
 16735 0420 00000000 		.4byte	.LFB130
 16736 0424 2C000000 		.4byte	.LFE130-.LFB130
 16737 0428 00000000 		.4byte	.LFB131
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 352


 16738 042c 2C000000 		.4byte	.LFE131-.LFB131
 16739 0430 00000000 		.4byte	.LFB132
 16740 0434 2C000000 		.4byte	.LFE132-.LFB132
 16741 0438 00000000 		.4byte	.LFB133
 16742 043c 2C000000 		.4byte	.LFE133-.LFB133
 16743 0440 00000000 		.4byte	.LFB134
 16744 0444 2C000000 		.4byte	.LFE134-.LFB134
 16745 0448 00000000 		.4byte	.LFB135
 16746 044c EC000000 		.4byte	.LFE135-.LFB135
 16747 0450 00000000 		.4byte	.LFB136
 16748 0454 00010000 		.4byte	.LFE136-.LFB136
 16749 0458 00000000 		.4byte	.LFB137
 16750 045c B0000000 		.4byte	.LFE137-.LFB137
 16751 0460 00000000 		.4byte	.LFB138
 16752 0464 C8000000 		.4byte	.LFE138-.LFB138
 16753 0468 00000000 		.4byte	.LFB139
 16754 046c 6C000000 		.4byte	.LFE139-.LFB139
 16755 0470 00000000 		.4byte	.LFB140
 16756 0474 38000000 		.4byte	.LFE140-.LFB140
 16757 0478 00000000 		.4byte	.LFB141
 16758 047c 38000000 		.4byte	.LFE141-.LFB141
 16759 0480 00000000 		.4byte	.LFB142
 16760 0484 38000000 		.4byte	.LFE142-.LFB142
 16761 0488 00000000 		.4byte	.LFB143
 16762 048c 38000000 		.4byte	.LFE143-.LFB143
 16763 0490 00000000 		.4byte	.LFB144
 16764 0494 6C000000 		.4byte	.LFE144-.LFB144
 16765 0498 00000000 		.4byte	.LFB145
 16766 049c 38000000 		.4byte	.LFE145-.LFB145
 16767 04a0 00000000 		.4byte	.LFB146
 16768 04a4 38000000 		.4byte	.LFE146-.LFB146
 16769 04a8 00000000 		.4byte	.LFB147
 16770 04ac 38000000 		.4byte	.LFE147-.LFB147
 16771 04b0 00000000 		.4byte	.LFB148
 16772 04b4 34000000 		.4byte	.LFE148-.LFB148
 16773 04b8 00000000 		.4byte	.LFB149
 16774 04bc 44000000 		.4byte	.LFE149-.LFB149
 16775 04c0 00000000 		.4byte	.LFB150
 16776 04c4 4C000000 		.4byte	.LFE150-.LFB150
 16777 04c8 00000000 		.4byte	.LFB151
 16778 04cc 2C000000 		.4byte	.LFE151-.LFB151
 16779 04d0 00000000 		.4byte	.LFB152
 16780 04d4 2C000000 		.4byte	.LFE152-.LFB152
 16781 04d8 00000000 		.4byte	.LFB153
 16782 04dc 2C000000 		.4byte	.LFE153-.LFB153
 16783 04e0 00000000 		.4byte	.LFB154
 16784 04e4 2C000000 		.4byte	.LFE154-.LFB154
 16785 04e8 00000000 		.4byte	.LFB155
 16786 04ec 2C000000 		.4byte	.LFE155-.LFB155
 16787 04f0 00000000 		.4byte	.LFB156
 16788 04f4 2C000000 		.4byte	.LFE156-.LFB156
 16789 04f8 00000000 		.4byte	.LFB157
 16790 04fc 2C000000 		.4byte	.LFE157-.LFB157
 16791 0500 00000000 		.4byte	.LFB158
 16792 0504 40000000 		.4byte	.LFE158-.LFB158
 16793 0508 00000000 		.4byte	.LFB159
 16794 050c 2C000000 		.4byte	.LFE159-.LFB159
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 353


 16795 0510 00000000 		.4byte	.LFB160
 16796 0514 28000000 		.4byte	.LFE160-.LFB160
 16797 0518 00000000 		.4byte	.LFB161
 16798 051c 44000000 		.4byte	.LFE161-.LFB161
 16799 0520 00000000 		.4byte	.LFB162
 16800 0524 34000000 		.4byte	.LFE162-.LFB162
 16801 0528 00000000 		.4byte	.LFB163
 16802 052c 1C000000 		.4byte	.LFE163-.LFB163
 16803 0530 00000000 		.4byte	.LFB164
 16804 0534 1C000000 		.4byte	.LFE164-.LFB164
 16805 0538 00000000 		.4byte	.LFB165
 16806 053c 1C000000 		.4byte	.LFE165-.LFB165
 16807 0540 00000000 		.4byte	.LFB166
 16808 0544 2C000000 		.4byte	.LFE166-.LFB166
 16809 0548 00000000 		.4byte	.LFB167
 16810 054c 2C000000 		.4byte	.LFE167-.LFB167
 16811 0550 00000000 		.4byte	.LFB168
 16812 0554 2C000000 		.4byte	.LFE168-.LFB168
 16813 0558 00000000 		.4byte	.LFB169
 16814 055c 2C000000 		.4byte	.LFE169-.LFB169
 16815 0560 00000000 		.4byte	.LFB170
 16816 0564 2C000000 		.4byte	.LFE170-.LFB170
 16817 0568 00000000 		.4byte	.LFB171
 16818 056c 2C000000 		.4byte	.LFE171-.LFB171
 16819 0570 00000000 		.4byte	.LFB172
 16820 0574 2C000000 		.4byte	.LFE172-.LFB172
 16821 0578 00000000 		.4byte	.LFB173
 16822 057c 28000000 		.4byte	.LFE173-.LFB173
 16823 0580 00000000 		.4byte	.LFB174
 16824 0584 2C000000 		.4byte	.LFE174-.LFB174
 16825 0588 00000000 		.4byte	.LFB175
 16826 058c 28000000 		.4byte	.LFE175-.LFB175
 16827 0590 00000000 		.4byte	.LFB176
 16828 0594 28000000 		.4byte	.LFE176-.LFB176
 16829 0598 00000000 		.4byte	.LFB177
 16830 059c 1C000000 		.4byte	.LFE177-.LFB177
 16831 05a0 00000000 		.4byte	.LFB178
 16832 05a4 1C000000 		.4byte	.LFE178-.LFB178
 16833 05a8 00000000 		.4byte	.LFB179
 16834 05ac 1C000000 		.4byte	.LFE179-.LFB179
 16835 05b0 00000000 		.4byte	.LFB180
 16836 05b4 1C000000 		.4byte	.LFE180-.LFB180
 16837 05b8 00000000 		.4byte	.LFB181
 16838 05bc 2C000000 		.4byte	.LFE181-.LFB181
 16839 05c0 00000000 		.4byte	.LFB182
 16840 05c4 28000000 		.4byte	.LFE182-.LFB182
 16841 05c8 00000000 		.4byte	.LFB183
 16842 05cc 2C000000 		.4byte	.LFE183-.LFB183
 16843 05d0 00000000 		.4byte	.LFB184
 16844 05d4 28000000 		.4byte	.LFE184-.LFB184
 16845 05d8 00000000 		.4byte	.LFB185
 16846 05dc 2C000000 		.4byte	.LFE185-.LFB185
 16847 05e0 00000000 		.4byte	.LFB186
 16848 05e4 30000000 		.4byte	.LFE186-.LFB186
 16849 05e8 00000000 		.4byte	.LFB187
 16850 05ec 2C000000 		.4byte	.LFE187-.LFB187
 16851 05f0 00000000 		.4byte	.LFB188
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 354


 16852 05f4 2C000000 		.4byte	.LFE188-.LFB188
 16853 05f8 00000000 		.4byte	.LFB189
 16854 05fc 2C000000 		.4byte	.LFE189-.LFB189
 16855 0600 00000000 		.4byte	.LFB190
 16856 0604 2C000000 		.4byte	.LFE190-.LFB190
 16857 0608 00000000 		.4byte	.LFB191
 16858 060c 2C000000 		.4byte	.LFE191-.LFB191
 16859 0610 00000000 		.4byte	.LFB192
 16860 0614 28000000 		.4byte	.LFE192-.LFB192
 16861 0618 00000000 		.4byte	.LFB193
 16862 061c 2C000000 		.4byte	.LFE193-.LFB193
 16863 0620 00000000 		.4byte	.LFB194
 16864 0624 28000000 		.4byte	.LFE194-.LFB194
 16865 0628 00000000 		.4byte	.LFB195
 16866 062c 2C000000 		.4byte	.LFE195-.LFB195
 16867 0630 00000000 		.4byte	.LFB196
 16868 0634 28000000 		.4byte	.LFE196-.LFB196
 16869 0638 00000000 		.4byte	.LFB197
 16870 063c 2C000000 		.4byte	.LFE197-.LFB197
 16871 0640 00000000 		.4byte	.LFB198
 16872 0644 28000000 		.4byte	.LFE198-.LFB198
 16873 0648 00000000 		.4byte	.LFB199
 16874 064c 2C000000 		.4byte	.LFE199-.LFB199
 16875 0650 00000000 		.4byte	.LFB200
 16876 0654 28000000 		.4byte	.LFE200-.LFB200
 16877 0658 00000000 		.4byte	.LFB201
 16878 065c 2C000000 		.4byte	.LFE201-.LFB201
 16879 0660 00000000 		.4byte	.LFB202
 16880 0664 28000000 		.4byte	.LFE202-.LFB202
 16881 0668 00000000 		.4byte	.LFB203
 16882 066c 38000000 		.4byte	.LFE203-.LFB203
 16883 0670 00000000 		.4byte	.LFB204
 16884 0674 28000000 		.4byte	.LFE204-.LFB204
 16885 0678 00000000 		.4byte	.LFB205
 16886 067c 2C000000 		.4byte	.LFE205-.LFB205
 16887 0680 00000000 		.4byte	.LFB206
 16888 0684 28000000 		.4byte	.LFE206-.LFB206
 16889 0688 00000000 		.4byte	.LFB207
 16890 068c 2C000000 		.4byte	.LFE207-.LFB207
 16891 0690 00000000 		.4byte	.LFB208
 16892 0694 2C000000 		.4byte	.LFE208-.LFB208
 16893 0698 00000000 		.4byte	.LFB209
 16894 069c 28000000 		.4byte	.LFE209-.LFB209
 16895 06a0 00000000 		.4byte	.LFB210
 16896 06a4 28000000 		.4byte	.LFE210-.LFB210
 16897 06a8 00000000 		.4byte	.LFB211
 16898 06ac 30000000 		.4byte	.LFE211-.LFB211
 16899 06b0 00000000 		.4byte	.LFB212
 16900 06b4 2C000000 		.4byte	.LFE212-.LFB212
 16901 06b8 00000000 		.4byte	.LFB213
 16902 06bc 30000000 		.4byte	.LFE213-.LFB213
 16903 06c0 00000000 		.4byte	.LFB214
 16904 06c4 2C000000 		.4byte	.LFE214-.LFB214
 16905 06c8 00000000 		.4byte	.LFB215
 16906 06cc 30000000 		.4byte	.LFE215-.LFB215
 16907 06d0 00000000 		.4byte	.LFB216
 16908 06d4 2C000000 		.4byte	.LFE216-.LFB216
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 355


 16909 06d8 00000000 		.4byte	.LFB217
 16910 06dc 2C000000 		.4byte	.LFE217-.LFB217
 16911 06e0 00000000 		.4byte	.LFB218
 16912 06e4 28000000 		.4byte	.LFE218-.LFB218
 16913 06e8 00000000 		.4byte	.LFB219
 16914 06ec 2C000000 		.4byte	.LFE219-.LFB219
 16915 06f0 00000000 		.4byte	.LFB220
 16916 06f4 28000000 		.4byte	.LFE220-.LFB220
 16917 06f8 00000000 		.4byte	.LFB221
 16918 06fc 2C000000 		.4byte	.LFE221-.LFB221
 16919 0700 00000000 		.4byte	.LFB222
 16920 0704 28000000 		.4byte	.LFE222-.LFB222
 16921 0708 00000000 		.4byte	.LFB223
 16922 070c 38000000 		.4byte	.LFE223-.LFB223
 16923 0710 00000000 		.4byte	.LFB224
 16924 0714 28000000 		.4byte	.LFE224-.LFB224
 16925 0718 00000000 		.4byte	.LFB225
 16926 071c 38000000 		.4byte	.LFE225-.LFB225
 16927 0720 00000000 		.4byte	.LFB226
 16928 0724 28000000 		.4byte	.LFE226-.LFB226
 16929 0728 00000000 		.4byte	.LFB227
 16930 072c 38000000 		.4byte	.LFE227-.LFB227
 16931 0730 00000000 		.4byte	.LFB228
 16932 0734 28000000 		.4byte	.LFE228-.LFB228
 16933 0738 00000000 		.4byte	.LFB229
 16934 073c 38000000 		.4byte	.LFE229-.LFB229
 16935 0740 00000000 		.4byte	.LFB230
 16936 0744 28000000 		.4byte	.LFE230-.LFB230
 16937 0748 00000000 		.4byte	.LFB231
 16938 074c 38000000 		.4byte	.LFE231-.LFB231
 16939 0750 00000000 		.4byte	.LFB232
 16940 0754 28000000 		.4byte	.LFE232-.LFB232
 16941 0758 00000000 		.4byte	.LFB233
 16942 075c 38000000 		.4byte	.LFE233-.LFB233
 16943 0760 00000000 		.4byte	.LFB234
 16944 0764 28000000 		.4byte	.LFE234-.LFB234
 16945 0768 00000000 		.4byte	.LFB235
 16946 076c 2C000000 		.4byte	.LFE235-.LFB235
 16947 0770 00000000 		.4byte	.LFB236
 16948 0774 28000000 		.4byte	.LFE236-.LFB236
 16949 0778 00000000 		.4byte	.LFB237
 16950 077c 2C000000 		.4byte	.LFE237-.LFB237
 16951 0780 00000000 		.4byte	.LFB238
 16952 0784 28000000 		.4byte	.LFE238-.LFB238
 16953 0788 00000000 		.4byte	.LFB239
 16954 078c 2C000000 		.4byte	.LFE239-.LFB239
 16955 0790 00000000 		.4byte	.LFB240
 16956 0794 2C000000 		.4byte	.LFE240-.LFB240
 16957 0798 00000000 		.4byte	.LFB241
 16958 079c 2C000000 		.4byte	.LFE241-.LFB241
 16959 07a0 00000000 		.4byte	.LFB242
 16960 07a4 2C000000 		.4byte	.LFE242-.LFB242
 16961 07a8 00000000 		.4byte	.LFB243
 16962 07ac 2C000000 		.4byte	.LFE243-.LFB243
 16963 07b0 00000000 		.4byte	.LFB244
 16964 07b4 2C000000 		.4byte	.LFE244-.LFB244
 16965 07b8 00000000 		.4byte	.LFB245
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 356


 16966 07bc 2C000000 		.4byte	.LFE245-.LFB245
 16967 07c0 00000000 		.4byte	.LFB246
 16968 07c4 2C000000 		.4byte	.LFE246-.LFB246
 16969 07c8 00000000 		.4byte	.LFB247
 16970 07cc 2C000000 		.4byte	.LFE247-.LFB247
 16971 07d0 00000000 		.4byte	.LFB248
 16972 07d4 28000000 		.4byte	.LFE248-.LFB248
 16973 07d8 00000000 		.4byte	.LFB249
 16974 07dc 1C000000 		.4byte	.LFE249-.LFB249
 16975 07e0 00000000 		.4byte	.LFB250
 16976 07e4 70000000 		.4byte	.LFE250-.LFB250
 16977 07e8 00000000 		.4byte	.LFB251
 16978 07ec 28000000 		.4byte	.LFE251-.LFB251
 16979 07f0 00000000 		.4byte	.LFB252
 16980 07f4 28000000 		.4byte	.LFE252-.LFB252
 16981 07f8 00000000 		.4byte	.LFB253
 16982 07fc 28000000 		.4byte	.LFE253-.LFB253
 16983 0800 00000000 		.4byte	.LFB254
 16984 0804 34010000 		.4byte	.LFE254-.LFB254
 16985 0808 00000000 		.4byte	.LFB255
 16986 080c 28000000 		.4byte	.LFE255-.LFB255
 16987 0810 00000000 		.4byte	.LFB256
 16988 0814 28000000 		.4byte	.LFE256-.LFB256
 16989 0818 00000000 		.4byte	.LFB257
 16990 081c 28000000 		.4byte	.LFE257-.LFB257
 16991 0820 00000000 		.4byte	.LFB258
 16992 0824 28000000 		.4byte	.LFE258-.LFB258
 16993 0828 00000000 		.4byte	.LFB259
 16994 082c 6E000000 		.4byte	.LFE259-.LFB259
 16995 0830 00000000 		.4byte	0
 16996 0834 00000000 		.4byte	0
 16997              		.section	.debug_ranges,"",%progbits
 16998              	.Ldebug_ranges0:
 16999 0000 00000000 		.4byte	.LFB0
 17000 0004 14000000 		.4byte	.LFE0
 17001 0008 00000000 		.4byte	.LFB1
 17002 000c 20000000 		.4byte	.LFE1
 17003 0010 00000000 		.4byte	.LFB2
 17004 0014 20000000 		.4byte	.LFE2
 17005 0018 00000000 		.4byte	.LFB3
 17006 001c 18000000 		.4byte	.LFE3
 17007 0020 00000000 		.4byte	.LFB4
 17008 0024 28000000 		.4byte	.LFE4
 17009 0028 00000000 		.4byte	.LFB5
 17010 002c 28000000 		.4byte	.LFE5
 17011 0030 00000000 		.4byte	.LFB6
 17012 0034 28000000 		.4byte	.LFE6
 17013 0038 00000000 		.4byte	.LFB7
 17014 003c 28000000 		.4byte	.LFE7
 17015 0040 00000000 		.4byte	.LFB8
 17016 0044 2C000000 		.4byte	.LFE8
 17017 0048 00000000 		.4byte	.LFB9
 17018 004c 2C000000 		.4byte	.LFE9
 17019 0050 00000000 		.4byte	.LFB10
 17020 0054 2C000000 		.4byte	.LFE10
 17021 0058 00000000 		.4byte	.LFB11
 17022 005c 2C000000 		.4byte	.LFE11
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 357


 17023 0060 00000000 		.4byte	.LFB12
 17024 0064 2C000000 		.4byte	.LFE12
 17025 0068 00000000 		.4byte	.LFB13
 17026 006c 2C000000 		.4byte	.LFE13
 17027 0070 00000000 		.4byte	.LFB14
 17028 0074 2C000000 		.4byte	.LFE14
 17029 0078 00000000 		.4byte	.LFB15
 17030 007c 28000000 		.4byte	.LFE15
 17031 0080 00000000 		.4byte	.LFB16
 17032 0084 2C000000 		.4byte	.LFE16
 17033 0088 00000000 		.4byte	.LFB17
 17034 008c 28000000 		.4byte	.LFE17
 17035 0090 00000000 		.4byte	.LFB18
 17036 0094 2C000000 		.4byte	.LFE18
 17037 0098 00000000 		.4byte	.LFB19
 17038 009c 28000000 		.4byte	.LFE19
 17039 00a0 00000000 		.4byte	.LFB20
 17040 00a4 2C000000 		.4byte	.LFE20
 17041 00a8 00000000 		.4byte	.LFB21
 17042 00ac 2C000000 		.4byte	.LFE21
 17043 00b0 00000000 		.4byte	.LFB22
 17044 00b4 2C000000 		.4byte	.LFE22
 17045 00b8 00000000 		.4byte	.LFB23
 17046 00bc 2C000000 		.4byte	.LFE23
 17047 00c0 00000000 		.4byte	.LFB24
 17048 00c4 28000000 		.4byte	.LFE24
 17049 00c8 00000000 		.4byte	.LFB25
 17050 00cc 28000000 		.4byte	.LFE25
 17051 00d0 00000000 		.4byte	.LFB26
 17052 00d4 28000000 		.4byte	.LFE26
 17053 00d8 00000000 		.4byte	.LFB27
 17054 00dc 28000000 		.4byte	.LFE27
 17055 00e0 00000000 		.4byte	.LFB28
 17056 00e4 28000000 		.4byte	.LFE28
 17057 00e8 00000000 		.4byte	.LFB29
 17058 00ec 28000000 		.4byte	.LFE29
 17059 00f0 00000000 		.4byte	.LFB30
 17060 00f4 28000000 		.4byte	.LFE30
 17061 00f8 00000000 		.4byte	.LFB31
 17062 00fc 28000000 		.4byte	.LFE31
 17063 0100 00000000 		.4byte	.LFB32
 17064 0104 28000000 		.4byte	.LFE32
 17065 0108 00000000 		.4byte	.LFB33
 17066 010c 28000000 		.4byte	.LFE33
 17067 0110 00000000 		.4byte	.LFB34
 17068 0114 28000000 		.4byte	.LFE34
 17069 0118 00000000 		.4byte	.LFB35
 17070 011c 28000000 		.4byte	.LFE35
 17071 0120 00000000 		.4byte	.LFB36
 17072 0124 2C000000 		.4byte	.LFE36
 17073 0128 00000000 		.4byte	.LFB37
 17074 012c 28000000 		.4byte	.LFE37
 17075 0130 00000000 		.4byte	.LFB38
 17076 0134 2C000000 		.4byte	.LFE38
 17077 0138 00000000 		.4byte	.LFB39
 17078 013c 28000000 		.4byte	.LFE39
 17079 0140 00000000 		.4byte	.LFB40
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 358


 17080 0144 2C000000 		.4byte	.LFE40
 17081 0148 00000000 		.4byte	.LFB41
 17082 014c 28000000 		.4byte	.LFE41
 17083 0150 00000000 		.4byte	.LFB42
 17084 0154 2C000000 		.4byte	.LFE42
 17085 0158 00000000 		.4byte	.LFB43
 17086 015c 28000000 		.4byte	.LFE43
 17087 0160 00000000 		.4byte	.LFB44
 17088 0164 2C000000 		.4byte	.LFE44
 17089 0168 00000000 		.4byte	.LFB45
 17090 016c 28000000 		.4byte	.LFE45
 17091 0170 00000000 		.4byte	.LFB46
 17092 0174 2C000000 		.4byte	.LFE46
 17093 0178 00000000 		.4byte	.LFB47
 17094 017c 28000000 		.4byte	.LFE47
 17095 0180 00000000 		.4byte	.LFB48
 17096 0184 2C000000 		.4byte	.LFE48
 17097 0188 00000000 		.4byte	.LFB49
 17098 018c 28000000 		.4byte	.LFE49
 17099 0190 00000000 		.4byte	.LFB50
 17100 0194 2C000000 		.4byte	.LFE50
 17101 0198 00000000 		.4byte	.LFB51
 17102 019c 28000000 		.4byte	.LFE51
 17103 01a0 00000000 		.4byte	.LFB52
 17104 01a4 2C000000 		.4byte	.LFE52
 17105 01a8 00000000 		.4byte	.LFB53
 17106 01ac 28000000 		.4byte	.LFE53
 17107 01b0 00000000 		.4byte	.LFB54
 17108 01b4 2C000000 		.4byte	.LFE54
 17109 01b8 00000000 		.4byte	.LFB55
 17110 01bc 28000000 		.4byte	.LFE55
 17111 01c0 00000000 		.4byte	.LFB56
 17112 01c4 2C000000 		.4byte	.LFE56
 17113 01c8 00000000 		.4byte	.LFB57
 17114 01cc 28000000 		.4byte	.LFE57
 17115 01d0 00000000 		.4byte	.LFB58
 17116 01d4 2C000000 		.4byte	.LFE58
 17117 01d8 00000000 		.4byte	.LFB59
 17118 01dc 28000000 		.4byte	.LFE59
 17119 01e0 00000000 		.4byte	.LFB60
 17120 01e4 2C000000 		.4byte	.LFE60
 17121 01e8 00000000 		.4byte	.LFB61
 17122 01ec 2C000000 		.4byte	.LFE61
 17123 01f0 00000000 		.4byte	.LFB62
 17124 01f4 4C000000 		.4byte	.LFE62
 17125 01f8 00000000 		.4byte	.LFB63
 17126 01fc 48000000 		.4byte	.LFE63
 17127 0200 00000000 		.4byte	.LFB64
 17128 0204 4C000000 		.4byte	.LFE64
 17129 0208 00000000 		.4byte	.LFB65
 17130 020c 48000000 		.4byte	.LFE65
 17131 0210 00000000 		.4byte	.LFB66
 17132 0214 54000000 		.4byte	.LFE66
 17133 0218 00000000 		.4byte	.LFB67
 17134 021c 48000000 		.4byte	.LFE67
 17135 0220 00000000 		.4byte	.LFB68
 17136 0224 54000000 		.4byte	.LFE68
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 359


 17137 0228 00000000 		.4byte	.LFB69
 17138 022c 48000000 		.4byte	.LFE69
 17139 0230 00000000 		.4byte	.LFB70
 17140 0234 54000000 		.4byte	.LFE70
 17141 0238 00000000 		.4byte	.LFB71
 17142 023c 48000000 		.4byte	.LFE71
 17143 0240 00000000 		.4byte	.LFB72
 17144 0244 54000000 		.4byte	.LFE72
 17145 0248 00000000 		.4byte	.LFB73
 17146 024c 48000000 		.4byte	.LFE73
 17147 0250 00000000 		.4byte	.LFB74
 17148 0254 50000000 		.4byte	.LFE74
 17149 0258 00000000 		.4byte	.LFB75
 17150 025c 4C000000 		.4byte	.LFE75
 17151 0260 00000000 		.4byte	.LFB76
 17152 0264 28000000 		.4byte	.LFE76
 17153 0268 00000000 		.4byte	.LFB77
 17154 026c 28000000 		.4byte	.LFE77
 17155 0270 00000000 		.4byte	.LFB78
 17156 0274 28000000 		.4byte	.LFE78
 17157 0278 00000000 		.4byte	.LFB79
 17158 027c 28000000 		.4byte	.LFE79
 17159 0280 00000000 		.4byte	.LFB80
 17160 0284 28000000 		.4byte	.LFE80
 17161 0288 00000000 		.4byte	.LFB81
 17162 028c 2C000000 		.4byte	.LFE81
 17163 0290 00000000 		.4byte	.LFB82
 17164 0294 28000000 		.4byte	.LFE82
 17165 0298 00000000 		.4byte	.LFB83
 17166 029c 2C000000 		.4byte	.LFE83
 17167 02a0 00000000 		.4byte	.LFB84
 17168 02a4 28000000 		.4byte	.LFE84
 17169 02a8 00000000 		.4byte	.LFB85
 17170 02ac 2C000000 		.4byte	.LFE85
 17171 02b0 00000000 		.4byte	.LFB86
 17172 02b4 28000000 		.4byte	.LFE86
 17173 02b8 00000000 		.4byte	.LFB87
 17174 02bc 2C000000 		.4byte	.LFE87
 17175 02c0 00000000 		.4byte	.LFB88
 17176 02c4 2C000000 		.4byte	.LFE88
 17177 02c8 00000000 		.4byte	.LFB89
 17178 02cc 28000000 		.4byte	.LFE89
 17179 02d0 00000000 		.4byte	.LFB90
 17180 02d4 2C000000 		.4byte	.LFE90
 17181 02d8 00000000 		.4byte	.LFB91
 17182 02dc 2C000000 		.4byte	.LFE91
 17183 02e0 00000000 		.4byte	.LFB92
 17184 02e4 2C000000 		.4byte	.LFE92
 17185 02e8 00000000 		.4byte	.LFB93
 17186 02ec 2C000000 		.4byte	.LFE93
 17187 02f0 00000000 		.4byte	.LFB94
 17188 02f4 2C000000 		.4byte	.LFE94
 17189 02f8 00000000 		.4byte	.LFB95
 17190 02fc 2C000000 		.4byte	.LFE95
 17191 0300 00000000 		.4byte	.LFB96
 17192 0304 2C000000 		.4byte	.LFE96
 17193 0308 00000000 		.4byte	.LFB97
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 360


 17194 030c 2C000000 		.4byte	.LFE97
 17195 0310 00000000 		.4byte	.LFB98
 17196 0314 2C000000 		.4byte	.LFE98
 17197 0318 00000000 		.4byte	.LFB99
 17198 031c 28000000 		.4byte	.LFE99
 17199 0320 00000000 		.4byte	.LFB100
 17200 0324 2C000000 		.4byte	.LFE100
 17201 0328 00000000 		.4byte	.LFB101
 17202 032c 28000000 		.4byte	.LFE101
 17203 0330 00000000 		.4byte	.LFB102
 17204 0334 2C000000 		.4byte	.LFE102
 17205 0338 00000000 		.4byte	.LFB103
 17206 033c 28000000 		.4byte	.LFE103
 17207 0340 00000000 		.4byte	.LFB104
 17208 0344 2C000000 		.4byte	.LFE104
 17209 0348 00000000 		.4byte	.LFB105
 17210 034c 28000000 		.4byte	.LFE105
 17211 0350 00000000 		.4byte	.LFB106
 17212 0354 2C000000 		.4byte	.LFE106
 17213 0358 00000000 		.4byte	.LFB107
 17214 035c 28000000 		.4byte	.LFE107
 17215 0360 00000000 		.4byte	.LFB108
 17216 0364 2C000000 		.4byte	.LFE108
 17217 0368 00000000 		.4byte	.LFB109
 17218 036c 28000000 		.4byte	.LFE109
 17219 0370 00000000 		.4byte	.LFB110
 17220 0374 2C000000 		.4byte	.LFE110
 17221 0378 00000000 		.4byte	.LFB111
 17222 037c 28000000 		.4byte	.LFE111
 17223 0380 00000000 		.4byte	.LFB112
 17224 0384 2C000000 		.4byte	.LFE112
 17225 0388 00000000 		.4byte	.LFB113
 17226 038c 28000000 		.4byte	.LFE113
 17227 0390 00000000 		.4byte	.LFB114
 17228 0394 28000000 		.4byte	.LFE114
 17229 0398 00000000 		.4byte	.LFB115
 17230 039c 28000000 		.4byte	.LFE115
 17231 03a0 00000000 		.4byte	.LFB116
 17232 03a4 2C000000 		.4byte	.LFE116
 17233 03a8 00000000 		.4byte	.LFB117
 17234 03ac 28000000 		.4byte	.LFE117
 17235 03b0 00000000 		.4byte	.LFB118
 17236 03b4 2C000000 		.4byte	.LFE118
 17237 03b8 00000000 		.4byte	.LFB119
 17238 03bc 28000000 		.4byte	.LFE119
 17239 03c0 00000000 		.4byte	.LFB120
 17240 03c4 2C000000 		.4byte	.LFE120
 17241 03c8 00000000 		.4byte	.LFB121
 17242 03cc 28000000 		.4byte	.LFE121
 17243 03d0 00000000 		.4byte	.LFB122
 17244 03d4 2C000000 		.4byte	.LFE122
 17245 03d8 00000000 		.4byte	.LFB123
 17246 03dc 28000000 		.4byte	.LFE123
 17247 03e0 00000000 		.4byte	.LFB124
 17248 03e4 2C000000 		.4byte	.LFE124
 17249 03e8 00000000 		.4byte	.LFB125
 17250 03ec 28000000 		.4byte	.LFE125
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 361


 17251 03f0 00000000 		.4byte	.LFB126
 17252 03f4 2C000000 		.4byte	.LFE126
 17253 03f8 00000000 		.4byte	.LFB127
 17254 03fc 28000000 		.4byte	.LFE127
 17255 0400 00000000 		.4byte	.LFB128
 17256 0404 28000000 		.4byte	.LFE128
 17257 0408 00000000 		.4byte	.LFB129
 17258 040c 2C000000 		.4byte	.LFE129
 17259 0410 00000000 		.4byte	.LFB130
 17260 0414 2C000000 		.4byte	.LFE130
 17261 0418 00000000 		.4byte	.LFB131
 17262 041c 2C000000 		.4byte	.LFE131
 17263 0420 00000000 		.4byte	.LFB132
 17264 0424 2C000000 		.4byte	.LFE132
 17265 0428 00000000 		.4byte	.LFB133
 17266 042c 2C000000 		.4byte	.LFE133
 17267 0430 00000000 		.4byte	.LFB134
 17268 0434 2C000000 		.4byte	.LFE134
 17269 0438 00000000 		.4byte	.LFB135
 17270 043c EC000000 		.4byte	.LFE135
 17271 0440 00000000 		.4byte	.LFB136
 17272 0444 00010000 		.4byte	.LFE136
 17273 0448 00000000 		.4byte	.LFB137
 17274 044c B0000000 		.4byte	.LFE137
 17275 0450 00000000 		.4byte	.LFB138
 17276 0454 C8000000 		.4byte	.LFE138
 17277 0458 00000000 		.4byte	.LFB139
 17278 045c 6C000000 		.4byte	.LFE139
 17279 0460 00000000 		.4byte	.LFB140
 17280 0464 38000000 		.4byte	.LFE140
 17281 0468 00000000 		.4byte	.LFB141
 17282 046c 38000000 		.4byte	.LFE141
 17283 0470 00000000 		.4byte	.LFB142
 17284 0474 38000000 		.4byte	.LFE142
 17285 0478 00000000 		.4byte	.LFB143
 17286 047c 38000000 		.4byte	.LFE143
 17287 0480 00000000 		.4byte	.LFB144
 17288 0484 6C000000 		.4byte	.LFE144
 17289 0488 00000000 		.4byte	.LFB145
 17290 048c 38000000 		.4byte	.LFE145
 17291 0490 00000000 		.4byte	.LFB146
 17292 0494 38000000 		.4byte	.LFE146
 17293 0498 00000000 		.4byte	.LFB147
 17294 049c 38000000 		.4byte	.LFE147
 17295 04a0 00000000 		.4byte	.LFB148
 17296 04a4 34000000 		.4byte	.LFE148
 17297 04a8 00000000 		.4byte	.LFB149
 17298 04ac 44000000 		.4byte	.LFE149
 17299 04b0 00000000 		.4byte	.LFB150
 17300 04b4 4C000000 		.4byte	.LFE150
 17301 04b8 00000000 		.4byte	.LFB151
 17302 04bc 2C000000 		.4byte	.LFE151
 17303 04c0 00000000 		.4byte	.LFB152
 17304 04c4 2C000000 		.4byte	.LFE152
 17305 04c8 00000000 		.4byte	.LFB153
 17306 04cc 2C000000 		.4byte	.LFE153
 17307 04d0 00000000 		.4byte	.LFB154
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 362


 17308 04d4 2C000000 		.4byte	.LFE154
 17309 04d8 00000000 		.4byte	.LFB155
 17310 04dc 2C000000 		.4byte	.LFE155
 17311 04e0 00000000 		.4byte	.LFB156
 17312 04e4 2C000000 		.4byte	.LFE156
 17313 04e8 00000000 		.4byte	.LFB157
 17314 04ec 2C000000 		.4byte	.LFE157
 17315 04f0 00000000 		.4byte	.LFB158
 17316 04f4 40000000 		.4byte	.LFE158
 17317 04f8 00000000 		.4byte	.LFB159
 17318 04fc 2C000000 		.4byte	.LFE159
 17319 0500 00000000 		.4byte	.LFB160
 17320 0504 28000000 		.4byte	.LFE160
 17321 0508 00000000 		.4byte	.LFB161
 17322 050c 44000000 		.4byte	.LFE161
 17323 0510 00000000 		.4byte	.LFB162
 17324 0514 34000000 		.4byte	.LFE162
 17325 0518 00000000 		.4byte	.LFB163
 17326 051c 1C000000 		.4byte	.LFE163
 17327 0520 00000000 		.4byte	.LFB164
 17328 0524 1C000000 		.4byte	.LFE164
 17329 0528 00000000 		.4byte	.LFB165
 17330 052c 1C000000 		.4byte	.LFE165
 17331 0530 00000000 		.4byte	.LFB166
 17332 0534 2C000000 		.4byte	.LFE166
 17333 0538 00000000 		.4byte	.LFB167
 17334 053c 2C000000 		.4byte	.LFE167
 17335 0540 00000000 		.4byte	.LFB168
 17336 0544 2C000000 		.4byte	.LFE168
 17337 0548 00000000 		.4byte	.LFB169
 17338 054c 2C000000 		.4byte	.LFE169
 17339 0550 00000000 		.4byte	.LFB170
 17340 0554 2C000000 		.4byte	.LFE170
 17341 0558 00000000 		.4byte	.LFB171
 17342 055c 2C000000 		.4byte	.LFE171
 17343 0560 00000000 		.4byte	.LFB172
 17344 0564 2C000000 		.4byte	.LFE172
 17345 0568 00000000 		.4byte	.LFB173
 17346 056c 28000000 		.4byte	.LFE173
 17347 0570 00000000 		.4byte	.LFB174
 17348 0574 2C000000 		.4byte	.LFE174
 17349 0578 00000000 		.4byte	.LFB175
 17350 057c 28000000 		.4byte	.LFE175
 17351 0580 00000000 		.4byte	.LFB176
 17352 0584 28000000 		.4byte	.LFE176
 17353 0588 00000000 		.4byte	.LFB177
 17354 058c 1C000000 		.4byte	.LFE177
 17355 0590 00000000 		.4byte	.LFB178
 17356 0594 1C000000 		.4byte	.LFE178
 17357 0598 00000000 		.4byte	.LFB179
 17358 059c 1C000000 		.4byte	.LFE179
 17359 05a0 00000000 		.4byte	.LFB180
 17360 05a4 1C000000 		.4byte	.LFE180
 17361 05a8 00000000 		.4byte	.LFB181
 17362 05ac 2C000000 		.4byte	.LFE181
 17363 05b0 00000000 		.4byte	.LFB182
 17364 05b4 28000000 		.4byte	.LFE182
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 363


 17365 05b8 00000000 		.4byte	.LFB183
 17366 05bc 2C000000 		.4byte	.LFE183
 17367 05c0 00000000 		.4byte	.LFB184
 17368 05c4 28000000 		.4byte	.LFE184
 17369 05c8 00000000 		.4byte	.LFB185
 17370 05cc 2C000000 		.4byte	.LFE185
 17371 05d0 00000000 		.4byte	.LFB186
 17372 05d4 30000000 		.4byte	.LFE186
 17373 05d8 00000000 		.4byte	.LFB187
 17374 05dc 2C000000 		.4byte	.LFE187
 17375 05e0 00000000 		.4byte	.LFB188
 17376 05e4 2C000000 		.4byte	.LFE188
 17377 05e8 00000000 		.4byte	.LFB189
 17378 05ec 2C000000 		.4byte	.LFE189
 17379 05f0 00000000 		.4byte	.LFB190
 17380 05f4 2C000000 		.4byte	.LFE190
 17381 05f8 00000000 		.4byte	.LFB191
 17382 05fc 2C000000 		.4byte	.LFE191
 17383 0600 00000000 		.4byte	.LFB192
 17384 0604 28000000 		.4byte	.LFE192
 17385 0608 00000000 		.4byte	.LFB193
 17386 060c 2C000000 		.4byte	.LFE193
 17387 0610 00000000 		.4byte	.LFB194
 17388 0614 28000000 		.4byte	.LFE194
 17389 0618 00000000 		.4byte	.LFB195
 17390 061c 2C000000 		.4byte	.LFE195
 17391 0620 00000000 		.4byte	.LFB196
 17392 0624 28000000 		.4byte	.LFE196
 17393 0628 00000000 		.4byte	.LFB197
 17394 062c 2C000000 		.4byte	.LFE197
 17395 0630 00000000 		.4byte	.LFB198
 17396 0634 28000000 		.4byte	.LFE198
 17397 0638 00000000 		.4byte	.LFB199
 17398 063c 2C000000 		.4byte	.LFE199
 17399 0640 00000000 		.4byte	.LFB200
 17400 0644 28000000 		.4byte	.LFE200
 17401 0648 00000000 		.4byte	.LFB201
 17402 064c 2C000000 		.4byte	.LFE201
 17403 0650 00000000 		.4byte	.LFB202
 17404 0654 28000000 		.4byte	.LFE202
 17405 0658 00000000 		.4byte	.LFB203
 17406 065c 38000000 		.4byte	.LFE203
 17407 0660 00000000 		.4byte	.LFB204
 17408 0664 28000000 		.4byte	.LFE204
 17409 0668 00000000 		.4byte	.LFB205
 17410 066c 2C000000 		.4byte	.LFE205
 17411 0670 00000000 		.4byte	.LFB206
 17412 0674 28000000 		.4byte	.LFE206
 17413 0678 00000000 		.4byte	.LFB207
 17414 067c 2C000000 		.4byte	.LFE207
 17415 0680 00000000 		.4byte	.LFB208
 17416 0684 2C000000 		.4byte	.LFE208
 17417 0688 00000000 		.4byte	.LFB209
 17418 068c 28000000 		.4byte	.LFE209
 17419 0690 00000000 		.4byte	.LFB210
 17420 0694 28000000 		.4byte	.LFE210
 17421 0698 00000000 		.4byte	.LFB211
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 364


 17422 069c 30000000 		.4byte	.LFE211
 17423 06a0 00000000 		.4byte	.LFB212
 17424 06a4 2C000000 		.4byte	.LFE212
 17425 06a8 00000000 		.4byte	.LFB213
 17426 06ac 30000000 		.4byte	.LFE213
 17427 06b0 00000000 		.4byte	.LFB214
 17428 06b4 2C000000 		.4byte	.LFE214
 17429 06b8 00000000 		.4byte	.LFB215
 17430 06bc 30000000 		.4byte	.LFE215
 17431 06c0 00000000 		.4byte	.LFB216
 17432 06c4 2C000000 		.4byte	.LFE216
 17433 06c8 00000000 		.4byte	.LFB217
 17434 06cc 2C000000 		.4byte	.LFE217
 17435 06d0 00000000 		.4byte	.LFB218
 17436 06d4 28000000 		.4byte	.LFE218
 17437 06d8 00000000 		.4byte	.LFB219
 17438 06dc 2C000000 		.4byte	.LFE219
 17439 06e0 00000000 		.4byte	.LFB220
 17440 06e4 28000000 		.4byte	.LFE220
 17441 06e8 00000000 		.4byte	.LFB221
 17442 06ec 2C000000 		.4byte	.LFE221
 17443 06f0 00000000 		.4byte	.LFB222
 17444 06f4 28000000 		.4byte	.LFE222
 17445 06f8 00000000 		.4byte	.LFB223
 17446 06fc 38000000 		.4byte	.LFE223
 17447 0700 00000000 		.4byte	.LFB224
 17448 0704 28000000 		.4byte	.LFE224
 17449 0708 00000000 		.4byte	.LFB225
 17450 070c 38000000 		.4byte	.LFE225
 17451 0710 00000000 		.4byte	.LFB226
 17452 0714 28000000 		.4byte	.LFE226
 17453 0718 00000000 		.4byte	.LFB227
 17454 071c 38000000 		.4byte	.LFE227
 17455 0720 00000000 		.4byte	.LFB228
 17456 0724 28000000 		.4byte	.LFE228
 17457 0728 00000000 		.4byte	.LFB229
 17458 072c 38000000 		.4byte	.LFE229
 17459 0730 00000000 		.4byte	.LFB230
 17460 0734 28000000 		.4byte	.LFE230
 17461 0738 00000000 		.4byte	.LFB231
 17462 073c 38000000 		.4byte	.LFE231
 17463 0740 00000000 		.4byte	.LFB232
 17464 0744 28000000 		.4byte	.LFE232
 17465 0748 00000000 		.4byte	.LFB233
 17466 074c 38000000 		.4byte	.LFE233
 17467 0750 00000000 		.4byte	.LFB234
 17468 0754 28000000 		.4byte	.LFE234
 17469 0758 00000000 		.4byte	.LFB235
 17470 075c 2C000000 		.4byte	.LFE235
 17471 0760 00000000 		.4byte	.LFB236
 17472 0764 28000000 		.4byte	.LFE236
 17473 0768 00000000 		.4byte	.LFB237
 17474 076c 2C000000 		.4byte	.LFE237
 17475 0770 00000000 		.4byte	.LFB238
 17476 0774 28000000 		.4byte	.LFE238
 17477 0778 00000000 		.4byte	.LFB239
 17478 077c 2C000000 		.4byte	.LFE239
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 365


 17479 0780 00000000 		.4byte	.LFB240
 17480 0784 2C000000 		.4byte	.LFE240
 17481 0788 00000000 		.4byte	.LFB241
 17482 078c 2C000000 		.4byte	.LFE241
 17483 0790 00000000 		.4byte	.LFB242
 17484 0794 2C000000 		.4byte	.LFE242
 17485 0798 00000000 		.4byte	.LFB243
 17486 079c 2C000000 		.4byte	.LFE243
 17487 07a0 00000000 		.4byte	.LFB244
 17488 07a4 2C000000 		.4byte	.LFE244
 17489 07a8 00000000 		.4byte	.LFB245
 17490 07ac 2C000000 		.4byte	.LFE245
 17491 07b0 00000000 		.4byte	.LFB246
 17492 07b4 2C000000 		.4byte	.LFE246
 17493 07b8 00000000 		.4byte	.LFB247
 17494 07bc 2C000000 		.4byte	.LFE247
 17495 07c0 00000000 		.4byte	.LFB248
 17496 07c4 28000000 		.4byte	.LFE248
 17497 07c8 00000000 		.4byte	.LFB249
 17498 07cc 1C000000 		.4byte	.LFE249
 17499 07d0 00000000 		.4byte	.LFB250
 17500 07d4 70000000 		.4byte	.LFE250
 17501 07d8 00000000 		.4byte	.LFB251
 17502 07dc 28000000 		.4byte	.LFE251
 17503 07e0 00000000 		.4byte	.LFB252
 17504 07e4 28000000 		.4byte	.LFE252
 17505 07e8 00000000 		.4byte	.LFB253
 17506 07ec 28000000 		.4byte	.LFE253
 17507 07f0 00000000 		.4byte	.LFB254
 17508 07f4 34010000 		.4byte	.LFE254
 17509 07f8 00000000 		.4byte	.LFB255
 17510 07fc 28000000 		.4byte	.LFE255
 17511 0800 00000000 		.4byte	.LFB256
 17512 0804 28000000 		.4byte	.LFE256
 17513 0808 00000000 		.4byte	.LFB257
 17514 080c 28000000 		.4byte	.LFE257
 17515 0810 00000000 		.4byte	.LFB258
 17516 0814 28000000 		.4byte	.LFE258
 17517 0818 00000000 		.4byte	.LFB259
 17518 081c 6E000000 		.4byte	.LFE259
 17519 0820 00000000 		.4byte	0
 17520 0824 00000000 		.4byte	0
 17521              		.section	.debug_line,"",%progbits
 17522              	.Ldebug_line0:
 17523 0000 BA140000 		.section	.debug_str,"MS",%progbits,1
 17523      02002901 
 17523      00000201 
 17523      FB0E0D00 
 17523      01010101 
 17524              	.LASF136:
 17525 0000 64726976 		.ascii	"drive\000"
 17525      6500
 17526              	.LASF310:
 17527 0006 64657641 		.ascii	"devAddr\000"
 17527      64647200 
 17528              	.LASF125:
 17529 000e 4D505536 		.ascii	"MPU6050_getSlave4IsDone\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 366


 17529      3035305F 
 17529      67657453 
 17529      6C617665 
 17529      34497344 
 17530              	.LASF139:
 17531 0026 6C617463 		.ascii	"latch\000"
 17531      6800
 17532              	.LASF94:
 17533 002c 4D505536 		.ascii	"MPU6050_getSlaveAddress\000"
 17533      3035305F 
 17533      67657453 
 17533      6C617665 
 17533      41646472 
 17534              	.LASF23:
 17535 0044 4D505536 		.ascii	"MPU6050_getAuxVDDIOLevel\000"
 17535      3035305F 
 17535      67657441 
 17535      75785644 
 17535      44494F4C 
 17536              	.LASF29:
 17537 005d 4D505536 		.ascii	"MPU6050_setRate\000"
 17537      3035305F 
 17537      73657452 
 17537      61746500 
 17538              	.LASF127:
 17539 006d 4D505536 		.ascii	"MPU6050_getSlave4Nack\000"
 17539      3035305F 
 17539      67657453 
 17539      6C617665 
 17539      344E6163 
 17540              	.LASF75:
 17541 0083 4D505536 		.ascii	"MPU6050_setAccelFIFOEnabled\000"
 17541      3035305F 
 17541      73657441 
 17541      6363656C 
 17541      4649464F 
 17542              	.LASF292:
 17543 009f 4D505536 		.ascii	"MPU6050_resetDMP\000"
 17543      3035305F 
 17543      72657365 
 17543      74444D50 
 17543      00
 17544              	.LASF230:
 17545 00b0 4D505536 		.ascii	"MPU6050_setWakeFrequency\000"
 17545      3035305F 
 17545      73657457 
 17545      616B6546 
 17545      72657175 
 17546              	.LASF224:
 17547 00c9 4D505536 		.ascii	"MPU6050_getTempSensorEnabled\000"
 17547      3035305F 
 17547      67657454 
 17547      656D7053 
 17547      656E736F 
 17548              	.LASF176:
 17549 00e6 4D505536 		.ascii	"MPU6050_getAcceleration\000"
 17549      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 367


 17549      67657441 
 17549      6363656C 
 17549      65726174 
 17550              	.LASF268:
 17551 00fe 4D505536 		.ascii	"MPU6050_getYAccelOffset\000"
 17551      3035305F 
 17551      67657459 
 17551      41636365 
 17551      6C4F6666 
 17552              	.LASF214:
 17553 0116 4D505536 		.ascii	"MPU6050_setI2CMasterModeEnabled\000"
 17553      3035305F 
 17553      73657449 
 17553      32434D61 
 17553      73746572 
 17554              	.LASF255:
 17555 0136 4D505536 		.ascii	"MPU6050_getYGyroOffset\000"
 17555      3035305F 
 17555      67657459 
 17555      4779726F 
 17555      4F666673 
 17556              	.LASF1:
 17557 014d 5F5F7569 		.ascii	"__uint8_t\000"
 17557      6E74385F 
 17557      7400
 17558              	.LASF222:
 17559 0157 4D505536 		.ascii	"MPU6050_getWakeCycleEnabled\000"
 17559      3035305F 
 17559      67657457 
 17559      616B6543 
 17559      79636C65 
 17560              	.LASF218:
 17561 0173 4D505536 		.ascii	"MPU6050_resetSensors\000"
 17561      3035305F 
 17561      72657365 
 17561      7453656E 
 17561      736F7273 
 17562              	.LASF105:
 17563 0188 4D505536 		.ascii	"MPU6050_getSlaveDataLength\000"
 17563      3035305F 
 17563      67657453 
 17563      6C617665 
 17563      44617461 
 17564              	.LASF219:
 17565 01a3 4D505536 		.ascii	"MPU6050_reset\000"
 17565      3035305F 
 17565      72657365 
 17565      7400
 17566              	.LASF194:
 17567 01b1 4D505536 		.ascii	"MPU6050_getZPosMotionDetected\000"
 17567      3035305F 
 17567      6765745A 
 17567      506F734D 
 17567      6F74696F 
 17568              	.LASF277:
 17569 01cf 4D505536 		.ascii	"MPU6050_setZGyroOffsetUser\000"
 17569      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 368


 17569      7365745A 
 17569      4779726F 
 17569      4F666673 
 17570              	.LASF278:
 17571 01ea 4D505536 		.ascii	"MPU6050_getIntPLLReadyEnabled\000"
 17571      3035305F 
 17571      67657449 
 17571      6E74504C 
 17571      4C526561 
 17572              	.LASF71:
 17573 0208 4D505536 		.ascii	"MPU6050_setYGyroFIFOEnabled\000"
 17573      3035305F 
 17573      73657459 
 17573      4779726F 
 17573      4649464F 
 17574              	.LASF116:
 17575 0224 4D505536 		.ascii	"MPU6050_getSlave4InterruptEnabled\000"
 17575      3035305F 
 17575      67657453 
 17575      6C617665 
 17575      34496E74 
 17576              	.LASF19:
 17577 0246 4D505536 		.ascii	"MPU6050_init\000"
 17577      3035305F 
 17577      696E6974 
 17577      00
 17578              	.LASF235:
 17579 0253 4D505536 		.ascii	"MPU6050_setStandbyYAccelEnabled\000"
 17579      3035305F 
 17579      73657453 
 17579      74616E64 
 17579      62795941 
 17580              	.LASF84:
 17581 0273 4D505536 		.ascii	"MPU6050_getWaitForExternalSensorEnabled\000"
 17581      3035305F 
 17581      67657457 
 17581      61697446 
 17581      6F724578 
 17582              	.LASF12:
 17583 029b 6C6F6E67 		.ascii	"long long unsigned int\000"
 17583      206C6F6E 
 17583      6720756E 
 17583      7369676E 
 17583      65642069 
 17584              	.LASF66:
 17585 02b2 4D505536 		.ascii	"MPU6050_getTempFIFOEnabled\000"
 17585      3035305F 
 17585      67657454 
 17585      656D7046 
 17585      49464F45 
 17586              	.LASF163:
 17587 02cd 4D505536 		.ascii	"MPU6050_getIntDataReadyEnabled\000"
 17587      3035305F 
 17587      67657449 
 17587      6E744461 
 17587      74615265 
 17588              	.LASF213:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 369


 17589 02ec 4D505536 		.ascii	"MPU6050_getI2CMasterModeEnabled\000"
 17589      3035305F 
 17589      67657449 
 17589      32434D61 
 17589      73746572 
 17590              	.LASF99:
 17591 030c 4D505536 		.ascii	"MPU6050_getSlaveWordByteSwap\000"
 17591      3035305F 
 17591      67657453 
 17591      6C617665 
 17591      576F7264 
 17592              	.LASF189:
 17593 0329 4D505536 		.ascii	"MPU6050_getXNegMotionDetected\000"
 17593      3035305F 
 17593      67657458 
 17593      4E65674D 
 17593      6F74696F 
 17594              	.LASF187:
 17595 0347 4D505536 		.ascii	"MPU6050_getExternalSensorWord\000"
 17595      3035305F 
 17595      67657445 
 17595      78746572 
 17595      6E616C53 
 17596              	.LASF158:
 17597 0365 4D505536 		.ascii	"MPU6050_setIntZeroMotionEnabled\000"
 17597      3035305F 
 17597      73657449 
 17597      6E745A65 
 17597      726F4D6F 
 17598              	.LASF0:
 17599 0385 5F5F696E 		.ascii	"__int8_t\000"
 17599      74385F74 
 17599      00
 17600              	.LASF226:
 17601 038e 4D505536 		.ascii	"MPU6050_getClockSource\000"
 17601      3035305F 
 17601      67657443 
 17601      6C6F636B 
 17601      536F7572 
 17602              	.LASF296:
 17603 03a5 75736572 		.ascii	"userBank\000"
 17603      42616E6B 
 17603      00
 17604              	.LASF231:
 17605 03ae 66726571 		.ascii	"frequency\000"
 17605      75656E63 
 17605      7900
 17606              	.LASF83:
 17607 03b8 4D505536 		.ascii	"MPU6050_setMultiMasterEnabled\000"
 17607      3035305F 
 17607      7365744D 
 17607      756C7469 
 17607      4D617374 
 17608              	.LASF76:
 17609 03d6 4D505536 		.ascii	"MPU6050_getSlave2FIFOEnabled\000"
 17609      3035305F 
 17609      67657453 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 370


 17609      6C617665 
 17609      32464946 
 17610              	.LASF215:
 17611 03f3 4D505536 		.ascii	"MPU6050_switchSPIEnabled\000"
 17611      3035305F 
 17611      73776974 
 17611      63685350 
 17611      49456E61 
 17612              	.LASF72:
 17613 040c 4D505536 		.ascii	"MPU6050_getZGyroFIFOEnabled\000"
 17613      3035305F 
 17613      6765745A 
 17613      4779726F 
 17613      4649464F 
 17614              	.LASF289:
 17615 0428 4D505536 		.ascii	"MPU6050_getIntDMPStatus\000"
 17615      3035305F 
 17615      67657449 
 17615      6E74444D 
 17615      50537461 
 17616              	.LASF16:
 17617 0440 696E7431 		.ascii	"int16_t\000"
 17617      365F7400 
 17618              	.LASF239:
 17619 0448 4D505536 		.ascii	"MPU6050_setStandbyXGyroEnabled\000"
 17619      3035305F 
 17619      73657453 
 17619      74616E64 
 17619      62795847 
 17620              	.LASF11:
 17621 0467 6C6F6E67 		.ascii	"long long int\000"
 17621      206C6F6E 
 17621      6720696E 
 17621      7400
 17622              	.LASF2:
 17623 0475 7369676E 		.ascii	"signed char\000"
 17623      65642063 
 17623      68617200 
 17624              	.LASF130:
 17625 0481 4D505536 		.ascii	"MPU6050_getSlave1Nack\000"
 17625      3035305F 
 17625      67657453 
 17625      6C617665 
 17625      314E6163 
 17626              	.LASF192:
 17627 0497 4D505536 		.ascii	"MPU6050_getYPosMotionDetected\000"
 17627      3035305F 
 17627      67657459 
 17627      506F734D 
 17627      6F74696F 
 17628              	.LASF30:
 17629 04b5 72617465 		.ascii	"rate\000"
 17629      00
 17630              	.LASF195:
 17631 04ba 4D505536 		.ascii	"MPU6050_getZeroMotionDetected\000"
 17631      3035305F 
 17631      6765745A 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 371


 17631      65726F4D 
 17631      6F74696F 
 17632              	.LASF77:
 17633 04d8 4D505536 		.ascii	"MPU6050_setSlave2FIFOEnabled\000"
 17633      3035305F 
 17633      73657453 
 17633      6C617665 
 17633      32464946 
 17634              	.LASF59:
 17635 04f5 4D505536 		.ascii	"MPU6050_setMotionDetectionThreshold\000"
 17635      3035305F 
 17635      7365744D 
 17635      6F74696F 
 17635      6E446574 
 17636              	.LASF181:
 17637 0519 4D505536 		.ascii	"MPU6050_getRotation\000"
 17637      3035305F 
 17637      67657452 
 17637      6F746174 
 17637      696F6E00 
 17638              	.LASF145:
 17639 052d 4D505536 		.ascii	"MPU6050_getFSyncInterruptEnabled\000"
 17639      3035305F 
 17639      67657446 
 17639      53796E63 
 17639      496E7465 
 17640              	.LASF272:
 17641 054e 4D505536 		.ascii	"MPU6050_getXGyroOffsetUser\000"
 17641      3035305F 
 17641      67657458 
 17641      4779726F 
 17641      4F666673 
 17642              	.LASF25:
 17643 0569 4D505536 		.ascii	"MPU6050_setAuxVDDIOLevel\000"
 17643      3035305F 
 17643      73657441 
 17643      75785644 
 17643      44494F4C 
 17644              	.LASF93:
 17645 0582 4D505536 		.ascii	"MPU6050_setSlaveAddress\000"
 17645      3035305F 
 17645      73657453 
 17645      6C617665 
 17645      41646472 
 17646              	.LASF73:
 17647 059a 4D505536 		.ascii	"MPU6050_setZGyroFIFOEnabled\000"
 17647      3035305F 
 17647      7365745A 
 17647      4779726F 
 17647      4649464F 
 17648              	.LASF249:
 17649 05b6 4D505536 		.ascii	"MPU6050_setDeviceID\000"
 17649      3035305F 
 17649      73657444 
 17649      65766963 
 17649      65494400 
 17650              	.LASF8:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 372


 17651 05ca 6C6F6E67 		.ascii	"long int\000"
 17651      20696E74 
 17651      00
 17652              	.LASF172:
 17653 05d3 4D505536 		.ascii	"MPU6050_getMotion9\000"
 17653      3035305F 
 17653      6765744D 
 17653      6F74696F 
 17653      6E3900
 17654              	.LASF161:
 17655 05e6 4D505536 		.ascii	"MPU6050_getIntI2CMasterEnabled\000"
 17655      3035305F 
 17655      67657449 
 17655      6E744932 
 17655      434D6173 
 17656              	.LASF177:
 17657 0605 4D505536 		.ascii	"MPU6050_getAccelerationX\000"
 17657      3035305F 
 17657      67657441 
 17657      6363656C 
 17657      65726174 
 17658              	.LASF211:
 17659 061e 4D505536 		.ascii	"MPU6050_getFIFOEnabled\000"
 17659      3035305F 
 17659      67657446 
 17659      49464F45 
 17659      6E61626C 
 17660              	.LASF178:
 17661 0635 4D505536 		.ascii	"MPU6050_getAccelerationY\000"
 17661      3035305F 
 17661      67657441 
 17661      6363656C 
 17661      65726174 
 17662              	.LASF314:
 17663 064e 433A5C55 		.ascii	"C:\\Users\\Christina\\Documents\\For_fun\\GitHub\\D"
 17663      73657273 
 17663      5C436872 
 17663      69737469 
 17663      6E615C44 
 17664 067b 65707265 		.ascii	"eprecated\\Corner-Module\\CornerModule\\CornerModul"
 17664      63617465 
 17664      645C436F 
 17664      726E6572 
 17664      2D4D6F64 
 17665 06ab 652E6379 		.ascii	"e.cydsn\000"
 17665      64736E00 
 17666              	.LASF61:
 17667 06b3 4D505536 		.ascii	"MPU6050_setMotionDetectionDuration\000"
 17667      3035305F 
 17667      7365744D 
 17667      6F74696F 
 17667      6E446574 
 17668              	.LASF32:
 17669 06d6 4D505536 		.ascii	"MPU6050_setExternalFrameSync\000"
 17669      3035305F 
 17669      73657445 
 17669      78746572 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 373


 17669      6E616C46 
 17670              	.LASF48:
 17671 06f3 4D505536 		.ascii	"MPU6050_setFullScaleAccelRange\000"
 17671      3035305F 
 17671      73657446 
 17671      756C6C53 
 17671      63616C65 
 17672              	.LASF274:
 17673 0712 4D505536 		.ascii	"MPU6050_getYGyroOffsetUser\000"
 17673      3035305F 
 17673      67657459 
 17673      4779726F 
 17673      4F666673 
 17674              	.LASF17:
 17675 072d 75696E74 		.ascii	"uint16_t\000"
 17675      31365F74 
 17675      00
 17676              	.LASF78:
 17677 0736 4D505536 		.ascii	"MPU6050_getSlave1FIFOEnabled\000"
 17677      3035305F 
 17677      67657453 
 17677      6C617665 
 17677      31464946 
 17678              	.LASF182:
 17679 0753 4D505536 		.ascii	"MPU6050_getRotationX\000"
 17679      3035305F 
 17679      67657452 
 17679      6F746174 
 17679      696F6E58 
 17680              	.LASF183:
 17681 0768 4D505536 		.ascii	"MPU6050_getRotationY\000"
 17681      3035305F 
 17681      67657452 
 17681      6F746174 
 17681      696F6E59 
 17682              	.LASF184:
 17683 077d 4D505536 		.ascii	"MPU6050_getRotationZ\000"
 17683      3035305F 
 17683      67657452 
 17683      6F746174 
 17683      696F6E5A 
 17684              	.LASF264:
 17685 0792 4D505536 		.ascii	"MPU6050_getZFineGain\000"
 17685      3035305F 
 17685      6765745A 
 17685      46696E65 
 17685      4761696E 
 17686              	.LASF91:
 17687 07a7 4D505536 		.ascii	"MPU6050_setMasterClockSpeed\000"
 17687      3035305F 
 17687      7365744D 
 17687      61737465 
 17687      72436C6F 
 17688              	.LASF241:
 17689 07c3 4D505536 		.ascii	"MPU6050_setStandbyYGyroEnabled\000"
 17689      3035305F 
 17689      73657453 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 374


 17689      74616E64 
 17689      62795947 
 17690              	.LASF117:
 17691 07e2 4D505536 		.ascii	"MPU6050_setSlave4InterruptEnabled\000"
 17691      3035305F 
 17691      73657453 
 17691      6C617665 
 17691      34496E74 
 17692              	.LASF191:
 17693 0804 4D505536 		.ascii	"MPU6050_getYNegMotionDetected\000"
 17693      3035305F 
 17693      67657459 
 17693      4E65674D 
 17693      6F74696F 
 17694              	.LASF154:
 17695 0822 4D505536 		.ascii	"MPU6050_setIntFreefallEnabled\000"
 17695      3035305F 
 17695      73657449 
 17695      6E744672 
 17695      65656661 
 17696              	.LASF146:
 17697 0840 4D505536 		.ascii	"MPU6050_setFSyncInterruptEnabled\000"
 17697      3035305F 
 17697      73657446 
 17697      53796E63 
 17697      496E7465 
 17698              	.LASF119:
 17699 0861 4D505536 		.ascii	"MPU6050_setSlave4WriteMode\000"
 17699      3035305F 
 17699      73657453 
 17699      6C617665 
 17699      34577269 
 17700              	.LASF198:
 17701 087c 4D505536 		.ascii	"MPU6050_setExternalShadowDelayEnabled\000"
 17701      3035305F 
 17701      73657445 
 17701      78746572 
 17701      6E616C53 
 17702              	.LASF22:
 17703 08a2 4D505536 		.ascii	"MPU6050_testConnection\000"
 17703      3035305F 
 17703      74657374 
 17703      436F6E6E 
 17703      65637469 
 17704              	.LASF171:
 17705 08b9 4D505536 		.ascii	"MPU6050_getIntDataReadyStatus\000"
 17705      3035305F 
 17705      67657449 
 17705      6E744461 
 17705      74615265 
 17706              	.LASF9:
 17707 08d7 5F5F7569 		.ascii	"__uint32_t\000"
 17707      6E743332 
 17707      5F7400
 17708              	.LASF132:
 17709 08e2 4D505536 		.ascii	"MPU6050_getInterruptMode\000"
 17709      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 375


 17709      67657449 
 17709      6E746572 
 17709      72757074 
 17710              	.LASF234:
 17711 08fb 4D505536 		.ascii	"MPU6050_getStandbyYAccelEnabled\000"
 17711      3035305F 
 17711      67657453 
 17711      74616E64 
 17711      62795941 
 17712              	.LASF201:
 17713 091b 4D505536 		.ascii	"MPU6050_resetGyroscopePath\000"
 17713      3035305F 
 17713      72657365 
 17713      74477972 
 17713      6F73636F 
 17714              	.LASF254:
 17715 0936 6F666673 		.ascii	"offset\000"
 17715      657400
 17716              	.LASF217:
 17717 093d 4D505536 		.ascii	"MPU6050_resetI2CMaster\000"
 17717      3035305F 
 17717      72657365 
 17717      74493243 
 17717      4D617374 
 17718              	.LASF4:
 17719 0954 5F5F696E 		.ascii	"__int16_t\000"
 17719      7431365F 
 17719      7400
 17720              	.LASF308:
 17721 095e 4D505536 		.ascii	"MPU6050_setup_compass\000"
 17721      3035305F 
 17721      73657475 
 17721      705F636F 
 17721      6D706173 
 17722              	.LASF57:
 17723 0974 64757261 		.ascii	"duration\000"
 17723      74696F6E 
 17723      00
 17724              	.LASF63:
 17725 097d 4D505536 		.ascii	"MPU6050_setZeroMotionDetectionThreshold\000"
 17725      3035305F 
 17725      7365745A 
 17725      65726F4D 
 17725      6F74696F 
 17726              	.LASF100:
 17727 09a5 4D505536 		.ascii	"MPU6050_setSlaveWordByteSwap\000"
 17727      3035305F 
 17727      73657453 
 17727      6C617665 
 17727      576F7264 
 17728              	.LASF301:
 17729 09c2 64617461 		.ascii	"dataSize\000"
 17729      53697A65 
 17729      00
 17730              	.LASF180:
 17731 09cb 4D505536 		.ascii	"MPU6050_getTemperature\000"
 17731      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 376


 17731      67657454 
 17731      656D7065 
 17731      72617475 
 17732              	.LASF140:
 17733 09e2 4D505536 		.ascii	"MPU6050_getInterruptLatchClear\000"
 17733      3035305F 
 17733      67657449 
 17733      6E746572 
 17733      72757074 
 17734              	.LASF190:
 17735 0a01 4D505536 		.ascii	"MPU6050_getXPosMotionDetected\000"
 17735      3035305F 
 17735      67657458 
 17735      506F734D 
 17735      6F74696F 
 17736              	.LASF74:
 17737 0a1f 4D505536 		.ascii	"MPU6050_getAccelFIFOEnabled\000"
 17737      3035305F 
 17737      67657441 
 17737      6363656C 
 17737      4649464F 
 17738              	.LASF110:
 17739 0a3b 4D505536 		.ascii	"MPU6050_getSlave4Register\000"
 17739      3035305F 
 17739      67657453 
 17739      6C617665 
 17739      34526567 
 17740              	.LASF13:
 17741 0a55 756E7369 		.ascii	"unsigned int\000"
 17741      676E6564 
 17741      20696E74 
 17741      00
 17742              	.LASF112:
 17743 0a62 4D505536 		.ascii	"MPU6050_setSlave4OutputByte\000"
 17743      3035305F 
 17743      73657453 
 17743      6C617665 
 17743      344F7574 
 17744              	.LASF186:
 17745 0a7e 706F7369 		.ascii	"position\000"
 17745      74696F6E 
 17745      00
 17746              	.LASF149:
 17747 0a87 4D505536 		.ascii	"MPU6050_getClockOutputEnabled\000"
 17747      3035305F 
 17747      67657443 
 17747      6C6F636B 
 17747      4F757470 
 17748              	.LASF281:
 17749 0aa5 4D505536 		.ascii	"MPU6050_setIntDMPEnabled\000"
 17749      3035305F 
 17749      73657449 
 17749      6E74444D 
 17749      50456E61 
 17750              	.LASF305:
 17751 0abe 636F6E66 		.ascii	"config\000"
 17751      696700
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 377


 17752              	.LASF101:
 17753 0ac5 4D505536 		.ascii	"MPU6050_getSlaveWriteMode\000"
 17753      3035305F 
 17753      67657453 
 17753      6C617665 
 17753      57726974 
 17754              	.LASF207:
 17755 0adf 4D505536 		.ascii	"MPU6050_setFreefallDetectionCounterDecrement\000"
 17755      3035305F 
 17755      73657446 
 17755      72656566 
 17755      616C6C44 
 17756              	.LASF250:
 17757 0b0c 4D505536 		.ascii	"MPU6050_getOTPBankValid\000"
 17757      3035305F 
 17757      6765744F 
 17757      54504261 
 17757      6E6B5661 
 17758              	.LASF10:
 17759 0b24 6C6F6E67 		.ascii	"long unsigned int\000"
 17759      20756E73 
 17759      69676E65 
 17759      6420696E 
 17759      7400
 17760              	.LASF144:
 17761 0b36 4D505536 		.ascii	"MPU6050_setFSyncInterruptLevel\000"
 17761      3035305F 
 17761      73657446 
 17761      53796E63 
 17761      496E7465 
 17762              	.LASF56:
 17763 0b55 4D505536 		.ascii	"MPU6050_setFreefallDetectionDuration\000"
 17763      3035305F 
 17763      73657446 
 17763      72656566 
 17763      616C6C44 
 17764              	.LASF70:
 17765 0b7a 4D505536 		.ascii	"MPU6050_getYGyroFIFOEnabled\000"
 17765      3035305F 
 17765      67657459 
 17765      4779726F 
 17765      4649464F 
 17766              	.LASF300:
 17767 0b96 4D505536 		.ascii	"MPU6050_readMemoryBlock\000"
 17767      3035305F 
 17767      72656164 
 17767      4D656D6F 
 17767      7279426C 
 17768              	.LASF208:
 17769 0bae 64656372 		.ascii	"decrement\000"
 17769      656D656E 
 17769      7400
 17770              	.LASF210:
 17771 0bb8 4D505536 		.ascii	"MPU6050_setMotionDetectionCounterDecrement\000"
 17771      3035305F 
 17771      7365744D 
 17771      6F74696F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 378


 17771      6E446574 
 17772              	.LASF242:
 17773 0be3 4D505536 		.ascii	"MPU6050_getStandbyZGyroEnabled\000"
 17773      3035305F 
 17773      67657453 
 17773      74616E64 
 17773      62795A47 
 17774              	.LASF27:
 17775 0c02 6C657665 		.ascii	"level\000"
 17775      6C00
 17776              	.LASF113:
 17777 0c08 64617461 		.ascii	"data\000"
 17777      00
 17778              	.LASF220:
 17779 0c0d 4D505536 		.ascii	"MPU6050_getSleepEnabled\000"
 17779      3035305F 
 17779      67657453 
 17779      6C656570 
 17779      456E6162 
 17780              	.LASF7:
 17781 0c25 73686F72 		.ascii	"short unsigned int\000"
 17781      7420756E 
 17781      7369676E 
 17781      65642069 
 17781      6E7400
 17782              	.LASF282:
 17783 0c38 4D505536 		.ascii	"MPU6050_getDMPInt5Status\000"
 17783      3035305F 
 17783      67657444 
 17783      4D50496E 
 17783      74355374 
 17784              	.LASF20:
 17785 0c51 4D505536 		.ascii	"MPU6050_initialize\000"
 17785      3035305F 
 17785      696E6974 
 17785      69616C69 
 17785      7A6500
 17786              	.LASF80:
 17787 0c64 4D505536 		.ascii	"MPU6050_getSlave0FIFOEnabled\000"
 17787      3035305F 
 17787      67657453 
 17787      6C617665 
 17787      30464946 
 17788              	.LASF256:
 17789 0c81 4D505536 		.ascii	"MPU6050_setYGyroOffset\000"
 17789      3035305F 
 17789      73657459 
 17789      4779726F 
 17789      4F666673 
 17790              	.LASF237:
 17791 0c98 4D505536 		.ascii	"MPU6050_setStandbyZAccelEnabled\000"
 17791      3035305F 
 17791      73657453 
 17791      74616E64 
 17791      62795A41 
 17792              	.LASF128:
 17793 0cb8 4D505536 		.ascii	"MPU6050_getSlave3Nack\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 379


 17793      3035305F 
 17793      67657453 
 17793      6C617665 
 17793      334E6163 
 17794              	.LASF98:
 17795 0cce 4D505536 		.ascii	"MPU6050_setSlaveEnabled\000"
 17795      3035305F 
 17795      73657453 
 17795      6C617665 
 17795      456E6162 
 17796              	.LASF85:
 17797 0ce6 4D505536 		.ascii	"MPU6050_setWaitForExternalSensorEnabled\000"
 17797      3035305F 
 17797      73657457 
 17797      61697446 
 17797      6F724578 
 17798              	.LASF120:
 17799 0d0e 4D505536 		.ascii	"MPU6050_getSlave4MasterDelay\000"
 17799      3035305F 
 17799      67657453 
 17799      6C617665 
 17799      344D6173 
 17800              	.LASF58:
 17801 0d2b 4D505536 		.ascii	"MPU6050_getMotionDetectionThreshold\000"
 17801      3035305F 
 17801      6765744D 
 17801      6F74696F 
 17801      6E446574 
 17802              	.LASF233:
 17803 0d4f 4D505536 		.ascii	"MPU6050_setStandbyXAccelEnabled\000"
 17803      3035305F 
 17803      73657453 
 17803      74616E64 
 17803      62795841 
 17804              	.LASF103:
 17805 0d6f 4D505536 		.ascii	"MPU6050_getSlaveWordGroupOffset\000"
 17805      3035305F 
 17805      67657453 
 17805      6C617665 
 17805      576F7264 
 17806              	.LASF248:
 17807 0d8f 4D505536 		.ascii	"MPU6050_getDeviceID\000"
 17807      3035305F 
 17807      67657444 
 17807      65766963 
 17807      65494400 
 17808              	.LASF53:
 17809 0da3 4D505536 		.ascii	"MPU6050_setFreefallDetectionThreshold\000"
 17809      3035305F 
 17809      73657446 
 17809      72656566 
 17809      616C6C44 
 17810              	.LASF205:
 17811 0dc9 4D505536 		.ascii	"MPU6050_setAccelerometerPowerOnDelay\000"
 17811      3035305F 
 17811      73657441 
 17811      6363656C 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 380


 17811      65726F6D 
 17812              	.LASF147:
 17813 0dee 4D505536 		.ascii	"MPU6050_getI2CBypassEnabled\000"
 17813      3035305F 
 17813      67657449 
 17813      32434279 
 17813      70617373 
 17814              	.LASF209:
 17815 0e0a 4D505536 		.ascii	"MPU6050_getMotionDetectionCounterDecrement\000"
 17815      3035305F 
 17815      6765744D 
 17815      6F74696F 
 17815      6E446574 
 17816              	.LASF50:
 17817 0e35 4D505536 		.ascii	"MPU6050_setDHPFMode\000"
 17817      3035305F 
 17817      73657444 
 17817      4850464D 
 17817      6F646500 
 17818              	.LASF121:
 17819 0e49 4D505536 		.ascii	"MPU6050_setSlave4MasterDelay\000"
 17819      3035305F 
 17819      73657453 
 17819      6C617665 
 17819      344D6173 
 17820              	.LASF297:
 17821 0e66 4D505536 		.ascii	"MPU6050_setMemoryStartAddress\000"
 17821      3035305F 
 17821      7365744D 
 17821      656D6F72 
 17821      79537461 
 17822              	.LASF240:
 17823 0e84 4D505536 		.ascii	"MPU6050_getStandbyYGyroEnabled\000"
 17823      3035305F 
 17823      67657453 
 17823      74616E64 
 17823      62795947 
 17824              	.LASF298:
 17825 0ea3 4D505536 		.ascii	"MPU6050_readMemoryByte\000"
 17825      3035305F 
 17825      72656164 
 17825      4D656D6F 
 17825      72794279 
 17826              	.LASF276:
 17827 0eba 4D505536 		.ascii	"MPU6050_getZGyroOffsetUser\000"
 17827      3035305F 
 17827      6765745A 
 17827      4779726F 
 17827      4F666673 
 17828              	.LASF199:
 17829 0ed5 4D505536 		.ascii	"MPU6050_getSlaveDelayEnabled\000"
 17829      3035305F 
 17829      67657453 
 17829      6C617665 
 17829      44656C61 
 17830              	.LASF124:
 17831 0ef2 4D505536 		.ascii	"MPU6050_getPassthroughStatus\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 381


 17831      3035305F 
 17831      67657450 
 17831      61737374 
 17831      68726F75 
 17832              	.LASF160:
 17833 0f0f 4D505536 		.ascii	"MPU6050_setIntFIFOBufferOverflowEnabled\000"
 17833      3035305F 
 17833      73657449 
 17833      6E744649 
 17833      464F4275 
 17834              	.LASF86:
 17835 0f37 4D505536 		.ascii	"MPU6050_getSlave3FIFOEnabled\000"
 17835      3035305F 
 17835      67657453 
 17835      6C617665 
 17835      33464946 
 17836              	.LASF228:
 17837 0f54 736F7572 		.ascii	"source\000"
 17837      636500
 17838              	.LASF295:
 17839 0f5b 70726566 		.ascii	"prefetchEnabled\000"
 17839      65746368 
 17839      456E6162 
 17839      6C656400 
 17840              	.LASF200:
 17841 0f6b 4D505536 		.ascii	"MPU6050_setSlaveDelayEnabled\000"
 17841      3035305F 
 17841      73657453 
 17841      6C617665 
 17841      44656C61 
 17842              	.LASF35:
 17843 0f88 4D505536 		.ascii	"MPU6050_setDLPFMode\000"
 17843      3035305F 
 17843      73657444 
 17843      4C50464D 
 17843      6F646500 
 17844              	.LASF270:
 17845 0f9c 4D505536 		.ascii	"MPU6050_getZAccelOffset\000"
 17845      3035305F 
 17845      6765745A 
 17845      41636365 
 17845      6C4F6666 
 17846              	.LASF287:
 17847 0fb4 4D505536 		.ascii	"MPU6050_getDMPInt0Status\000"
 17847      3035305F 
 17847      67657444 
 17847      4D50496E 
 17847      74305374 
 17848              	.LASF26:
 17849 0fcd 61646472 		.ascii	"address\000"
 17849      65737300 
 17850              	.LASF284:
 17851 0fd5 4D505536 		.ascii	"MPU6050_getDMPInt3Status\000"
 17851      3035305F 
 17851      67657444 
 17851      4D50496E 
 17851      74335374 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 382


 17852              	.LASF87:
 17853 0fee 4D505536 		.ascii	"MPU6050_setSlave3FIFOEnabled\000"
 17853      3035305F 
 17853      73657453 
 17853      6C617665 
 17853      33464946 
 17854              	.LASF302:
 17855 100b 6368756E 		.ascii	"chunkSize\000"
 17855      6B53697A 
 17855      6500
 17856              	.LASF271:
 17857 1015 4D505536 		.ascii	"MPU6050_setZAccelOffset\000"
 17857      3035305F 
 17857      7365745A 
 17857      41636365 
 17857      6C4F6666 
 17858              	.LASF90:
 17859 102d 4D505536 		.ascii	"MPU6050_getMasterClockSpeed\000"
 17859      3035305F 
 17859      6765744D 
 17859      61737465 
 17859      72436C6F 
 17860              	.LASF28:
 17861 1049 4D505536 		.ascii	"MPU6050_getRate\000"
 17861      3035305F 
 17861      67657452 
 17861      61746500 
 17862              	.LASF118:
 17863 1059 4D505536 		.ascii	"MPU6050_getSlave4WriteMode\000"
 17863      3035305F 
 17863      67657453 
 17863      6C617665 
 17863      34577269 
 17864              	.LASF156:
 17865 1074 4D505536 		.ascii	"MPU6050_setIntMotionEnabled\000"
 17865      3035305F 
 17865      73657449 
 17865      6E744D6F 
 17865      74696F6E 
 17866              	.LASF273:
 17867 1090 4D505536 		.ascii	"MPU6050_setXGyroOffsetUser\000"
 17867      3035305F 
 17867      73657458 
 17867      4779726F 
 17867      4F666673 
 17868              	.LASF40:
 17869 10ab 4D505536 		.ascii	"MPU6050_getAccelXSelfTest\000"
 17869      3035305F 
 17869      67657441 
 17869      6363656C 
 17869      5853656C 
 17870              	.LASF238:
 17871 10c5 4D505536 		.ascii	"MPU6050_getStandbyXGyroEnabled\000"
 17871      3035305F 
 17871      67657453 
 17871      74616E64 
 17871      62795847 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 383


 17872              	.LASF212:
 17873 10e4 4D505536 		.ascii	"MPU6050_setFIFOEnabled\000"
 17873      3035305F 
 17873      73657446 
 17873      49464F45 
 17873      6E61626C 
 17874              	.LASF262:
 17875 10fb 4D505536 		.ascii	"MPU6050_getYFineGain\000"
 17875      3035305F 
 17875      67657459 
 17875      46696E65 
 17875      4761696E 
 17876              	.LASF236:
 17877 1110 4D505536 		.ascii	"MPU6050_getStandbyZAccelEnabled\000"
 17877      3035305F 
 17877      67657453 
 17877      74616E64 
 17877      62795A41 
 17878              	.LASF153:
 17879 1130 4D505536 		.ascii	"MPU6050_getIntFreefallEnabled\000"
 17879      3035305F 
 17879      67657449 
 17879      6E744672 
 17879      65656661 
 17880              	.LASF260:
 17881 114e 4D505536 		.ascii	"MPU6050_setXFineGain\000"
 17881      3035305F 
 17881      73657458 
 17881      46696E65 
 17881      4761696E 
 17882              	.LASF51:
 17883 1163 62616E64 		.ascii	"bandwidth\000"
 17883      77696474 
 17883      6800
 17884              	.LASF39:
 17885 116d 72616E67 		.ascii	"range\000"
 17885      6500
 17886              	.LASF169:
 17887 1173 4D505536 		.ascii	"MPU6050_getIntFIFOBufferOverflowStatus\000"
 17887      3035305F 
 17887      67657449 
 17887      6E744649 
 17887      464F4275 
 17888              	.LASF311:
 17889 119a 62756666 		.ascii	"buffer\000"
 17889      657200
 17890              	.LASF133:
 17891 11a1 4D505536 		.ascii	"MPU6050_setInterruptMode\000"
 17891      3035305F 
 17891      73657449 
 17891      6E746572 
 17891      72757074 
 17892              	.LASF157:
 17893 11ba 4D505536 		.ascii	"MPU6050_getIntZeroMotionEnabled\000"
 17893      3035305F 
 17893      67657449 
 17893      6E745A65 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 384


 17893      726F4D6F 
 17894              	.LASF204:
 17895 11da 4D505536 		.ascii	"MPU6050_getAccelerometerPowerOnDelay\000"
 17895      3035305F 
 17895      67657441 
 17895      6363656C 
 17895      65726F6D 
 17896              	.LASF159:
 17897 11ff 4D505536 		.ascii	"MPU6050_getIntFIFOBufferOverflowEnabled\000"
 17897      3035305F 
 17897      67657449 
 17897      6E744649 
 17897      464F4275 
 17898              	.LASF69:
 17899 1227 4D505536 		.ascii	"MPU6050_setXGyroFIFOEnabled\000"
 17899      3035305F 
 17899      73657458 
 17899      4779726F 
 17899      4649464F 
 17900              	.LASF64:
 17901 1243 4D505536 		.ascii	"MPU6050_getZeroMotionDetectionDuration\000"
 17901      3035305F 
 17901      6765745A 
 17901      65726F4D 
 17901      6F74696F 
 17902              	.LASF243:
 17903 126a 4D505536 		.ascii	"MPU6050_setStandbyZGyroEnabled\000"
 17903      3035305F 
 17903      73657453 
 17903      74616E64 
 17903      62795A47 
 17904              	.LASF303:
 17905 1289 4D505536 		.ascii	"MPU6050_getDMPConfig1\000"
 17905      3035305F 
 17905      67657444 
 17905      4D50436F 
 17905      6E666967 
 17906              	.LASF232:
 17907 129f 4D505536 		.ascii	"MPU6050_getStandbyXAccelEnabled\000"
 17907      3035305F 
 17907      67657453 
 17907      74616E64 
 17907      62795841 
 17908              	.LASF306:
 17909 12bf 4D505536 		.ascii	"MPU6050_getDMPConfig2\000"
 17909      3035305F 
 17909      67657444 
 17909      4D50436F 
 17909      6E666967 
 17910              	.LASF313:
 17911 12d5 2E5C6D70 		.ascii	".\\mpu6050.c\000"
 17911      75363035 
 17911      302E6300 
 17912              	.LASF114:
 17913 12e1 4D505536 		.ascii	"MPU6050_getSlave4Enabled\000"
 17913      3035305F 
 17913      67657453 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 385


 17913      6C617665 
 17913      34456E61 
 17914              	.LASF261:
 17915 12fa 6761696E 		.ascii	"gain\000"
 17915      00
 17916              	.LASF89:
 17917 12ff 4D505536 		.ascii	"MPU6050_setSlaveReadWriteTransitionEnabled\000"
 17917      3035305F 
 17917      73657453 
 17917      6C617665 
 17917      52656164 
 17918              	.LASF54:
 17919 132a 74687265 		.ascii	"threshold\000"
 17919      73686F6C 
 17919      6400
 17920              	.LASF47:
 17921 1334 4D505536 		.ascii	"MPU6050_getFullScaleAccelRange\000"
 17921      3035305F 
 17921      67657446 
 17921      756C6C53 
 17921      63616C65 
 17922              	.LASF21:
 17923 1353 5F426F6F 		.ascii	"_Bool\000"
 17923      6C00
 17924              	.LASF3:
 17925 1359 756E7369 		.ascii	"unsigned char\000"
 17925      676E6564 
 17925      20636861 
 17925      7200
 17926              	.LASF196:
 17927 1367 4D505536 		.ascii	"MPU6050_setSlaveOutputByte\000"
 17927      3035305F 
 17927      73657453 
 17927      6C617665 
 17927      4F757470 
 17928              	.LASF166:
 17929 1382 4D505536 		.ascii	"MPU6050_getIntFreefallStatus\000"
 17929      3035305F 
 17929      67657449 
 17929      6E744672 
 17929      65656661 
 17930              	.LASF244:
 17931 139f 4D505536 		.ascii	"MPU6050_getFIFOCount\000"
 17931      3035305F 
 17931      67657446 
 17931      49464F43 
 17931      6F756E74 
 17932              	.LASF38:
 17933 13b4 4D505536 		.ascii	"MPU6050_setFullScaleGyroRange\000"
 17933      3035305F 
 17933      73657446 
 17933      756C6C53 
 17933      63616C65 
 17934              	.LASF122:
 17935 13d2 64656C61 		.ascii	"delay\000"
 17935      7900
 17936              	.LASF5:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 386


 17937 13d8 73686F72 		.ascii	"short int\000"
 17937      7420696E 
 17937      7400
 17938              	.LASF269:
 17939 13e2 4D505536 		.ascii	"MPU6050_setYAccelOffset\000"
 17939      3035305F 
 17939      73657459 
 17939      41636365 
 17939      6C4F6666 
 17940              	.LASF62:
 17941 13fa 4D505536 		.ascii	"MPU6050_getZeroMotionDetectionThreshold\000"
 17941      3035305F 
 17941      6765745A 
 17941      65726F4D 
 17941      6F74696F 
 17942              	.LASF151:
 17943 1422 4D505536 		.ascii	"MPU6050_getIntEnabled\000"
 17943      3035305F 
 17943      67657449 
 17943      6E74456E 
 17943      61626C65 
 17944              	.LASF164:
 17945 1438 4D505536 		.ascii	"MPU6050_setIntDataReadyEnabled\000"
 17945      3035305F 
 17945      73657449 
 17945      6E744461 
 17945      74615265 
 17946              	.LASF41:
 17947 1457 4D505536 		.ascii	"MPU6050_setAccelXSelfTest\000"
 17947      3035305F 
 17947      73657441 
 17947      6363656C 
 17947      5853656C 
 17948              	.LASF263:
 17949 1471 4D505536 		.ascii	"MPU6050_setYFineGain\000"
 17949      3035305F 
 17949      73657459 
 17949      46696E65 
 17949      4761696E 
 17950              	.LASF280:
 17951 1486 4D505536 		.ascii	"MPU6050_getIntDMPEnabled\000"
 17951      3035305F 
 17951      67657449 
 17951      6E74444D 
 17951      50456E61 
 17952              	.LASF275:
 17953 149f 4D505536 		.ascii	"MPU6050_setYGyroOffsetUser\000"
 17953      3035305F 
 17953      73657459 
 17953      4779726F 
 17953      4F666673 
 17954              	.LASF43:
 17955 14ba 4D505536 		.ascii	"MPU6050_getAccelYSelfTest\000"
 17955      3035305F 
 17955      67657441 
 17955      6363656C 
 17955      5953656C 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 387


 17956              	.LASF108:
 17957 14d4 4D505536 		.ascii	"MPU6050_getSlave4Address\000"
 17957      3035305F 
 17957      67657453 
 17957      6C617665 
 17957      34416464 
 17958              	.LASF290:
 17959 14ed 4D505536 		.ascii	"MPU6050_getDMPEnabled\000"
 17959      3035305F 
 17959      67657444 
 17959      4D50456E 
 17959      61626C65 
 17960              	.LASF104:
 17961 1503 4D505536 		.ascii	"MPU6050_setSlaveWordGroupOffset\000"
 17961      3035305F 
 17961      73657453 
 17961      6C617665 
 17961      576F7264 
 17962              	.LASF246:
 17963 1523 4D505536 		.ascii	"MPU6050_getFIFOBytes\000"
 17963      3035305F 
 17963      67657446 
 17963      49464F42 
 17963      79746573 
 17964              	.LASF193:
 17965 1538 4D505536 		.ascii	"MPU6050_getZNegMotionDetected\000"
 17965      3035305F 
 17965      6765745A 
 17965      4E65674D 
 17965      6F74696F 
 17966              	.LASF142:
 17967 1556 636C6561 		.ascii	"clear\000"
 17967      7200
 17968              	.LASF197:
 17969 155c 4D505536 		.ascii	"MPU6050_getExternalShadowDelayEnabled\000"
 17969      3035305F 
 17969      67657445 
 17969      78746572 
 17969      6E616C53 
 17970              	.LASF174:
 17971 1582 4D505536 		.ascii	"MPU6050_getMotion6\000"
 17971      3035305F 
 17971      6765744D 
 17971      6F74696F 
 17971      6E3600
 17972              	.LASF81:
 17973 1595 4D505536 		.ascii	"MPU6050_setSlave0FIFOEnabled\000"
 17973      3035305F 
 17973      73657453 
 17973      6C617665 
 17973      30464946 
 17974              	.LASF18:
 17975 15b2 75696E74 		.ascii	"uint32_t\000"
 17975      33325F74 
 17975      00
 17976              	.LASF126:
 17977 15bb 4D505536 		.ascii	"MPU6050_getLostArbitration\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 388


 17977      3035305F 
 17977      6765744C 
 17977      6F737441 
 17977      72626974 
 17978              	.LASF129:
 17979 15d6 4D505536 		.ascii	"MPU6050_getSlave2Nack\000"
 17979      3035305F 
 17979      67657453 
 17979      6C617665 
 17979      324E6163 
 17980              	.LASF42:
 17981 15ec 656E6162 		.ascii	"enabled\000"
 17981      6C656400 
 17982              	.LASF68:
 17983 15f4 4D505536 		.ascii	"MPU6050_getXGyroFIFOEnabled\000"
 17983      3035305F 
 17983      67657458 
 17983      4779726F 
 17983      4649464F 
 17984              	.LASF309:
 17985 1610 73697A65 		.ascii	"sizetype\000"
 17985      74797065 
 17985      00
 17986              	.LASF245:
 17987 1619 4D505536 		.ascii	"MPU6050_getFIFOByte\000"
 17987      3035305F 
 17987      67657446 
 17987      49464F42 
 17987      79746500 
 17988              	.LASF107:
 17989 162d 6C656E67 		.ascii	"length\000"
 17989      746800
 17990              	.LASF111:
 17991 1634 4D505536 		.ascii	"MPU6050_setSlave4Register\000"
 17991      3035305F 
 17991      73657453 
 17991      6C617665 
 17991      34526567 
 17992              	.LASF36:
 17993 164e 6D6F6465 		.ascii	"mode\000"
 17993      00
 17994              	.LASF143:
 17995 1653 4D505536 		.ascii	"MPU6050_getFSyncInterruptLevel\000"
 17995      3035305F 
 17995      67657446 
 17995      53796E63 
 17995      496E7465 
 17996              	.LASF307:
 17997 1672 4D505536 		.ascii	"MPU6050_setDMPConfig2\000"
 17997      3035305F 
 17997      73657444 
 17997      4D50436F 
 17997      6E666967 
 17998              	.LASF279:
 17999 1688 4D505536 		.ascii	"MPU6050_setIntPLLReadyEnabled\000"
 17999      3035305F 
 17999      73657449 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 389


 17999      6E74504C 
 17999      4C526561 
 18000              	.LASF6:
 18001 16a6 5F5F7569 		.ascii	"__uint16_t\000"
 18001      6E743136 
 18001      5F7400
 18002              	.LASF225:
 18003 16b1 4D505536 		.ascii	"MPU6050_setTempSensorEnabled\000"
 18003      3035305F 
 18003      73657454 
 18003      656D7053 
 18003      656E736F 
 18004              	.LASF102:
 18005 16ce 4D505536 		.ascii	"MPU6050_setSlaveWriteMode\000"
 18005      3035305F 
 18005      73657453 
 18005      6C617665 
 18005      57726974 
 18006              	.LASF266:
 18007 16e8 4D505536 		.ascii	"MPU6050_getXAccelOffset\000"
 18007      3035305F 
 18007      67657458 
 18007      41636365 
 18007      6C4F6666 
 18008              	.LASF97:
 18009 1700 4D505536 		.ascii	"MPU6050_getSlaveEnabled\000"
 18009      3035305F 
 18009      67657453 
 18009      6C617665 
 18009      456E6162 
 18010              	.LASF162:
 18011 1718 4D505536 		.ascii	"MPU6050_setIntI2CMasterEnabled\000"
 18011      3035305F 
 18011      73657449 
 18011      6E744932 
 18011      434D6173 
 18012              	.LASF299:
 18013 1737 4D505536 		.ascii	"MPU6050_writeMemoryByte\000"
 18013      3035305F 
 18013      77726974 
 18013      654D656D 
 18013      6F727942 
 18014              	.LASF79:
 18015 174f 4D505536 		.ascii	"MPU6050_setSlave1FIFOEnabled\000"
 18015      3035305F 
 18015      73657453 
 18015      6C617665 
 18015      31464946 
 18016              	.LASF265:
 18017 176c 4D505536 		.ascii	"MPU6050_setZFineGain\000"
 18017      3035305F 
 18017      7365745A 
 18017      46696E65 
 18017      4761696E 
 18018              	.LASF115:
 18019 1781 4D505536 		.ascii	"MPU6050_setSlave4Enabled\000"
 18019      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 390


 18019      73657453 
 18019      6C617665 
 18019      34456E61 
 18020              	.LASF267:
 18021 179a 4D505536 		.ascii	"MPU6050_setXAccelOffset\000"
 18021      3035305F 
 18021      73657458 
 18021      41636365 
 18021      6C4F6666 
 18022              	.LASF252:
 18023 17b2 4D505536 		.ascii	"MPU6050_getXGyroOffset\000"
 18023      3035305F 
 18023      67657458 
 18023      4779726F 
 18023      4F666673 
 18024              	.LASF175:
 18025 17c9 4D505536 		.ascii	"MPU6050_getMotion6t\000"
 18025      3035305F 
 18025      6765744D 
 18025      6F74696F 
 18025      6E367400 
 18026              	.LASF67:
 18027 17dd 4D505536 		.ascii	"MPU6050_setTempFIFOEnabled\000"
 18027      3035305F 
 18027      73657454 
 18027      656D7046 
 18027      49464F45 
 18028              	.LASF95:
 18029 17f8 4D505536 		.ascii	"MPU6050_getSlaveRegister\000"
 18029      3035305F 
 18029      67657453 
 18029      6C617665 
 18029      52656769 
 18030              	.LASF152:
 18031 1811 4D505536 		.ascii	"MPU6050_setIntEnabled\000"
 18031      3035305F 
 18031      73657449 
 18031      6E74456E 
 18031      61626C65 
 18032              	.LASF251:
 18033 1827 4D505536 		.ascii	"MPU6050_setOTPBankValid\000"
 18033      3035305F 
 18033      7365744F 
 18033      54504261 
 18033      6E6B5661 
 18034              	.LASF294:
 18035 183f 62616E6B 		.ascii	"bank\000"
 18035      00
 18036              	.LASF44:
 18037 1844 4D505536 		.ascii	"MPU6050_setAccelYSelfTest\000"
 18037      3035305F 
 18037      73657441 
 18037      6363656C 
 18037      5953656C 
 18038              	.LASF170:
 18039 185e 4D505536 		.ascii	"MPU6050_getIntI2CMasterStatus\000"
 18039      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 391


 18039      67657449 
 18039      6E744932 
 18039      434D6173 
 18040              	.LASF55:
 18041 187c 4D505536 		.ascii	"MPU6050_getFreefallDetectionDuration\000"
 18041      3035305F 
 18041      67657446 
 18041      72656566 
 18041      616C6C44 
 18042              	.LASF14:
 18043 18a1 696E7438 		.ascii	"int8_t\000"
 18043      5F7400
 18044              	.LASF285:
 18045 18a8 4D505536 		.ascii	"MPU6050_getDMPInt2Status\000"
 18045      3035305F 
 18045      67657444 
 18045      4D50496E 
 18045      74325374 
 18046              	.LASF138:
 18047 18c1 4D505536 		.ascii	"MPU6050_setInterruptLatch\000"
 18047      3035305F 
 18047      73657449 
 18047      6E746572 
 18047      72757074 
 18048              	.LASF45:
 18049 18db 4D505536 		.ascii	"MPU6050_getAccelZSelfTest\000"
 18049      3035305F 
 18049      67657441 
 18049      6363656C 
 18049      5A53656C 
 18050              	.LASF167:
 18051 18f5 4D505536 		.ascii	"MPU6050_getIntMotionStatus\000"
 18051      3035305F 
 18051      67657449 
 18051      6E744D6F 
 18051      74696F6E 
 18052              	.LASF223:
 18053 1910 4D505536 		.ascii	"MPU6050_setWakeCycleEnabled\000"
 18053      3035305F 
 18053      73657457 
 18053      616B6543 
 18053      79636C65 
 18054              	.LASF253:
 18055 192c 4D505536 		.ascii	"MPU6050_setXGyroOffset\000"
 18055      3035305F 
 18055      73657458 
 18055      4779726F 
 18055      4F666673 
 18056              	.LASF247:
 18057 1943 4D505536 		.ascii	"MPU6050_setFIFOByte\000"
 18057      3035305F 
 18057      73657446 
 18057      49464F42 
 18057      79746500 
 18058              	.LASF221:
 18059 1957 4D505536 		.ascii	"MPU6050_setSleepEnabled\000"
 18059      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 392


 18059      73657453 
 18059      6C656570 
 18059      456E6162 
 18060              	.LASF49:
 18061 196f 4D505536 		.ascii	"MPU6050_getDHPFMode\000"
 18061      3035305F 
 18061      67657444 
 18061      4850464D 
 18061      6F646500 
 18062              	.LASF82:
 18063 1983 4D505536 		.ascii	"MPU6050_getMultiMasterEnabled\000"
 18063      3035305F 
 18063      6765744D 
 18063      756C7469 
 18063      4D617374 
 18064              	.LASF229:
 18065 19a1 4D505536 		.ascii	"MPU6050_getWakeFrequency\000"
 18065      3035305F 
 18065      67657457 
 18065      616B6546 
 18065      72657175 
 18066              	.LASF148:
 18067 19ba 4D505536 		.ascii	"MPU6050_setI2CBypassEnabled\000"
 18067      3035305F 
 18067      73657449 
 18067      32434279 
 18067      70617373 
 18068              	.LASF185:
 18069 19d6 4D505536 		.ascii	"MPU6050_getExternalSensorByte\000"
 18069      3035305F 
 18069      67657445 
 18069      78746572 
 18069      6E616C53 
 18070              	.LASF283:
 18071 19f4 4D505536 		.ascii	"MPU6050_getDMPInt4Status\000"
 18071      3035305F 
 18071      67657444 
 18071      4D50496E 
 18071      74345374 
 18072              	.LASF109:
 18073 1a0d 4D505536 		.ascii	"MPU6050_setSlave4Address\000"
 18073      3035305F 
 18073      73657453 
 18073      6C617665 
 18073      34416464 
 18074              	.LASF150:
 18075 1a26 4D505536 		.ascii	"MPU6050_setClockOutputEnabled\000"
 18075      3035305F 
 18075      73657443 
 18075      6C6F636B 
 18075      4F757470 
 18076              	.LASF131:
 18077 1a44 4D505536 		.ascii	"MPU6050_getSlave0Nack\000"
 18077      3035305F 
 18077      67657453 
 18077      6C617665 
 18077      304E6163 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 393


 18078              	.LASF31:
 18079 1a5a 4D505536 		.ascii	"MPU6050_getExternalFrameSync\000"
 18079      3035305F 
 18079      67657445 
 18079      78746572 
 18079      6E616C46 
 18080              	.LASF52:
 18081 1a77 4D505536 		.ascii	"MPU6050_getFreefallDetectionThreshold\000"
 18081      3035305F 
 18081      67657446 
 18081      72656566 
 18081      616C6C44 
 18082              	.LASF24:
 18083 1a9d 4932435F 		.ascii	"I2C_MPU6050_I2CAddress\000"
 18083      4D505536 
 18083      3035305F 
 18083      49324341 
 18083      64647265 
 18084              	.LASF123:
 18085 1ab4 4D505536 		.ascii	"MPU6050_getSlate4InputByte\000"
 18085      3035305F 
 18085      67657453 
 18085      6C617465 
 18085      34496E70 
 18086              	.LASF15:
 18087 1acf 75696E74 		.ascii	"uint8_t\000"
 18087      385F7400 
 18088              	.LASF141:
 18089 1ad7 4D505536 		.ascii	"MPU6050_setInterruptLatchClear\000"
 18089      3035305F 
 18089      73657449 
 18089      6E746572 
 18089      72757074 
 18090              	.LASF293:
 18091 1af6 4D505536 		.ascii	"MPU6050_setMemoryBank\000"
 18091      3035305F 
 18091      7365744D 
 18091      656D6F72 
 18091      7942616E 
 18092              	.LASF33:
 18093 1b0c 73796E63 		.ascii	"sync\000"
 18093      00
 18094              	.LASF155:
 18095 1b11 4D505536 		.ascii	"MPU6050_getIntMotionEnabled\000"
 18095      3035305F 
 18095      67657449 
 18095      6E744D6F 
 18095      74696F6E 
 18096              	.LASF179:
 18097 1b2d 4D505536 		.ascii	"MPU6050_getAccelerationZ\000"
 18097      3035305F 
 18097      67657441 
 18097      6363656C 
 18097      65726174 
 18098              	.LASF168:
 18099 1b46 4D505536 		.ascii	"MPU6050_getIntZeroMotionStatus\000"
 18099      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 394


 18099      67657449 
 18099      6E745A65 
 18099      726F4D6F 
 18100              	.LASF106:
 18101 1b65 4D505536 		.ascii	"MPU6050_setSlaveDataLength\000"
 18101      3035305F 
 18101      73657453 
 18101      6C617665 
 18101      44617461 
 18102              	.LASF137:
 18103 1b80 4D505536 		.ascii	"MPU6050_getInterruptLatch\000"
 18103      3035305F 
 18103      67657449 
 18103      6E746572 
 18103      72757074 
 18104              	.LASF188:
 18105 1b9a 4D505536 		.ascii	"MPU6050_getExternalSensorDWord\000"
 18105      3035305F 
 18105      67657445 
 18105      78746572 
 18105      6E616C53 
 18106              	.LASF34:
 18107 1bb9 4D505536 		.ascii	"MPU6050_getDLPFMode\000"
 18107      3035305F 
 18107      67657444 
 18107      4C50464D 
 18107      6F646500 
 18108              	.LASF257:
 18109 1bcd 4D505536 		.ascii	"MPU6050_getZGyroOffset\000"
 18109      3035305F 
 18109      6765745A 
 18109      4779726F 
 18109      4F666673 
 18110              	.LASF92:
 18111 1be4 73706565 		.ascii	"speed\000"
 18111      6400
 18112              	.LASF312:
 18113 1bea 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 18113      4320342E 
 18113      392E3320 
 18113      32303135 
 18113      30333033 
 18114 1c1d 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 18114      20726576 
 18114      6973696F 
 18114      6E203232 
 18114      31323230 
 18115 1c50 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 18115      66756E63 
 18115      74696F6E 
 18115      2D736563 
 18115      74696F6E 
 18116              	.LASF165:
 18117 1c78 4D505536 		.ascii	"MPU6050_getIntStatus\000"
 18117      3035305F 
 18117      67657449 
 18117      6E745374 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 395


 18117      61747573 
 18118              	.LASF65:
 18119 1c8d 4D505536 		.ascii	"MPU6050_setZeroMotionDetectionDuration\000"
 18119      3035305F 
 18119      7365745A 
 18119      65726F4D 
 18119      6F74696F 
 18120              	.LASF227:
 18121 1cb4 4D505536 		.ascii	"MPU6050_setClockSource\000"
 18121      3035305F 
 18121      73657443 
 18121      6C6F636B 
 18121      536F7572 
 18122              	.LASF206:
 18123 1ccb 4D505536 		.ascii	"MPU6050_getFreefallDetectionCounterDecrement\000"
 18123      3035305F 
 18123      67657446 
 18123      72656566 
 18123      616C6C44 
 18124              	.LASF203:
 18125 1cf8 4D505536 		.ascii	"MPU6050_resetTemperaturePath\000"
 18125      3035305F 
 18125      72657365 
 18125      7454656D 
 18125      70657261 
 18126              	.LASF286:
 18127 1d15 4D505536 		.ascii	"MPU6050_getDMPInt1Status\000"
 18127      3035305F 
 18127      67657444 
 18127      4D50496E 
 18127      74315374 
 18128              	.LASF173:
 18129 1d2e 4D505536 		.ascii	"MPU6050_getMotion9t\000"
 18129      3035305F 
 18129      6765744D 
 18129      6F74696F 
 18129      6E397400 
 18130              	.LASF291:
 18131 1d42 4D505536 		.ascii	"MPU6050_setDMPEnabled\000"
 18131      3035305F 
 18131      73657444 
 18131      4D50456E 
 18131      61626C65 
 18132              	.LASF37:
 18133 1d58 4D505536 		.ascii	"MPU6050_getFullScaleGyroRange\000"
 18133      3035305F 
 18133      67657446 
 18133      756C6C53 
 18133      63616C65 
 18134              	.LASF288:
 18135 1d76 4D505536 		.ascii	"MPU6050_getIntPLLReadyStatus\000"
 18135      3035305F 
 18135      67657449 
 18135      6E74504C 
 18135      4C526561 
 18136              	.LASF258:
 18137 1d93 4D505536 		.ascii	"MPU6050_setZGyroOffset\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 396


 18137      3035305F 
 18137      7365745A 
 18137      4779726F 
 18137      4F666673 
 18138              	.LASF96:
 18139 1daa 4D505536 		.ascii	"MPU6050_setSlaveRegister\000"
 18139      3035305F 
 18139      73657453 
 18139      6C617665 
 18139      52656769 
 18140              	.LASF259:
 18141 1dc3 4D505536 		.ascii	"MPU6050_getXFineGain\000"
 18141      3035305F 
 18141      67657458 
 18141      46696E65 
 18141      4761696E 
 18142              	.LASF304:
 18143 1dd8 4D505536 		.ascii	"MPU6050_setDMPConfig1\000"
 18143      3035305F 
 18143      73657444 
 18143      4D50436F 
 18143      6E666967 
 18144              	.LASF46:
 18145 1dee 4D505536 		.ascii	"MPU6050_setAccelZSelfTest\000"
 18145      3035305F 
 18145      73657441 
 18145      6363656C 
 18145      5A53656C 
 18146              	.LASF88:
 18147 1e08 4D505536 		.ascii	"MPU6050_getSlaveReadWriteTransitionEnabled\000"
 18147      3035305F 
 18147      67657453 
 18147      6C617665 
 18147      52656164 
 18148              	.LASF135:
 18149 1e33 4D505536 		.ascii	"MPU6050_setInterruptDrive\000"
 18149      3035305F 
 18149      73657449 
 18149      6E746572 
 18149      72757074 
 18150              	.LASF202:
 18151 1e4d 4D505536 		.ascii	"MPU6050_resetAccelerometerPath\000"
 18151      3035305F 
 18151      72657365 
 18151      74416363 
 18151      656C6572 
 18152              	.LASF60:
 18153 1e6c 4D505536 		.ascii	"MPU6050_getMotionDetectionDuration\000"
 18153      3035305F 
 18153      6765744D 
 18153      6F74696F 
 18153      6E446574 
 18154              	.LASF134:
 18155 1e8f 4D505536 		.ascii	"MPU6050_getInterruptDrive\000"
 18155      3035305F 
 18155      67657449 
 18155      6E746572 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccdKItjH.s 			page 397


 18155      72757074 
 18156              	.LASF216:
 18157 1ea9 4D505536 		.ascii	"MPU6050_resetFIFO\000"
 18157      3035305F 
 18157      72657365 
 18157      74464946 
 18157      4F00
 18158              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
