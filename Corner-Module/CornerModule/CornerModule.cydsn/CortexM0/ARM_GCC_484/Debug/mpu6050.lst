ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"mpu6050.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	devAddr,1,1
  18              		.comm	buffer,22,4
  19              		.section	.text.MPU6050_init,"ax",%progbits
  20              		.align	2
  21              		.global	MPU6050_init
  22              		.code	16
  23              		.thumb_func
  24              		.type	MPU6050_init, %function
  25              	MPU6050_init:
  26              	.LFB0:
  27              		.file 1 ".\\mpu6050.c"
   1:.\mpu6050.c   **** // I2Cdev library collection - MPU6050 I2C device class
   2:.\mpu6050.c   **** // Based on InvenSense MPU-6050 register map document rev. 2.0, 5/19/2011 (RM-MPU-6000A-00)
   3:.\mpu6050.c   **** // 8/24/2011 by Jeff Rowberg <jeff@rowberg.net>
   4:.\mpu6050.c   **** // Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib
   5:.\mpu6050.c   **** //
   6:.\mpu6050.c   **** // Changelog:
   7:.\mpu6050.c   **** // 26/May/2014: C version to be used on PSoC Creator (www.cypress.com) by Hernán Sánchez
   8:.\mpu6050.c   **** //     ... - ongoing debug release
   9:.\mpu6050.c   **** 
  10:.\mpu6050.c   **** // NOTE: THIS IS ONLY A PARIAL RELEASE. THIS DEVICE CLASS IS CURRENTLY UNDERGOING ACTIVE
  11:.\mpu6050.c   **** // DEVELOPMENT AND IS STILL MISSING SOME IMPORTANT FEATURES. PLEASE KEEP THIS IN MIND IF
  12:.\mpu6050.c   **** // YOU DECIDE TO USE THIS PARTICULAR CODE FOR ANYTHING.
  13:.\mpu6050.c   **** 
  14:.\mpu6050.c   **** /* ============================================
  15:.\mpu6050.c   **** I2Cdev device library code is placed under the MIT license
  16:.\mpu6050.c   **** Copyright (c) 2012 Jeff Rowberg
  17:.\mpu6050.c   **** 
  18:.\mpu6050.c   **** Permission is hereby granted, free of charge, to any person obtaining a copy
  19:.\mpu6050.c   **** of this software and associated documentation files (the "Software"), to deal
  20:.\mpu6050.c   **** in the Software without restriction, including without limitation the rights
  21:.\mpu6050.c   **** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  22:.\mpu6050.c   **** copies of the Software, and to permit persons to whom the Software is
  23:.\mpu6050.c   **** furnished to do so, subject to the following conditions:
  24:.\mpu6050.c   **** 
  25:.\mpu6050.c   **** The above copyright notice and this permission notice shall be included in
  26:.\mpu6050.c   **** all copies or substantial portions of the Software.
  27:.\mpu6050.c   **** 
  28:.\mpu6050.c   **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:.\mpu6050.c   **** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:.\mpu6050.c   **** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 2


  31:.\mpu6050.c   **** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  32:.\mpu6050.c   **** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  33:.\mpu6050.c   **** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  34:.\mpu6050.c   **** THE SOFTWARE.
  35:.\mpu6050.c   **** ===============================================
  36:.\mpu6050.c   **** */
  37:.\mpu6050.c   **** 
  38:.\mpu6050.c   **** 
  39:.\mpu6050.c   **** #include <stdint.h>
  40:.\mpu6050.c   **** #include "mpu6050.h"
  41:.\mpu6050.c   **** 
  42:.\mpu6050.c   **** /** Default constructor, uses default I2C address.
  43:.\mpu6050.c   ****  * @see MPU6050_DEFAULT_ADDRESS
  44:.\mpu6050.c   ****  */
  45:.\mpu6050.c   **** void MPU6050_init() {
  28              		.loc 1 45 0
  29              		.cfi_startproc
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  46:.\mpu6050.c   ****     devAddr = MPU6050_DEFAULT_ADDRESS;
  36              		.loc 1 46 0
  37 0004 024B     		ldr	r3, .L2
  38 0006 6822     		mov	r2, #104
  39 0008 1A70     		strb	r2, [r3]
  47:.\mpu6050.c   **** }
  40              		.loc 1 47 0
  41 000a BD46     		mov	sp, r7
  42              		@ sp needed
  43 000c 80BD     		pop	{r7, pc}
  44              	.L3:
  45 000e C046     		.align	2
  46              	.L2:
  47 0010 00000000 		.word	devAddr
  48              		.cfi_endproc
  49              	.LFE0:
  50              		.size	MPU6050_init, .-MPU6050_init
  51              		.section	.text.I2C_MPU6050_I2CAddress,"ax",%progbits
  52              		.align	2
  53              		.global	I2C_MPU6050_I2CAddress
  54              		.code	16
  55              		.thumb_func
  56              		.type	I2C_MPU6050_I2CAddress, %function
  57              	I2C_MPU6050_I2CAddress:
  58              	.LFB1:
  48:.\mpu6050.c   **** 
  49:.\mpu6050.c   **** /** Specific address constructor.
  50:.\mpu6050.c   ****  * @param address I2C address
  51:.\mpu6050.c   ****  * @see MPU6050_DEFAULT_ADDRESS
  52:.\mpu6050.c   ****  * @see MPU6050_ADDRESS_AD0_LOW
  53:.\mpu6050.c   ****  * @see MPU6050_ADDRESS_AD0_HIGH
  54:.\mpu6050.c   ****  */
  55:.\mpu6050.c   **** void I2C_MPU6050_I2CAddress(uint8_t address) {
  59              		.loc 1 55 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 3


  60              		.cfi_startproc
  61 0000 80B5     		push	{r7, lr}
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 7, -8
  64              		.cfi_offset 14, -4
  65 0002 82B0     		sub	sp, sp, #8
  66              		.cfi_def_cfa_offset 16
  67 0004 00AF     		add	r7, sp, #0
  68              		.cfi_def_cfa_register 7
  69 0006 021C     		mov	r2, r0
  70 0008 FB1D     		add	r3, r7, #7
  71 000a 1A70     		strb	r2, [r3]
  56:.\mpu6050.c   ****     devAddr = address;
  72              		.loc 1 56 0
  73 000c 034B     		ldr	r3, .L5
  74 000e FA1D     		add	r2, r7, #7
  75 0010 1278     		ldrb	r2, [r2]
  76 0012 1A70     		strb	r2, [r3]
  57:.\mpu6050.c   **** }
  77              		.loc 1 57 0
  78 0014 BD46     		mov	sp, r7
  79 0016 02B0     		add	sp, sp, #8
  80              		@ sp needed
  81 0018 80BD     		pop	{r7, pc}
  82              	.L6:
  83 001a C046     		.align	2
  84              	.L5:
  85 001c 00000000 		.word	devAddr
  86              		.cfi_endproc
  87              	.LFE1:
  88              		.size	I2C_MPU6050_I2CAddress, .-I2C_MPU6050_I2CAddress
  89              		.section	.text.MPU6050_initialize,"ax",%progbits
  90              		.align	2
  91              		.global	MPU6050_initialize
  92              		.code	16
  93              		.thumb_func
  94              		.type	MPU6050_initialize, %function
  95              	MPU6050_initialize:
  96              	.LFB2:
  58:.\mpu6050.c   **** 
  59:.\mpu6050.c   **** /** Power on and prepare for general usage.
  60:.\mpu6050.c   ****  * This will activate the device and take it out of sleep mode (which must be done
  61:.\mpu6050.c   ****  * after start-up). This function also sets both the accelerometer and the gyroscope
  62:.\mpu6050.c   ****  * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
  63:.\mpu6050.c   ****  * the clock source to use the X Gyro for reference, which is slightly better than
  64:.\mpu6050.c   ****  * the default internal clock source.
  65:.\mpu6050.c   ****  */
  66:.\mpu6050.c   **** void MPU6050_initialize() {
  97              		.loc 1 66 0
  98              		.cfi_startproc
  99 0000 80B5     		push	{r7, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 00AF     		add	r7, sp, #0
 104              		.cfi_def_cfa_register 7
  67:.\mpu6050.c   ****     MPU6050_setClockSource(MPU6050_CLOCK_PLL_XGYRO);
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 4


 105              		.loc 1 67 0
 106 0004 0120     		mov	r0, #1
 107 0006 FFF7FEFF 		bl	MPU6050_setClockSource
  68:.\mpu6050.c   ****     MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 108              		.loc 1 68 0
 109 000a 0020     		mov	r0, #0
 110 000c FFF7FEFF 		bl	MPU6050_setFullScaleGyroRange
  69:.\mpu6050.c   ****     MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 111              		.loc 1 69 0
 112 0010 0020     		mov	r0, #0
 113 0012 FFF7FEFF 		bl	MPU6050_setFullScaleAccelRange
  70:.\mpu6050.c   ****     MPU6050_setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 114              		.loc 1 70 0
 115 0016 0020     		mov	r0, #0
 116 0018 FFF7FEFF 		bl	MPU6050_setSleepEnabled
  71:.\mpu6050.c   **** }
 117              		.loc 1 71 0
 118 001c BD46     		mov	sp, r7
 119              		@ sp needed
 120 001e 80BD     		pop	{r7, pc}
 121              		.cfi_endproc
 122              	.LFE2:
 123              		.size	MPU6050_initialize, .-MPU6050_initialize
 124              		.section	.text.MPU6050_testConnection,"ax",%progbits
 125              		.align	2
 126              		.global	MPU6050_testConnection
 127              		.code	16
 128              		.thumb_func
 129              		.type	MPU6050_testConnection, %function
 130              	MPU6050_testConnection:
 131              	.LFB3:
  72:.\mpu6050.c   **** 
  73:.\mpu6050.c   **** /** Verify the I2C connection.
  74:.\mpu6050.c   ****  * Make sure the device is connected and responds as expected.
  75:.\mpu6050.c   ****  * @return True if connection is valid, false otherwise
  76:.\mpu6050.c   ****  */
  77:.\mpu6050.c   **** bool MPU6050_testConnection() {
 132              		.loc 1 77 0
 133              		.cfi_startproc
 134 0000 80B5     		push	{r7, lr}
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 7, -8
 137              		.cfi_offset 14, -4
 138 0002 00AF     		add	r7, sp, #0
 139              		.cfi_def_cfa_register 7
  78:.\mpu6050.c   ****     return MPU6050_getDeviceID() == 0x34;
 140              		.loc 1 78 0
 141 0004 FFF7FEFF 		bl	MPU6050_getDeviceID
 142 0008 031C     		mov	r3, r0
 143 000a 343B     		sub	r3, r3, #52
 144 000c 5A42     		neg	r2, r3
 145 000e 5341     		adc	r3, r3, r2
 146 0010 DBB2     		uxtb	r3, r3
  79:.\mpu6050.c   **** }
 147              		.loc 1 79 0
 148 0012 181C     		mov	r0, r3
 149 0014 BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 5


 150              		@ sp needed
 151 0016 80BD     		pop	{r7, pc}
 152              		.cfi_endproc
 153              	.LFE3:
 154              		.size	MPU6050_testConnection, .-MPU6050_testConnection
 155              		.section	.text.MPU6050_getAuxVDDIOLevel,"ax",%progbits
 156              		.align	2
 157              		.global	MPU6050_getAuxVDDIOLevel
 158              		.code	16
 159              		.thumb_func
 160              		.type	MPU6050_getAuxVDDIOLevel, %function
 161              	MPU6050_getAuxVDDIOLevel:
 162              	.LFB4:
  80:.\mpu6050.c   **** 
  81:.\mpu6050.c   **** // AUX_VDDIO register (InvenSense demo code calls this RA_*G_OFFS_TC)
  82:.\mpu6050.c   **** 
  83:.\mpu6050.c   **** /** Get the auxiliary I2C supply voltage level.
  84:.\mpu6050.c   ****  * When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to
  85:.\mpu6050.c   ****  * 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to
  86:.\mpu6050.c   ****  * the MPU-6000, which does not have a VLOGIC pin.
  87:.\mpu6050.c   ****  * @return I2C supply voltage level (0=VLOGIC, 1=VDD)
  88:.\mpu6050.c   ****  */
  89:.\mpu6050.c   **** uint8_t MPU6050_getAuxVDDIOLevel() {
 163              		.loc 1 89 0
 164              		.cfi_startproc
 165 0000 80B5     		push	{r7, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0002 00AF     		add	r7, sp, #0
 170              		.cfi_def_cfa_register 7
  90:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_PWR_MODE_BIT, buffer);
 171              		.loc 1 90 0
 172 0004 064B     		ldr	r3, .L12
 173 0006 1A78     		ldrb	r2, [r3]
 174 0008 064B     		ldr	r3, .L12+4
 175 000a 101C     		mov	r0, r2
 176 000c 0121     		mov	r1, #1
 177 000e 0722     		mov	r2, #7
 178 0010 FFF7FEFF 		bl	I2CReadBit
  91:.\mpu6050.c   ****     return buffer[0];
 179              		.loc 1 91 0
 180 0014 034B     		ldr	r3, .L12+4
 181 0016 1B78     		ldrb	r3, [r3]
  92:.\mpu6050.c   **** }
 182              		.loc 1 92 0
 183 0018 181C     		mov	r0, r3
 184 001a BD46     		mov	sp, r7
 185              		@ sp needed
 186 001c 80BD     		pop	{r7, pc}
 187              	.L13:
 188 001e C046     		.align	2
 189              	.L12:
 190 0020 00000000 		.word	devAddr
 191 0024 00000000 		.word	buffer
 192              		.cfi_endproc
 193              	.LFE4:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 6


 194              		.size	MPU6050_getAuxVDDIOLevel, .-MPU6050_getAuxVDDIOLevel
 195              		.section	.text.MPU6050_setAuxVDDIOLevel,"ax",%progbits
 196              		.align	2
 197              		.global	MPU6050_setAuxVDDIOLevel
 198              		.code	16
 199              		.thumb_func
 200              		.type	MPU6050_setAuxVDDIOLevel, %function
 201              	MPU6050_setAuxVDDIOLevel:
 202              	.LFB5:
  93:.\mpu6050.c   **** /** Set the auxiliary I2C supply voltage level.
  94:.\mpu6050.c   ****  * When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to
  95:.\mpu6050.c   ****  * 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to
  96:.\mpu6050.c   ****  * the MPU-6000, which does not have a VLOGIC pin.
  97:.\mpu6050.c   ****  * @param level I2C supply voltage level (0=VLOGIC, 1=VDD)
  98:.\mpu6050.c   ****  */
  99:.\mpu6050.c   **** void MPU6050_setAuxVDDIOLevel(uint8_t level) {
 203              		.loc 1 99 0
 204              		.cfi_startproc
 205 0000 80B5     		push	{r7, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 82B0     		sub	sp, sp, #8
 210              		.cfi_def_cfa_offset 16
 211 0004 00AF     		add	r7, sp, #0
 212              		.cfi_def_cfa_register 7
 213 0006 021C     		mov	r2, r0
 214 0008 FB1D     		add	r3, r7, #7
 215 000a 1A70     		strb	r2, [r3]
 100:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_PWR_MODE_BIT, level);
 216              		.loc 1 100 0
 217 000c 054B     		ldr	r3, .L15
 218 000e 1A78     		ldrb	r2, [r3]
 219 0010 FB1D     		add	r3, r7, #7
 220 0012 1B78     		ldrb	r3, [r3]
 221 0014 101C     		mov	r0, r2
 222 0016 0121     		mov	r1, #1
 223 0018 0722     		mov	r2, #7
 224 001a FFF7FEFF 		bl	I2CWriteBit
 101:.\mpu6050.c   **** }
 225              		.loc 1 101 0
 226 001e BD46     		mov	sp, r7
 227 0020 02B0     		add	sp, sp, #8
 228              		@ sp needed
 229 0022 80BD     		pop	{r7, pc}
 230              	.L16:
 231              		.align	2
 232              	.L15:
 233 0024 00000000 		.word	devAddr
 234              		.cfi_endproc
 235              	.LFE5:
 236              		.size	MPU6050_setAuxVDDIOLevel, .-MPU6050_setAuxVDDIOLevel
 237              		.section	.text.MPU6050_getRate,"ax",%progbits
 238              		.align	2
 239              		.global	MPU6050_getRate
 240              		.code	16
 241              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 7


 242              		.type	MPU6050_getRate, %function
 243              	MPU6050_getRate:
 244              	.LFB6:
 102:.\mpu6050.c   **** 
 103:.\mpu6050.c   **** // SMPLRT_DIV register
 104:.\mpu6050.c   **** 
 105:.\mpu6050.c   **** /** Get gyroscope output rate divider.
 106:.\mpu6050.c   ****  * The sensor register output, FIFO output, DMP sampling, Motion detection, Zero
 107:.\mpu6050.c   ****  * Motion detection, and Free Fall detection are all based on the Sample Rate.
 108:.\mpu6050.c   ****  * The Sample Rate is generated by dividing the gyroscope output rate by
 109:.\mpu6050.c   ****  * SMPLRT_DIV:
 110:.\mpu6050.c   ****  *
 111:.\mpu6050.c   ****  * Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 112:.\mpu6050.c   ****  *
 113:.\mpu6050.c   ****  * where Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or
 114:.\mpu6050.c   ****  * 7), and 1kHz when the DLPF is enabled (see Register 26).
 115:.\mpu6050.c   ****  *
 116:.\mpu6050.c   ****  * Note: The accelerometer output rate is 1kHz. This means that for a Sample
 117:.\mpu6050.c   ****  * Rate greater than 1kHz, the same accelerometer sample may be output to the
 118:.\mpu6050.c   ****  * FIFO, DMP, and sensor registers more than once.
 119:.\mpu6050.c   ****  *
 120:.\mpu6050.c   ****  * For a diagram of the gyroscope and accelerometer signal paths, see Section 8
 121:.\mpu6050.c   ****  * of the MPU-6000/MPU-6050 Product Specification document.
 122:.\mpu6050.c   ****  *
 123:.\mpu6050.c   ****  * @return Current sample rate
 124:.\mpu6050.c   ****  * @see MPU6050_RA_SMPLRT_DIV
 125:.\mpu6050.c   ****  */
 126:.\mpu6050.c   **** uint8_t MPU6050_getRate() {
 245              		.loc 1 126 0
 246              		.cfi_startproc
 247 0000 80B5     		push	{r7, lr}
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 00AF     		add	r7, sp, #0
 252              		.cfi_def_cfa_register 7
 127:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_SMPLRT_DIV, buffer);
 253              		.loc 1 127 0
 254 0004 064B     		ldr	r3, .L19
 255 0006 1A78     		ldrb	r2, [r3]
 256 0008 064B     		ldr	r3, .L19+4
 257 000a 101C     		mov	r0, r2
 258 000c 1921     		mov	r1, #25
 259 000e 1A1C     		mov	r2, r3
 260 0010 FFF7FEFF 		bl	I2CReadByte
 128:.\mpu6050.c   ****     return buffer[0];
 261              		.loc 1 128 0
 262 0014 034B     		ldr	r3, .L19+4
 263 0016 1B78     		ldrb	r3, [r3]
 129:.\mpu6050.c   **** }
 264              		.loc 1 129 0
 265 0018 181C     		mov	r0, r3
 266 001a BD46     		mov	sp, r7
 267              		@ sp needed
 268 001c 80BD     		pop	{r7, pc}
 269              	.L20:
 270 001e C046     		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 8


 271              	.L19:
 272 0020 00000000 		.word	devAddr
 273 0024 00000000 		.word	buffer
 274              		.cfi_endproc
 275              	.LFE6:
 276              		.size	MPU6050_getRate, .-MPU6050_getRate
 277              		.section	.text.MPU6050_setRate,"ax",%progbits
 278              		.align	2
 279              		.global	MPU6050_setRate
 280              		.code	16
 281              		.thumb_func
 282              		.type	MPU6050_setRate, %function
 283              	MPU6050_setRate:
 284              	.LFB7:
 130:.\mpu6050.c   **** /** Set gyroscope sample rate divider.
 131:.\mpu6050.c   ****  * @param rate New sample rate divider
 132:.\mpu6050.c   ****  * @see getRate()
 133:.\mpu6050.c   ****  * @see MPU6050_RA_SMPLRT_DIV
 134:.\mpu6050.c   ****  */
 135:.\mpu6050.c   **** void MPU6050_setRate(uint8_t rate) {
 285              		.loc 1 135 0
 286              		.cfi_startproc
 287 0000 80B5     		push	{r7, lr}
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 7, -8
 290              		.cfi_offset 14, -4
 291 0002 82B0     		sub	sp, sp, #8
 292              		.cfi_def_cfa_offset 16
 293 0004 00AF     		add	r7, sp, #0
 294              		.cfi_def_cfa_register 7
 295 0006 021C     		mov	r2, r0
 296 0008 FB1D     		add	r3, r7, #7
 297 000a 1A70     		strb	r2, [r3]
 136:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 298              		.loc 1 136 0
 299 000c 054B     		ldr	r3, .L22
 300 000e 1A78     		ldrb	r2, [r3]
 301 0010 FB1D     		add	r3, r7, #7
 302 0012 1B78     		ldrb	r3, [r3]
 303 0014 101C     		mov	r0, r2
 304 0016 1921     		mov	r1, #25
 305 0018 1A1C     		mov	r2, r3
 306 001a FFF7FEFF 		bl	I2CWriteByte
 137:.\mpu6050.c   **** }
 307              		.loc 1 137 0
 308 001e BD46     		mov	sp, r7
 309 0020 02B0     		add	sp, sp, #8
 310              		@ sp needed
 311 0022 80BD     		pop	{r7, pc}
 312              	.L23:
 313              		.align	2
 314              	.L22:
 315 0024 00000000 		.word	devAddr
 316              		.cfi_endproc
 317              	.LFE7:
 318              		.size	MPU6050_setRate, .-MPU6050_setRate
 319              		.section	.text.MPU6050_getExternalFrameSync,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 9


 320              		.align	2
 321              		.global	MPU6050_getExternalFrameSync
 322              		.code	16
 323              		.thumb_func
 324              		.type	MPU6050_getExternalFrameSync, %function
 325              	MPU6050_getExternalFrameSync:
 326              	.LFB8:
 138:.\mpu6050.c   **** 
 139:.\mpu6050.c   **** // CONFIG register
 140:.\mpu6050.c   **** 
 141:.\mpu6050.c   **** /** Get external FSYNC configuration.
 142:.\mpu6050.c   ****  * Configures the external Frame Synchronization (FSYNC) pin sampling. An
 143:.\mpu6050.c   ****  * external signal connected to the FSYNC pin can be sampled by configuring
 144:.\mpu6050.c   ****  * EXT_SYNC_SET. Signal changes to the FSYNC pin are latched so that short
 145:.\mpu6050.c   ****  * strobes may be captured. The latched FSYNC signal will be sampled at the
 146:.\mpu6050.c   ****  * Sampling Rate, as defined in register 25. After sampling, the latch will
 147:.\mpu6050.c   ****  * reset to the current FSYNC signal state.
 148:.\mpu6050.c   ****  *
 149:.\mpu6050.c   ****  * The sampled value will be reported in place of the least significant bit in
 150:.\mpu6050.c   ****  * a sensor data register determined by the value of EXT_SYNC_SET according to
 151:.\mpu6050.c   ****  * the following table.
 152:.\mpu6050.c   ****  *
 153:.\mpu6050.c   ****  * <pre>
 154:.\mpu6050.c   ****  * EXT_SYNC_SET | FSYNC Bit Location
 155:.\mpu6050.c   ****  * -------------+-------------------
 156:.\mpu6050.c   ****  * 0            | Input disabled
 157:.\mpu6050.c   ****  * 1            | TEMP_OUT_L[0]
 158:.\mpu6050.c   ****  * 2            | GYRO_XOUT_L[0]
 159:.\mpu6050.c   ****  * 3            | GYRO_YOUT_L[0]
 160:.\mpu6050.c   ****  * 4            | GYRO_ZOUT_L[0]
 161:.\mpu6050.c   ****  * 5            | ACCEL_XOUT_L[0]
 162:.\mpu6050.c   ****  * 6            | ACCEL_YOUT_L[0]
 163:.\mpu6050.c   ****  * 7            | ACCEL_ZOUT_L[0]
 164:.\mpu6050.c   ****  * </pre>
 165:.\mpu6050.c   ****  *
 166:.\mpu6050.c   ****  * @return FSYNC configuration value
 167:.\mpu6050.c   ****  */
 168:.\mpu6050.c   **** uint8_t MPU6050_getExternalFrameSync() {
 327              		.loc 1 168 0
 328              		.cfi_startproc
 329 0000 80B5     		push	{r7, lr}
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 7, -8
 332              		.cfi_offset 14, -4
 333 0002 82B0     		sub	sp, sp, #8
 334              		.cfi_def_cfa_offset 16
 335 0004 02AF     		add	r7, sp, #8
 336              		.cfi_def_cfa 7, 8
 169:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_
 337              		.loc 1 169 0
 338 0006 074B     		ldr	r3, .L26
 339 0008 1B78     		ldrb	r3, [r3]
 340 000a 074A     		ldr	r2, .L26+4
 341 000c 0092     		str	r2, [sp]
 342 000e 181C     		mov	r0, r3
 343 0010 1A21     		mov	r1, #26
 344 0012 0522     		mov	r2, #5
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 10


 345 0014 0323     		mov	r3, #3
 346 0016 FFF7FEFF 		bl	I2CReadBits
 170:.\mpu6050.c   ****     return buffer[0];
 347              		.loc 1 170 0
 348 001a 034B     		ldr	r3, .L26+4
 349 001c 1B78     		ldrb	r3, [r3]
 171:.\mpu6050.c   **** }
 350              		.loc 1 171 0
 351 001e 181C     		mov	r0, r3
 352 0020 BD46     		mov	sp, r7
 353              		@ sp needed
 354 0022 80BD     		pop	{r7, pc}
 355              	.L27:
 356              		.align	2
 357              	.L26:
 358 0024 00000000 		.word	devAddr
 359 0028 00000000 		.word	buffer
 360              		.cfi_endproc
 361              	.LFE8:
 362              		.size	MPU6050_getExternalFrameSync, .-MPU6050_getExternalFrameSync
 363              		.section	.text.MPU6050_setExternalFrameSync,"ax",%progbits
 364              		.align	2
 365              		.global	MPU6050_setExternalFrameSync
 366              		.code	16
 367              		.thumb_func
 368              		.type	MPU6050_setExternalFrameSync, %function
 369              	MPU6050_setExternalFrameSync:
 370              	.LFB9:
 172:.\mpu6050.c   **** /** Set external FSYNC configuration.
 173:.\mpu6050.c   ****  * @see getExternalFrameSync()
 174:.\mpu6050.c   ****  * @see MPU6050_RA_CONFIG
 175:.\mpu6050.c   ****  * @param sync New FSYNC configuration value
 176:.\mpu6050.c   ****  */
 177:.\mpu6050.c   **** void MPU6050_setExternalFrameSync(uint8_t sync) {
 371              		.loc 1 177 0
 372              		.cfi_startproc
 373 0000 80B5     		push	{r7, lr}
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 7, -8
 376              		.cfi_offset 14, -4
 377 0002 84B0     		sub	sp, sp, #16
 378              		.cfi_def_cfa_offset 24
 379 0004 02AF     		add	r7, sp, #8
 380              		.cfi_def_cfa 7, 16
 381 0006 021C     		mov	r2, r0
 382 0008 FB1D     		add	r3, r7, #7
 383 000a 1A70     		strb	r2, [r3]
 178:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET
 384              		.loc 1 178 0
 385 000c 064B     		ldr	r3, .L29
 386 000e 1B78     		ldrb	r3, [r3]
 387 0010 FA1D     		add	r2, r7, #7
 388 0012 1278     		ldrb	r2, [r2]
 389 0014 0092     		str	r2, [sp]
 390 0016 181C     		mov	r0, r3
 391 0018 1A21     		mov	r1, #26
 392 001a 0522     		mov	r2, #5
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 11


 393 001c 0323     		mov	r3, #3
 394 001e FFF7FEFF 		bl	I2CWriteBits
 179:.\mpu6050.c   **** }
 395              		.loc 1 179 0
 396 0022 BD46     		mov	sp, r7
 397 0024 02B0     		add	sp, sp, #8
 398              		@ sp needed
 399 0026 80BD     		pop	{r7, pc}
 400              	.L30:
 401              		.align	2
 402              	.L29:
 403 0028 00000000 		.word	devAddr
 404              		.cfi_endproc
 405              	.LFE9:
 406              		.size	MPU6050_setExternalFrameSync, .-MPU6050_setExternalFrameSync
 407              		.section	.text.MPU6050_getDLPFMode,"ax",%progbits
 408              		.align	2
 409              		.global	MPU6050_getDLPFMode
 410              		.code	16
 411              		.thumb_func
 412              		.type	MPU6050_getDLPFMode, %function
 413              	MPU6050_getDLPFMode:
 414              	.LFB10:
 180:.\mpu6050.c   **** /** Get digital low-pass filter configuration.
 181:.\mpu6050.c   ****  * The DLPF_CFG parameter sets the digital low pass filter configuration. It
 182:.\mpu6050.c   ****  * also determines the internal sampling rate used by the device as shown in
 183:.\mpu6050.c   ****  * the table below.
 184:.\mpu6050.c   ****  *
 185:.\mpu6050.c   ****  * Note: The accelerometer output rate is 1kHz. This means that for a Sample
 186:.\mpu6050.c   ****  * Rate greater than 1kHz, the same accelerometer sample may be output to the
 187:.\mpu6050.c   ****  * FIFO, DMP, and sensor registers more than once.
 188:.\mpu6050.c   ****  *
 189:.\mpu6050.c   ****  * <pre>
 190:.\mpu6050.c   ****  *          |   ACCELEROMETER    |           GYROSCOPE
 191:.\mpu6050.c   ****  * DLPF_CFG | Bandwidth | Delay  | Bandwidth | Delay  | Sample Rate
 192:.\mpu6050.c   ****  * ---------+-----------+--------+-----------+--------+-------------
 193:.\mpu6050.c   ****  * 0        | 260Hz     | 0ms    | 256Hz     | 0.98ms | 8kHz
 194:.\mpu6050.c   ****  * 1        | 184Hz     | 2.0ms  | 188Hz     | 1.9ms  | 1kHz
 195:.\mpu6050.c   ****  * 2        | 94Hz      | 3.0ms  | 98Hz      | 2.8ms  | 1kHz
 196:.\mpu6050.c   ****  * 3        | 44Hz      | 4.9ms  | 42Hz      | 4.8ms  | 1kHz
 197:.\mpu6050.c   ****  * 4        | 21Hz      | 8.5ms  | 20Hz      | 8.3ms  | 1kHz
 198:.\mpu6050.c   ****  * 5        | 10Hz      | 13.8ms | 10Hz      | 13.4ms | 1kHz
 199:.\mpu6050.c   ****  * 6        | 5Hz       | 19.0ms | 5Hz       | 18.6ms | 1kHz
 200:.\mpu6050.c   ****  * 7        |   -- Reserved --   |   -- Reserved --   | Reserved
 201:.\mpu6050.c   ****  * </pre>
 202:.\mpu6050.c   ****  *
 203:.\mpu6050.c   ****  * @return DLFP configuration
 204:.\mpu6050.c   ****  * @see MPU6050_RA_CONFIG
 205:.\mpu6050.c   ****  * @see MPU6050_CFG_DLPF_CFG_BIT
 206:.\mpu6050.c   ****  * @see MPU6050_CFG_DLPF_CFG_LENGTH
 207:.\mpu6050.c   ****  */
 208:.\mpu6050.c   **** uint8_t MPU6050_getDLPFMode() {
 415              		.loc 1 208 0
 416              		.cfi_startproc
 417 0000 80B5     		push	{r7, lr}
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 12


 420              		.cfi_offset 14, -4
 421 0002 82B0     		sub	sp, sp, #8
 422              		.cfi_def_cfa_offset 16
 423 0004 02AF     		add	r7, sp, #8
 424              		.cfi_def_cfa 7, 8
 209:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, 
 425              		.loc 1 209 0
 426 0006 074B     		ldr	r3, .L33
 427 0008 1B78     		ldrb	r3, [r3]
 428 000a 074A     		ldr	r2, .L33+4
 429 000c 0092     		str	r2, [sp]
 430 000e 181C     		mov	r0, r3
 431 0010 1A21     		mov	r1, #26
 432 0012 0222     		mov	r2, #2
 433 0014 0323     		mov	r3, #3
 434 0016 FFF7FEFF 		bl	I2CReadBits
 210:.\mpu6050.c   ****     return buffer[0];
 435              		.loc 1 210 0
 436 001a 034B     		ldr	r3, .L33+4
 437 001c 1B78     		ldrb	r3, [r3]
 211:.\mpu6050.c   **** }
 438              		.loc 1 211 0
 439 001e 181C     		mov	r0, r3
 440 0020 BD46     		mov	sp, r7
 441              		@ sp needed
 442 0022 80BD     		pop	{r7, pc}
 443              	.L34:
 444              		.align	2
 445              	.L33:
 446 0024 00000000 		.word	devAddr
 447 0028 00000000 		.word	buffer
 448              		.cfi_endproc
 449              	.LFE10:
 450              		.size	MPU6050_getDLPFMode, .-MPU6050_getDLPFMode
 451              		.section	.text.MPU6050_setDLPFMode,"ax",%progbits
 452              		.align	2
 453              		.global	MPU6050_setDLPFMode
 454              		.code	16
 455              		.thumb_func
 456              		.type	MPU6050_setDLPFMode, %function
 457              	MPU6050_setDLPFMode:
 458              	.LFB11:
 212:.\mpu6050.c   **** /** Set digital low-pass filter configuration.
 213:.\mpu6050.c   ****  * @param mode New DLFP configuration setting
 214:.\mpu6050.c   ****  * @see getDLPFBandwidth()
 215:.\mpu6050.c   ****  * @see MPU6050_DLPF_BW_256
 216:.\mpu6050.c   ****  * @see MPU6050_RA_CONFIG
 217:.\mpu6050.c   ****  * @see MPU6050_CFG_DLPF_CFG_BIT
 218:.\mpu6050.c   ****  * @see MPU6050_CFG_DLPF_CFG_LENGTH
 219:.\mpu6050.c   ****  */
 220:.\mpu6050.c   **** void MPU6050_setDLPFMode(uint8_t mode) {
 459              		.loc 1 220 0
 460              		.cfi_startproc
 461 0000 80B5     		push	{r7, lr}
 462              		.cfi_def_cfa_offset 8
 463              		.cfi_offset 7, -8
 464              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 13


 465 0002 84B0     		sub	sp, sp, #16
 466              		.cfi_def_cfa_offset 24
 467 0004 02AF     		add	r7, sp, #8
 468              		.cfi_def_cfa 7, 16
 469 0006 021C     		mov	r2, r0
 470 0008 FB1D     		add	r3, r7, #7
 471 000a 1A70     		strb	r2, [r3]
 221:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH,
 472              		.loc 1 221 0
 473 000c 064B     		ldr	r3, .L36
 474 000e 1B78     		ldrb	r3, [r3]
 475 0010 FA1D     		add	r2, r7, #7
 476 0012 1278     		ldrb	r2, [r2]
 477 0014 0092     		str	r2, [sp]
 478 0016 181C     		mov	r0, r3
 479 0018 1A21     		mov	r1, #26
 480 001a 0222     		mov	r2, #2
 481 001c 0323     		mov	r3, #3
 482 001e FFF7FEFF 		bl	I2CWriteBits
 222:.\mpu6050.c   **** }
 483              		.loc 1 222 0
 484 0022 BD46     		mov	sp, r7
 485 0024 02B0     		add	sp, sp, #8
 486              		@ sp needed
 487 0026 80BD     		pop	{r7, pc}
 488              	.L37:
 489              		.align	2
 490              	.L36:
 491 0028 00000000 		.word	devAddr
 492              		.cfi_endproc
 493              	.LFE11:
 494              		.size	MPU6050_setDLPFMode, .-MPU6050_setDLPFMode
 495              		.section	.text.MPU6050_getFullScaleGyroRange,"ax",%progbits
 496              		.align	2
 497              		.global	MPU6050_getFullScaleGyroRange
 498              		.code	16
 499              		.thumb_func
 500              		.type	MPU6050_getFullScaleGyroRange, %function
 501              	MPU6050_getFullScaleGyroRange:
 502              	.LFB12:
 223:.\mpu6050.c   **** 
 224:.\mpu6050.c   **** // GYRO_CONFIG register
 225:.\mpu6050.c   **** 
 226:.\mpu6050.c   **** /** Get full-scale gyroscope range.
 227:.\mpu6050.c   ****  * The FS_SEL parameter allows setting the full-scale range of the gyro sensors,
 228:.\mpu6050.c   ****  * as described in the table below.
 229:.\mpu6050.c   ****  *
 230:.\mpu6050.c   ****  * <pre>
 231:.\mpu6050.c   ****  * 0 = +/- 250 degrees/sec
 232:.\mpu6050.c   ****  * 1 = +/- 500 degrees/sec
 233:.\mpu6050.c   ****  * 2 = +/- 1000 degrees/sec
 234:.\mpu6050.c   ****  * 3 = +/- 2000 degrees/sec
 235:.\mpu6050.c   ****  * </pre>
 236:.\mpu6050.c   ****  *
 237:.\mpu6050.c   ****  * @return Current full-scale gyroscope range setting
 238:.\mpu6050.c   ****  * @see MPU6050_GYRO_FS_250
 239:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_CONFIG
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 14


 240:.\mpu6050.c   ****  * @see MPU6050_GCONFIG_FS_SEL_BIT
 241:.\mpu6050.c   ****  * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 242:.\mpu6050.c   ****  */
 243:.\mpu6050.c   **** uint8_t MPU6050_getFullScaleGyroRange() {
 503              		.loc 1 243 0
 504              		.cfi_startproc
 505 0000 80B5     		push	{r7, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 7, -8
 508              		.cfi_offset 14, -4
 509 0002 82B0     		sub	sp, sp, #8
 510              		.cfi_def_cfa_offset 16
 511 0004 02AF     		add	r7, sp, #8
 512              		.cfi_def_cfa 7, 8
 244:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL
 513              		.loc 1 244 0
 514 0006 074B     		ldr	r3, .L40
 515 0008 1B78     		ldrb	r3, [r3]
 516 000a 074A     		ldr	r2, .L40+4
 517 000c 0092     		str	r2, [sp]
 518 000e 181C     		mov	r0, r3
 519 0010 1B21     		mov	r1, #27
 520 0012 0422     		mov	r2, #4
 521 0014 0223     		mov	r3, #2
 522 0016 FFF7FEFF 		bl	I2CReadBits
 245:.\mpu6050.c   ****     return buffer[0];
 523              		.loc 1 245 0
 524 001a 034B     		ldr	r3, .L40+4
 525 001c 1B78     		ldrb	r3, [r3]
 246:.\mpu6050.c   **** }
 526              		.loc 1 246 0
 527 001e 181C     		mov	r0, r3
 528 0020 BD46     		mov	sp, r7
 529              		@ sp needed
 530 0022 80BD     		pop	{r7, pc}
 531              	.L41:
 532              		.align	2
 533              	.L40:
 534 0024 00000000 		.word	devAddr
 535 0028 00000000 		.word	buffer
 536              		.cfi_endproc
 537              	.LFE12:
 538              		.size	MPU6050_getFullScaleGyroRange, .-MPU6050_getFullScaleGyroRange
 539              		.section	.text.MPU6050_setFullScaleGyroRange,"ax",%progbits
 540              		.align	2
 541              		.global	MPU6050_setFullScaleGyroRange
 542              		.code	16
 543              		.thumb_func
 544              		.type	MPU6050_setFullScaleGyroRange, %function
 545              	MPU6050_setFullScaleGyroRange:
 546              	.LFB13:
 247:.\mpu6050.c   **** /** Set full-scale gyroscope range.
 248:.\mpu6050.c   ****  * @param range New full-scale gyroscope range value
 249:.\mpu6050.c   ****  * @see getFullScaleRange()
 250:.\mpu6050.c   ****  * @see MPU6050_GYRO_FS_250
 251:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_CONFIG
 252:.\mpu6050.c   ****  * @see MPU6050_GCONFIG_FS_SEL_BIT
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 15


 253:.\mpu6050.c   ****  * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 254:.\mpu6050.c   ****  */
 255:.\mpu6050.c   **** void MPU6050_setFullScaleGyroRange(uint8_t range) {
 547              		.loc 1 255 0
 548              		.cfi_startproc
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 84B0     		sub	sp, sp, #16
 554              		.cfi_def_cfa_offset 24
 555 0004 02AF     		add	r7, sp, #8
 556              		.cfi_def_cfa 7, 16
 557 0006 021C     		mov	r2, r0
 558 0008 FB1D     		add	r3, r7, #7
 559 000a 1A70     		strb	r2, [r3]
 256:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SE
 560              		.loc 1 256 0
 561 000c 064B     		ldr	r3, .L43
 562 000e 1B78     		ldrb	r3, [r3]
 563 0010 FA1D     		add	r2, r7, #7
 564 0012 1278     		ldrb	r2, [r2]
 565 0014 0092     		str	r2, [sp]
 566 0016 181C     		mov	r0, r3
 567 0018 1B21     		mov	r1, #27
 568 001a 0422     		mov	r2, #4
 569 001c 0223     		mov	r3, #2
 570 001e FFF7FEFF 		bl	I2CWriteBits
 257:.\mpu6050.c   **** }
 571              		.loc 1 257 0
 572 0022 BD46     		mov	sp, r7
 573 0024 02B0     		add	sp, sp, #8
 574              		@ sp needed
 575 0026 80BD     		pop	{r7, pc}
 576              	.L44:
 577              		.align	2
 578              	.L43:
 579 0028 00000000 		.word	devAddr
 580              		.cfi_endproc
 581              	.LFE13:
 582              		.size	MPU6050_setFullScaleGyroRange, .-MPU6050_setFullScaleGyroRange
 583              		.section	.text.MPU6050_getAccelXSelfTest,"ax",%progbits
 584              		.align	2
 585              		.global	MPU6050_getAccelXSelfTest
 586              		.code	16
 587              		.thumb_func
 588              		.type	MPU6050_getAccelXSelfTest, %function
 589              	MPU6050_getAccelXSelfTest:
 590              	.LFB14:
 258:.\mpu6050.c   **** 
 259:.\mpu6050.c   **** // ACCEL_CONFIG register
 260:.\mpu6050.c   **** 
 261:.\mpu6050.c   **** /** Get self-test enabled setting for accelerometer X axis.
 262:.\mpu6050.c   ****  * @return Self-test enabled value
 263:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 264:.\mpu6050.c   ****  */
 265:.\mpu6050.c   **** bool MPU6050_getAccelXSelfTest() {
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 16


 591              		.loc 1 265 0
 592              		.cfi_startproc
 593 0000 80B5     		push	{r7, lr}
 594              		.cfi_def_cfa_offset 8
 595              		.cfi_offset 7, -8
 596              		.cfi_offset 14, -4
 597 0002 00AF     		add	r7, sp, #0
 598              		.cfi_def_cfa_register 7
 266:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_XA_ST_BIT, buffer);
 599              		.loc 1 266 0
 600 0004 074B     		ldr	r3, .L47
 601 0006 1A78     		ldrb	r2, [r3]
 602 0008 074B     		ldr	r3, .L47+4
 603 000a 101C     		mov	r0, r2
 604 000c 1C21     		mov	r1, #28
 605 000e 0722     		mov	r2, #7
 606 0010 FFF7FEFF 		bl	I2CReadBit
 267:.\mpu6050.c   ****     return buffer[0];
 607              		.loc 1 267 0
 608 0014 044B     		ldr	r3, .L47+4
 609 0016 1B78     		ldrb	r3, [r3]
 610 0018 5A1E     		sub	r2, r3, #1
 611 001a 9341     		sbc	r3, r3, r2
 612 001c DBB2     		uxtb	r3, r3
 268:.\mpu6050.c   **** }
 613              		.loc 1 268 0
 614 001e 181C     		mov	r0, r3
 615 0020 BD46     		mov	sp, r7
 616              		@ sp needed
 617 0022 80BD     		pop	{r7, pc}
 618              	.L48:
 619              		.align	2
 620              	.L47:
 621 0024 00000000 		.word	devAddr
 622 0028 00000000 		.word	buffer
 623              		.cfi_endproc
 624              	.LFE14:
 625              		.size	MPU6050_getAccelXSelfTest, .-MPU6050_getAccelXSelfTest
 626              		.section	.text.MPU6050_setAccelXSelfTest,"ax",%progbits
 627              		.align	2
 628              		.global	MPU6050_setAccelXSelfTest
 629              		.code	16
 630              		.thumb_func
 631              		.type	MPU6050_setAccelXSelfTest, %function
 632              	MPU6050_setAccelXSelfTest:
 633              	.LFB15:
 269:.\mpu6050.c   **** /** Set self-test enabled setting for accelerometer X axis.
 270:.\mpu6050.c   ****  * @param enabled Self-test enabled value
 271:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 272:.\mpu6050.c   ****  */
 273:.\mpu6050.c   **** void MPU6050_setAccelXSelfTest(bool enabled) {
 634              		.loc 1 273 0
 635              		.cfi_startproc
 636 0000 80B5     		push	{r7, lr}
 637              		.cfi_def_cfa_offset 8
 638              		.cfi_offset 7, -8
 639              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 17


 640 0002 82B0     		sub	sp, sp, #8
 641              		.cfi_def_cfa_offset 16
 642 0004 00AF     		add	r7, sp, #0
 643              		.cfi_def_cfa_register 7
 644 0006 021C     		mov	r2, r0
 645 0008 FB1D     		add	r3, r7, #7
 646 000a 1A70     		strb	r2, [r3]
 274:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_XA_ST_BIT, enabled);
 647              		.loc 1 274 0
 648 000c 054B     		ldr	r3, .L50
 649 000e 1A78     		ldrb	r2, [r3]
 650 0010 FB1D     		add	r3, r7, #7
 651 0012 1B78     		ldrb	r3, [r3]
 652 0014 101C     		mov	r0, r2
 653 0016 1C21     		mov	r1, #28
 654 0018 0722     		mov	r2, #7
 655 001a FFF7FEFF 		bl	I2CWriteBit
 275:.\mpu6050.c   **** }
 656              		.loc 1 275 0
 657 001e BD46     		mov	sp, r7
 658 0020 02B0     		add	sp, sp, #8
 659              		@ sp needed
 660 0022 80BD     		pop	{r7, pc}
 661              	.L51:
 662              		.align	2
 663              	.L50:
 664 0024 00000000 		.word	devAddr
 665              		.cfi_endproc
 666              	.LFE15:
 667              		.size	MPU6050_setAccelXSelfTest, .-MPU6050_setAccelXSelfTest
 668              		.section	.text.MPU6050_getAccelYSelfTest,"ax",%progbits
 669              		.align	2
 670              		.global	MPU6050_getAccelYSelfTest
 671              		.code	16
 672              		.thumb_func
 673              		.type	MPU6050_getAccelYSelfTest, %function
 674              	MPU6050_getAccelYSelfTest:
 675              	.LFB16:
 276:.\mpu6050.c   **** /** Get self-test enabled value for accelerometer Y axis.
 277:.\mpu6050.c   ****  * @return Self-test enabled value
 278:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 279:.\mpu6050.c   ****  */
 280:.\mpu6050.c   **** bool MPU6050_getAccelYSelfTest() {
 676              		.loc 1 280 0
 677              		.cfi_startproc
 678 0000 80B5     		push	{r7, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 00AF     		add	r7, sp, #0
 683              		.cfi_def_cfa_register 7
 281:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_YA_ST_BIT, buffer);
 684              		.loc 1 281 0
 685 0004 074B     		ldr	r3, .L54
 686 0006 1A78     		ldrb	r2, [r3]
 687 0008 074B     		ldr	r3, .L54+4
 688 000a 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 18


 689 000c 1C21     		mov	r1, #28
 690 000e 0622     		mov	r2, #6
 691 0010 FFF7FEFF 		bl	I2CReadBit
 282:.\mpu6050.c   ****     return buffer[0];
 692              		.loc 1 282 0
 693 0014 044B     		ldr	r3, .L54+4
 694 0016 1B78     		ldrb	r3, [r3]
 695 0018 5A1E     		sub	r2, r3, #1
 696 001a 9341     		sbc	r3, r3, r2
 697 001c DBB2     		uxtb	r3, r3
 283:.\mpu6050.c   **** }
 698              		.loc 1 283 0
 699 001e 181C     		mov	r0, r3
 700 0020 BD46     		mov	sp, r7
 701              		@ sp needed
 702 0022 80BD     		pop	{r7, pc}
 703              	.L55:
 704              		.align	2
 705              	.L54:
 706 0024 00000000 		.word	devAddr
 707 0028 00000000 		.word	buffer
 708              		.cfi_endproc
 709              	.LFE16:
 710              		.size	MPU6050_getAccelYSelfTest, .-MPU6050_getAccelYSelfTest
 711              		.section	.text.MPU6050_setAccelYSelfTest,"ax",%progbits
 712              		.align	2
 713              		.global	MPU6050_setAccelYSelfTest
 714              		.code	16
 715              		.thumb_func
 716              		.type	MPU6050_setAccelYSelfTest, %function
 717              	MPU6050_setAccelYSelfTest:
 718              	.LFB17:
 284:.\mpu6050.c   **** /** Set self-test enabled value for accelerometer Y axis.
 285:.\mpu6050.c   ****  * @param enabled Self-test enabled value
 286:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 287:.\mpu6050.c   ****  */
 288:.\mpu6050.c   **** void MPU6050_setAccelYSelfTest(bool enabled) {
 719              		.loc 1 288 0
 720              		.cfi_startproc
 721 0000 80B5     		push	{r7, lr}
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 7, -8
 724              		.cfi_offset 14, -4
 725 0002 82B0     		sub	sp, sp, #8
 726              		.cfi_def_cfa_offset 16
 727 0004 00AF     		add	r7, sp, #0
 728              		.cfi_def_cfa_register 7
 729 0006 021C     		mov	r2, r0
 730 0008 FB1D     		add	r3, r7, #7
 731 000a 1A70     		strb	r2, [r3]
 289:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_YA_ST_BIT, enabled);
 732              		.loc 1 289 0
 733 000c 054B     		ldr	r3, .L57
 734 000e 1A78     		ldrb	r2, [r3]
 735 0010 FB1D     		add	r3, r7, #7
 736 0012 1B78     		ldrb	r3, [r3]
 737 0014 101C     		mov	r0, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 19


 738 0016 1C21     		mov	r1, #28
 739 0018 0622     		mov	r2, #6
 740 001a FFF7FEFF 		bl	I2CWriteBit
 290:.\mpu6050.c   **** }
 741              		.loc 1 290 0
 742 001e BD46     		mov	sp, r7
 743 0020 02B0     		add	sp, sp, #8
 744              		@ sp needed
 745 0022 80BD     		pop	{r7, pc}
 746              	.L58:
 747              		.align	2
 748              	.L57:
 749 0024 00000000 		.word	devAddr
 750              		.cfi_endproc
 751              	.LFE17:
 752              		.size	MPU6050_setAccelYSelfTest, .-MPU6050_setAccelYSelfTest
 753              		.section	.text.MPU6050_getAccelZSelfTest,"ax",%progbits
 754              		.align	2
 755              		.global	MPU6050_getAccelZSelfTest
 756              		.code	16
 757              		.thumb_func
 758              		.type	MPU6050_getAccelZSelfTest, %function
 759              	MPU6050_getAccelZSelfTest:
 760              	.LFB18:
 291:.\mpu6050.c   **** /** Get self-test enabled value for accelerometer Z axis.
 292:.\mpu6050.c   ****  * @return Self-test enabled value
 293:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 294:.\mpu6050.c   ****  */
 295:.\mpu6050.c   **** bool MPU6050_getAccelZSelfTest() {
 761              		.loc 1 295 0
 762              		.cfi_startproc
 763 0000 80B5     		push	{r7, lr}
 764              		.cfi_def_cfa_offset 8
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 00AF     		add	r7, sp, #0
 768              		.cfi_def_cfa_register 7
 296:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ZA_ST_BIT, buffer);
 769              		.loc 1 296 0
 770 0004 074B     		ldr	r3, .L61
 771 0006 1A78     		ldrb	r2, [r3]
 772 0008 074B     		ldr	r3, .L61+4
 773 000a 101C     		mov	r0, r2
 774 000c 1C21     		mov	r1, #28
 775 000e 0522     		mov	r2, #5
 776 0010 FFF7FEFF 		bl	I2CReadBit
 297:.\mpu6050.c   ****     return buffer[0];
 777              		.loc 1 297 0
 778 0014 044B     		ldr	r3, .L61+4
 779 0016 1B78     		ldrb	r3, [r3]
 780 0018 5A1E     		sub	r2, r3, #1
 781 001a 9341     		sbc	r3, r3, r2
 782 001c DBB2     		uxtb	r3, r3
 298:.\mpu6050.c   **** }
 783              		.loc 1 298 0
 784 001e 181C     		mov	r0, r3
 785 0020 BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 20


 786              		@ sp needed
 787 0022 80BD     		pop	{r7, pc}
 788              	.L62:
 789              		.align	2
 790              	.L61:
 791 0024 00000000 		.word	devAddr
 792 0028 00000000 		.word	buffer
 793              		.cfi_endproc
 794              	.LFE18:
 795              		.size	MPU6050_getAccelZSelfTest, .-MPU6050_getAccelZSelfTest
 796              		.section	.text.MPU6050_setAccelZSelfTest,"ax",%progbits
 797              		.align	2
 798              		.global	MPU6050_setAccelZSelfTest
 799              		.code	16
 800              		.thumb_func
 801              		.type	MPU6050_setAccelZSelfTest, %function
 802              	MPU6050_setAccelZSelfTest:
 803              	.LFB19:
 299:.\mpu6050.c   **** /** Set self-test enabled value for accelerometer Z axis.
 300:.\mpu6050.c   ****  * @param enabled Self-test enabled value
 301:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 302:.\mpu6050.c   ****  */
 303:.\mpu6050.c   **** void MPU6050_setAccelZSelfTest(bool enabled) {
 804              		.loc 1 303 0
 805              		.cfi_startproc
 806 0000 80B5     		push	{r7, lr}
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 7, -8
 809              		.cfi_offset 14, -4
 810 0002 82B0     		sub	sp, sp, #8
 811              		.cfi_def_cfa_offset 16
 812 0004 00AF     		add	r7, sp, #0
 813              		.cfi_def_cfa_register 7
 814 0006 021C     		mov	r2, r0
 815 0008 FB1D     		add	r3, r7, #7
 816 000a 1A70     		strb	r2, [r3]
 304:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ZA_ST_BIT, enabled);
 817              		.loc 1 304 0
 818 000c 054B     		ldr	r3, .L64
 819 000e 1A78     		ldrb	r2, [r3]
 820 0010 FB1D     		add	r3, r7, #7
 821 0012 1B78     		ldrb	r3, [r3]
 822 0014 101C     		mov	r0, r2
 823 0016 1C21     		mov	r1, #28
 824 0018 0522     		mov	r2, #5
 825 001a FFF7FEFF 		bl	I2CWriteBit
 305:.\mpu6050.c   **** }
 826              		.loc 1 305 0
 827 001e BD46     		mov	sp, r7
 828 0020 02B0     		add	sp, sp, #8
 829              		@ sp needed
 830 0022 80BD     		pop	{r7, pc}
 831              	.L65:
 832              		.align	2
 833              	.L64:
 834 0024 00000000 		.word	devAddr
 835              		.cfi_endproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 21


 836              	.LFE19:
 837              		.size	MPU6050_setAccelZSelfTest, .-MPU6050_setAccelZSelfTest
 838              		.section	.text.MPU6050_getFullScaleAccelRange,"ax",%progbits
 839              		.align	2
 840              		.global	MPU6050_getFullScaleAccelRange
 841              		.code	16
 842              		.thumb_func
 843              		.type	MPU6050_getFullScaleAccelRange, %function
 844              	MPU6050_getFullScaleAccelRange:
 845              	.LFB20:
 306:.\mpu6050.c   **** /** Get full-scale accelerometer range.
 307:.\mpu6050.c   ****  * The FS_SEL parameter allows setting the full-scale range of the accelerometer
 308:.\mpu6050.c   ****  * sensors, as described in the table below.
 309:.\mpu6050.c   ****  *
 310:.\mpu6050.c   ****  * <pre>
 311:.\mpu6050.c   ****  * 0 = +/- 2g
 312:.\mpu6050.c   ****  * 1 = +/- 4g
 313:.\mpu6050.c   ****  * 2 = +/- 8g
 314:.\mpu6050.c   ****  * 3 = +/- 16g
 315:.\mpu6050.c   ****  * </pre>
 316:.\mpu6050.c   ****  *
 317:.\mpu6050.c   ****  * @return Current full-scale accelerometer range setting
 318:.\mpu6050.c   ****  * @see MPU6050_ACCEL_FS_2
 319:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 320:.\mpu6050.c   ****  * @see MPU6050_ACONFIG_AFS_SEL_BIT
 321:.\mpu6050.c   ****  * @see MPU6050_ACONFIG_AFS_SEL_LENGTH
 322:.\mpu6050.c   ****  */
 323:.\mpu6050.c   **** uint8_t MPU6050_getFullScaleAccelRange() {
 846              		.loc 1 323 0
 847              		.cfi_startproc
 848 0000 80B5     		push	{r7, lr}
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 0002 82B0     		sub	sp, sp, #8
 853              		.cfi_def_cfa_offset 16
 854 0004 02AF     		add	r7, sp, #8
 855              		.cfi_def_cfa 7, 8
 324:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_
 856              		.loc 1 324 0
 857 0006 074B     		ldr	r3, .L68
 858 0008 1B78     		ldrb	r3, [r3]
 859 000a 074A     		ldr	r2, .L68+4
 860 000c 0092     		str	r2, [sp]
 861 000e 181C     		mov	r0, r3
 862 0010 1C21     		mov	r1, #28
 863 0012 0422     		mov	r2, #4
 864 0014 0223     		mov	r3, #2
 865 0016 FFF7FEFF 		bl	I2CReadBits
 325:.\mpu6050.c   ****     return buffer[0];
 866              		.loc 1 325 0
 867 001a 034B     		ldr	r3, .L68+4
 868 001c 1B78     		ldrb	r3, [r3]
 326:.\mpu6050.c   **** }
 869              		.loc 1 326 0
 870 001e 181C     		mov	r0, r3
 871 0020 BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 22


 872              		@ sp needed
 873 0022 80BD     		pop	{r7, pc}
 874              	.L69:
 875              		.align	2
 876              	.L68:
 877 0024 00000000 		.word	devAddr
 878 0028 00000000 		.word	buffer
 879              		.cfi_endproc
 880              	.LFE20:
 881              		.size	MPU6050_getFullScaleAccelRange, .-MPU6050_getFullScaleAccelRange
 882              		.section	.text.MPU6050_setFullScaleAccelRange,"ax",%progbits
 883              		.align	2
 884              		.global	MPU6050_setFullScaleAccelRange
 885              		.code	16
 886              		.thumb_func
 887              		.type	MPU6050_setFullScaleAccelRange, %function
 888              	MPU6050_setFullScaleAccelRange:
 889              	.LFB21:
 327:.\mpu6050.c   **** /** Set full-scale accelerometer range.
 328:.\mpu6050.c   ****  * @param range New full-scale accelerometer range setting
 329:.\mpu6050.c   ****  * @see getFullScaleAccelRange()
 330:.\mpu6050.c   ****  */
 331:.\mpu6050.c   **** void MPU6050_setFullScaleAccelRange(uint8_t range) {
 890              		.loc 1 331 0
 891              		.cfi_startproc
 892 0000 80B5     		push	{r7, lr}
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 7, -8
 895              		.cfi_offset 14, -4
 896 0002 84B0     		sub	sp, sp, #16
 897              		.cfi_def_cfa_offset 24
 898 0004 02AF     		add	r7, sp, #8
 899              		.cfi_def_cfa 7, 16
 900 0006 021C     		mov	r2, r0
 901 0008 FB1D     		add	r3, r7, #7
 902 000a 1A70     		strb	r2, [r3]
 332:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS
 903              		.loc 1 332 0
 904 000c 064B     		ldr	r3, .L71
 905 000e 1B78     		ldrb	r3, [r3]
 906 0010 FA1D     		add	r2, r7, #7
 907 0012 1278     		ldrb	r2, [r2]
 908 0014 0092     		str	r2, [sp]
 909 0016 181C     		mov	r0, r3
 910 0018 1C21     		mov	r1, #28
 911 001a 0422     		mov	r2, #4
 912 001c 0223     		mov	r3, #2
 913 001e FFF7FEFF 		bl	I2CWriteBits
 333:.\mpu6050.c   **** }
 914              		.loc 1 333 0
 915 0022 BD46     		mov	sp, r7
 916 0024 02B0     		add	sp, sp, #8
 917              		@ sp needed
 918 0026 80BD     		pop	{r7, pc}
 919              	.L72:
 920              		.align	2
 921              	.L71:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 23


 922 0028 00000000 		.word	devAddr
 923              		.cfi_endproc
 924              	.LFE21:
 925              		.size	MPU6050_setFullScaleAccelRange, .-MPU6050_setFullScaleAccelRange
 926              		.section	.text.MPU6050_getDHPFMode,"ax",%progbits
 927              		.align	2
 928              		.global	MPU6050_getDHPFMode
 929              		.code	16
 930              		.thumb_func
 931              		.type	MPU6050_getDHPFMode, %function
 932              	MPU6050_getDHPFMode:
 933              	.LFB22:
 334:.\mpu6050.c   **** /** Get the high-pass filter configuration.
 335:.\mpu6050.c   ****  * The DHPF is a filter module in the path leading to motion detectors (Free
 336:.\mpu6050.c   ****  * Fall, Motion threshold, and Zero Motion). The high pass filter output is not
 337:.\mpu6050.c   ****  * available to the data registers (see Figure in Section 8 of the MPU-6000/
 338:.\mpu6050.c   ****  * MPU-6050 Product Specification document).
 339:.\mpu6050.c   ****  *
 340:.\mpu6050.c   ****  * The high pass filter has three modes:
 341:.\mpu6050.c   ****  *
 342:.\mpu6050.c   ****  * <pre>
 343:.\mpu6050.c   ****  *    Reset: The filter output settles to zero within one sample. This
 344:.\mpu6050.c   ****  *           effectively disables the high pass filter. This mode may be toggled
 345:.\mpu6050.c   ****  *           to quickly settle the filter.
 346:.\mpu6050.c   ****  *
 347:.\mpu6050.c   ****  *    On:    The high pass filter will pass signals above the cut off frequency.
 348:.\mpu6050.c   ****  *
 349:.\mpu6050.c   ****  *    Hold:  When triggered, the filter holds the present sample. The filter
 350:.\mpu6050.c   ****  *           output will be the difference between the input sample and the held
 351:.\mpu6050.c   ****  *           sample.
 352:.\mpu6050.c   ****  * </pre>
 353:.\mpu6050.c   ****  *
 354:.\mpu6050.c   ****  * <pre>
 355:.\mpu6050.c   ****  * ACCEL_HPF | Filter Mode | Cut-off Frequency
 356:.\mpu6050.c   ****  * ----------+-------------+------------------
 357:.\mpu6050.c   ****  * 0         | Reset       | None
 358:.\mpu6050.c   ****  * 1         | On          | 5Hz
 359:.\mpu6050.c   ****  * 2         | On          | 2.5Hz
 360:.\mpu6050.c   ****  * 3         | On          | 1.25Hz
 361:.\mpu6050.c   ****  * 4         | On          | 0.63Hz
 362:.\mpu6050.c   ****  * 7         | Hold        | None
 363:.\mpu6050.c   ****  * </pre>
 364:.\mpu6050.c   ****  *
 365:.\mpu6050.c   ****  * @return Current high-pass filter configuration
 366:.\mpu6050.c   ****  * @see MPU6050_DHPF_RESET
 367:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 368:.\mpu6050.c   ****  */
 369:.\mpu6050.c   **** uint8_t MPU6050_getDHPFMode() {
 934              		.loc 1 369 0
 935              		.cfi_startproc
 936 0000 80B5     		push	{r7, lr}
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 7, -8
 939              		.cfi_offset 14, -4
 940 0002 82B0     		sub	sp, sp, #8
 941              		.cfi_def_cfa_offset 16
 942 0004 02AF     		add	r7, sp, #8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 24


 943              		.cfi_def_cfa 7, 8
 370:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_AC
 944              		.loc 1 370 0
 945 0006 074B     		ldr	r3, .L75
 946 0008 1B78     		ldrb	r3, [r3]
 947 000a 074A     		ldr	r2, .L75+4
 948 000c 0092     		str	r2, [sp]
 949 000e 181C     		mov	r0, r3
 950 0010 1C21     		mov	r1, #28
 951 0012 0222     		mov	r2, #2
 952 0014 0323     		mov	r3, #3
 953 0016 FFF7FEFF 		bl	I2CReadBits
 371:.\mpu6050.c   ****     return buffer[0];
 954              		.loc 1 371 0
 955 001a 034B     		ldr	r3, .L75+4
 956 001c 1B78     		ldrb	r3, [r3]
 372:.\mpu6050.c   **** }
 957              		.loc 1 372 0
 958 001e 181C     		mov	r0, r3
 959 0020 BD46     		mov	sp, r7
 960              		@ sp needed
 961 0022 80BD     		pop	{r7, pc}
 962              	.L76:
 963              		.align	2
 964              	.L75:
 965 0024 00000000 		.word	devAddr
 966 0028 00000000 		.word	buffer
 967              		.cfi_endproc
 968              	.LFE22:
 969              		.size	MPU6050_getDHPFMode, .-MPU6050_getDHPFMode
 970              		.section	.text.MPU6050_setDHPFMode,"ax",%progbits
 971              		.align	2
 972              		.global	MPU6050_setDHPFMode
 973              		.code	16
 974              		.thumb_func
 975              		.type	MPU6050_setDHPFMode, %function
 976              	MPU6050_setDHPFMode:
 977              	.LFB23:
 373:.\mpu6050.c   **** /** Set the high-pass filter configuration.
 374:.\mpu6050.c   ****  * @param bandwidth New high-pass filter configuration
 375:.\mpu6050.c   ****  * @see setDHPFMode()
 376:.\mpu6050.c   ****  * @see MPU6050_DHPF_RESET
 377:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_CONFIG
 378:.\mpu6050.c   ****  */
 379:.\mpu6050.c   **** void MPU6050_setDHPFMode(uint8_t bandwidth) {
 978              		.loc 1 379 0
 979              		.cfi_startproc
 980 0000 80B5     		push	{r7, lr}
 981              		.cfi_def_cfa_offset 8
 982              		.cfi_offset 7, -8
 983              		.cfi_offset 14, -4
 984 0002 84B0     		sub	sp, sp, #16
 985              		.cfi_def_cfa_offset 24
 986 0004 02AF     		add	r7, sp, #8
 987              		.cfi_def_cfa 7, 16
 988 0006 021C     		mov	r2, r0
 989 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 25


 990 000a 1A70     		strb	r2, [r3]
 380:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_A
 991              		.loc 1 380 0
 992 000c 064B     		ldr	r3, .L78
 993 000e 1B78     		ldrb	r3, [r3]
 994 0010 FA1D     		add	r2, r7, #7
 995 0012 1278     		ldrb	r2, [r2]
 996 0014 0092     		str	r2, [sp]
 997 0016 181C     		mov	r0, r3
 998 0018 1C21     		mov	r1, #28
 999 001a 0222     		mov	r2, #2
 1000 001c 0323     		mov	r3, #3
 1001 001e FFF7FEFF 		bl	I2CWriteBits
 381:.\mpu6050.c   **** }
 1002              		.loc 1 381 0
 1003 0022 BD46     		mov	sp, r7
 1004 0024 02B0     		add	sp, sp, #8
 1005              		@ sp needed
 1006 0026 80BD     		pop	{r7, pc}
 1007              	.L79:
 1008              		.align	2
 1009              	.L78:
 1010 0028 00000000 		.word	devAddr
 1011              		.cfi_endproc
 1012              	.LFE23:
 1013              		.size	MPU6050_setDHPFMode, .-MPU6050_setDHPFMode
 1014              		.section	.text.MPU6050_getFreefallDetectionThreshold,"ax",%progbits
 1015              		.align	2
 1016              		.global	MPU6050_getFreefallDetectionThreshold
 1017              		.code	16
 1018              		.thumb_func
 1019              		.type	MPU6050_getFreefallDetectionThreshold, %function
 1020              	MPU6050_getFreefallDetectionThreshold:
 1021              	.LFB24:
 382:.\mpu6050.c   **** 
 383:.\mpu6050.c   **** // FF_THR register
 384:.\mpu6050.c   **** 
 385:.\mpu6050.c   **** /** Get free-fall event acceleration threshold.
 386:.\mpu6050.c   ****  * This register configures the detection threshold for Free Fall event
 387:.\mpu6050.c   ****  * detection. The unit of FF_THR is 1LSB = 2mg. Free Fall is detected when the
 388:.\mpu6050.c   ****  * absolute value of the accelerometer measurements for the three axes are each
 389:.\mpu6050.c   ****  * less than the detection threshold. This condition increments the Free Fall
 390:.\mpu6050.c   ****  * duration counter (Register 30). The Free Fall interrupt is triggered when the
 391:.\mpu6050.c   ****  * Free Fall duration counter reaches the time specified in FF_DUR.
 392:.\mpu6050.c   ****  *
 393:.\mpu6050.c   ****  * For more details on the Free Fall detection interrupt, see Section 8.2 of the
 394:.\mpu6050.c   ****  * MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and
 395:.\mpu6050.c   ****  * 58 of this document.
 396:.\mpu6050.c   ****  *
 397:.\mpu6050.c   ****  * @return Current free-fall acceleration threshold value (LSB = 2mg)
 398:.\mpu6050.c   ****  * @see MPU6050_RA_FF_THR
 399:.\mpu6050.c   ****  */
 400:.\mpu6050.c   **** uint8_t MPU6050_getFreefallDetectionThreshold() {
 1022              		.loc 1 400 0
 1023              		.cfi_startproc
 1024 0000 80B5     		push	{r7, lr}
 1025              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 26


 1026              		.cfi_offset 7, -8
 1027              		.cfi_offset 14, -4
 1028 0002 00AF     		add	r7, sp, #0
 1029              		.cfi_def_cfa_register 7
 401:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_FF_THR, buffer);
 1030              		.loc 1 401 0
 1031 0004 064B     		ldr	r3, .L82
 1032 0006 1A78     		ldrb	r2, [r3]
 1033 0008 064B     		ldr	r3, .L82+4
 1034 000a 101C     		mov	r0, r2
 1035 000c 1D21     		mov	r1, #29
 1036 000e 1A1C     		mov	r2, r3
 1037 0010 FFF7FEFF 		bl	I2CReadByte
 402:.\mpu6050.c   ****     return buffer[0];
 1038              		.loc 1 402 0
 1039 0014 034B     		ldr	r3, .L82+4
 1040 0016 1B78     		ldrb	r3, [r3]
 403:.\mpu6050.c   **** }
 1041              		.loc 1 403 0
 1042 0018 181C     		mov	r0, r3
 1043 001a BD46     		mov	sp, r7
 1044              		@ sp needed
 1045 001c 80BD     		pop	{r7, pc}
 1046              	.L83:
 1047 001e C046     		.align	2
 1048              	.L82:
 1049 0020 00000000 		.word	devAddr
 1050 0024 00000000 		.word	buffer
 1051              		.cfi_endproc
 1052              	.LFE24:
 1053              		.size	MPU6050_getFreefallDetectionThreshold, .-MPU6050_getFreefallDetectionThreshold
 1054              		.section	.text.MPU6050_setFreefallDetectionThreshold,"ax",%progbits
 1055              		.align	2
 1056              		.global	MPU6050_setFreefallDetectionThreshold
 1057              		.code	16
 1058              		.thumb_func
 1059              		.type	MPU6050_setFreefallDetectionThreshold, %function
 1060              	MPU6050_setFreefallDetectionThreshold:
 1061              	.LFB25:
 404:.\mpu6050.c   **** /** Get free-fall event acceleration threshold.
 405:.\mpu6050.c   ****  * @param threshold New free-fall acceleration threshold value (LSB = 2mg)
 406:.\mpu6050.c   ****  * @see getFreefallDetectionThreshold()
 407:.\mpu6050.c   ****  * @see MPU6050_RA_FF_THR
 408:.\mpu6050.c   ****  */
 409:.\mpu6050.c   **** void MPU6050_setFreefallDetectionThreshold(uint8_t threshold) {
 1062              		.loc 1 409 0
 1063              		.cfi_startproc
 1064 0000 80B5     		push	{r7, lr}
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 7, -8
 1067              		.cfi_offset 14, -4
 1068 0002 82B0     		sub	sp, sp, #8
 1069              		.cfi_def_cfa_offset 16
 1070 0004 00AF     		add	r7, sp, #0
 1071              		.cfi_def_cfa_register 7
 1072 0006 021C     		mov	r2, r0
 1073 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 27


 1074 000a 1A70     		strb	r2, [r3]
 410:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_FF_THR, threshold);
 1075              		.loc 1 410 0
 1076 000c 054B     		ldr	r3, .L85
 1077 000e 1A78     		ldrb	r2, [r3]
 1078 0010 FB1D     		add	r3, r7, #7
 1079 0012 1B78     		ldrb	r3, [r3]
 1080 0014 101C     		mov	r0, r2
 1081 0016 1D21     		mov	r1, #29
 1082 0018 1A1C     		mov	r2, r3
 1083 001a FFF7FEFF 		bl	I2CWriteByte
 411:.\mpu6050.c   **** }
 1084              		.loc 1 411 0
 1085 001e BD46     		mov	sp, r7
 1086 0020 02B0     		add	sp, sp, #8
 1087              		@ sp needed
 1088 0022 80BD     		pop	{r7, pc}
 1089              	.L86:
 1090              		.align	2
 1091              	.L85:
 1092 0024 00000000 		.word	devAddr
 1093              		.cfi_endproc
 1094              	.LFE25:
 1095              		.size	MPU6050_setFreefallDetectionThreshold, .-MPU6050_setFreefallDetectionThreshold
 1096              		.section	.text.MPU6050_getFreefallDetectionDuration,"ax",%progbits
 1097              		.align	2
 1098              		.global	MPU6050_getFreefallDetectionDuration
 1099              		.code	16
 1100              		.thumb_func
 1101              		.type	MPU6050_getFreefallDetectionDuration, %function
 1102              	MPU6050_getFreefallDetectionDuration:
 1103              	.LFB26:
 412:.\mpu6050.c   **** 
 413:.\mpu6050.c   **** // FF_DUR register
 414:.\mpu6050.c   **** 
 415:.\mpu6050.c   **** /** Get free-fall event duration threshold.
 416:.\mpu6050.c   ****  * This register configures the duration counter threshold for Free Fall event
 417:.\mpu6050.c   ****  * detection. The duration counter ticks at 1kHz, therefore FF_DUR has a unit
 418:.\mpu6050.c   ****  * of 1 LSB = 1 ms.
 419:.\mpu6050.c   ****  *
 420:.\mpu6050.c   ****  * The Free Fall duration counter increments while the absolute value of the
 421:.\mpu6050.c   ****  * accelerometer measurements are each less than the detection threshold
 422:.\mpu6050.c   ****  * (Register 29). The Free Fall interrupt is triggered when the Free Fall
 423:.\mpu6050.c   ****  * duration counter reaches the time specified in this register.
 424:.\mpu6050.c   ****  *
 425:.\mpu6050.c   ****  * For more details on the Free Fall detection interrupt, see Section 8.2 of
 426:.\mpu6050.c   ****  * the MPU-6000/MPU-6050 Product Specification document as well as Registers 56
 427:.\mpu6050.c   ****  * and 58 of this document.
 428:.\mpu6050.c   ****  *
 429:.\mpu6050.c   ****  * @return Current free-fall duration threshold value (LSB = 1ms)
 430:.\mpu6050.c   ****  * @see MPU6050_RA_FF_DUR
 431:.\mpu6050.c   ****  */
 432:.\mpu6050.c   **** uint8_t MPU6050_getFreefallDetectionDuration() {
 1104              		.loc 1 432 0
 1105              		.cfi_startproc
 1106 0000 80B5     		push	{r7, lr}
 1107              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 28


 1108              		.cfi_offset 7, -8
 1109              		.cfi_offset 14, -4
 1110 0002 00AF     		add	r7, sp, #0
 1111              		.cfi_def_cfa_register 7
 433:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_FF_DUR, buffer);
 1112              		.loc 1 433 0
 1113 0004 064B     		ldr	r3, .L89
 1114 0006 1A78     		ldrb	r2, [r3]
 1115 0008 064B     		ldr	r3, .L89+4
 1116 000a 101C     		mov	r0, r2
 1117 000c 1E21     		mov	r1, #30
 1118 000e 1A1C     		mov	r2, r3
 1119 0010 FFF7FEFF 		bl	I2CReadByte
 434:.\mpu6050.c   ****     return buffer[0];
 1120              		.loc 1 434 0
 1121 0014 034B     		ldr	r3, .L89+4
 1122 0016 1B78     		ldrb	r3, [r3]
 435:.\mpu6050.c   **** }
 1123              		.loc 1 435 0
 1124 0018 181C     		mov	r0, r3
 1125 001a BD46     		mov	sp, r7
 1126              		@ sp needed
 1127 001c 80BD     		pop	{r7, pc}
 1128              	.L90:
 1129 001e C046     		.align	2
 1130              	.L89:
 1131 0020 00000000 		.word	devAddr
 1132 0024 00000000 		.word	buffer
 1133              		.cfi_endproc
 1134              	.LFE26:
 1135              		.size	MPU6050_getFreefallDetectionDuration, .-MPU6050_getFreefallDetectionDuration
 1136              		.section	.text.MPU6050_setFreefallDetectionDuration,"ax",%progbits
 1137              		.align	2
 1138              		.global	MPU6050_setFreefallDetectionDuration
 1139              		.code	16
 1140              		.thumb_func
 1141              		.type	MPU6050_setFreefallDetectionDuration, %function
 1142              	MPU6050_setFreefallDetectionDuration:
 1143              	.LFB27:
 436:.\mpu6050.c   **** /** Get free-fall event duration threshold.
 437:.\mpu6050.c   ****  * @param duration New free-fall duration threshold value (LSB = 1ms)
 438:.\mpu6050.c   ****  * @see getFreefallDetectionDuration()
 439:.\mpu6050.c   ****  * @see MPU6050_RA_FF_DUR
 440:.\mpu6050.c   ****  */
 441:.\mpu6050.c   **** void MPU6050_setFreefallDetectionDuration(uint8_t duration) {
 1144              		.loc 1 441 0
 1145              		.cfi_startproc
 1146 0000 80B5     		push	{r7, lr}
 1147              		.cfi_def_cfa_offset 8
 1148              		.cfi_offset 7, -8
 1149              		.cfi_offset 14, -4
 1150 0002 82B0     		sub	sp, sp, #8
 1151              		.cfi_def_cfa_offset 16
 1152 0004 00AF     		add	r7, sp, #0
 1153              		.cfi_def_cfa_register 7
 1154 0006 021C     		mov	r2, r0
 1155 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 29


 1156 000a 1A70     		strb	r2, [r3]
 442:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_FF_DUR, duration);
 1157              		.loc 1 442 0
 1158 000c 054B     		ldr	r3, .L92
 1159 000e 1A78     		ldrb	r2, [r3]
 1160 0010 FB1D     		add	r3, r7, #7
 1161 0012 1B78     		ldrb	r3, [r3]
 1162 0014 101C     		mov	r0, r2
 1163 0016 1E21     		mov	r1, #30
 1164 0018 1A1C     		mov	r2, r3
 1165 001a FFF7FEFF 		bl	I2CWriteByte
 443:.\mpu6050.c   **** }
 1166              		.loc 1 443 0
 1167 001e BD46     		mov	sp, r7
 1168 0020 02B0     		add	sp, sp, #8
 1169              		@ sp needed
 1170 0022 80BD     		pop	{r7, pc}
 1171              	.L93:
 1172              		.align	2
 1173              	.L92:
 1174 0024 00000000 		.word	devAddr
 1175              		.cfi_endproc
 1176              	.LFE27:
 1177              		.size	MPU6050_setFreefallDetectionDuration, .-MPU6050_setFreefallDetectionDuration
 1178              		.section	.text.MPU6050_getMotionDetectionThreshold,"ax",%progbits
 1179              		.align	2
 1180              		.global	MPU6050_getMotionDetectionThreshold
 1181              		.code	16
 1182              		.thumb_func
 1183              		.type	MPU6050_getMotionDetectionThreshold, %function
 1184              	MPU6050_getMotionDetectionThreshold:
 1185              	.LFB28:
 444:.\mpu6050.c   **** 
 445:.\mpu6050.c   **** // MOT_THR register
 446:.\mpu6050.c   **** 
 447:.\mpu6050.c   **** /** Get motion detection event acceleration threshold.
 448:.\mpu6050.c   ****  * This register configures the detection threshold for Motion interrupt
 449:.\mpu6050.c   ****  * generation. The unit of MOT_THR is 1LSB = 2mg. Motion is detected when the
 450:.\mpu6050.c   ****  * absolute value of any of the accelerometer measurements exceeds this Motion
 451:.\mpu6050.c   ****  * detection threshold. This condition increments the Motion detection duration
 452:.\mpu6050.c   ****  * counter (Register 32). The Motion detection interrupt is triggered when the
 453:.\mpu6050.c   ****  * Motion Detection counter reaches the time count specified in MOT_DUR
 454:.\mpu6050.c   ****  * (Register 32).
 455:.\mpu6050.c   ****  *
 456:.\mpu6050.c   ****  * The Motion interrupt will indicate the axis and polarity of detected motion
 457:.\mpu6050.c   ****  * in MOT_DETECT_STATUS (Register 97).
 458:.\mpu6050.c   ****  *
 459:.\mpu6050.c   ****  * For more details on the Motion detection interrupt, see Section 8.3 of the
 460:.\mpu6050.c   ****  * MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and
 461:.\mpu6050.c   ****  * 58 of this document.
 462:.\mpu6050.c   ****  *
 463:.\mpu6050.c   ****  * @return Current motion detection acceleration threshold value (LSB = 2mg)
 464:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_THR
 465:.\mpu6050.c   ****  */
 466:.\mpu6050.c   **** uint8_t MPU6050_getMotionDetectionThreshold() {
 1186              		.loc 1 466 0
 1187              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 30


 1188 0000 80B5     		push	{r7, lr}
 1189              		.cfi_def_cfa_offset 8
 1190              		.cfi_offset 7, -8
 1191              		.cfi_offset 14, -4
 1192 0002 00AF     		add	r7, sp, #0
 1193              		.cfi_def_cfa_register 7
 467:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_MOT_THR, buffer);
 1194              		.loc 1 467 0
 1195 0004 064B     		ldr	r3, .L96
 1196 0006 1A78     		ldrb	r2, [r3]
 1197 0008 064B     		ldr	r3, .L96+4
 1198 000a 101C     		mov	r0, r2
 1199 000c 1F21     		mov	r1, #31
 1200 000e 1A1C     		mov	r2, r3
 1201 0010 FFF7FEFF 		bl	I2CReadByte
 468:.\mpu6050.c   ****     return buffer[0];
 1202              		.loc 1 468 0
 1203 0014 034B     		ldr	r3, .L96+4
 1204 0016 1B78     		ldrb	r3, [r3]
 469:.\mpu6050.c   **** }
 1205              		.loc 1 469 0
 1206 0018 181C     		mov	r0, r3
 1207 001a BD46     		mov	sp, r7
 1208              		@ sp needed
 1209 001c 80BD     		pop	{r7, pc}
 1210              	.L97:
 1211 001e C046     		.align	2
 1212              	.L96:
 1213 0020 00000000 		.word	devAddr
 1214 0024 00000000 		.word	buffer
 1215              		.cfi_endproc
 1216              	.LFE28:
 1217              		.size	MPU6050_getMotionDetectionThreshold, .-MPU6050_getMotionDetectionThreshold
 1218              		.section	.text.MPU6050_setMotionDetectionThreshold,"ax",%progbits
 1219              		.align	2
 1220              		.global	MPU6050_setMotionDetectionThreshold
 1221              		.code	16
 1222              		.thumb_func
 1223              		.type	MPU6050_setMotionDetectionThreshold, %function
 1224              	MPU6050_setMotionDetectionThreshold:
 1225              	.LFB29:
 470:.\mpu6050.c   **** /** Set free-fall event acceleration threshold.
 471:.\mpu6050.c   ****  * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 472:.\mpu6050.c   ****  * @see getMotionDetectionThreshold()
 473:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_THR
 474:.\mpu6050.c   ****  */
 475:.\mpu6050.c   **** void MPU6050_setMotionDetectionThreshold(uint8_t threshold) {
 1226              		.loc 1 475 0
 1227              		.cfi_startproc
 1228 0000 80B5     		push	{r7, lr}
 1229              		.cfi_def_cfa_offset 8
 1230              		.cfi_offset 7, -8
 1231              		.cfi_offset 14, -4
 1232 0002 82B0     		sub	sp, sp, #8
 1233              		.cfi_def_cfa_offset 16
 1234 0004 00AF     		add	r7, sp, #0
 1235              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 31


 1236 0006 021C     		mov	r2, r0
 1237 0008 FB1D     		add	r3, r7, #7
 1238 000a 1A70     		strb	r2, [r3]
 476:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 1239              		.loc 1 476 0
 1240 000c 054B     		ldr	r3, .L99
 1241 000e 1A78     		ldrb	r2, [r3]
 1242 0010 FB1D     		add	r3, r7, #7
 1243 0012 1B78     		ldrb	r3, [r3]
 1244 0014 101C     		mov	r0, r2
 1245 0016 1F21     		mov	r1, #31
 1246 0018 1A1C     		mov	r2, r3
 1247 001a FFF7FEFF 		bl	I2CWriteByte
 477:.\mpu6050.c   **** }
 1248              		.loc 1 477 0
 1249 001e BD46     		mov	sp, r7
 1250 0020 02B0     		add	sp, sp, #8
 1251              		@ sp needed
 1252 0022 80BD     		pop	{r7, pc}
 1253              	.L100:
 1254              		.align	2
 1255              	.L99:
 1256 0024 00000000 		.word	devAddr
 1257              		.cfi_endproc
 1258              	.LFE29:
 1259              		.size	MPU6050_setMotionDetectionThreshold, .-MPU6050_setMotionDetectionThreshold
 1260              		.section	.text.MPU6050_getMotionDetectionDuration,"ax",%progbits
 1261              		.align	2
 1262              		.global	MPU6050_getMotionDetectionDuration
 1263              		.code	16
 1264              		.thumb_func
 1265              		.type	MPU6050_getMotionDetectionDuration, %function
 1266              	MPU6050_getMotionDetectionDuration:
 1267              	.LFB30:
 478:.\mpu6050.c   **** 
 479:.\mpu6050.c   **** // MOT_DUR register
 480:.\mpu6050.c   **** 
 481:.\mpu6050.c   **** /** Get motion detection event duration threshold.
 482:.\mpu6050.c   ****  * This register configures the duration counter threshold for Motion interrupt
 483:.\mpu6050.c   ****  * generation. The duration counter ticks at 1 kHz, therefore MOT_DUR has a unit
 484:.\mpu6050.c   ****  * of 1LSB = 1ms. The Motion detection duration counter increments when the
 485:.\mpu6050.c   ****  * absolute value of any of the accelerometer measurements exceeds the Motion
 486:.\mpu6050.c   ****  * detection threshold (Register 31). The Motion detection interrupt is
 487:.\mpu6050.c   ****  * triggered when the Motion detection counter reaches the time count specified
 488:.\mpu6050.c   ****  * in this register.
 489:.\mpu6050.c   ****  *
 490:.\mpu6050.c   ****  * For more details on the Motion detection interrupt, see Section 8.3 of the
 491:.\mpu6050.c   ****  * MPU-6000/MPU-6050 Product Specification document.
 492:.\mpu6050.c   ****  *
 493:.\mpu6050.c   ****  * @return Current motion detection duration threshold value (LSB = 1ms)
 494:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DUR
 495:.\mpu6050.c   ****  */
 496:.\mpu6050.c   **** uint8_t MPU6050_getMotionDetectionDuration() {
 1268              		.loc 1 496 0
 1269              		.cfi_startproc
 1270 0000 80B5     		push	{r7, lr}
 1271              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 32


 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0002 00AF     		add	r7, sp, #0
 1275              		.cfi_def_cfa_register 7
 497:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_MOT_DUR, buffer);
 1276              		.loc 1 497 0
 1277 0004 064B     		ldr	r3, .L103
 1278 0006 1A78     		ldrb	r2, [r3]
 1279 0008 064B     		ldr	r3, .L103+4
 1280 000a 101C     		mov	r0, r2
 1281 000c 2021     		mov	r1, #32
 1282 000e 1A1C     		mov	r2, r3
 1283 0010 FFF7FEFF 		bl	I2CReadByte
 498:.\mpu6050.c   ****     return buffer[0];
 1284              		.loc 1 498 0
 1285 0014 034B     		ldr	r3, .L103+4
 1286 0016 1B78     		ldrb	r3, [r3]
 499:.\mpu6050.c   **** }
 1287              		.loc 1 499 0
 1288 0018 181C     		mov	r0, r3
 1289 001a BD46     		mov	sp, r7
 1290              		@ sp needed
 1291 001c 80BD     		pop	{r7, pc}
 1292              	.L104:
 1293 001e C046     		.align	2
 1294              	.L103:
 1295 0020 00000000 		.word	devAddr
 1296 0024 00000000 		.word	buffer
 1297              		.cfi_endproc
 1298              	.LFE30:
 1299              		.size	MPU6050_getMotionDetectionDuration, .-MPU6050_getMotionDetectionDuration
 1300              		.section	.text.MPU6050_setMotionDetectionDuration,"ax",%progbits
 1301              		.align	2
 1302              		.global	MPU6050_setMotionDetectionDuration
 1303              		.code	16
 1304              		.thumb_func
 1305              		.type	MPU6050_setMotionDetectionDuration, %function
 1306              	MPU6050_setMotionDetectionDuration:
 1307              	.LFB31:
 500:.\mpu6050.c   **** /** Set motion detection event duration threshold.
 501:.\mpu6050.c   ****  * @param duration New motion detection duration threshold value (LSB = 1ms)
 502:.\mpu6050.c   ****  * @see getMotionDetectionDuration()
 503:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DUR
 504:.\mpu6050.c   ****  */
 505:.\mpu6050.c   **** void MPU6050_setMotionDetectionDuration(uint8_t duration) {
 1308              		.loc 1 505 0
 1309              		.cfi_startproc
 1310 0000 80B5     		push	{r7, lr}
 1311              		.cfi_def_cfa_offset 8
 1312              		.cfi_offset 7, -8
 1313              		.cfi_offset 14, -4
 1314 0002 82B0     		sub	sp, sp, #8
 1315              		.cfi_def_cfa_offset 16
 1316 0004 00AF     		add	r7, sp, #0
 1317              		.cfi_def_cfa_register 7
 1318 0006 021C     		mov	r2, r0
 1319 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 33


 1320 000a 1A70     		strb	r2, [r3]
 506:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 1321              		.loc 1 506 0
 1322 000c 054B     		ldr	r3, .L106
 1323 000e 1A78     		ldrb	r2, [r3]
 1324 0010 FB1D     		add	r3, r7, #7
 1325 0012 1B78     		ldrb	r3, [r3]
 1326 0014 101C     		mov	r0, r2
 1327 0016 2021     		mov	r1, #32
 1328 0018 1A1C     		mov	r2, r3
 1329 001a FFF7FEFF 		bl	I2CWriteByte
 507:.\mpu6050.c   **** }
 1330              		.loc 1 507 0
 1331 001e BD46     		mov	sp, r7
 1332 0020 02B0     		add	sp, sp, #8
 1333              		@ sp needed
 1334 0022 80BD     		pop	{r7, pc}
 1335              	.L107:
 1336              		.align	2
 1337              	.L106:
 1338 0024 00000000 		.word	devAddr
 1339              		.cfi_endproc
 1340              	.LFE31:
 1341              		.size	MPU6050_setMotionDetectionDuration, .-MPU6050_setMotionDetectionDuration
 1342              		.section	.text.MPU6050_getZeroMotionDetectionThreshold,"ax",%progbits
 1343              		.align	2
 1344              		.global	MPU6050_getZeroMotionDetectionThreshold
 1345              		.code	16
 1346              		.thumb_func
 1347              		.type	MPU6050_getZeroMotionDetectionThreshold, %function
 1348              	MPU6050_getZeroMotionDetectionThreshold:
 1349              	.LFB32:
 508:.\mpu6050.c   **** 
 509:.\mpu6050.c   **** // ZRMOT_THR register
 510:.\mpu6050.c   **** 
 511:.\mpu6050.c   **** /** Get zero motion detection event acceleration threshold.
 512:.\mpu6050.c   ****  * This register configures the detection threshold for Zero Motion interrupt
 513:.\mpu6050.c   ****  * generation. The unit of ZRMOT_THR is 1LSB = 2mg. Zero Motion is detected when
 514:.\mpu6050.c   ****  * the absolute value of the accelerometer measurements for the 3 axes are each
 515:.\mpu6050.c   ****  * less than the detection threshold. This condition increments the Zero Motion
 516:.\mpu6050.c   ****  * duration counter (Register 34). The Zero Motion interrupt is triggered when
 517:.\mpu6050.c   ****  * the Zero Motion duration counter reaches the time count specified in
 518:.\mpu6050.c   ****  * ZRMOT_DUR (Register 34).
 519:.\mpu6050.c   ****  *
 520:.\mpu6050.c   ****  * Unlike Free Fall or Motion detection, Zero Motion detection triggers an
 521:.\mpu6050.c   ****  * interrupt both when Zero Motion is first detected and when Zero Motion is no
 522:.\mpu6050.c   ****  * longer detected.
 523:.\mpu6050.c   ****  *
 524:.\mpu6050.c   ****  * When a zero motion event is detected, a Zero Motion Status will be indicated
 525:.\mpu6050.c   ****  * in the MOT_DETECT_STATUS register (Register 97). When a motion-to-zero-motion
 526:.\mpu6050.c   ****  * condition is detected, the status bit is set to 1. When a zero-motion-to-
 527:.\mpu6050.c   ****  * motion condition is detected, the status bit is set to 0.
 528:.\mpu6050.c   ****  *
 529:.\mpu6050.c   ****  * For more details on the Zero Motion detection interrupt, see Section 8.4 of
 530:.\mpu6050.c   ****  * the MPU-6000/MPU-6050 Product Specification document as well as Registers 56
 531:.\mpu6050.c   ****  * and 58 of this document.
 532:.\mpu6050.c   ****  *
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 34


 533:.\mpu6050.c   ****  * @return Current zero motion detection acceleration threshold value (LSB = 2mg)
 534:.\mpu6050.c   ****  * @see MPU6050_RA_ZRMOT_THR
 535:.\mpu6050.c   ****  */
 536:.\mpu6050.c   **** uint8_t MPU6050_getZeroMotionDetectionThreshold() {
 1350              		.loc 1 536 0
 1351              		.cfi_startproc
 1352 0000 80B5     		push	{r7, lr}
 1353              		.cfi_def_cfa_offset 8
 1354              		.cfi_offset 7, -8
 1355              		.cfi_offset 14, -4
 1356 0002 00AF     		add	r7, sp, #0
 1357              		.cfi_def_cfa_register 7
 537:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_ZRMOT_THR, buffer);
 1358              		.loc 1 537 0
 1359 0004 064B     		ldr	r3, .L110
 1360 0006 1A78     		ldrb	r2, [r3]
 1361 0008 064B     		ldr	r3, .L110+4
 1362 000a 101C     		mov	r0, r2
 1363 000c 2121     		mov	r1, #33
 1364 000e 1A1C     		mov	r2, r3
 1365 0010 FFF7FEFF 		bl	I2CReadByte
 538:.\mpu6050.c   ****     return buffer[0];
 1366              		.loc 1 538 0
 1367 0014 034B     		ldr	r3, .L110+4
 1368 0016 1B78     		ldrb	r3, [r3]
 539:.\mpu6050.c   **** }
 1369              		.loc 1 539 0
 1370 0018 181C     		mov	r0, r3
 1371 001a BD46     		mov	sp, r7
 1372              		@ sp needed
 1373 001c 80BD     		pop	{r7, pc}
 1374              	.L111:
 1375 001e C046     		.align	2
 1376              	.L110:
 1377 0020 00000000 		.word	devAddr
 1378 0024 00000000 		.word	buffer
 1379              		.cfi_endproc
 1380              	.LFE32:
 1381              		.size	MPU6050_getZeroMotionDetectionThreshold, .-MPU6050_getZeroMotionDetectionThreshold
 1382              		.section	.text.MPU6050_setZeroMotionDetectionThreshold,"ax",%progbits
 1383              		.align	2
 1384              		.global	MPU6050_setZeroMotionDetectionThreshold
 1385              		.code	16
 1386              		.thumb_func
 1387              		.type	MPU6050_setZeroMotionDetectionThreshold, %function
 1388              	MPU6050_setZeroMotionDetectionThreshold:
 1389              	.LFB33:
 540:.\mpu6050.c   **** /** Set zero motion detection event acceleration threshold.
 541:.\mpu6050.c   ****  * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 542:.\mpu6050.c   ****  * @see getZeroMotionDetectionThreshold()
 543:.\mpu6050.c   ****  * @see MPU6050_RA_ZRMOT_THR
 544:.\mpu6050.c   ****  */
 545:.\mpu6050.c   **** void MPU6050_setZeroMotionDetectionThreshold(uint8_t threshold) {
 1390              		.loc 1 545 0
 1391              		.cfi_startproc
 1392 0000 80B5     		push	{r7, lr}
 1393              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 35


 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
 1396 0002 82B0     		sub	sp, sp, #8
 1397              		.cfi_def_cfa_offset 16
 1398 0004 00AF     		add	r7, sp, #0
 1399              		.cfi_def_cfa_register 7
 1400 0006 021C     		mov	r2, r0
 1401 0008 FB1D     		add	r3, r7, #7
 1402 000a 1A70     		strb	r2, [r3]
 546:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 1403              		.loc 1 546 0
 1404 000c 054B     		ldr	r3, .L113
 1405 000e 1A78     		ldrb	r2, [r3]
 1406 0010 FB1D     		add	r3, r7, #7
 1407 0012 1B78     		ldrb	r3, [r3]
 1408 0014 101C     		mov	r0, r2
 1409 0016 2121     		mov	r1, #33
 1410 0018 1A1C     		mov	r2, r3
 1411 001a FFF7FEFF 		bl	I2CWriteByte
 547:.\mpu6050.c   **** }
 1412              		.loc 1 547 0
 1413 001e BD46     		mov	sp, r7
 1414 0020 02B0     		add	sp, sp, #8
 1415              		@ sp needed
 1416 0022 80BD     		pop	{r7, pc}
 1417              	.L114:
 1418              		.align	2
 1419              	.L113:
 1420 0024 00000000 		.word	devAddr
 1421              		.cfi_endproc
 1422              	.LFE33:
 1423              		.size	MPU6050_setZeroMotionDetectionThreshold, .-MPU6050_setZeroMotionDetectionThreshold
 1424              		.section	.text.MPU6050_getZeroMotionDetectionDuration,"ax",%progbits
 1425              		.align	2
 1426              		.global	MPU6050_getZeroMotionDetectionDuration
 1427              		.code	16
 1428              		.thumb_func
 1429              		.type	MPU6050_getZeroMotionDetectionDuration, %function
 1430              	MPU6050_getZeroMotionDetectionDuration:
 1431              	.LFB34:
 548:.\mpu6050.c   **** 
 549:.\mpu6050.c   **** // ZRMOT_DUR register
 550:.\mpu6050.c   **** 
 551:.\mpu6050.c   **** /** Get zero motion detection event duration threshold.
 552:.\mpu6050.c   ****  * This register configures the duration counter threshold for Zero Motion
 553:.\mpu6050.c   ****  * interrupt generation. The duration counter ticks at 16 Hz, therefore
 554:.\mpu6050.c   ****  * ZRMOT_DUR has a unit of 1 LSB = 64 ms. The Zero Motion duration counter
 555:.\mpu6050.c   ****  * increments while the absolute value of the accelerometer measurements are
 556:.\mpu6050.c   ****  * each less than the detection threshold (Register 33). The Zero Motion
 557:.\mpu6050.c   ****  * interrupt is triggered when the Zero Motion duration counter reaches the time
 558:.\mpu6050.c   ****  * count specified in this register.
 559:.\mpu6050.c   ****  *
 560:.\mpu6050.c   ****  * For more details on the Zero Motion detection interrupt, see Section 8.4 of
 561:.\mpu6050.c   ****  * the MPU-6000/MPU-6050 Product Specification document, as well as Registers 56
 562:.\mpu6050.c   ****  * and 58 of this document.
 563:.\mpu6050.c   ****  *
 564:.\mpu6050.c   ****  * @return Current zero motion detection duration threshold value (LSB = 64ms)
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 36


 565:.\mpu6050.c   ****  * @see MPU6050_RA_ZRMOT_DUR
 566:.\mpu6050.c   ****  */
 567:.\mpu6050.c   **** uint8_t MPU6050_getZeroMotionDetectionDuration() {
 1432              		.loc 1 567 0
 1433              		.cfi_startproc
 1434 0000 80B5     		push	{r7, lr}
 1435              		.cfi_def_cfa_offset 8
 1436              		.cfi_offset 7, -8
 1437              		.cfi_offset 14, -4
 1438 0002 00AF     		add	r7, sp, #0
 1439              		.cfi_def_cfa_register 7
 568:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_ZRMOT_DUR, buffer);
 1440              		.loc 1 568 0
 1441 0004 064B     		ldr	r3, .L117
 1442 0006 1A78     		ldrb	r2, [r3]
 1443 0008 064B     		ldr	r3, .L117+4
 1444 000a 101C     		mov	r0, r2
 1445 000c 2221     		mov	r1, #34
 1446 000e 1A1C     		mov	r2, r3
 1447 0010 FFF7FEFF 		bl	I2CReadByte
 569:.\mpu6050.c   ****     return buffer[0];
 1448              		.loc 1 569 0
 1449 0014 034B     		ldr	r3, .L117+4
 1450 0016 1B78     		ldrb	r3, [r3]
 570:.\mpu6050.c   **** }
 1451              		.loc 1 570 0
 1452 0018 181C     		mov	r0, r3
 1453 001a BD46     		mov	sp, r7
 1454              		@ sp needed
 1455 001c 80BD     		pop	{r7, pc}
 1456              	.L118:
 1457 001e C046     		.align	2
 1458              	.L117:
 1459 0020 00000000 		.word	devAddr
 1460 0024 00000000 		.word	buffer
 1461              		.cfi_endproc
 1462              	.LFE34:
 1463              		.size	MPU6050_getZeroMotionDetectionDuration, .-MPU6050_getZeroMotionDetectionDuration
 1464              		.section	.text.MPU6050_setZeroMotionDetectionDuration,"ax",%progbits
 1465              		.align	2
 1466              		.global	MPU6050_setZeroMotionDetectionDuration
 1467              		.code	16
 1468              		.thumb_func
 1469              		.type	MPU6050_setZeroMotionDetectionDuration, %function
 1470              	MPU6050_setZeroMotionDetectionDuration:
 1471              	.LFB35:
 571:.\mpu6050.c   **** /** Set zero motion detection event duration threshold.
 572:.\mpu6050.c   ****  * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 573:.\mpu6050.c   ****  * @see getZeroMotionDetectionDuration()
 574:.\mpu6050.c   ****  * @see MPU6050_RA_ZRMOT_DUR
 575:.\mpu6050.c   ****  */
 576:.\mpu6050.c   **** void MPU6050_setZeroMotionDetectionDuration(uint8_t duration) {
 1472              		.loc 1 576 0
 1473              		.cfi_startproc
 1474 0000 80B5     		push	{r7, lr}
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 37


 1477              		.cfi_offset 14, -4
 1478 0002 82B0     		sub	sp, sp, #8
 1479              		.cfi_def_cfa_offset 16
 1480 0004 00AF     		add	r7, sp, #0
 1481              		.cfi_def_cfa_register 7
 1482 0006 021C     		mov	r2, r0
 1483 0008 FB1D     		add	r3, r7, #7
 1484 000a 1A70     		strb	r2, [r3]
 577:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 1485              		.loc 1 577 0
 1486 000c 054B     		ldr	r3, .L120
 1487 000e 1A78     		ldrb	r2, [r3]
 1488 0010 FB1D     		add	r3, r7, #7
 1489 0012 1B78     		ldrb	r3, [r3]
 1490 0014 101C     		mov	r0, r2
 1491 0016 2221     		mov	r1, #34
 1492 0018 1A1C     		mov	r2, r3
 1493 001a FFF7FEFF 		bl	I2CWriteByte
 578:.\mpu6050.c   **** }
 1494              		.loc 1 578 0
 1495 001e BD46     		mov	sp, r7
 1496 0020 02B0     		add	sp, sp, #8
 1497              		@ sp needed
 1498 0022 80BD     		pop	{r7, pc}
 1499              	.L121:
 1500              		.align	2
 1501              	.L120:
 1502 0024 00000000 		.word	devAddr
 1503              		.cfi_endproc
 1504              	.LFE35:
 1505              		.size	MPU6050_setZeroMotionDetectionDuration, .-MPU6050_setZeroMotionDetectionDuration
 1506              		.section	.text.MPU6050_getTempFIFOEnabled,"ax",%progbits
 1507              		.align	2
 1508              		.global	MPU6050_getTempFIFOEnabled
 1509              		.code	16
 1510              		.thumb_func
 1511              		.type	MPU6050_getTempFIFOEnabled, %function
 1512              	MPU6050_getTempFIFOEnabled:
 1513              	.LFB36:
 579:.\mpu6050.c   **** 
 580:.\mpu6050.c   **** // FIFO_EN register
 581:.\mpu6050.c   **** 
 582:.\mpu6050.c   **** /** Get temperature FIFO enabled value.
 583:.\mpu6050.c   ****  * When set to 1, this bit enables TEMP_OUT_H and TEMP_OUT_L (Registers 65 and
 584:.\mpu6050.c   ****  * 66) to be written into the FIFO buffer.
 585:.\mpu6050.c   ****  * @return Current temperature FIFO enabled value
 586:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 587:.\mpu6050.c   ****  */
 588:.\mpu6050.c   **** bool MPU6050_getTempFIFOEnabled() {
 1514              		.loc 1 588 0
 1515              		.cfi_startproc
 1516 0000 80B5     		push	{r7, lr}
 1517              		.cfi_def_cfa_offset 8
 1518              		.cfi_offset 7, -8
 1519              		.cfi_offset 14, -4
 1520 0002 00AF     		add	r7, sp, #0
 1521              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 38


 589:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_TEMP_FIFO_EN_BIT, buffer);
 1522              		.loc 1 589 0
 1523 0004 074B     		ldr	r3, .L124
 1524 0006 1A78     		ldrb	r2, [r3]
 1525 0008 074B     		ldr	r3, .L124+4
 1526 000a 101C     		mov	r0, r2
 1527 000c 2321     		mov	r1, #35
 1528 000e 0722     		mov	r2, #7
 1529 0010 FFF7FEFF 		bl	I2CReadBit
 590:.\mpu6050.c   ****     return buffer[0];
 1530              		.loc 1 590 0
 1531 0014 044B     		ldr	r3, .L124+4
 1532 0016 1B78     		ldrb	r3, [r3]
 1533 0018 5A1E     		sub	r2, r3, #1
 1534 001a 9341     		sbc	r3, r3, r2
 1535 001c DBB2     		uxtb	r3, r3
 591:.\mpu6050.c   **** }
 1536              		.loc 1 591 0
 1537 001e 181C     		mov	r0, r3
 1538 0020 BD46     		mov	sp, r7
 1539              		@ sp needed
 1540 0022 80BD     		pop	{r7, pc}
 1541              	.L125:
 1542              		.align	2
 1543              	.L124:
 1544 0024 00000000 		.word	devAddr
 1545 0028 00000000 		.word	buffer
 1546              		.cfi_endproc
 1547              	.LFE36:
 1548              		.size	MPU6050_getTempFIFOEnabled, .-MPU6050_getTempFIFOEnabled
 1549              		.section	.text.MPU6050_setTempFIFOEnabled,"ax",%progbits
 1550              		.align	2
 1551              		.global	MPU6050_setTempFIFOEnabled
 1552              		.code	16
 1553              		.thumb_func
 1554              		.type	MPU6050_setTempFIFOEnabled, %function
 1555              	MPU6050_setTempFIFOEnabled:
 1556              	.LFB37:
 592:.\mpu6050.c   **** /** Set temperature FIFO enabled value.
 593:.\mpu6050.c   ****  * @param enabled New temperature FIFO enabled value
 594:.\mpu6050.c   ****  * @see getTempFIFOEnabled()
 595:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 596:.\mpu6050.c   ****  */
 597:.\mpu6050.c   **** void MPU6050_setTempFIFOEnabled(bool enabled) {
 1557              		.loc 1 597 0
 1558              		.cfi_startproc
 1559 0000 80B5     		push	{r7, lr}
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 7, -8
 1562              		.cfi_offset 14, -4
 1563 0002 82B0     		sub	sp, sp, #8
 1564              		.cfi_def_cfa_offset 16
 1565 0004 00AF     		add	r7, sp, #0
 1566              		.cfi_def_cfa_register 7
 1567 0006 021C     		mov	r2, r0
 1568 0008 FB1D     		add	r3, r7, #7
 1569 000a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 39


 598:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_TEMP_FIFO_EN_BIT, enabled);
 1570              		.loc 1 598 0
 1571 000c 054B     		ldr	r3, .L127
 1572 000e 1A78     		ldrb	r2, [r3]
 1573 0010 FB1D     		add	r3, r7, #7
 1574 0012 1B78     		ldrb	r3, [r3]
 1575 0014 101C     		mov	r0, r2
 1576 0016 2321     		mov	r1, #35
 1577 0018 0722     		mov	r2, #7
 1578 001a FFF7FEFF 		bl	I2CWriteBit
 599:.\mpu6050.c   **** }
 1579              		.loc 1 599 0
 1580 001e BD46     		mov	sp, r7
 1581 0020 02B0     		add	sp, sp, #8
 1582              		@ sp needed
 1583 0022 80BD     		pop	{r7, pc}
 1584              	.L128:
 1585              		.align	2
 1586              	.L127:
 1587 0024 00000000 		.word	devAddr
 1588              		.cfi_endproc
 1589              	.LFE37:
 1590              		.size	MPU6050_setTempFIFOEnabled, .-MPU6050_setTempFIFOEnabled
 1591              		.section	.text.MPU6050_getXGyroFIFOEnabled,"ax",%progbits
 1592              		.align	2
 1593              		.global	MPU6050_getXGyroFIFOEnabled
 1594              		.code	16
 1595              		.thumb_func
 1596              		.type	MPU6050_getXGyroFIFOEnabled, %function
 1597              	MPU6050_getXGyroFIFOEnabled:
 1598              	.LFB38:
 600:.\mpu6050.c   **** /** Get gyroscope X-axis FIFO enabled value.
 601:.\mpu6050.c   ****  * When set to 1, this bit enables GYRO_XOUT_H and GYRO_XOUT_L (Registers 67 and
 602:.\mpu6050.c   ****  * 68) to be written into the FIFO buffer.
 603:.\mpu6050.c   ****  * @return Current gyroscope X-axis FIFO enabled value
 604:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 605:.\mpu6050.c   ****  */
 606:.\mpu6050.c   **** bool MPU6050_getXGyroFIFOEnabled() {
 1599              		.loc 1 606 0
 1600              		.cfi_startproc
 1601 0000 80B5     		push	{r7, lr}
 1602              		.cfi_def_cfa_offset 8
 1603              		.cfi_offset 7, -8
 1604              		.cfi_offset 14, -4
 1605 0002 00AF     		add	r7, sp, #0
 1606              		.cfi_def_cfa_register 7
 607:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, buffer);
 1607              		.loc 1 607 0
 1608 0004 074B     		ldr	r3, .L131
 1609 0006 1A78     		ldrb	r2, [r3]
 1610 0008 074B     		ldr	r3, .L131+4
 1611 000a 101C     		mov	r0, r2
 1612 000c 2321     		mov	r1, #35
 1613 000e 0622     		mov	r2, #6
 1614 0010 FFF7FEFF 		bl	I2CReadBit
 608:.\mpu6050.c   ****     return buffer[0];
 1615              		.loc 1 608 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 40


 1616 0014 044B     		ldr	r3, .L131+4
 1617 0016 1B78     		ldrb	r3, [r3]
 1618 0018 5A1E     		sub	r2, r3, #1
 1619 001a 9341     		sbc	r3, r3, r2
 1620 001c DBB2     		uxtb	r3, r3
 609:.\mpu6050.c   **** }
 1621              		.loc 1 609 0
 1622 001e 181C     		mov	r0, r3
 1623 0020 BD46     		mov	sp, r7
 1624              		@ sp needed
 1625 0022 80BD     		pop	{r7, pc}
 1626              	.L132:
 1627              		.align	2
 1628              	.L131:
 1629 0024 00000000 		.word	devAddr
 1630 0028 00000000 		.word	buffer
 1631              		.cfi_endproc
 1632              	.LFE38:
 1633              		.size	MPU6050_getXGyroFIFOEnabled, .-MPU6050_getXGyroFIFOEnabled
 1634              		.section	.text.MPU6050_setXGyroFIFOEnabled,"ax",%progbits
 1635              		.align	2
 1636              		.global	MPU6050_setXGyroFIFOEnabled
 1637              		.code	16
 1638              		.thumb_func
 1639              		.type	MPU6050_setXGyroFIFOEnabled, %function
 1640              	MPU6050_setXGyroFIFOEnabled:
 1641              	.LFB39:
 610:.\mpu6050.c   **** /** Set gyroscope X-axis FIFO enabled value.
 611:.\mpu6050.c   ****  * @param enabled New gyroscope X-axis FIFO enabled value
 612:.\mpu6050.c   ****  * @see getXGyroFIFOEnabled()
 613:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 614:.\mpu6050.c   ****  */
 615:.\mpu6050.c   **** void MPU6050_setXGyroFIFOEnabled(bool enabled) {
 1642              		.loc 1 615 0
 1643              		.cfi_startproc
 1644 0000 80B5     		push	{r7, lr}
 1645              		.cfi_def_cfa_offset 8
 1646              		.cfi_offset 7, -8
 1647              		.cfi_offset 14, -4
 1648 0002 82B0     		sub	sp, sp, #8
 1649              		.cfi_def_cfa_offset 16
 1650 0004 00AF     		add	r7, sp, #0
 1651              		.cfi_def_cfa_register 7
 1652 0006 021C     		mov	r2, r0
 1653 0008 FB1D     		add	r3, r7, #7
 1654 000a 1A70     		strb	r2, [r3]
 616:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, enabled);
 1655              		.loc 1 616 0
 1656 000c 054B     		ldr	r3, .L134
 1657 000e 1A78     		ldrb	r2, [r3]
 1658 0010 FB1D     		add	r3, r7, #7
 1659 0012 1B78     		ldrb	r3, [r3]
 1660 0014 101C     		mov	r0, r2
 1661 0016 2321     		mov	r1, #35
 1662 0018 0622     		mov	r2, #6
 1663 001a FFF7FEFF 		bl	I2CWriteBit
 617:.\mpu6050.c   **** }
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 41


 1664              		.loc 1 617 0
 1665 001e BD46     		mov	sp, r7
 1666 0020 02B0     		add	sp, sp, #8
 1667              		@ sp needed
 1668 0022 80BD     		pop	{r7, pc}
 1669              	.L135:
 1670              		.align	2
 1671              	.L134:
 1672 0024 00000000 		.word	devAddr
 1673              		.cfi_endproc
 1674              	.LFE39:
 1675              		.size	MPU6050_setXGyroFIFOEnabled, .-MPU6050_setXGyroFIFOEnabled
 1676              		.section	.text.MPU6050_getYGyroFIFOEnabled,"ax",%progbits
 1677              		.align	2
 1678              		.global	MPU6050_getYGyroFIFOEnabled
 1679              		.code	16
 1680              		.thumb_func
 1681              		.type	MPU6050_getYGyroFIFOEnabled, %function
 1682              	MPU6050_getYGyroFIFOEnabled:
 1683              	.LFB40:
 618:.\mpu6050.c   **** /** Get gyroscope Y-axis FIFO enabled value.
 619:.\mpu6050.c   ****  * When set to 1, this bit enables GYRO_YOUT_H and GYRO_YOUT_L (Registers 69 and
 620:.\mpu6050.c   ****  * 70) to be written into the FIFO buffer.
 621:.\mpu6050.c   ****  * @return Current gyroscope Y-axis FIFO enabled value
 622:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 623:.\mpu6050.c   ****  */
 624:.\mpu6050.c   **** bool MPU6050_getYGyroFIFOEnabled() {
 1684              		.loc 1 624 0
 1685              		.cfi_startproc
 1686 0000 80B5     		push	{r7, lr}
 1687              		.cfi_def_cfa_offset 8
 1688              		.cfi_offset 7, -8
 1689              		.cfi_offset 14, -4
 1690 0002 00AF     		add	r7, sp, #0
 1691              		.cfi_def_cfa_register 7
 625:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, buffer);
 1692              		.loc 1 625 0
 1693 0004 074B     		ldr	r3, .L138
 1694 0006 1A78     		ldrb	r2, [r3]
 1695 0008 074B     		ldr	r3, .L138+4
 1696 000a 101C     		mov	r0, r2
 1697 000c 2321     		mov	r1, #35
 1698 000e 0522     		mov	r2, #5
 1699 0010 FFF7FEFF 		bl	I2CReadBit
 626:.\mpu6050.c   ****     return buffer[0];
 1700              		.loc 1 626 0
 1701 0014 044B     		ldr	r3, .L138+4
 1702 0016 1B78     		ldrb	r3, [r3]
 1703 0018 5A1E     		sub	r2, r3, #1
 1704 001a 9341     		sbc	r3, r3, r2
 1705 001c DBB2     		uxtb	r3, r3
 627:.\mpu6050.c   **** }
 1706              		.loc 1 627 0
 1707 001e 181C     		mov	r0, r3
 1708 0020 BD46     		mov	sp, r7
 1709              		@ sp needed
 1710 0022 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 42


 1711              	.L139:
 1712              		.align	2
 1713              	.L138:
 1714 0024 00000000 		.word	devAddr
 1715 0028 00000000 		.word	buffer
 1716              		.cfi_endproc
 1717              	.LFE40:
 1718              		.size	MPU6050_getYGyroFIFOEnabled, .-MPU6050_getYGyroFIFOEnabled
 1719              		.section	.text.MPU6050_setYGyroFIFOEnabled,"ax",%progbits
 1720              		.align	2
 1721              		.global	MPU6050_setYGyroFIFOEnabled
 1722              		.code	16
 1723              		.thumb_func
 1724              		.type	MPU6050_setYGyroFIFOEnabled, %function
 1725              	MPU6050_setYGyroFIFOEnabled:
 1726              	.LFB41:
 628:.\mpu6050.c   **** /** Set gyroscope Y-axis FIFO enabled value.
 629:.\mpu6050.c   ****  * @param enabled New gyroscope Y-axis FIFO enabled value
 630:.\mpu6050.c   ****  * @see getYGyroFIFOEnabled()
 631:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 632:.\mpu6050.c   ****  */
 633:.\mpu6050.c   **** void MPU6050_setYGyroFIFOEnabled(bool enabled) {
 1727              		.loc 1 633 0
 1728              		.cfi_startproc
 1729 0000 80B5     		push	{r7, lr}
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 7, -8
 1732              		.cfi_offset 14, -4
 1733 0002 82B0     		sub	sp, sp, #8
 1734              		.cfi_def_cfa_offset 16
 1735 0004 00AF     		add	r7, sp, #0
 1736              		.cfi_def_cfa_register 7
 1737 0006 021C     		mov	r2, r0
 1738 0008 FB1D     		add	r3, r7, #7
 1739 000a 1A70     		strb	r2, [r3]
 634:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, enabled);
 1740              		.loc 1 634 0
 1741 000c 054B     		ldr	r3, .L141
 1742 000e 1A78     		ldrb	r2, [r3]
 1743 0010 FB1D     		add	r3, r7, #7
 1744 0012 1B78     		ldrb	r3, [r3]
 1745 0014 101C     		mov	r0, r2
 1746 0016 2321     		mov	r1, #35
 1747 0018 0522     		mov	r2, #5
 1748 001a FFF7FEFF 		bl	I2CWriteBit
 635:.\mpu6050.c   **** }
 1749              		.loc 1 635 0
 1750 001e BD46     		mov	sp, r7
 1751 0020 02B0     		add	sp, sp, #8
 1752              		@ sp needed
 1753 0022 80BD     		pop	{r7, pc}
 1754              	.L142:
 1755              		.align	2
 1756              	.L141:
 1757 0024 00000000 		.word	devAddr
 1758              		.cfi_endproc
 1759              	.LFE41:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 43


 1760              		.size	MPU6050_setYGyroFIFOEnabled, .-MPU6050_setYGyroFIFOEnabled
 1761              		.section	.text.MPU6050_getZGyroFIFOEnabled,"ax",%progbits
 1762              		.align	2
 1763              		.global	MPU6050_getZGyroFIFOEnabled
 1764              		.code	16
 1765              		.thumb_func
 1766              		.type	MPU6050_getZGyroFIFOEnabled, %function
 1767              	MPU6050_getZGyroFIFOEnabled:
 1768              	.LFB42:
 636:.\mpu6050.c   **** /** Get gyroscope Z-axis FIFO enabled value.
 637:.\mpu6050.c   ****  * When set to 1, this bit enables GYRO_ZOUT_H and GYRO_ZOUT_L (Registers 71 and
 638:.\mpu6050.c   ****  * 72) to be written into the FIFO buffer.
 639:.\mpu6050.c   ****  * @return Current gyroscope Z-axis FIFO enabled value
 640:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 641:.\mpu6050.c   ****  */
 642:.\mpu6050.c   **** bool MPU6050_getZGyroFIFOEnabled() {
 1769              		.loc 1 642 0
 1770              		.cfi_startproc
 1771 0000 80B5     		push	{r7, lr}
 1772              		.cfi_def_cfa_offset 8
 1773              		.cfi_offset 7, -8
 1774              		.cfi_offset 14, -4
 1775 0002 00AF     		add	r7, sp, #0
 1776              		.cfi_def_cfa_register 7
 643:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, buffer);
 1777              		.loc 1 643 0
 1778 0004 074B     		ldr	r3, .L145
 1779 0006 1A78     		ldrb	r2, [r3]
 1780 0008 074B     		ldr	r3, .L145+4
 1781 000a 101C     		mov	r0, r2
 1782 000c 2321     		mov	r1, #35
 1783 000e 0422     		mov	r2, #4
 1784 0010 FFF7FEFF 		bl	I2CReadBit
 644:.\mpu6050.c   ****     return buffer[0];
 1785              		.loc 1 644 0
 1786 0014 044B     		ldr	r3, .L145+4
 1787 0016 1B78     		ldrb	r3, [r3]
 1788 0018 5A1E     		sub	r2, r3, #1
 1789 001a 9341     		sbc	r3, r3, r2
 1790 001c DBB2     		uxtb	r3, r3
 645:.\mpu6050.c   **** }
 1791              		.loc 1 645 0
 1792 001e 181C     		mov	r0, r3
 1793 0020 BD46     		mov	sp, r7
 1794              		@ sp needed
 1795 0022 80BD     		pop	{r7, pc}
 1796              	.L146:
 1797              		.align	2
 1798              	.L145:
 1799 0024 00000000 		.word	devAddr
 1800 0028 00000000 		.word	buffer
 1801              		.cfi_endproc
 1802              	.LFE42:
 1803              		.size	MPU6050_getZGyroFIFOEnabled, .-MPU6050_getZGyroFIFOEnabled
 1804              		.section	.text.MPU6050_setZGyroFIFOEnabled,"ax",%progbits
 1805              		.align	2
 1806              		.global	MPU6050_setZGyroFIFOEnabled
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 44


 1807              		.code	16
 1808              		.thumb_func
 1809              		.type	MPU6050_setZGyroFIFOEnabled, %function
 1810              	MPU6050_setZGyroFIFOEnabled:
 1811              	.LFB43:
 646:.\mpu6050.c   **** /** Set gyroscope Z-axis FIFO enabled value.
 647:.\mpu6050.c   ****  * @param enabled New gyroscope Z-axis FIFO enabled value
 648:.\mpu6050.c   ****  * @see getZGyroFIFOEnabled()
 649:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 650:.\mpu6050.c   ****  */
 651:.\mpu6050.c   **** void MPU6050_setZGyroFIFOEnabled(bool enabled) {
 1812              		.loc 1 651 0
 1813              		.cfi_startproc
 1814 0000 80B5     		push	{r7, lr}
 1815              		.cfi_def_cfa_offset 8
 1816              		.cfi_offset 7, -8
 1817              		.cfi_offset 14, -4
 1818 0002 82B0     		sub	sp, sp, #8
 1819              		.cfi_def_cfa_offset 16
 1820 0004 00AF     		add	r7, sp, #0
 1821              		.cfi_def_cfa_register 7
 1822 0006 021C     		mov	r2, r0
 1823 0008 FB1D     		add	r3, r7, #7
 1824 000a 1A70     		strb	r2, [r3]
 652:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, enabled);
 1825              		.loc 1 652 0
 1826 000c 054B     		ldr	r3, .L148
 1827 000e 1A78     		ldrb	r2, [r3]
 1828 0010 FB1D     		add	r3, r7, #7
 1829 0012 1B78     		ldrb	r3, [r3]
 1830 0014 101C     		mov	r0, r2
 1831 0016 2321     		mov	r1, #35
 1832 0018 0422     		mov	r2, #4
 1833 001a FFF7FEFF 		bl	I2CWriteBit
 653:.\mpu6050.c   **** }
 1834              		.loc 1 653 0
 1835 001e BD46     		mov	sp, r7
 1836 0020 02B0     		add	sp, sp, #8
 1837              		@ sp needed
 1838 0022 80BD     		pop	{r7, pc}
 1839              	.L149:
 1840              		.align	2
 1841              	.L148:
 1842 0024 00000000 		.word	devAddr
 1843              		.cfi_endproc
 1844              	.LFE43:
 1845              		.size	MPU6050_setZGyroFIFOEnabled, .-MPU6050_setZGyroFIFOEnabled
 1846              		.section	.text.MPU6050_getAccelFIFOEnabled,"ax",%progbits
 1847              		.align	2
 1848              		.global	MPU6050_getAccelFIFOEnabled
 1849              		.code	16
 1850              		.thumb_func
 1851              		.type	MPU6050_getAccelFIFOEnabled, %function
 1852              	MPU6050_getAccelFIFOEnabled:
 1853              	.LFB44:
 654:.\mpu6050.c   **** /** Get accelerometer FIFO enabled value.
 655:.\mpu6050.c   ****  * When set to 1, this bit enables ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H,
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 45


 656:.\mpu6050.c   ****  * ACCEL_YOUT_L, ACCEL_ZOUT_H, and ACCEL_ZOUT_L (Registers 59 to 64) to be
 657:.\mpu6050.c   ****  * written into the FIFO buffer.
 658:.\mpu6050.c   ****  * @return Current accelerometer FIFO enabled value
 659:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 660:.\mpu6050.c   ****  */
 661:.\mpu6050.c   **** bool MPU6050_getAccelFIFOEnabled() {
 1854              		.loc 1 661 0
 1855              		.cfi_startproc
 1856 0000 80B5     		push	{r7, lr}
 1857              		.cfi_def_cfa_offset 8
 1858              		.cfi_offset 7, -8
 1859              		.cfi_offset 14, -4
 1860 0002 00AF     		add	r7, sp, #0
 1861              		.cfi_def_cfa_register 7
 662:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, buffer);
 1862              		.loc 1 662 0
 1863 0004 074B     		ldr	r3, .L152
 1864 0006 1A78     		ldrb	r2, [r3]
 1865 0008 074B     		ldr	r3, .L152+4
 1866 000a 101C     		mov	r0, r2
 1867 000c 2321     		mov	r1, #35
 1868 000e 0322     		mov	r2, #3
 1869 0010 FFF7FEFF 		bl	I2CReadBit
 663:.\mpu6050.c   ****     return buffer[0];
 1870              		.loc 1 663 0
 1871 0014 044B     		ldr	r3, .L152+4
 1872 0016 1B78     		ldrb	r3, [r3]
 1873 0018 5A1E     		sub	r2, r3, #1
 1874 001a 9341     		sbc	r3, r3, r2
 1875 001c DBB2     		uxtb	r3, r3
 664:.\mpu6050.c   **** }
 1876              		.loc 1 664 0
 1877 001e 181C     		mov	r0, r3
 1878 0020 BD46     		mov	sp, r7
 1879              		@ sp needed
 1880 0022 80BD     		pop	{r7, pc}
 1881              	.L153:
 1882              		.align	2
 1883              	.L152:
 1884 0024 00000000 		.word	devAddr
 1885 0028 00000000 		.word	buffer
 1886              		.cfi_endproc
 1887              	.LFE44:
 1888              		.size	MPU6050_getAccelFIFOEnabled, .-MPU6050_getAccelFIFOEnabled
 1889              		.section	.text.MPU6050_setAccelFIFOEnabled,"ax",%progbits
 1890              		.align	2
 1891              		.global	MPU6050_setAccelFIFOEnabled
 1892              		.code	16
 1893              		.thumb_func
 1894              		.type	MPU6050_setAccelFIFOEnabled, %function
 1895              	MPU6050_setAccelFIFOEnabled:
 1896              	.LFB45:
 665:.\mpu6050.c   **** /** Set accelerometer FIFO enabled value.
 666:.\mpu6050.c   ****  * @param enabled New accelerometer FIFO enabled value
 667:.\mpu6050.c   ****  * @see getAccelFIFOEnabled()
 668:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 669:.\mpu6050.c   ****  */
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 46


 670:.\mpu6050.c   **** void MPU6050_setAccelFIFOEnabled(bool enabled) {
 1897              		.loc 1 670 0
 1898              		.cfi_startproc
 1899 0000 80B5     		push	{r7, lr}
 1900              		.cfi_def_cfa_offset 8
 1901              		.cfi_offset 7, -8
 1902              		.cfi_offset 14, -4
 1903 0002 82B0     		sub	sp, sp, #8
 1904              		.cfi_def_cfa_offset 16
 1905 0004 00AF     		add	r7, sp, #0
 1906              		.cfi_def_cfa_register 7
 1907 0006 021C     		mov	r2, r0
 1908 0008 FB1D     		add	r3, r7, #7
 1909 000a 1A70     		strb	r2, [r3]
 671:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, enabled);
 1910              		.loc 1 671 0
 1911 000c 054B     		ldr	r3, .L155
 1912 000e 1A78     		ldrb	r2, [r3]
 1913 0010 FB1D     		add	r3, r7, #7
 1914 0012 1B78     		ldrb	r3, [r3]
 1915 0014 101C     		mov	r0, r2
 1916 0016 2321     		mov	r1, #35
 1917 0018 0322     		mov	r2, #3
 1918 001a FFF7FEFF 		bl	I2CWriteBit
 672:.\mpu6050.c   **** }
 1919              		.loc 1 672 0
 1920 001e BD46     		mov	sp, r7
 1921 0020 02B0     		add	sp, sp, #8
 1922              		@ sp needed
 1923 0022 80BD     		pop	{r7, pc}
 1924              	.L156:
 1925              		.align	2
 1926              	.L155:
 1927 0024 00000000 		.word	devAddr
 1928              		.cfi_endproc
 1929              	.LFE45:
 1930              		.size	MPU6050_setAccelFIFOEnabled, .-MPU6050_setAccelFIFOEnabled
 1931              		.section	.text.MPU6050_getSlave2FIFOEnabled,"ax",%progbits
 1932              		.align	2
 1933              		.global	MPU6050_getSlave2FIFOEnabled
 1934              		.code	16
 1935              		.thumb_func
 1936              		.type	MPU6050_getSlave2FIFOEnabled, %function
 1937              	MPU6050_getSlave2FIFOEnabled:
 1938              	.LFB46:
 673:.\mpu6050.c   **** /** Get Slave 2 FIFO enabled value.
 674:.\mpu6050.c   ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 675:.\mpu6050.c   ****  * associated with Slave 2 to be written into the FIFO buffer.
 676:.\mpu6050.c   ****  * @return Current Slave 2 FIFO enabled value
 677:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 678:.\mpu6050.c   ****  */
 679:.\mpu6050.c   **** bool MPU6050_getSlave2FIFOEnabled() {
 1939              		.loc 1 679 0
 1940              		.cfi_startproc
 1941 0000 80B5     		push	{r7, lr}
 1942              		.cfi_def_cfa_offset 8
 1943              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 47


 1944              		.cfi_offset 14, -4
 1945 0002 00AF     		add	r7, sp, #0
 1946              		.cfi_def_cfa_register 7
 680:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV2_FIFO_EN_BIT, buffer);
 1947              		.loc 1 680 0
 1948 0004 074B     		ldr	r3, .L159
 1949 0006 1A78     		ldrb	r2, [r3]
 1950 0008 074B     		ldr	r3, .L159+4
 1951 000a 101C     		mov	r0, r2
 1952 000c 2321     		mov	r1, #35
 1953 000e 0222     		mov	r2, #2
 1954 0010 FFF7FEFF 		bl	I2CReadBit
 681:.\mpu6050.c   ****     return buffer[0];
 1955              		.loc 1 681 0
 1956 0014 044B     		ldr	r3, .L159+4
 1957 0016 1B78     		ldrb	r3, [r3]
 1958 0018 5A1E     		sub	r2, r3, #1
 1959 001a 9341     		sbc	r3, r3, r2
 1960 001c DBB2     		uxtb	r3, r3
 682:.\mpu6050.c   **** }
 1961              		.loc 1 682 0
 1962 001e 181C     		mov	r0, r3
 1963 0020 BD46     		mov	sp, r7
 1964              		@ sp needed
 1965 0022 80BD     		pop	{r7, pc}
 1966              	.L160:
 1967              		.align	2
 1968              	.L159:
 1969 0024 00000000 		.word	devAddr
 1970 0028 00000000 		.word	buffer
 1971              		.cfi_endproc
 1972              	.LFE46:
 1973              		.size	MPU6050_getSlave2FIFOEnabled, .-MPU6050_getSlave2FIFOEnabled
 1974              		.section	.text.MPU6050_setSlave2FIFOEnabled,"ax",%progbits
 1975              		.align	2
 1976              		.global	MPU6050_setSlave2FIFOEnabled
 1977              		.code	16
 1978              		.thumb_func
 1979              		.type	MPU6050_setSlave2FIFOEnabled, %function
 1980              	MPU6050_setSlave2FIFOEnabled:
 1981              	.LFB47:
 683:.\mpu6050.c   **** /** Set Slave 2 FIFO enabled value.
 684:.\mpu6050.c   ****  * @param enabled New Slave 2 FIFO enabled value
 685:.\mpu6050.c   ****  * @see getSlave2FIFOEnabled()
 686:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 687:.\mpu6050.c   ****  */
 688:.\mpu6050.c   **** void MPU6050_setSlave2FIFOEnabled(bool enabled) {
 1982              		.loc 1 688 0
 1983              		.cfi_startproc
 1984 0000 80B5     		push	{r7, lr}
 1985              		.cfi_def_cfa_offset 8
 1986              		.cfi_offset 7, -8
 1987              		.cfi_offset 14, -4
 1988 0002 82B0     		sub	sp, sp, #8
 1989              		.cfi_def_cfa_offset 16
 1990 0004 00AF     		add	r7, sp, #0
 1991              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 48


 1992 0006 021C     		mov	r2, r0
 1993 0008 FB1D     		add	r3, r7, #7
 1994 000a 1A70     		strb	r2, [r3]
 689:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV2_FIFO_EN_BIT, enabled);
 1995              		.loc 1 689 0
 1996 000c 054B     		ldr	r3, .L162
 1997 000e 1A78     		ldrb	r2, [r3]
 1998 0010 FB1D     		add	r3, r7, #7
 1999 0012 1B78     		ldrb	r3, [r3]
 2000 0014 101C     		mov	r0, r2
 2001 0016 2321     		mov	r1, #35
 2002 0018 0222     		mov	r2, #2
 2003 001a FFF7FEFF 		bl	I2CWriteBit
 690:.\mpu6050.c   **** }
 2004              		.loc 1 690 0
 2005 001e BD46     		mov	sp, r7
 2006 0020 02B0     		add	sp, sp, #8
 2007              		@ sp needed
 2008 0022 80BD     		pop	{r7, pc}
 2009              	.L163:
 2010              		.align	2
 2011              	.L162:
 2012 0024 00000000 		.word	devAddr
 2013              		.cfi_endproc
 2014              	.LFE47:
 2015              		.size	MPU6050_setSlave2FIFOEnabled, .-MPU6050_setSlave2FIFOEnabled
 2016              		.section	.text.MPU6050_getSlave1FIFOEnabled,"ax",%progbits
 2017              		.align	2
 2018              		.global	MPU6050_getSlave1FIFOEnabled
 2019              		.code	16
 2020              		.thumb_func
 2021              		.type	MPU6050_getSlave1FIFOEnabled, %function
 2022              	MPU6050_getSlave1FIFOEnabled:
 2023              	.LFB48:
 691:.\mpu6050.c   **** /** Get Slave 1 FIFO enabled value.
 692:.\mpu6050.c   ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 693:.\mpu6050.c   ****  * associated with Slave 1 to be written into the FIFO buffer.
 694:.\mpu6050.c   ****  * @return Current Slave 1 FIFO enabled value
 695:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 696:.\mpu6050.c   ****  */
 697:.\mpu6050.c   **** bool MPU6050_getSlave1FIFOEnabled() {
 2024              		.loc 1 697 0
 2025              		.cfi_startproc
 2026 0000 80B5     		push	{r7, lr}
 2027              		.cfi_def_cfa_offset 8
 2028              		.cfi_offset 7, -8
 2029              		.cfi_offset 14, -4
 2030 0002 00AF     		add	r7, sp, #0
 2031              		.cfi_def_cfa_register 7
 698:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV1_FIFO_EN_BIT, buffer);
 2032              		.loc 1 698 0
 2033 0004 074B     		ldr	r3, .L166
 2034 0006 1A78     		ldrb	r2, [r3]
 2035 0008 074B     		ldr	r3, .L166+4
 2036 000a 101C     		mov	r0, r2
 2037 000c 2321     		mov	r1, #35
 2038 000e 0122     		mov	r2, #1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 49


 2039 0010 FFF7FEFF 		bl	I2CReadBit
 699:.\mpu6050.c   ****     return buffer[0];
 2040              		.loc 1 699 0
 2041 0014 044B     		ldr	r3, .L166+4
 2042 0016 1B78     		ldrb	r3, [r3]
 2043 0018 5A1E     		sub	r2, r3, #1
 2044 001a 9341     		sbc	r3, r3, r2
 2045 001c DBB2     		uxtb	r3, r3
 700:.\mpu6050.c   **** }
 2046              		.loc 1 700 0
 2047 001e 181C     		mov	r0, r3
 2048 0020 BD46     		mov	sp, r7
 2049              		@ sp needed
 2050 0022 80BD     		pop	{r7, pc}
 2051              	.L167:
 2052              		.align	2
 2053              	.L166:
 2054 0024 00000000 		.word	devAddr
 2055 0028 00000000 		.word	buffer
 2056              		.cfi_endproc
 2057              	.LFE48:
 2058              		.size	MPU6050_getSlave1FIFOEnabled, .-MPU6050_getSlave1FIFOEnabled
 2059              		.section	.text.MPU6050_setSlave1FIFOEnabled,"ax",%progbits
 2060              		.align	2
 2061              		.global	MPU6050_setSlave1FIFOEnabled
 2062              		.code	16
 2063              		.thumb_func
 2064              		.type	MPU6050_setSlave1FIFOEnabled, %function
 2065              	MPU6050_setSlave1FIFOEnabled:
 2066              	.LFB49:
 701:.\mpu6050.c   **** /** Set Slave 1 FIFO enabled value.
 702:.\mpu6050.c   ****  * @param enabled New Slave 1 FIFO enabled value
 703:.\mpu6050.c   ****  * @see getSlave1FIFOEnabled()
 704:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 705:.\mpu6050.c   ****  */
 706:.\mpu6050.c   **** void MPU6050_setSlave1FIFOEnabled(bool enabled) {
 2067              		.loc 1 706 0
 2068              		.cfi_startproc
 2069 0000 80B5     		push	{r7, lr}
 2070              		.cfi_def_cfa_offset 8
 2071              		.cfi_offset 7, -8
 2072              		.cfi_offset 14, -4
 2073 0002 82B0     		sub	sp, sp, #8
 2074              		.cfi_def_cfa_offset 16
 2075 0004 00AF     		add	r7, sp, #0
 2076              		.cfi_def_cfa_register 7
 2077 0006 021C     		mov	r2, r0
 2078 0008 FB1D     		add	r3, r7, #7
 2079 000a 1A70     		strb	r2, [r3]
 707:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV1_FIFO_EN_BIT, enabled);
 2080              		.loc 1 707 0
 2081 000c 054B     		ldr	r3, .L169
 2082 000e 1A78     		ldrb	r2, [r3]
 2083 0010 FB1D     		add	r3, r7, #7
 2084 0012 1B78     		ldrb	r3, [r3]
 2085 0014 101C     		mov	r0, r2
 2086 0016 2321     		mov	r1, #35
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 50


 2087 0018 0122     		mov	r2, #1
 2088 001a FFF7FEFF 		bl	I2CWriteBit
 708:.\mpu6050.c   **** }
 2089              		.loc 1 708 0
 2090 001e BD46     		mov	sp, r7
 2091 0020 02B0     		add	sp, sp, #8
 2092              		@ sp needed
 2093 0022 80BD     		pop	{r7, pc}
 2094              	.L170:
 2095              		.align	2
 2096              	.L169:
 2097 0024 00000000 		.word	devAddr
 2098              		.cfi_endproc
 2099              	.LFE49:
 2100              		.size	MPU6050_setSlave1FIFOEnabled, .-MPU6050_setSlave1FIFOEnabled
 2101              		.section	.text.MPU6050_getSlave0FIFOEnabled,"ax",%progbits
 2102              		.align	2
 2103              		.global	MPU6050_getSlave0FIFOEnabled
 2104              		.code	16
 2105              		.thumb_func
 2106              		.type	MPU6050_getSlave0FIFOEnabled, %function
 2107              	MPU6050_getSlave0FIFOEnabled:
 2108              	.LFB50:
 709:.\mpu6050.c   **** /** Get Slave 0 FIFO enabled value.
 710:.\mpu6050.c   ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 711:.\mpu6050.c   ****  * associated with Slave 0 to be written into the FIFO buffer.
 712:.\mpu6050.c   ****  * @return Current Slave 0 FIFO enabled value
 713:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 714:.\mpu6050.c   ****  */
 715:.\mpu6050.c   **** bool MPU6050_getSlave0FIFOEnabled() {
 2109              		.loc 1 715 0
 2110              		.cfi_startproc
 2111 0000 80B5     		push	{r7, lr}
 2112              		.cfi_def_cfa_offset 8
 2113              		.cfi_offset 7, -8
 2114              		.cfi_offset 14, -4
 2115 0002 00AF     		add	r7, sp, #0
 2116              		.cfi_def_cfa_register 7
 716:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV0_FIFO_EN_BIT, buffer);
 2117              		.loc 1 716 0
 2118 0004 074B     		ldr	r3, .L173
 2119 0006 1A78     		ldrb	r2, [r3]
 2120 0008 074B     		ldr	r3, .L173+4
 2121 000a 101C     		mov	r0, r2
 2122 000c 2321     		mov	r1, #35
 2123 000e 0022     		mov	r2, #0
 2124 0010 FFF7FEFF 		bl	I2CReadBit
 717:.\mpu6050.c   ****     return buffer[0];
 2125              		.loc 1 717 0
 2126 0014 044B     		ldr	r3, .L173+4
 2127 0016 1B78     		ldrb	r3, [r3]
 2128 0018 5A1E     		sub	r2, r3, #1
 2129 001a 9341     		sbc	r3, r3, r2
 2130 001c DBB2     		uxtb	r3, r3
 718:.\mpu6050.c   **** }
 2131              		.loc 1 718 0
 2132 001e 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 51


 2133 0020 BD46     		mov	sp, r7
 2134              		@ sp needed
 2135 0022 80BD     		pop	{r7, pc}
 2136              	.L174:
 2137              		.align	2
 2138              	.L173:
 2139 0024 00000000 		.word	devAddr
 2140 0028 00000000 		.word	buffer
 2141              		.cfi_endproc
 2142              	.LFE50:
 2143              		.size	MPU6050_getSlave0FIFOEnabled, .-MPU6050_getSlave0FIFOEnabled
 2144              		.section	.text.MPU6050_setSlave0FIFOEnabled,"ax",%progbits
 2145              		.align	2
 2146              		.global	MPU6050_setSlave0FIFOEnabled
 2147              		.code	16
 2148              		.thumb_func
 2149              		.type	MPU6050_setSlave0FIFOEnabled, %function
 2150              	MPU6050_setSlave0FIFOEnabled:
 2151              	.LFB51:
 719:.\mpu6050.c   **** /** Set Slave 0 FIFO enabled value.
 720:.\mpu6050.c   ****  * @param enabled New Slave 0 FIFO enabled value
 721:.\mpu6050.c   ****  * @see getSlave0FIFOEnabled()
 722:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_EN
 723:.\mpu6050.c   ****  */
 724:.\mpu6050.c   **** void MPU6050_setSlave0FIFOEnabled(bool enabled) {
 2152              		.loc 1 724 0
 2153              		.cfi_startproc
 2154 0000 80B5     		push	{r7, lr}
 2155              		.cfi_def_cfa_offset 8
 2156              		.cfi_offset 7, -8
 2157              		.cfi_offset 14, -4
 2158 0002 82B0     		sub	sp, sp, #8
 2159              		.cfi_def_cfa_offset 16
 2160 0004 00AF     		add	r7, sp, #0
 2161              		.cfi_def_cfa_register 7
 2162 0006 021C     		mov	r2, r0
 2163 0008 FB1D     		add	r3, r7, #7
 2164 000a 1A70     		strb	r2, [r3]
 725:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV0_FIFO_EN_BIT, enabled);
 2165              		.loc 1 725 0
 2166 000c 054B     		ldr	r3, .L176
 2167 000e 1A78     		ldrb	r2, [r3]
 2168 0010 FB1D     		add	r3, r7, #7
 2169 0012 1B78     		ldrb	r3, [r3]
 2170 0014 101C     		mov	r0, r2
 2171 0016 2321     		mov	r1, #35
 2172 0018 0022     		mov	r2, #0
 2173 001a FFF7FEFF 		bl	I2CWriteBit
 726:.\mpu6050.c   **** }
 2174              		.loc 1 726 0
 2175 001e BD46     		mov	sp, r7
 2176 0020 02B0     		add	sp, sp, #8
 2177              		@ sp needed
 2178 0022 80BD     		pop	{r7, pc}
 2179              	.L177:
 2180              		.align	2
 2181              	.L176:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 52


 2182 0024 00000000 		.word	devAddr
 2183              		.cfi_endproc
 2184              	.LFE51:
 2185              		.size	MPU6050_setSlave0FIFOEnabled, .-MPU6050_setSlave0FIFOEnabled
 2186              		.section	.text.MPU6050_getMultiMasterEnabled,"ax",%progbits
 2187              		.align	2
 2188              		.global	MPU6050_getMultiMasterEnabled
 2189              		.code	16
 2190              		.thumb_func
 2191              		.type	MPU6050_getMultiMasterEnabled, %function
 2192              	MPU6050_getMultiMasterEnabled:
 2193              	.LFB52:
 727:.\mpu6050.c   **** 
 728:.\mpu6050.c   **** // I2C_MST_CTRL register
 729:.\mpu6050.c   **** 
 730:.\mpu6050.c   **** /** Get multi-master enabled value.
 731:.\mpu6050.c   ****  * Multi-master capability allows multiple I2C masters to operate on the same
 732:.\mpu6050.c   ****  * bus. In circuits where multi-master capability is required, set MULT_MST_EN
 733:.\mpu6050.c   ****  * to 1. This will increase current drawn by approximately 30uA.
 734:.\mpu6050.c   ****  *
 735:.\mpu6050.c   ****  * In circuits where multi-master capability is required, the state of the I2C
 736:.\mpu6050.c   ****  * bus must always be monitored by each separate I2C Master. Before an I2C
 737:.\mpu6050.c   ****  * Master can assume arbitration of the bus, it must first confirm that no other
 738:.\mpu6050.c   ****  * I2C Master has arbitration of the bus. When MULT_MST_EN is set to 1, the
 739:.\mpu6050.c   ****  * MPU-60X0's bus arbitration detection logic is turned on, enabling it to
 740:.\mpu6050.c   ****  * detect when the bus is available.
 741:.\mpu6050.c   ****  *
 742:.\mpu6050.c   ****  * @return Current multi-master enabled value
 743:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 744:.\mpu6050.c   ****  */
 745:.\mpu6050.c   **** bool MPU6050_getMultiMasterEnabled() {
 2194              		.loc 1 745 0
 2195              		.cfi_startproc
 2196 0000 80B5     		push	{r7, lr}
 2197              		.cfi_def_cfa_offset 8
 2198              		.cfi_offset 7, -8
 2199              		.cfi_offset 14, -4
 2200 0002 00AF     		add	r7, sp, #0
 2201              		.cfi_def_cfa_register 7
 746:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_MULT_MST_EN_BIT, buffer);
 2202              		.loc 1 746 0
 2203 0004 074B     		ldr	r3, .L180
 2204 0006 1A78     		ldrb	r2, [r3]
 2205 0008 074B     		ldr	r3, .L180+4
 2206 000a 101C     		mov	r0, r2
 2207 000c 2421     		mov	r1, #36
 2208 000e 0722     		mov	r2, #7
 2209 0010 FFF7FEFF 		bl	I2CReadBit
 747:.\mpu6050.c   ****     return buffer[0];
 2210              		.loc 1 747 0
 2211 0014 044B     		ldr	r3, .L180+4
 2212 0016 1B78     		ldrb	r3, [r3]
 2213 0018 5A1E     		sub	r2, r3, #1
 2214 001a 9341     		sbc	r3, r3, r2
 2215 001c DBB2     		uxtb	r3, r3
 748:.\mpu6050.c   **** }
 2216              		.loc 1 748 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 53


 2217 001e 181C     		mov	r0, r3
 2218 0020 BD46     		mov	sp, r7
 2219              		@ sp needed
 2220 0022 80BD     		pop	{r7, pc}
 2221              	.L181:
 2222              		.align	2
 2223              	.L180:
 2224 0024 00000000 		.word	devAddr
 2225 0028 00000000 		.word	buffer
 2226              		.cfi_endproc
 2227              	.LFE52:
 2228              		.size	MPU6050_getMultiMasterEnabled, .-MPU6050_getMultiMasterEnabled
 2229              		.section	.text.MPU6050_setMultiMasterEnabled,"ax",%progbits
 2230              		.align	2
 2231              		.global	MPU6050_setMultiMasterEnabled
 2232              		.code	16
 2233              		.thumb_func
 2234              		.type	MPU6050_setMultiMasterEnabled, %function
 2235              	MPU6050_setMultiMasterEnabled:
 2236              	.LFB53:
 749:.\mpu6050.c   **** /** Set multi-master enabled value.
 750:.\mpu6050.c   ****  * @param enabled New multi-master enabled value
 751:.\mpu6050.c   ****  * @see getMultiMasterEnabled()
 752:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 753:.\mpu6050.c   ****  */
 754:.\mpu6050.c   **** void MPU6050_setMultiMasterEnabled(bool enabled) {
 2237              		.loc 1 754 0
 2238              		.cfi_startproc
 2239 0000 80B5     		push	{r7, lr}
 2240              		.cfi_def_cfa_offset 8
 2241              		.cfi_offset 7, -8
 2242              		.cfi_offset 14, -4
 2243 0002 82B0     		sub	sp, sp, #8
 2244              		.cfi_def_cfa_offset 16
 2245 0004 00AF     		add	r7, sp, #0
 2246              		.cfi_def_cfa_register 7
 2247 0006 021C     		mov	r2, r0
 2248 0008 FB1D     		add	r3, r7, #7
 2249 000a 1A70     		strb	r2, [r3]
 755:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_MULT_MST_EN_BIT, enabled);
 2250              		.loc 1 755 0
 2251 000c 054B     		ldr	r3, .L183
 2252 000e 1A78     		ldrb	r2, [r3]
 2253 0010 FB1D     		add	r3, r7, #7
 2254 0012 1B78     		ldrb	r3, [r3]
 2255 0014 101C     		mov	r0, r2
 2256 0016 2421     		mov	r1, #36
 2257 0018 0722     		mov	r2, #7
 2258 001a FFF7FEFF 		bl	I2CWriteBit
 756:.\mpu6050.c   **** }
 2259              		.loc 1 756 0
 2260 001e BD46     		mov	sp, r7
 2261 0020 02B0     		add	sp, sp, #8
 2262              		@ sp needed
 2263 0022 80BD     		pop	{r7, pc}
 2264              	.L184:
 2265              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 54


 2266              	.L183:
 2267 0024 00000000 		.word	devAddr
 2268              		.cfi_endproc
 2269              	.LFE53:
 2270              		.size	MPU6050_setMultiMasterEnabled, .-MPU6050_setMultiMasterEnabled
 2271              		.section	.text.MPU6050_getWaitForExternalSensorEnabled,"ax",%progbits
 2272              		.align	2
 2273              		.global	MPU6050_getWaitForExternalSensorEnabled
 2274              		.code	16
 2275              		.thumb_func
 2276              		.type	MPU6050_getWaitForExternalSensorEnabled, %function
 2277              	MPU6050_getWaitForExternalSensorEnabled:
 2278              	.LFB54:
 757:.\mpu6050.c   **** /** Get wait-for-external-sensor-data enabled value.
 758:.\mpu6050.c   ****  * When the WAIT_FOR_ES bit is set to 1, the Data Ready interrupt will be
 759:.\mpu6050.c   ****  * delayed until External Sensor data from the Slave Devices are loaded into the
 760:.\mpu6050.c   ****  * EXT_SENS_DATA registers. This is used to ensure that both the internal sensor
 761:.\mpu6050.c   ****  * data (i.e. from gyro and accel) and external sensor data have been loaded to
 762:.\mpu6050.c   ****  * their respective data registers (i.e. the data is synced) when the Data Ready
 763:.\mpu6050.c   ****  * interrupt is triggered.
 764:.\mpu6050.c   ****  *
 765:.\mpu6050.c   ****  * @return Current wait-for-external-sensor-data enabled value
 766:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 767:.\mpu6050.c   ****  */
 768:.\mpu6050.c   **** bool MPU6050_getWaitForExternalSensorEnabled() {
 2279              		.loc 1 768 0
 2280              		.cfi_startproc
 2281 0000 80B5     		push	{r7, lr}
 2282              		.cfi_def_cfa_offset 8
 2283              		.cfi_offset 7, -8
 2284              		.cfi_offset 14, -4
 2285 0002 00AF     		add	r7, sp, #0
 2286              		.cfi_def_cfa_register 7
 769:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_WAIT_FOR_ES_BIT, buffer);
 2287              		.loc 1 769 0
 2288 0004 074B     		ldr	r3, .L187
 2289 0006 1A78     		ldrb	r2, [r3]
 2290 0008 074B     		ldr	r3, .L187+4
 2291 000a 101C     		mov	r0, r2
 2292 000c 2421     		mov	r1, #36
 2293 000e 0622     		mov	r2, #6
 2294 0010 FFF7FEFF 		bl	I2CReadBit
 770:.\mpu6050.c   ****     return buffer[0];
 2295              		.loc 1 770 0
 2296 0014 044B     		ldr	r3, .L187+4
 2297 0016 1B78     		ldrb	r3, [r3]
 2298 0018 5A1E     		sub	r2, r3, #1
 2299 001a 9341     		sbc	r3, r3, r2
 2300 001c DBB2     		uxtb	r3, r3
 771:.\mpu6050.c   **** }
 2301              		.loc 1 771 0
 2302 001e 181C     		mov	r0, r3
 2303 0020 BD46     		mov	sp, r7
 2304              		@ sp needed
 2305 0022 80BD     		pop	{r7, pc}
 2306              	.L188:
 2307              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 55


 2308              	.L187:
 2309 0024 00000000 		.word	devAddr
 2310 0028 00000000 		.word	buffer
 2311              		.cfi_endproc
 2312              	.LFE54:
 2313              		.size	MPU6050_getWaitForExternalSensorEnabled, .-MPU6050_getWaitForExternalSensorEnabled
 2314              		.section	.text.MPU6050_setWaitForExternalSensorEnabled,"ax",%progbits
 2315              		.align	2
 2316              		.global	MPU6050_setWaitForExternalSensorEnabled
 2317              		.code	16
 2318              		.thumb_func
 2319              		.type	MPU6050_setWaitForExternalSensorEnabled, %function
 2320              	MPU6050_setWaitForExternalSensorEnabled:
 2321              	.LFB55:
 772:.\mpu6050.c   **** /** Set wait-for-external-sensor-data enabled value.
 773:.\mpu6050.c   ****  * @param enabled New wait-for-external-sensor-data enabled value
 774:.\mpu6050.c   ****  * @see getWaitForExternalSensorEnabled()
 775:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 776:.\mpu6050.c   ****  */
 777:.\mpu6050.c   **** void MPU6050_setWaitForExternalSensorEnabled(bool enabled) {
 2322              		.loc 1 777 0
 2323              		.cfi_startproc
 2324 0000 80B5     		push	{r7, lr}
 2325              		.cfi_def_cfa_offset 8
 2326              		.cfi_offset 7, -8
 2327              		.cfi_offset 14, -4
 2328 0002 82B0     		sub	sp, sp, #8
 2329              		.cfi_def_cfa_offset 16
 2330 0004 00AF     		add	r7, sp, #0
 2331              		.cfi_def_cfa_register 7
 2332 0006 021C     		mov	r2, r0
 2333 0008 FB1D     		add	r3, r7, #7
 2334 000a 1A70     		strb	r2, [r3]
 778:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_WAIT_FOR_ES_BIT, enabled);
 2335              		.loc 1 778 0
 2336 000c 054B     		ldr	r3, .L190
 2337 000e 1A78     		ldrb	r2, [r3]
 2338 0010 FB1D     		add	r3, r7, #7
 2339 0012 1B78     		ldrb	r3, [r3]
 2340 0014 101C     		mov	r0, r2
 2341 0016 2421     		mov	r1, #36
 2342 0018 0622     		mov	r2, #6
 2343 001a FFF7FEFF 		bl	I2CWriteBit
 779:.\mpu6050.c   **** }
 2344              		.loc 1 779 0
 2345 001e BD46     		mov	sp, r7
 2346 0020 02B0     		add	sp, sp, #8
 2347              		@ sp needed
 2348 0022 80BD     		pop	{r7, pc}
 2349              	.L191:
 2350              		.align	2
 2351              	.L190:
 2352 0024 00000000 		.word	devAddr
 2353              		.cfi_endproc
 2354              	.LFE55:
 2355              		.size	MPU6050_setWaitForExternalSensorEnabled, .-MPU6050_setWaitForExternalSensorEnabled
 2356              		.section	.text.MPU6050_getSlave3FIFOEnabled,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 56


 2357              		.align	2
 2358              		.global	MPU6050_getSlave3FIFOEnabled
 2359              		.code	16
 2360              		.thumb_func
 2361              		.type	MPU6050_getSlave3FIFOEnabled, %function
 2362              	MPU6050_getSlave3FIFOEnabled:
 2363              	.LFB56:
 780:.\mpu6050.c   **** /** Get Slave 3 FIFO enabled value.
 781:.\mpu6050.c   ****  * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)
 782:.\mpu6050.c   ****  * associated with Slave 3 to be written into the FIFO buffer.
 783:.\mpu6050.c   ****  * @return Current Slave 3 FIFO enabled value
 784:.\mpu6050.c   ****  * @see MPU6050_RA_MST_CTRL
 785:.\mpu6050.c   ****  */
 786:.\mpu6050.c   **** bool MPU6050_getSlave3FIFOEnabled() {
 2364              		.loc 1 786 0
 2365              		.cfi_startproc
 2366 0000 80B5     		push	{r7, lr}
 2367              		.cfi_def_cfa_offset 8
 2368              		.cfi_offset 7, -8
 2369              		.cfi_offset 14, -4
 2370 0002 00AF     		add	r7, sp, #0
 2371              		.cfi_def_cfa_register 7
 787:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_SLV_3_FIFO_EN_BIT, buffer);
 2372              		.loc 1 787 0
 2373 0004 074B     		ldr	r3, .L194
 2374 0006 1A78     		ldrb	r2, [r3]
 2375 0008 074B     		ldr	r3, .L194+4
 2376 000a 101C     		mov	r0, r2
 2377 000c 2421     		mov	r1, #36
 2378 000e 0522     		mov	r2, #5
 2379 0010 FFF7FEFF 		bl	I2CReadBit
 788:.\mpu6050.c   ****     return buffer[0];
 2380              		.loc 1 788 0
 2381 0014 044B     		ldr	r3, .L194+4
 2382 0016 1B78     		ldrb	r3, [r3]
 2383 0018 5A1E     		sub	r2, r3, #1
 2384 001a 9341     		sbc	r3, r3, r2
 2385 001c DBB2     		uxtb	r3, r3
 789:.\mpu6050.c   **** }
 2386              		.loc 1 789 0
 2387 001e 181C     		mov	r0, r3
 2388 0020 BD46     		mov	sp, r7
 2389              		@ sp needed
 2390 0022 80BD     		pop	{r7, pc}
 2391              	.L195:
 2392              		.align	2
 2393              	.L194:
 2394 0024 00000000 		.word	devAddr
 2395 0028 00000000 		.word	buffer
 2396              		.cfi_endproc
 2397              	.LFE56:
 2398              		.size	MPU6050_getSlave3FIFOEnabled, .-MPU6050_getSlave3FIFOEnabled
 2399              		.section	.text.MPU6050_setSlave3FIFOEnabled,"ax",%progbits
 2400              		.align	2
 2401              		.global	MPU6050_setSlave3FIFOEnabled
 2402              		.code	16
 2403              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 57


 2404              		.type	MPU6050_setSlave3FIFOEnabled, %function
 2405              	MPU6050_setSlave3FIFOEnabled:
 2406              	.LFB57:
 790:.\mpu6050.c   **** /** Set Slave 3 FIFO enabled value.
 791:.\mpu6050.c   ****  * @param enabled New Slave 3 FIFO enabled value
 792:.\mpu6050.c   ****  * @see getSlave3FIFOEnabled()
 793:.\mpu6050.c   ****  * @see MPU6050_RA_MST_CTRL
 794:.\mpu6050.c   ****  */
 795:.\mpu6050.c   **** void MPU6050_setSlave3FIFOEnabled(bool enabled) {
 2407              		.loc 1 795 0
 2408              		.cfi_startproc
 2409 0000 80B5     		push	{r7, lr}
 2410              		.cfi_def_cfa_offset 8
 2411              		.cfi_offset 7, -8
 2412              		.cfi_offset 14, -4
 2413 0002 82B0     		sub	sp, sp, #8
 2414              		.cfi_def_cfa_offset 16
 2415 0004 00AF     		add	r7, sp, #0
 2416              		.cfi_def_cfa_register 7
 2417 0006 021C     		mov	r2, r0
 2418 0008 FB1D     		add	r3, r7, #7
 2419 000a 1A70     		strb	r2, [r3]
 796:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_SLV_3_FIFO_EN_BIT, enabled);
 2420              		.loc 1 796 0
 2421 000c 054B     		ldr	r3, .L197
 2422 000e 1A78     		ldrb	r2, [r3]
 2423 0010 FB1D     		add	r3, r7, #7
 2424 0012 1B78     		ldrb	r3, [r3]
 2425 0014 101C     		mov	r0, r2
 2426 0016 2421     		mov	r1, #36
 2427 0018 0522     		mov	r2, #5
 2428 001a FFF7FEFF 		bl	I2CWriteBit
 797:.\mpu6050.c   **** }
 2429              		.loc 1 797 0
 2430 001e BD46     		mov	sp, r7
 2431 0020 02B0     		add	sp, sp, #8
 2432              		@ sp needed
 2433 0022 80BD     		pop	{r7, pc}
 2434              	.L198:
 2435              		.align	2
 2436              	.L197:
 2437 0024 00000000 		.word	devAddr
 2438              		.cfi_endproc
 2439              	.LFE57:
 2440              		.size	MPU6050_setSlave3FIFOEnabled, .-MPU6050_setSlave3FIFOEnabled
 2441              		.section	.text.MPU6050_getSlaveReadWriteTransitionEnabled,"ax",%progbits
 2442              		.align	2
 2443              		.global	MPU6050_getSlaveReadWriteTransitionEnabled
 2444              		.code	16
 2445              		.thumb_func
 2446              		.type	MPU6050_getSlaveReadWriteTransitionEnabled, %function
 2447              	MPU6050_getSlaveReadWriteTransitionEnabled:
 2448              	.LFB58:
 798:.\mpu6050.c   **** /** Get slave read/write transition enabled value.
 799:.\mpu6050.c   ****  * The I2C_MST_P_NSR bit configures the I2C Master's transition from one slave
 800:.\mpu6050.c   ****  * read to the next slave read. If the bit equals 0, there will be a restart
 801:.\mpu6050.c   ****  * between reads. If the bit equals 1, there will be a stop followed by a start
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 58


 802:.\mpu6050.c   ****  * of the following read. When a write transaction follows a read transaction,
 803:.\mpu6050.c   ****  * the stop followed by a start of the successive write will be always used.
 804:.\mpu6050.c   ****  *
 805:.\mpu6050.c   ****  * @return Current slave read/write transition enabled value
 806:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 807:.\mpu6050.c   ****  */
 808:.\mpu6050.c   **** bool MPU6050_getSlaveReadWriteTransitionEnabled() {
 2449              		.loc 1 808 0
 2450              		.cfi_startproc
 2451 0000 80B5     		push	{r7, lr}
 2452              		.cfi_def_cfa_offset 8
 2453              		.cfi_offset 7, -8
 2454              		.cfi_offset 14, -4
 2455 0002 00AF     		add	r7, sp, #0
 2456              		.cfi_def_cfa_register 7
 809:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_P_NSR_BIT, buffer);
 2457              		.loc 1 809 0
 2458 0004 074B     		ldr	r3, .L201
 2459 0006 1A78     		ldrb	r2, [r3]
 2460 0008 074B     		ldr	r3, .L201+4
 2461 000a 101C     		mov	r0, r2
 2462 000c 2421     		mov	r1, #36
 2463 000e 0422     		mov	r2, #4
 2464 0010 FFF7FEFF 		bl	I2CReadBit
 810:.\mpu6050.c   ****     return buffer[0];
 2465              		.loc 1 810 0
 2466 0014 044B     		ldr	r3, .L201+4
 2467 0016 1B78     		ldrb	r3, [r3]
 2468 0018 5A1E     		sub	r2, r3, #1
 2469 001a 9341     		sbc	r3, r3, r2
 2470 001c DBB2     		uxtb	r3, r3
 811:.\mpu6050.c   **** }
 2471              		.loc 1 811 0
 2472 001e 181C     		mov	r0, r3
 2473 0020 BD46     		mov	sp, r7
 2474              		@ sp needed
 2475 0022 80BD     		pop	{r7, pc}
 2476              	.L202:
 2477              		.align	2
 2478              	.L201:
 2479 0024 00000000 		.word	devAddr
 2480 0028 00000000 		.word	buffer
 2481              		.cfi_endproc
 2482              	.LFE58:
 2483              		.size	MPU6050_getSlaveReadWriteTransitionEnabled, .-MPU6050_getSlaveReadWriteTransitionEnabled
 2484              		.section	.text.MPU6050_setSlaveReadWriteTransitionEnabled,"ax",%progbits
 2485              		.align	2
 2486              		.global	MPU6050_setSlaveReadWriteTransitionEnabled
 2487              		.code	16
 2488              		.thumb_func
 2489              		.type	MPU6050_setSlaveReadWriteTransitionEnabled, %function
 2490              	MPU6050_setSlaveReadWriteTransitionEnabled:
 2491              	.LFB59:
 812:.\mpu6050.c   **** /** Set slave read/write transition enabled value.
 813:.\mpu6050.c   ****  * @param enabled New slave read/write transition enabled value
 814:.\mpu6050.c   ****  * @see getSlaveReadWriteTransitionEnabled()
 815:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 59


 816:.\mpu6050.c   ****  */
 817:.\mpu6050.c   **** void MPU6050_setSlaveReadWriteTransitionEnabled(bool enabled) {
 2492              		.loc 1 817 0
 2493              		.cfi_startproc
 2494 0000 80B5     		push	{r7, lr}
 2495              		.cfi_def_cfa_offset 8
 2496              		.cfi_offset 7, -8
 2497              		.cfi_offset 14, -4
 2498 0002 82B0     		sub	sp, sp, #8
 2499              		.cfi_def_cfa_offset 16
 2500 0004 00AF     		add	r7, sp, #0
 2501              		.cfi_def_cfa_register 7
 2502 0006 021C     		mov	r2, r0
 2503 0008 FB1D     		add	r3, r7, #7
 2504 000a 1A70     		strb	r2, [r3]
 818:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_P_NSR_BIT, enabled);
 2505              		.loc 1 818 0
 2506 000c 054B     		ldr	r3, .L204
 2507 000e 1A78     		ldrb	r2, [r3]
 2508 0010 FB1D     		add	r3, r7, #7
 2509 0012 1B78     		ldrb	r3, [r3]
 2510 0014 101C     		mov	r0, r2
 2511 0016 2421     		mov	r1, #36
 2512 0018 0422     		mov	r2, #4
 2513 001a FFF7FEFF 		bl	I2CWriteBit
 819:.\mpu6050.c   **** }
 2514              		.loc 1 819 0
 2515 001e BD46     		mov	sp, r7
 2516 0020 02B0     		add	sp, sp, #8
 2517              		@ sp needed
 2518 0022 80BD     		pop	{r7, pc}
 2519              	.L205:
 2520              		.align	2
 2521              	.L204:
 2522 0024 00000000 		.word	devAddr
 2523              		.cfi_endproc
 2524              	.LFE59:
 2525              		.size	MPU6050_setSlaveReadWriteTransitionEnabled, .-MPU6050_setSlaveReadWriteTransitionEnabled
 2526              		.section	.text.MPU6050_getMasterClockSpeed,"ax",%progbits
 2527              		.align	2
 2528              		.global	MPU6050_getMasterClockSpeed
 2529              		.code	16
 2530              		.thumb_func
 2531              		.type	MPU6050_getMasterClockSpeed, %function
 2532              	MPU6050_getMasterClockSpeed:
 2533              	.LFB60:
 820:.\mpu6050.c   **** /** Get I2C master clock speed.
 821:.\mpu6050.c   ****  * I2C_MST_CLK is a 4 bit unsigned value which configures a divider on the
 822:.\mpu6050.c   ****  * MPU-60X0 internal 8MHz clock. It sets the I2C master clock speed according to
 823:.\mpu6050.c   ****  * the following table:
 824:.\mpu6050.c   ****  *
 825:.\mpu6050.c   ****  * <pre>
 826:.\mpu6050.c   ****  * I2C_MST_CLK | I2C Master Clock Speed | 8MHz Clock Divider
 827:.\mpu6050.c   ****  * ------------+------------------------+-------------------
 828:.\mpu6050.c   ****  * 0           | 348kHz                 | 23
 829:.\mpu6050.c   ****  * 1           | 333kHz                 | 24
 830:.\mpu6050.c   ****  * 2           | 320kHz                 | 25
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 60


 831:.\mpu6050.c   ****  * 3           | 308kHz                 | 26
 832:.\mpu6050.c   ****  * 4           | 296kHz                 | 27
 833:.\mpu6050.c   ****  * 5           | 286kHz                 | 28
 834:.\mpu6050.c   ****  * 6           | 276kHz                 | 29
 835:.\mpu6050.c   ****  * 7           | 267kHz                 | 30
 836:.\mpu6050.c   ****  * 8           | 258kHz                 | 31
 837:.\mpu6050.c   ****  * 9           | 500kHz                 | 16
 838:.\mpu6050.c   ****  * 10          | 471kHz                 | 17
 839:.\mpu6050.c   ****  * 11          | 444kHz                 | 18
 840:.\mpu6050.c   ****  * 12          | 421kHz                 | 19
 841:.\mpu6050.c   ****  * 13          | 400kHz                 | 20
 842:.\mpu6050.c   ****  * 14          | 381kHz                 | 21
 843:.\mpu6050.c   ****  * 15          | 364kHz                 | 22
 844:.\mpu6050.c   ****  * </pre>
 845:.\mpu6050.c   ****  *
 846:.\mpu6050.c   ****  * @return Current I2C master clock speed
 847:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 848:.\mpu6050.c   ****  */
 849:.\mpu6050.c   **** uint8_t MPU6050_getMasterClockSpeed() {
 2534              		.loc 1 849 0
 2535              		.cfi_startproc
 2536 0000 80B5     		push	{r7, lr}
 2537              		.cfi_def_cfa_offset 8
 2538              		.cfi_offset 7, -8
 2539              		.cfi_offset 14, -4
 2540 0002 82B0     		sub	sp, sp, #8
 2541              		.cfi_def_cfa_offset 16
 2542 0004 02AF     		add	r7, sp, #8
 2543              		.cfi_def_cfa 7, 8
 850:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_CLK_BIT, I2C_MPU6050_I2C_MST_
 2544              		.loc 1 850 0
 2545 0006 074B     		ldr	r3, .L208
 2546 0008 1B78     		ldrb	r3, [r3]
 2547 000a 074A     		ldr	r2, .L208+4
 2548 000c 0092     		str	r2, [sp]
 2549 000e 181C     		mov	r0, r3
 2550 0010 2421     		mov	r1, #36
 2551 0012 0322     		mov	r2, #3
 2552 0014 0423     		mov	r3, #4
 2553 0016 FFF7FEFF 		bl	I2CReadBits
 851:.\mpu6050.c   ****     return buffer[0];
 2554              		.loc 1 851 0
 2555 001a 034B     		ldr	r3, .L208+4
 2556 001c 1B78     		ldrb	r3, [r3]
 852:.\mpu6050.c   **** }
 2557              		.loc 1 852 0
 2558 001e 181C     		mov	r0, r3
 2559 0020 BD46     		mov	sp, r7
 2560              		@ sp needed
 2561 0022 80BD     		pop	{r7, pc}
 2562              	.L209:
 2563              		.align	2
 2564              	.L208:
 2565 0024 00000000 		.word	devAddr
 2566 0028 00000000 		.word	buffer
 2567              		.cfi_endproc
 2568              	.LFE60:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 61


 2569              		.size	MPU6050_getMasterClockSpeed, .-MPU6050_getMasterClockSpeed
 2570              		.section	.text.MPU6050_setMasterClockSpeed,"ax",%progbits
 2571              		.align	2
 2572              		.global	MPU6050_setMasterClockSpeed
 2573              		.code	16
 2574              		.thumb_func
 2575              		.type	MPU6050_setMasterClockSpeed, %function
 2576              	MPU6050_setMasterClockSpeed:
 2577              	.LFB61:
 853:.\mpu6050.c   **** /** Set I2C master clock speed.
 854:.\mpu6050.c   ****  * @reparam speed Current I2C master clock speed
 855:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_CTRL
 856:.\mpu6050.c   ****  */
 857:.\mpu6050.c   **** void MPU6050_setMasterClockSpeed(uint8_t speed) {
 2578              		.loc 1 857 0
 2579              		.cfi_startproc
 2580 0000 80B5     		push	{r7, lr}
 2581              		.cfi_def_cfa_offset 8
 2582              		.cfi_offset 7, -8
 2583              		.cfi_offset 14, -4
 2584 0002 84B0     		sub	sp, sp, #16
 2585              		.cfi_def_cfa_offset 24
 2586 0004 02AF     		add	r7, sp, #8
 2587              		.cfi_def_cfa 7, 16
 2588 0006 021C     		mov	r2, r0
 2589 0008 FB1D     		add	r3, r7, #7
 2590 000a 1A70     		strb	r2, [r3]
 858:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_I2C_MST_CTRL, I2C_MPU6050_I2C_MST_CLK_BIT, I2C_MPU6050_I2C_MST
 2591              		.loc 1 858 0
 2592 000c 064B     		ldr	r3, .L211
 2593 000e 1B78     		ldrb	r3, [r3]
 2594 0010 FA1D     		add	r2, r7, #7
 2595 0012 1278     		ldrb	r2, [r2]
 2596 0014 0092     		str	r2, [sp]
 2597 0016 181C     		mov	r0, r3
 2598 0018 2421     		mov	r1, #36
 2599 001a 0322     		mov	r2, #3
 2600 001c 0423     		mov	r3, #4
 2601 001e FFF7FEFF 		bl	I2CWriteBits
 859:.\mpu6050.c   **** }
 2602              		.loc 1 859 0
 2603 0022 BD46     		mov	sp, r7
 2604 0024 02B0     		add	sp, sp, #8
 2605              		@ sp needed
 2606 0026 80BD     		pop	{r7, pc}
 2607              	.L212:
 2608              		.align	2
 2609              	.L211:
 2610 0028 00000000 		.word	devAddr
 2611              		.cfi_endproc
 2612              	.LFE61:
 2613              		.size	MPU6050_setMasterClockSpeed, .-MPU6050_setMasterClockSpeed
 2614              		.section	.text.MPU6050_getSlaveAddress,"ax",%progbits
 2615              		.align	2
 2616              		.global	MPU6050_getSlaveAddress
 2617              		.code	16
 2618              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 62


 2619              		.type	MPU6050_getSlaveAddress, %function
 2620              	MPU6050_getSlaveAddress:
 2621              	.LFB62:
 860:.\mpu6050.c   **** 
 861:.\mpu6050.c   **** // I2C_SLV* registers (Slave 0-3)
 862:.\mpu6050.c   **** 
 863:.\mpu6050.c   **** /** Get the I2C address of the specified slave (0-3).
 864:.\mpu6050.c   ****  * Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it's a read
 865:.\mpu6050.c   ****  * operation, and if it is cleared, then it's a write operation. The remaining
 866:.\mpu6050.c   ****  * bits (6-0) are the 7-bit device address of the slave device.
 867:.\mpu6050.c   ****  *
 868:.\mpu6050.c   ****  * In read mode, the result of the read is placed in the lowest available 
 869:.\mpu6050.c   ****  * EXT_SENS_DATA register. For further information regarding the allocation of
 870:.\mpu6050.c   ****  * read results, please refer to the EXT_SENS_DATA register description
 871:.\mpu6050.c   ****  * (Registers 73 - 96).
 872:.\mpu6050.c   ****  *
 873:.\mpu6050.c   ****  * The MPU-6050 supports a total of five slaves, but Slave 4 has unique
 874:.\mpu6050.c   ****  * characteristics, and so it has its own functions (getSlave4* and setSlave4*).
 875:.\mpu6050.c   ****  *
 876:.\mpu6050.c   ****  * I2C data transactions are performed at the Sample Rate, as defined in
 877:.\mpu6050.c   ****  * Register 25. The user is responsible for ensuring that I2C data transactions
 878:.\mpu6050.c   ****  * to and from each enabled Slave can be completed within a single period of the
 879:.\mpu6050.c   ****  * Sample Rate.
 880:.\mpu6050.c   ****  *
 881:.\mpu6050.c   ****  * The I2C slave access rate can be reduced relative to the Sample Rate. This
 882:.\mpu6050.c   ****  * reduced access rate is determined by I2C_MST_DLY (Register 52). Whether a
 883:.\mpu6050.c   ****  * slave's access rate is reduced relative to the Sample Rate is determined by
 884:.\mpu6050.c   ****  * I2C_MST_DELAY_CTRL (Register 103).
 885:.\mpu6050.c   ****  *
 886:.\mpu6050.c   ****  * The processing order for the slaves is fixed. The sequence followed for
 887:.\mpu6050.c   ****  * processing the slaves is Slave 0, Slave 1, Slave 2, Slave 3 and Slave 4. If a
 888:.\mpu6050.c   ****  * particular Slave is disabled it will be skipped.
 889:.\mpu6050.c   ****  *
 890:.\mpu6050.c   ****  * Each slave can either be accessed at the sample rate or at a reduced sample
 891:.\mpu6050.c   ****  * rate. In a case where some slaves are accessed at the Sample Rate and some
 892:.\mpu6050.c   ****  * slaves are accessed at the reduced rate, the sequence of accessing the slaves
 893:.\mpu6050.c   ****  * (Slave 0 to Slave 4) is still followed. However, the reduced rate slaves will
 894:.\mpu6050.c   ****  * be skipped if their access rate dictates that they should not be accessed
 895:.\mpu6050.c   ****  * during that particular cycle. For further information regarding the reduced
 896:.\mpu6050.c   ****  * access rate, please refer to Register 52. Whether a slave is accessed at the
 897:.\mpu6050.c   ****  * Sample Rate or at the reduced rate is determined by the Delay Enable bits in
 898:.\mpu6050.c   ****  * Register 103.
 899:.\mpu6050.c   ****  *
 900:.\mpu6050.c   ****  * @param num Slave number (0-3)
 901:.\mpu6050.c   ****  * @return Current address for specified slave
 902:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_ADDR
 903:.\mpu6050.c   ****  */
 904:.\mpu6050.c   **** uint8_t MPU6050_getSlaveAddress(uint8_t num) {
 2622              		.loc 1 904 0
 2623              		.cfi_startproc
 2624 0000 80B5     		push	{r7, lr}
 2625              		.cfi_def_cfa_offset 8
 2626              		.cfi_offset 7, -8
 2627              		.cfi_offset 14, -4
 2628 0002 82B0     		sub	sp, sp, #8
 2629              		.cfi_def_cfa_offset 16
 2630 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 63


 2631              		.cfi_def_cfa_register 7
 2632 0006 021C     		mov	r2, r0
 2633 0008 FB1D     		add	r3, r7, #7
 2634 000a 1A70     		strb	r2, [r3]
 905:.\mpu6050.c   ****     if (num > 3) return 0;
 2635              		.loc 1 905 0
 2636 000c FB1D     		add	r3, r7, #7
 2637 000e 1B78     		ldrb	r3, [r3]
 2638 0010 032B     		cmp	r3, #3
 2639 0012 01D9     		bls	.L214
 2640              		.loc 1 905 0 is_stmt 0 discriminator 1
 2641 0014 0023     		mov	r3, #0
 2642 0016 11E0     		b	.L215
 2643              	.L214:
 906:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, buffer);
 2644              		.loc 1 906 0 is_stmt 1
 2645 0018 0A4B     		ldr	r3, .L216
 2646 001a 1978     		ldrb	r1, [r3]
 2647 001c FB1D     		add	r3, r7, #7
 2648 001e 1B78     		ldrb	r3, [r3]
 2649 0020 1A1C     		add	r2, r3, #0
 2650 0022 9218     		add	r2, r2, r2
 2651 0024 D318     		add	r3, r2, r3
 2652 0026 DBB2     		uxtb	r3, r3
 2653 0028 2533     		add	r3, r3, #37
 2654 002a DAB2     		uxtb	r2, r3
 2655 002c 064B     		ldr	r3, .L216+4
 2656 002e 081C     		mov	r0, r1
 2657 0030 111C     		mov	r1, r2
 2658 0032 1A1C     		mov	r2, r3
 2659 0034 FFF7FEFF 		bl	I2CReadByte
 907:.\mpu6050.c   ****     return buffer[0];
 2660              		.loc 1 907 0
 2661 0038 034B     		ldr	r3, .L216+4
 2662 003a 1B78     		ldrb	r3, [r3]
 2663              	.L215:
 908:.\mpu6050.c   **** }
 2664              		.loc 1 908 0
 2665 003c 181C     		mov	r0, r3
 2666 003e BD46     		mov	sp, r7
 2667 0040 02B0     		add	sp, sp, #8
 2668              		@ sp needed
 2669 0042 80BD     		pop	{r7, pc}
 2670              	.L217:
 2671              		.align	2
 2672              	.L216:
 2673 0044 00000000 		.word	devAddr
 2674 0048 00000000 		.word	buffer
 2675              		.cfi_endproc
 2676              	.LFE62:
 2677              		.size	MPU6050_getSlaveAddress, .-MPU6050_getSlaveAddress
 2678              		.section	.text.MPU6050_setSlaveAddress,"ax",%progbits
 2679              		.align	2
 2680              		.global	MPU6050_setSlaveAddress
 2681              		.code	16
 2682              		.thumb_func
 2683              		.type	MPU6050_setSlaveAddress, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 64


 2684              	MPU6050_setSlaveAddress:
 2685              	.LFB63:
 909:.\mpu6050.c   **** /** Set the I2C address of the specified slave (0-3).
 910:.\mpu6050.c   ****  * @param num Slave number (0-3)
 911:.\mpu6050.c   ****  * @param address New address for specified slave
 912:.\mpu6050.c   ****  * @see getSlaveAddress()
 913:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_ADDR
 914:.\mpu6050.c   ****  */
 915:.\mpu6050.c   **** void MPU6050_setSlaveAddress(uint8_t num, uint8_t address) {
 2686              		.loc 1 915 0
 2687              		.cfi_startproc
 2688 0000 80B5     		push	{r7, lr}
 2689              		.cfi_def_cfa_offset 8
 2690              		.cfi_offset 7, -8
 2691              		.cfi_offset 14, -4
 2692 0002 82B0     		sub	sp, sp, #8
 2693              		.cfi_def_cfa_offset 16
 2694 0004 00AF     		add	r7, sp, #0
 2695              		.cfi_def_cfa_register 7
 2696 0006 0A1C     		mov	r2, r1
 2697 0008 FB1D     		add	r3, r7, #7
 2698 000a 011C     		add	r1, r0, #0
 2699 000c 1970     		strb	r1, [r3]
 2700 000e BB1D     		add	r3, r7, #6
 2701 0010 1A70     		strb	r2, [r3]
 916:.\mpu6050.c   ****     if (num > 3) return;
 2702              		.loc 1 916 0
 2703 0012 FB1D     		add	r3, r7, #7
 2704 0014 1B78     		ldrb	r3, [r3]
 2705 0016 032B     		cmp	r3, #3
 2706 0018 00D9     		bls	.L219
 2707              		.loc 1 916 0 is_stmt 0 discriminator 1
 2708 001a 10E0     		b	.L218
 2709              	.L219:
 917:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 2710              		.loc 1 917 0 is_stmt 1
 2711 001c 094B     		ldr	r3, .L221
 2712 001e 1978     		ldrb	r1, [r3]
 2713 0020 FB1D     		add	r3, r7, #7
 2714 0022 1B78     		ldrb	r3, [r3]
 2715 0024 1A1C     		add	r2, r3, #0
 2716 0026 9218     		add	r2, r2, r2
 2717 0028 D318     		add	r3, r2, r3
 2718 002a DBB2     		uxtb	r3, r3
 2719 002c 2533     		add	r3, r3, #37
 2720 002e DAB2     		uxtb	r2, r3
 2721 0030 BB1D     		add	r3, r7, #6
 2722 0032 1B78     		ldrb	r3, [r3]
 2723 0034 081C     		mov	r0, r1
 2724 0036 111C     		mov	r1, r2
 2725 0038 1A1C     		mov	r2, r3
 2726 003a FFF7FEFF 		bl	I2CWriteByte
 2727              	.L218:
 918:.\mpu6050.c   **** }
 2728              		.loc 1 918 0
 2729 003e BD46     		mov	sp, r7
 2730 0040 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 65


 2731              		@ sp needed
 2732 0042 80BD     		pop	{r7, pc}
 2733              	.L222:
 2734              		.align	2
 2735              	.L221:
 2736 0044 00000000 		.word	devAddr
 2737              		.cfi_endproc
 2738              	.LFE63:
 2739              		.size	MPU6050_setSlaveAddress, .-MPU6050_setSlaveAddress
 2740              		.section	.text.MPU6050_getSlaveRegister,"ax",%progbits
 2741              		.align	2
 2742              		.global	MPU6050_getSlaveRegister
 2743              		.code	16
 2744              		.thumb_func
 2745              		.type	MPU6050_getSlaveRegister, %function
 2746              	MPU6050_getSlaveRegister:
 2747              	.LFB64:
 919:.\mpu6050.c   **** /** Get the active internal register for the specified slave (0-3).
 920:.\mpu6050.c   ****  * Read/write operations for this slave will be done to whatever internal
 921:.\mpu6050.c   ****  * register address is stored in this MPU register.
 922:.\mpu6050.c   ****  *
 923:.\mpu6050.c   ****  * The MPU-6050 supports a total of five slaves, but Slave 4 has unique
 924:.\mpu6050.c   ****  * characteristics, and so it has its own functions.
 925:.\mpu6050.c   ****  *
 926:.\mpu6050.c   ****  * @param num Slave number (0-3)
 927:.\mpu6050.c   ****  * @return Current active register for specified slave
 928:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_REG
 929:.\mpu6050.c   ****  */
 930:.\mpu6050.c   **** uint8_t MPU6050_getSlaveRegister(uint8_t num) {
 2748              		.loc 1 930 0
 2749              		.cfi_startproc
 2750 0000 80B5     		push	{r7, lr}
 2751              		.cfi_def_cfa_offset 8
 2752              		.cfi_offset 7, -8
 2753              		.cfi_offset 14, -4
 2754 0002 82B0     		sub	sp, sp, #8
 2755              		.cfi_def_cfa_offset 16
 2756 0004 00AF     		add	r7, sp, #0
 2757              		.cfi_def_cfa_register 7
 2758 0006 021C     		mov	r2, r0
 2759 0008 FB1D     		add	r3, r7, #7
 2760 000a 1A70     		strb	r2, [r3]
 931:.\mpu6050.c   ****     if (num > 3) return 0;
 2761              		.loc 1 931 0
 2762 000c FB1D     		add	r3, r7, #7
 2763 000e 1B78     		ldrb	r3, [r3]
 2764 0010 032B     		cmp	r3, #3
 2765 0012 01D9     		bls	.L224
 2766              		.loc 1 931 0 is_stmt 0 discriminator 1
 2767 0014 0023     		mov	r3, #0
 2768 0016 11E0     		b	.L225
 2769              	.L224:
 932:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV0_REG + num*3, buffer);
 2770              		.loc 1 932 0 is_stmt 1
 2771 0018 0A4B     		ldr	r3, .L226
 2772 001a 1978     		ldrb	r1, [r3]
 2773 001c FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 66


 2774 001e 1B78     		ldrb	r3, [r3]
 2775 0020 1A1C     		add	r2, r3, #0
 2776 0022 9218     		add	r2, r2, r2
 2777 0024 D318     		add	r3, r2, r3
 2778 0026 DBB2     		uxtb	r3, r3
 2779 0028 2633     		add	r3, r3, #38
 2780 002a DAB2     		uxtb	r2, r3
 2781 002c 064B     		ldr	r3, .L226+4
 2782 002e 081C     		mov	r0, r1
 2783 0030 111C     		mov	r1, r2
 2784 0032 1A1C     		mov	r2, r3
 2785 0034 FFF7FEFF 		bl	I2CReadByte
 933:.\mpu6050.c   ****     return buffer[0];
 2786              		.loc 1 933 0
 2787 0038 034B     		ldr	r3, .L226+4
 2788 003a 1B78     		ldrb	r3, [r3]
 2789              	.L225:
 934:.\mpu6050.c   **** }
 2790              		.loc 1 934 0
 2791 003c 181C     		mov	r0, r3
 2792 003e BD46     		mov	sp, r7
 2793 0040 02B0     		add	sp, sp, #8
 2794              		@ sp needed
 2795 0042 80BD     		pop	{r7, pc}
 2796              	.L227:
 2797              		.align	2
 2798              	.L226:
 2799 0044 00000000 		.word	devAddr
 2800 0048 00000000 		.word	buffer
 2801              		.cfi_endproc
 2802              	.LFE64:
 2803              		.size	MPU6050_getSlaveRegister, .-MPU6050_getSlaveRegister
 2804              		.section	.text.MPU6050_setSlaveRegister,"ax",%progbits
 2805              		.align	2
 2806              		.global	MPU6050_setSlaveRegister
 2807              		.code	16
 2808              		.thumb_func
 2809              		.type	MPU6050_setSlaveRegister, %function
 2810              	MPU6050_setSlaveRegister:
 2811              	.LFB65:
 935:.\mpu6050.c   **** /** Set the active internal register for the specified slave (0-3).
 936:.\mpu6050.c   ****  * @param num Slave number (0-3)
 937:.\mpu6050.c   ****  * @param reg New active register for specified slave
 938:.\mpu6050.c   ****  * @see getSlaveRegister()
 939:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_REG
 940:.\mpu6050.c   ****  */
 941:.\mpu6050.c   **** void MPU6050_setSlaveRegister(uint8_t num, uint8_t reg) {
 2812              		.loc 1 941 0
 2813              		.cfi_startproc
 2814 0000 80B5     		push	{r7, lr}
 2815              		.cfi_def_cfa_offset 8
 2816              		.cfi_offset 7, -8
 2817              		.cfi_offset 14, -4
 2818 0002 82B0     		sub	sp, sp, #8
 2819              		.cfi_def_cfa_offset 16
 2820 0004 00AF     		add	r7, sp, #0
 2821              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 67


 2822 0006 0A1C     		mov	r2, r1
 2823 0008 FB1D     		add	r3, r7, #7
 2824 000a 011C     		add	r1, r0, #0
 2825 000c 1970     		strb	r1, [r3]
 2826 000e BB1D     		add	r3, r7, #6
 2827 0010 1A70     		strb	r2, [r3]
 942:.\mpu6050.c   ****     if (num > 3) return;
 2828              		.loc 1 942 0
 2829 0012 FB1D     		add	r3, r7, #7
 2830 0014 1B78     		ldrb	r3, [r3]
 2831 0016 032B     		cmp	r3, #3
 2832 0018 00D9     		bls	.L229
 2833              		.loc 1 942 0 is_stmt 0 discriminator 1
 2834 001a 10E0     		b	.L228
 2835              	.L229:
 943:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV0_REG + num*3, reg);
 2836              		.loc 1 943 0 is_stmt 1
 2837 001c 094B     		ldr	r3, .L231
 2838 001e 1978     		ldrb	r1, [r3]
 2839 0020 FB1D     		add	r3, r7, #7
 2840 0022 1B78     		ldrb	r3, [r3]
 2841 0024 1A1C     		add	r2, r3, #0
 2842 0026 9218     		add	r2, r2, r2
 2843 0028 D318     		add	r3, r2, r3
 2844 002a DBB2     		uxtb	r3, r3
 2845 002c 2633     		add	r3, r3, #38
 2846 002e DAB2     		uxtb	r2, r3
 2847 0030 BB1D     		add	r3, r7, #6
 2848 0032 1B78     		ldrb	r3, [r3]
 2849 0034 081C     		mov	r0, r1
 2850 0036 111C     		mov	r1, r2
 2851 0038 1A1C     		mov	r2, r3
 2852 003a FFF7FEFF 		bl	I2CWriteByte
 2853              	.L228:
 944:.\mpu6050.c   **** }
 2854              		.loc 1 944 0
 2855 003e BD46     		mov	sp, r7
 2856 0040 02B0     		add	sp, sp, #8
 2857              		@ sp needed
 2858 0042 80BD     		pop	{r7, pc}
 2859              	.L232:
 2860              		.align	2
 2861              	.L231:
 2862 0044 00000000 		.word	devAddr
 2863              		.cfi_endproc
 2864              	.LFE65:
 2865              		.size	MPU6050_setSlaveRegister, .-MPU6050_setSlaveRegister
 2866              		.section	.text.MPU6050_getSlaveEnabled,"ax",%progbits
 2867              		.align	2
 2868              		.global	MPU6050_getSlaveEnabled
 2869              		.code	16
 2870              		.thumb_func
 2871              		.type	MPU6050_getSlaveEnabled, %function
 2872              	MPU6050_getSlaveEnabled:
 2873              	.LFB66:
 945:.\mpu6050.c   **** /** Get the enabled value for the specified slave (0-3).
 946:.\mpu6050.c   ****  * When set to 1, this bit enables Slave 0 for data transfer operations. When
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 68


 947:.\mpu6050.c   ****  * cleared to 0, this bit disables Slave 0 from data transfer operations.
 948:.\mpu6050.c   ****  * @param num Slave number (0-3)
 949:.\mpu6050.c   ****  * @return Current enabled value for specified slave
 950:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 951:.\mpu6050.c   ****  */
 952:.\mpu6050.c   **** bool MPU6050_getSlaveEnabled(uint8_t num) {
 2874              		.loc 1 952 0
 2875              		.cfi_startproc
 2876 0000 80B5     		push	{r7, lr}
 2877              		.cfi_def_cfa_offset 8
 2878              		.cfi_offset 7, -8
 2879              		.cfi_offset 14, -4
 2880 0002 82B0     		sub	sp, sp, #8
 2881              		.cfi_def_cfa_offset 16
 2882 0004 00AF     		add	r7, sp, #0
 2883              		.cfi_def_cfa_register 7
 2884 0006 021C     		mov	r2, r0
 2885 0008 FB1D     		add	r3, r7, #7
 2886 000a 1A70     		strb	r2, [r3]
 953:.\mpu6050.c   ****     if (num > 3) return 0;
 2887              		.loc 1 953 0
 2888 000c FB1D     		add	r3, r7, #7
 2889 000e 1B78     		ldrb	r3, [r3]
 2890 0010 032B     		cmp	r3, #3
 2891 0012 01D9     		bls	.L234
 2892              		.loc 1 953 0 is_stmt 0 discriminator 1
 2893 0014 0023     		mov	r3, #0
 2894 0016 14E0     		b	.L235
 2895              	.L234:
 954:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_EN_BIT, buffer);
 2896              		.loc 1 954 0 is_stmt 1
 2897 0018 0C4B     		ldr	r3, .L236
 2898 001a 1978     		ldrb	r1, [r3]
 2899 001c FB1D     		add	r3, r7, #7
 2900 001e 1B78     		ldrb	r3, [r3]
 2901 0020 1A1C     		add	r2, r3, #0
 2902 0022 9218     		add	r2, r2, r2
 2903 0024 D318     		add	r3, r2, r3
 2904 0026 DBB2     		uxtb	r3, r3
 2905 0028 2733     		add	r3, r3, #39
 2906 002a DAB2     		uxtb	r2, r3
 2907 002c 084B     		ldr	r3, .L236+4
 2908 002e 081C     		mov	r0, r1
 2909 0030 111C     		mov	r1, r2
 2910 0032 0722     		mov	r2, #7
 2911 0034 FFF7FEFF 		bl	I2CReadBit
 955:.\mpu6050.c   ****     return buffer[0];
 2912              		.loc 1 955 0
 2913 0038 054B     		ldr	r3, .L236+4
 2914 003a 1B78     		ldrb	r3, [r3]
 2915 003c 5A1E     		sub	r2, r3, #1
 2916 003e 9341     		sbc	r3, r3, r2
 2917 0040 DBB2     		uxtb	r3, r3
 2918              	.L235:
 956:.\mpu6050.c   **** }
 2919              		.loc 1 956 0
 2920 0042 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 69


 2921 0044 BD46     		mov	sp, r7
 2922 0046 02B0     		add	sp, sp, #8
 2923              		@ sp needed
 2924 0048 80BD     		pop	{r7, pc}
 2925              	.L237:
 2926 004a C046     		.align	2
 2927              	.L236:
 2928 004c 00000000 		.word	devAddr
 2929 0050 00000000 		.word	buffer
 2930              		.cfi_endproc
 2931              	.LFE66:
 2932              		.size	MPU6050_getSlaveEnabled, .-MPU6050_getSlaveEnabled
 2933              		.section	.text.MPU6050_setSlaveEnabled,"ax",%progbits
 2934              		.align	2
 2935              		.global	MPU6050_setSlaveEnabled
 2936              		.code	16
 2937              		.thumb_func
 2938              		.type	MPU6050_setSlaveEnabled, %function
 2939              	MPU6050_setSlaveEnabled:
 2940              	.LFB67:
 957:.\mpu6050.c   **** /** Set the enabled value for the specified slave (0-3).
 958:.\mpu6050.c   ****  * @param num Slave number (0-3)
 959:.\mpu6050.c   ****  * @param enabled New enabled value for specified slave
 960:.\mpu6050.c   ****  * @see getSlaveEnabled()
 961:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 962:.\mpu6050.c   ****  */
 963:.\mpu6050.c   **** void MPU6050_setSlaveEnabled(uint8_t num, bool enabled) {
 2941              		.loc 1 963 0
 2942              		.cfi_startproc
 2943 0000 80B5     		push	{r7, lr}
 2944              		.cfi_def_cfa_offset 8
 2945              		.cfi_offset 7, -8
 2946              		.cfi_offset 14, -4
 2947 0002 82B0     		sub	sp, sp, #8
 2948              		.cfi_def_cfa_offset 16
 2949 0004 00AF     		add	r7, sp, #0
 2950              		.cfi_def_cfa_register 7
 2951 0006 0A1C     		mov	r2, r1
 2952 0008 FB1D     		add	r3, r7, #7
 2953 000a 011C     		add	r1, r0, #0
 2954 000c 1970     		strb	r1, [r3]
 2955 000e BB1D     		add	r3, r7, #6
 2956 0010 1A70     		strb	r2, [r3]
 964:.\mpu6050.c   ****     if (num > 3) return;
 2957              		.loc 1 964 0
 2958 0012 FB1D     		add	r3, r7, #7
 2959 0014 1B78     		ldrb	r3, [r3]
 2960 0016 032B     		cmp	r3, #3
 2961 0018 00D9     		bls	.L239
 2962              		.loc 1 964 0 is_stmt 0 discriminator 1
 2963 001a 10E0     		b	.L238
 2964              	.L239:
 965:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_EN_BIT, enabled);
 2965              		.loc 1 965 0 is_stmt 1
 2966 001c 094B     		ldr	r3, .L241
 2967 001e 1978     		ldrb	r1, [r3]
 2968 0020 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 70


 2969 0022 1B78     		ldrb	r3, [r3]
 2970 0024 1A1C     		add	r2, r3, #0
 2971 0026 9218     		add	r2, r2, r2
 2972 0028 D318     		add	r3, r2, r3
 2973 002a DBB2     		uxtb	r3, r3
 2974 002c 2733     		add	r3, r3, #39
 2975 002e DAB2     		uxtb	r2, r3
 2976 0030 BB1D     		add	r3, r7, #6
 2977 0032 1B78     		ldrb	r3, [r3]
 2978 0034 081C     		mov	r0, r1
 2979 0036 111C     		mov	r1, r2
 2980 0038 0722     		mov	r2, #7
 2981 003a FFF7FEFF 		bl	I2CWriteBit
 2982              	.L238:
 966:.\mpu6050.c   **** }
 2983              		.loc 1 966 0
 2984 003e BD46     		mov	sp, r7
 2985 0040 02B0     		add	sp, sp, #8
 2986              		@ sp needed
 2987 0042 80BD     		pop	{r7, pc}
 2988              	.L242:
 2989              		.align	2
 2990              	.L241:
 2991 0044 00000000 		.word	devAddr
 2992              		.cfi_endproc
 2993              	.LFE67:
 2994              		.size	MPU6050_setSlaveEnabled, .-MPU6050_setSlaveEnabled
 2995              		.section	.text.MPU6050_getSlaveWordByteSwap,"ax",%progbits
 2996              		.align	2
 2997              		.global	MPU6050_getSlaveWordByteSwap
 2998              		.code	16
 2999              		.thumb_func
 3000              		.type	MPU6050_getSlaveWordByteSwap, %function
 3001              	MPU6050_getSlaveWordByteSwap:
 3002              	.LFB68:
 967:.\mpu6050.c   **** /** Get word pair byte-swapping enabled for the specified slave (0-3).
 968:.\mpu6050.c   ****  * When set to 1, this bit enables byte swapping. When byte swapping is enabled,
 969:.\mpu6050.c   ****  * the high and low bytes of a word pair are swapped. Please refer to
 970:.\mpu6050.c   ****  * I2C_SLV0_GRP for the pairing convention of the word pairs. When cleared to 0,
 971:.\mpu6050.c   ****  * bytes transferred to and from Slave 0 will be written to EXT_SENS_DATA
 972:.\mpu6050.c   ****  * registers in the order they were transferred.
 973:.\mpu6050.c   ****  *
 974:.\mpu6050.c   ****  * @param num Slave number (0-3)
 975:.\mpu6050.c   ****  * @return Current word pair byte-swapping enabled value for specified slave
 976:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 977:.\mpu6050.c   ****  */
 978:.\mpu6050.c   **** bool MPU6050_getSlaveWordByteSwap(uint8_t num) {
 3003              		.loc 1 978 0
 3004              		.cfi_startproc
 3005 0000 80B5     		push	{r7, lr}
 3006              		.cfi_def_cfa_offset 8
 3007              		.cfi_offset 7, -8
 3008              		.cfi_offset 14, -4
 3009 0002 82B0     		sub	sp, sp, #8
 3010              		.cfi_def_cfa_offset 16
 3011 0004 00AF     		add	r7, sp, #0
 3012              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 71


 3013 0006 021C     		mov	r2, r0
 3014 0008 FB1D     		add	r3, r7, #7
 3015 000a 1A70     		strb	r2, [r3]
 979:.\mpu6050.c   ****     if (num > 3) return 0;
 3016              		.loc 1 979 0
 3017 000c FB1D     		add	r3, r7, #7
 3018 000e 1B78     		ldrb	r3, [r3]
 3019 0010 032B     		cmp	r3, #3
 3020 0012 01D9     		bls	.L244
 3021              		.loc 1 979 0 is_stmt 0 discriminator 1
 3022 0014 0023     		mov	r3, #0
 3023 0016 14E0     		b	.L245
 3024              	.L244:
 980:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_BYTE_SW_BIT, buffer);
 3025              		.loc 1 980 0 is_stmt 1
 3026 0018 0C4B     		ldr	r3, .L246
 3027 001a 1978     		ldrb	r1, [r3]
 3028 001c FB1D     		add	r3, r7, #7
 3029 001e 1B78     		ldrb	r3, [r3]
 3030 0020 1A1C     		add	r2, r3, #0
 3031 0022 9218     		add	r2, r2, r2
 3032 0024 D318     		add	r3, r2, r3
 3033 0026 DBB2     		uxtb	r3, r3
 3034 0028 2733     		add	r3, r3, #39
 3035 002a DAB2     		uxtb	r2, r3
 3036 002c 084B     		ldr	r3, .L246+4
 3037 002e 081C     		mov	r0, r1
 3038 0030 111C     		mov	r1, r2
 3039 0032 0622     		mov	r2, #6
 3040 0034 FFF7FEFF 		bl	I2CReadBit
 981:.\mpu6050.c   ****     return buffer[0];
 3041              		.loc 1 981 0
 3042 0038 054B     		ldr	r3, .L246+4
 3043 003a 1B78     		ldrb	r3, [r3]
 3044 003c 5A1E     		sub	r2, r3, #1
 3045 003e 9341     		sbc	r3, r3, r2
 3046 0040 DBB2     		uxtb	r3, r3
 3047              	.L245:
 982:.\mpu6050.c   **** }
 3048              		.loc 1 982 0
 3049 0042 181C     		mov	r0, r3
 3050 0044 BD46     		mov	sp, r7
 3051 0046 02B0     		add	sp, sp, #8
 3052              		@ sp needed
 3053 0048 80BD     		pop	{r7, pc}
 3054              	.L247:
 3055 004a C046     		.align	2
 3056              	.L246:
 3057 004c 00000000 		.word	devAddr
 3058 0050 00000000 		.word	buffer
 3059              		.cfi_endproc
 3060              	.LFE68:
 3061              		.size	MPU6050_getSlaveWordByteSwap, .-MPU6050_getSlaveWordByteSwap
 3062              		.section	.text.MPU6050_setSlaveWordByteSwap,"ax",%progbits
 3063              		.align	2
 3064              		.global	MPU6050_setSlaveWordByteSwap
 3065              		.code	16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 72


 3066              		.thumb_func
 3067              		.type	MPU6050_setSlaveWordByteSwap, %function
 3068              	MPU6050_setSlaveWordByteSwap:
 3069              	.LFB69:
 983:.\mpu6050.c   **** /** Set word pair byte-swapping enabled for the specified slave (0-3).
 984:.\mpu6050.c   ****  * @param num Slave number (0-3)
 985:.\mpu6050.c   ****  * @param enabled New word pair byte-swapping enabled value for specified slave
 986:.\mpu6050.c   ****  * @see getSlaveWordByteSwap()
 987:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
 988:.\mpu6050.c   ****  */
 989:.\mpu6050.c   **** void MPU6050_setSlaveWordByteSwap(uint8_t num, bool enabled) {
 3070              		.loc 1 989 0
 3071              		.cfi_startproc
 3072 0000 80B5     		push	{r7, lr}
 3073              		.cfi_def_cfa_offset 8
 3074              		.cfi_offset 7, -8
 3075              		.cfi_offset 14, -4
 3076 0002 82B0     		sub	sp, sp, #8
 3077              		.cfi_def_cfa_offset 16
 3078 0004 00AF     		add	r7, sp, #0
 3079              		.cfi_def_cfa_register 7
 3080 0006 0A1C     		mov	r2, r1
 3081 0008 FB1D     		add	r3, r7, #7
 3082 000a 011C     		add	r1, r0, #0
 3083 000c 1970     		strb	r1, [r3]
 3084 000e BB1D     		add	r3, r7, #6
 3085 0010 1A70     		strb	r2, [r3]
 990:.\mpu6050.c   ****     if (num > 3) return;
 3086              		.loc 1 990 0
 3087 0012 FB1D     		add	r3, r7, #7
 3088 0014 1B78     		ldrb	r3, [r3]
 3089 0016 032B     		cmp	r3, #3
 3090 0018 00D9     		bls	.L249
 3091              		.loc 1 990 0 is_stmt 0 discriminator 1
 3092 001a 10E0     		b	.L248
 3093              	.L249:
 991:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_BYTE_SW_BIT, enabled
 3094              		.loc 1 991 0 is_stmt 1
 3095 001c 094B     		ldr	r3, .L251
 3096 001e 1978     		ldrb	r1, [r3]
 3097 0020 FB1D     		add	r3, r7, #7
 3098 0022 1B78     		ldrb	r3, [r3]
 3099 0024 1A1C     		add	r2, r3, #0
 3100 0026 9218     		add	r2, r2, r2
 3101 0028 D318     		add	r3, r2, r3
 3102 002a DBB2     		uxtb	r3, r3
 3103 002c 2733     		add	r3, r3, #39
 3104 002e DAB2     		uxtb	r2, r3
 3105 0030 BB1D     		add	r3, r7, #6
 3106 0032 1B78     		ldrb	r3, [r3]
 3107 0034 081C     		mov	r0, r1
 3108 0036 111C     		mov	r1, r2
 3109 0038 0622     		mov	r2, #6
 3110 003a FFF7FEFF 		bl	I2CWriteBit
 3111              	.L248:
 992:.\mpu6050.c   **** }
 3112              		.loc 1 992 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 73


 3113 003e BD46     		mov	sp, r7
 3114 0040 02B0     		add	sp, sp, #8
 3115              		@ sp needed
 3116 0042 80BD     		pop	{r7, pc}
 3117              	.L252:
 3118              		.align	2
 3119              	.L251:
 3120 0044 00000000 		.word	devAddr
 3121              		.cfi_endproc
 3122              	.LFE69:
 3123              		.size	MPU6050_setSlaveWordByteSwap, .-MPU6050_setSlaveWordByteSwap
 3124              		.section	.text.MPU6050_getSlaveWriteMode,"ax",%progbits
 3125              		.align	2
 3126              		.global	MPU6050_getSlaveWriteMode
 3127              		.code	16
 3128              		.thumb_func
 3129              		.type	MPU6050_getSlaveWriteMode, %function
 3130              	MPU6050_getSlaveWriteMode:
 3131              	.LFB70:
 993:.\mpu6050.c   **** /** Get write mode for the specified slave (0-3).
 994:.\mpu6050.c   ****  * When set to 1, the transaction will read or write data only. When cleared to
 995:.\mpu6050.c   ****  * 0, the transaction will write a register address prior to reading or writing
 996:.\mpu6050.c   ****  * data. This should equal 0 when specifying the register address within the
 997:.\mpu6050.c   ****  * Slave device to/from which the ensuing data transaction will take place.
 998:.\mpu6050.c   ****  *
 999:.\mpu6050.c   ****  * @param num Slave number (0-3)
1000:.\mpu6050.c   ****  * @return Current write mode for specified slave (0 = register address + data, 1 = data only)
1001:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1002:.\mpu6050.c   ****  */
1003:.\mpu6050.c   **** bool MPU6050_getSlaveWriteMode(uint8_t num) {
 3132              		.loc 1 1003 0
 3133              		.cfi_startproc
 3134 0000 80B5     		push	{r7, lr}
 3135              		.cfi_def_cfa_offset 8
 3136              		.cfi_offset 7, -8
 3137              		.cfi_offset 14, -4
 3138 0002 82B0     		sub	sp, sp, #8
 3139              		.cfi_def_cfa_offset 16
 3140 0004 00AF     		add	r7, sp, #0
 3141              		.cfi_def_cfa_register 7
 3142 0006 021C     		mov	r2, r0
 3143 0008 FB1D     		add	r3, r7, #7
 3144 000a 1A70     		strb	r2, [r3]
1004:.\mpu6050.c   ****     if (num > 3) return 0;
 3145              		.loc 1 1004 0
 3146 000c FB1D     		add	r3, r7, #7
 3147 000e 1B78     		ldrb	r3, [r3]
 3148 0010 032B     		cmp	r3, #3
 3149 0012 01D9     		bls	.L254
 3150              		.loc 1 1004 0 is_stmt 0 discriminator 1
 3151 0014 0023     		mov	r3, #0
 3152 0016 14E0     		b	.L255
 3153              	.L254:
1005:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_REG_DIS_BIT, buffer);
 3154              		.loc 1 1005 0 is_stmt 1
 3155 0018 0C4B     		ldr	r3, .L256
 3156 001a 1978     		ldrb	r1, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 74


 3157 001c FB1D     		add	r3, r7, #7
 3158 001e 1B78     		ldrb	r3, [r3]
 3159 0020 1A1C     		add	r2, r3, #0
 3160 0022 9218     		add	r2, r2, r2
 3161 0024 D318     		add	r3, r2, r3
 3162 0026 DBB2     		uxtb	r3, r3
 3163 0028 2733     		add	r3, r3, #39
 3164 002a DAB2     		uxtb	r2, r3
 3165 002c 084B     		ldr	r3, .L256+4
 3166 002e 081C     		mov	r0, r1
 3167 0030 111C     		mov	r1, r2
 3168 0032 0522     		mov	r2, #5
 3169 0034 FFF7FEFF 		bl	I2CReadBit
1006:.\mpu6050.c   ****     return buffer[0];
 3170              		.loc 1 1006 0
 3171 0038 054B     		ldr	r3, .L256+4
 3172 003a 1B78     		ldrb	r3, [r3]
 3173 003c 5A1E     		sub	r2, r3, #1
 3174 003e 9341     		sbc	r3, r3, r2
 3175 0040 DBB2     		uxtb	r3, r3
 3176              	.L255:
1007:.\mpu6050.c   **** }
 3177              		.loc 1 1007 0
 3178 0042 181C     		mov	r0, r3
 3179 0044 BD46     		mov	sp, r7
 3180 0046 02B0     		add	sp, sp, #8
 3181              		@ sp needed
 3182 0048 80BD     		pop	{r7, pc}
 3183              	.L257:
 3184 004a C046     		.align	2
 3185              	.L256:
 3186 004c 00000000 		.word	devAddr
 3187 0050 00000000 		.word	buffer
 3188              		.cfi_endproc
 3189              	.LFE70:
 3190              		.size	MPU6050_getSlaveWriteMode, .-MPU6050_getSlaveWriteMode
 3191              		.section	.text.MPU6050_setSlaveWriteMode,"ax",%progbits
 3192              		.align	2
 3193              		.global	MPU6050_setSlaveWriteMode
 3194              		.code	16
 3195              		.thumb_func
 3196              		.type	MPU6050_setSlaveWriteMode, %function
 3197              	MPU6050_setSlaveWriteMode:
 3198              	.LFB71:
1008:.\mpu6050.c   **** /** Set write mode for the specified slave (0-3).
1009:.\mpu6050.c   ****  * @param num Slave number (0-3)
1010:.\mpu6050.c   ****  * @param mode New write mode for specified slave (0 = register address + data, 1 = data only)
1011:.\mpu6050.c   ****  * @see getSlaveWriteMode()
1012:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1013:.\mpu6050.c   ****  */
1014:.\mpu6050.c   **** void MPU6050_setSlaveWriteMode(uint8_t num, bool mode) {
 3199              		.loc 1 1014 0
 3200              		.cfi_startproc
 3201 0000 80B5     		push	{r7, lr}
 3202              		.cfi_def_cfa_offset 8
 3203              		.cfi_offset 7, -8
 3204              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 75


 3205 0002 82B0     		sub	sp, sp, #8
 3206              		.cfi_def_cfa_offset 16
 3207 0004 00AF     		add	r7, sp, #0
 3208              		.cfi_def_cfa_register 7
 3209 0006 0A1C     		mov	r2, r1
 3210 0008 FB1D     		add	r3, r7, #7
 3211 000a 011C     		add	r1, r0, #0
 3212 000c 1970     		strb	r1, [r3]
 3213 000e BB1D     		add	r3, r7, #6
 3214 0010 1A70     		strb	r2, [r3]
1015:.\mpu6050.c   ****     if (num > 3) return;
 3215              		.loc 1 1015 0
 3216 0012 FB1D     		add	r3, r7, #7
 3217 0014 1B78     		ldrb	r3, [r3]
 3218 0016 032B     		cmp	r3, #3
 3219 0018 00D9     		bls	.L259
 3220              		.loc 1 1015 0 is_stmt 0 discriminator 1
 3221 001a 10E0     		b	.L258
 3222              	.L259:
1016:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_REG_DIS_BIT, mode);
 3223              		.loc 1 1016 0 is_stmt 1
 3224 001c 094B     		ldr	r3, .L261
 3225 001e 1978     		ldrb	r1, [r3]
 3226 0020 FB1D     		add	r3, r7, #7
 3227 0022 1B78     		ldrb	r3, [r3]
 3228 0024 1A1C     		add	r2, r3, #0
 3229 0026 9218     		add	r2, r2, r2
 3230 0028 D318     		add	r3, r2, r3
 3231 002a DBB2     		uxtb	r3, r3
 3232 002c 2733     		add	r3, r3, #39
 3233 002e DAB2     		uxtb	r2, r3
 3234 0030 BB1D     		add	r3, r7, #6
 3235 0032 1B78     		ldrb	r3, [r3]
 3236 0034 081C     		mov	r0, r1
 3237 0036 111C     		mov	r1, r2
 3238 0038 0522     		mov	r2, #5
 3239 003a FFF7FEFF 		bl	I2CWriteBit
 3240              	.L258:
1017:.\mpu6050.c   **** }
 3241              		.loc 1 1017 0
 3242 003e BD46     		mov	sp, r7
 3243 0040 02B0     		add	sp, sp, #8
 3244              		@ sp needed
 3245 0042 80BD     		pop	{r7, pc}
 3246              	.L262:
 3247              		.align	2
 3248              	.L261:
 3249 0044 00000000 		.word	devAddr
 3250              		.cfi_endproc
 3251              	.LFE71:
 3252              		.size	MPU6050_setSlaveWriteMode, .-MPU6050_setSlaveWriteMode
 3253              		.section	.text.MPU6050_getSlaveWordGroupOffset,"ax",%progbits
 3254              		.align	2
 3255              		.global	MPU6050_getSlaveWordGroupOffset
 3256              		.code	16
 3257              		.thumb_func
 3258              		.type	MPU6050_getSlaveWordGroupOffset, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 76


 3259              	MPU6050_getSlaveWordGroupOffset:
 3260              	.LFB72:
1018:.\mpu6050.c   **** /** Get word pair grouping order offset for the specified slave (0-3).
1019:.\mpu6050.c   ****  * This sets specifies the grouping order of word pairs received from registers.
1020:.\mpu6050.c   ****  * When cleared to 0, bytes from register addresses 0 and 1, 2 and 3, etc (even,
1021:.\mpu6050.c   ****  * then odd register addresses) are paired to form a word. When set to 1, bytes
1022:.\mpu6050.c   ****  * from register addresses are paired 1 and 2, 3 and 4, etc. (odd, then even
1023:.\mpu6050.c   ****  * register addresses) are paired to form a word.
1024:.\mpu6050.c   ****  *
1025:.\mpu6050.c   ****  * @param num Slave number (0-3)
1026:.\mpu6050.c   ****  * @return Current word pair grouping order offset for specified slave
1027:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1028:.\mpu6050.c   ****  */
1029:.\mpu6050.c   **** bool MPU6050_getSlaveWordGroupOffset(uint8_t num) {
 3261              		.loc 1 1029 0
 3262              		.cfi_startproc
 3263 0000 80B5     		push	{r7, lr}
 3264              		.cfi_def_cfa_offset 8
 3265              		.cfi_offset 7, -8
 3266              		.cfi_offset 14, -4
 3267 0002 82B0     		sub	sp, sp, #8
 3268              		.cfi_def_cfa_offset 16
 3269 0004 00AF     		add	r7, sp, #0
 3270              		.cfi_def_cfa_register 7
 3271 0006 021C     		mov	r2, r0
 3272 0008 FB1D     		add	r3, r7, #7
 3273 000a 1A70     		strb	r2, [r3]
1030:.\mpu6050.c   ****     if (num > 3) return 0;
 3274              		.loc 1 1030 0
 3275 000c FB1D     		add	r3, r7, #7
 3276 000e 1B78     		ldrb	r3, [r3]
 3277 0010 032B     		cmp	r3, #3
 3278 0012 01D9     		bls	.L264
 3279              		.loc 1 1030 0 is_stmt 0 discriminator 1
 3280 0014 0023     		mov	r3, #0
 3281 0016 14E0     		b	.L265
 3282              	.L264:
1031:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_GRP_BIT, buffer);
 3283              		.loc 1 1031 0 is_stmt 1
 3284 0018 0C4B     		ldr	r3, .L266
 3285 001a 1978     		ldrb	r1, [r3]
 3286 001c FB1D     		add	r3, r7, #7
 3287 001e 1B78     		ldrb	r3, [r3]
 3288 0020 1A1C     		add	r2, r3, #0
 3289 0022 9218     		add	r2, r2, r2
 3290 0024 D318     		add	r3, r2, r3
 3291 0026 DBB2     		uxtb	r3, r3
 3292 0028 2733     		add	r3, r3, #39
 3293 002a DAB2     		uxtb	r2, r3
 3294 002c 084B     		ldr	r3, .L266+4
 3295 002e 081C     		mov	r0, r1
 3296 0030 111C     		mov	r1, r2
 3297 0032 0422     		mov	r2, #4
 3298 0034 FFF7FEFF 		bl	I2CReadBit
1032:.\mpu6050.c   ****     return buffer[0];
 3299              		.loc 1 1032 0
 3300 0038 054B     		ldr	r3, .L266+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 77


 3301 003a 1B78     		ldrb	r3, [r3]
 3302 003c 5A1E     		sub	r2, r3, #1
 3303 003e 9341     		sbc	r3, r3, r2
 3304 0040 DBB2     		uxtb	r3, r3
 3305              	.L265:
1033:.\mpu6050.c   **** }
 3306              		.loc 1 1033 0
 3307 0042 181C     		mov	r0, r3
 3308 0044 BD46     		mov	sp, r7
 3309 0046 02B0     		add	sp, sp, #8
 3310              		@ sp needed
 3311 0048 80BD     		pop	{r7, pc}
 3312              	.L267:
 3313 004a C046     		.align	2
 3314              	.L266:
 3315 004c 00000000 		.word	devAddr
 3316 0050 00000000 		.word	buffer
 3317              		.cfi_endproc
 3318              	.LFE72:
 3319              		.size	MPU6050_getSlaveWordGroupOffset, .-MPU6050_getSlaveWordGroupOffset
 3320              		.section	.text.MPU6050_setSlaveWordGroupOffset,"ax",%progbits
 3321              		.align	2
 3322              		.global	MPU6050_setSlaveWordGroupOffset
 3323              		.code	16
 3324              		.thumb_func
 3325              		.type	MPU6050_setSlaveWordGroupOffset, %function
 3326              	MPU6050_setSlaveWordGroupOffset:
 3327              	.LFB73:
1034:.\mpu6050.c   **** /** Set word pair grouping order offset for the specified slave (0-3).
1035:.\mpu6050.c   ****  * @param num Slave number (0-3)
1036:.\mpu6050.c   ****  * @param enabled New word pair grouping order offset for specified slave
1037:.\mpu6050.c   ****  * @see getSlaveWordGroupOffset()
1038:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1039:.\mpu6050.c   ****  */
1040:.\mpu6050.c   **** void MPU6050_setSlaveWordGroupOffset(uint8_t num, bool enabled) {
 3328              		.loc 1 1040 0
 3329              		.cfi_startproc
 3330 0000 80B5     		push	{r7, lr}
 3331              		.cfi_def_cfa_offset 8
 3332              		.cfi_offset 7, -8
 3333              		.cfi_offset 14, -4
 3334 0002 82B0     		sub	sp, sp, #8
 3335              		.cfi_def_cfa_offset 16
 3336 0004 00AF     		add	r7, sp, #0
 3337              		.cfi_def_cfa_register 7
 3338 0006 0A1C     		mov	r2, r1
 3339 0008 FB1D     		add	r3, r7, #7
 3340 000a 011C     		add	r1, r0, #0
 3341 000c 1970     		strb	r1, [r3]
 3342 000e BB1D     		add	r3, r7, #6
 3343 0010 1A70     		strb	r2, [r3]
1041:.\mpu6050.c   ****     if (num > 3) return;
 3344              		.loc 1 1041 0
 3345 0012 FB1D     		add	r3, r7, #7
 3346 0014 1B78     		ldrb	r3, [r3]
 3347 0016 032B     		cmp	r3, #3
 3348 0018 00D9     		bls	.L269
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 78


 3349              		.loc 1 1041 0 is_stmt 0 discriminator 1
 3350 001a 10E0     		b	.L268
 3351              	.L269:
1042:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_GRP_BIT, enabled);
 3352              		.loc 1 1042 0 is_stmt 1
 3353 001c 094B     		ldr	r3, .L271
 3354 001e 1978     		ldrb	r1, [r3]
 3355 0020 FB1D     		add	r3, r7, #7
 3356 0022 1B78     		ldrb	r3, [r3]
 3357 0024 1A1C     		add	r2, r3, #0
 3358 0026 9218     		add	r2, r2, r2
 3359 0028 D318     		add	r3, r2, r3
 3360 002a DBB2     		uxtb	r3, r3
 3361 002c 2733     		add	r3, r3, #39
 3362 002e DAB2     		uxtb	r2, r3
 3363 0030 BB1D     		add	r3, r7, #6
 3364 0032 1B78     		ldrb	r3, [r3]
 3365 0034 081C     		mov	r0, r1
 3366 0036 111C     		mov	r1, r2
 3367 0038 0422     		mov	r2, #4
 3368 003a FFF7FEFF 		bl	I2CWriteBit
 3369              	.L268:
1043:.\mpu6050.c   **** }
 3370              		.loc 1 1043 0
 3371 003e BD46     		mov	sp, r7
 3372 0040 02B0     		add	sp, sp, #8
 3373              		@ sp needed
 3374 0042 80BD     		pop	{r7, pc}
 3375              	.L272:
 3376              		.align	2
 3377              	.L271:
 3378 0044 00000000 		.word	devAddr
 3379              		.cfi_endproc
 3380              	.LFE73:
 3381              		.size	MPU6050_setSlaveWordGroupOffset, .-MPU6050_setSlaveWordGroupOffset
 3382              		.section	.text.MPU6050_getSlaveDataLength,"ax",%progbits
 3383              		.align	2
 3384              		.global	MPU6050_getSlaveDataLength
 3385              		.code	16
 3386              		.thumb_func
 3387              		.type	MPU6050_getSlaveDataLength, %function
 3388              	MPU6050_getSlaveDataLength:
 3389              	.LFB74:
1044:.\mpu6050.c   **** /** Get number of bytes to read for the specified slave (0-3).
1045:.\mpu6050.c   ****  * Specifies the number of bytes transferred to and from Slave 0. Clearing this
1046:.\mpu6050.c   ****  * bit to 0 is equivalent to disabling the register by writing 0 to I2C_SLV0_EN.
1047:.\mpu6050.c   ****  * @param num Slave number (0-3)
1048:.\mpu6050.c   ****  * @return Number of bytes to read for specified slave
1049:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1050:.\mpu6050.c   ****  */
1051:.\mpu6050.c   **** uint8_t MPU6050_getSlaveDataLength(uint8_t num) {
 3390              		.loc 1 1051 0
 3391              		.cfi_startproc
 3392 0000 80B5     		push	{r7, lr}
 3393              		.cfi_def_cfa_offset 8
 3394              		.cfi_offset 7, -8
 3395              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 79


 3396 0002 84B0     		sub	sp, sp, #16
 3397              		.cfi_def_cfa_offset 24
 3398 0004 02AF     		add	r7, sp, #8
 3399              		.cfi_def_cfa 7, 16
 3400 0006 021C     		mov	r2, r0
 3401 0008 FB1D     		add	r3, r7, #7
 3402 000a 1A70     		strb	r2, [r3]
1052:.\mpu6050.c   ****     if (num > 3) return 0;
 3403              		.loc 1 1052 0
 3404 000c FB1D     		add	r3, r7, #7
 3405 000e 1B78     		ldrb	r3, [r3]
 3406 0010 032B     		cmp	r3, #3
 3407 0012 01D9     		bls	.L274
 3408              		.loc 1 1052 0 is_stmt 0 discriminator 1
 3409 0014 0023     		mov	r3, #0
 3410 0016 13E0     		b	.L275
 3411              	.L274:
1053:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_LEN_BIT, I2C_MPU6050
 3412              		.loc 1 1053 0 is_stmt 1
 3413 0018 0B4B     		ldr	r3, .L276
 3414 001a 1978     		ldrb	r1, [r3]
 3415 001c FB1D     		add	r3, r7, #7
 3416 001e 1B78     		ldrb	r3, [r3]
 3417 0020 1A1C     		add	r2, r3, #0
 3418 0022 9218     		add	r2, r2, r2
 3419 0024 D318     		add	r3, r2, r3
 3420 0026 DBB2     		uxtb	r3, r3
 3421 0028 2733     		add	r3, r3, #39
 3422 002a DBB2     		uxtb	r3, r3
 3423 002c 074A     		ldr	r2, .L276+4
 3424 002e 0092     		str	r2, [sp]
 3425 0030 081C     		mov	r0, r1
 3426 0032 191C     		mov	r1, r3
 3427 0034 0322     		mov	r2, #3
 3428 0036 0423     		mov	r3, #4
 3429 0038 FFF7FEFF 		bl	I2CReadBits
1054:.\mpu6050.c   ****     return buffer[0];
 3430              		.loc 1 1054 0
 3431 003c 034B     		ldr	r3, .L276+4
 3432 003e 1B78     		ldrb	r3, [r3]
 3433              	.L275:
1055:.\mpu6050.c   **** }
 3434              		.loc 1 1055 0
 3435 0040 181C     		mov	r0, r3
 3436 0042 BD46     		mov	sp, r7
 3437 0044 02B0     		add	sp, sp, #8
 3438              		@ sp needed
 3439 0046 80BD     		pop	{r7, pc}
 3440              	.L277:
 3441              		.align	2
 3442              	.L276:
 3443 0048 00000000 		.word	devAddr
 3444 004c 00000000 		.word	buffer
 3445              		.cfi_endproc
 3446              	.LFE74:
 3447              		.size	MPU6050_getSlaveDataLength, .-MPU6050_getSlaveDataLength
 3448              		.section	.text.MPU6050_setSlaveDataLength,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 80


 3449              		.align	2
 3450              		.global	MPU6050_setSlaveDataLength
 3451              		.code	16
 3452              		.thumb_func
 3453              		.type	MPU6050_setSlaveDataLength, %function
 3454              	MPU6050_setSlaveDataLength:
 3455              	.LFB75:
1056:.\mpu6050.c   **** /** Set number of bytes to read for the specified slave (0-3).
1057:.\mpu6050.c   ****  * @param num Slave number (0-3)
1058:.\mpu6050.c   ****  * @param length Number of bytes to read for specified slave
1059:.\mpu6050.c   ****  * @see getSlaveDataLength()
1060:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_CTRL
1061:.\mpu6050.c   ****  */
1062:.\mpu6050.c   **** void MPU6050_setSlaveDataLength(uint8_t num, uint8_t length) {
 3456              		.loc 1 1062 0
 3457              		.cfi_startproc
 3458 0000 80B5     		push	{r7, lr}
 3459              		.cfi_def_cfa_offset 8
 3460              		.cfi_offset 7, -8
 3461              		.cfi_offset 14, -4
 3462 0002 84B0     		sub	sp, sp, #16
 3463              		.cfi_def_cfa_offset 24
 3464 0004 02AF     		add	r7, sp, #8
 3465              		.cfi_def_cfa 7, 16
 3466 0006 0A1C     		mov	r2, r1
 3467 0008 FB1D     		add	r3, r7, #7
 3468 000a 011C     		add	r1, r0, #0
 3469 000c 1970     		strb	r1, [r3]
 3470 000e BB1D     		add	r3, r7, #6
 3471 0010 1A70     		strb	r2, [r3]
1063:.\mpu6050.c   ****     if (num > 3) return;
 3472              		.loc 1 1063 0
 3473 0012 FB1D     		add	r3, r7, #7
 3474 0014 1B78     		ldrb	r3, [r3]
 3475 0016 032B     		cmp	r3, #3
 3476 0018 00D9     		bls	.L279
 3477              		.loc 1 1063 0 is_stmt 0 discriminator 1
 3478 001a 12E0     		b	.L278
 3479              	.L279:
1064:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, I2C_MPU6050_I2C_SLV_LEN_BIT, I2C_MPU605
 3480              		.loc 1 1064 0 is_stmt 1
 3481 001c 0A4B     		ldr	r3, .L281
 3482 001e 1978     		ldrb	r1, [r3]
 3483 0020 FB1D     		add	r3, r7, #7
 3484 0022 1B78     		ldrb	r3, [r3]
 3485 0024 1A1C     		add	r2, r3, #0
 3486 0026 9218     		add	r2, r2, r2
 3487 0028 D318     		add	r3, r2, r3
 3488 002a DBB2     		uxtb	r3, r3
 3489 002c 2733     		add	r3, r3, #39
 3490 002e DBB2     		uxtb	r3, r3
 3491 0030 BA1D     		add	r2, r7, #6
 3492 0032 1278     		ldrb	r2, [r2]
 3493 0034 0092     		str	r2, [sp]
 3494 0036 081C     		mov	r0, r1
 3495 0038 191C     		mov	r1, r3
 3496 003a 0322     		mov	r2, #3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 81


 3497 003c 0423     		mov	r3, #4
 3498 003e FFF7FEFF 		bl	I2CWriteBits
 3499              	.L278:
1065:.\mpu6050.c   **** }
 3500              		.loc 1 1065 0
 3501 0042 BD46     		mov	sp, r7
 3502 0044 02B0     		add	sp, sp, #8
 3503              		@ sp needed
 3504 0046 80BD     		pop	{r7, pc}
 3505              	.L282:
 3506              		.align	2
 3507              	.L281:
 3508 0048 00000000 		.word	devAddr
 3509              		.cfi_endproc
 3510              	.LFE75:
 3511              		.size	MPU6050_setSlaveDataLength, .-MPU6050_setSlaveDataLength
 3512              		.section	.text.MPU6050_getSlave4Address,"ax",%progbits
 3513              		.align	2
 3514              		.global	MPU6050_getSlave4Address
 3515              		.code	16
 3516              		.thumb_func
 3517              		.type	MPU6050_getSlave4Address, %function
 3518              	MPU6050_getSlave4Address:
 3519              	.LFB76:
1066:.\mpu6050.c   **** 
1067:.\mpu6050.c   **** // I2C_SLV* registers (Slave 4)
1068:.\mpu6050.c   **** 
1069:.\mpu6050.c   **** /** Get the I2C address of Slave 4.
1070:.\mpu6050.c   ****  * Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it's a read
1071:.\mpu6050.c   ****  * operation, and if it is cleared, then it's a write operation. The remaining
1072:.\mpu6050.c   ****  * bits (6-0) are the 7-bit device address of the slave device.
1073:.\mpu6050.c   ****  *
1074:.\mpu6050.c   ****  * @return Current address for Slave 4
1075:.\mpu6050.c   ****  * @see getSlaveAddress()
1076:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_ADDR
1077:.\mpu6050.c   ****  */
1078:.\mpu6050.c   **** uint8_t MPU6050_getSlave4Address() {
 3520              		.loc 1 1078 0
 3521              		.cfi_startproc
 3522 0000 80B5     		push	{r7, lr}
 3523              		.cfi_def_cfa_offset 8
 3524              		.cfi_offset 7, -8
 3525              		.cfi_offset 14, -4
 3526 0002 00AF     		add	r7, sp, #0
 3527              		.cfi_def_cfa_register 7
1079:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV4_ADDR, buffer);
 3528              		.loc 1 1079 0
 3529 0004 064B     		ldr	r3, .L285
 3530 0006 1A78     		ldrb	r2, [r3]
 3531 0008 064B     		ldr	r3, .L285+4
 3532 000a 101C     		mov	r0, r2
 3533 000c 3121     		mov	r1, #49
 3534 000e 1A1C     		mov	r2, r3
 3535 0010 FFF7FEFF 		bl	I2CReadByte
1080:.\mpu6050.c   ****     return buffer[0];
 3536              		.loc 1 1080 0
 3537 0014 034B     		ldr	r3, .L285+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 82


 3538 0016 1B78     		ldrb	r3, [r3]
1081:.\mpu6050.c   **** }
 3539              		.loc 1 1081 0
 3540 0018 181C     		mov	r0, r3
 3541 001a BD46     		mov	sp, r7
 3542              		@ sp needed
 3543 001c 80BD     		pop	{r7, pc}
 3544              	.L286:
 3545 001e C046     		.align	2
 3546              	.L285:
 3547 0020 00000000 		.word	devAddr
 3548 0024 00000000 		.word	buffer
 3549              		.cfi_endproc
 3550              	.LFE76:
 3551              		.size	MPU6050_getSlave4Address, .-MPU6050_getSlave4Address
 3552              		.section	.text.MPU6050_setSlave4Address,"ax",%progbits
 3553              		.align	2
 3554              		.global	MPU6050_setSlave4Address
 3555              		.code	16
 3556              		.thumb_func
 3557              		.type	MPU6050_setSlave4Address, %function
 3558              	MPU6050_setSlave4Address:
 3559              	.LFB77:
1082:.\mpu6050.c   **** /** Set the I2C address of Slave 4.
1083:.\mpu6050.c   ****  * @param address New address for Slave 4
1084:.\mpu6050.c   ****  * @see getSlave4Address()
1085:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_ADDR
1086:.\mpu6050.c   ****  */
1087:.\mpu6050.c   **** void MPU6050_setSlave4Address(uint8_t address) {
 3560              		.loc 1 1087 0
 3561              		.cfi_startproc
 3562 0000 80B5     		push	{r7, lr}
 3563              		.cfi_def_cfa_offset 8
 3564              		.cfi_offset 7, -8
 3565              		.cfi_offset 14, -4
 3566 0002 82B0     		sub	sp, sp, #8
 3567              		.cfi_def_cfa_offset 16
 3568 0004 00AF     		add	r7, sp, #0
 3569              		.cfi_def_cfa_register 7
 3570 0006 021C     		mov	r2, r0
 3571 0008 FB1D     		add	r3, r7, #7
 3572 000a 1A70     		strb	r2, [r3]
1088:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV4_ADDR, address);
 3573              		.loc 1 1088 0
 3574 000c 054B     		ldr	r3, .L288
 3575 000e 1A78     		ldrb	r2, [r3]
 3576 0010 FB1D     		add	r3, r7, #7
 3577 0012 1B78     		ldrb	r3, [r3]
 3578 0014 101C     		mov	r0, r2
 3579 0016 3121     		mov	r1, #49
 3580 0018 1A1C     		mov	r2, r3
 3581 001a FFF7FEFF 		bl	I2CWriteByte
1089:.\mpu6050.c   **** }
 3582              		.loc 1 1089 0
 3583 001e BD46     		mov	sp, r7
 3584 0020 02B0     		add	sp, sp, #8
 3585              		@ sp needed
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 83


 3586 0022 80BD     		pop	{r7, pc}
 3587              	.L289:
 3588              		.align	2
 3589              	.L288:
 3590 0024 00000000 		.word	devAddr
 3591              		.cfi_endproc
 3592              	.LFE77:
 3593              		.size	MPU6050_setSlave4Address, .-MPU6050_setSlave4Address
 3594              		.section	.text.MPU6050_getSlave4Register,"ax",%progbits
 3595              		.align	2
 3596              		.global	MPU6050_getSlave4Register
 3597              		.code	16
 3598              		.thumb_func
 3599              		.type	MPU6050_getSlave4Register, %function
 3600              	MPU6050_getSlave4Register:
 3601              	.LFB78:
1090:.\mpu6050.c   **** /** Get the active internal register for the Slave 4.
1091:.\mpu6050.c   ****  * Read/write operations for this slave will be done to whatever internal
1092:.\mpu6050.c   ****  * register address is stored in this MPU register.
1093:.\mpu6050.c   ****  *
1094:.\mpu6050.c   ****  * @return Current active register for Slave 4
1095:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_REG
1096:.\mpu6050.c   ****  */
1097:.\mpu6050.c   **** uint8_t MPU6050_getSlave4Register() {
 3602              		.loc 1 1097 0
 3603              		.cfi_startproc
 3604 0000 80B5     		push	{r7, lr}
 3605              		.cfi_def_cfa_offset 8
 3606              		.cfi_offset 7, -8
 3607              		.cfi_offset 14, -4
 3608 0002 00AF     		add	r7, sp, #0
 3609              		.cfi_def_cfa_register 7
1098:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV4_REG, buffer);
 3610              		.loc 1 1098 0
 3611 0004 064B     		ldr	r3, .L292
 3612 0006 1A78     		ldrb	r2, [r3]
 3613 0008 064B     		ldr	r3, .L292+4
 3614 000a 101C     		mov	r0, r2
 3615 000c 3221     		mov	r1, #50
 3616 000e 1A1C     		mov	r2, r3
 3617 0010 FFF7FEFF 		bl	I2CReadByte
1099:.\mpu6050.c   ****     return buffer[0];
 3618              		.loc 1 1099 0
 3619 0014 034B     		ldr	r3, .L292+4
 3620 0016 1B78     		ldrb	r3, [r3]
1100:.\mpu6050.c   **** }
 3621              		.loc 1 1100 0
 3622 0018 181C     		mov	r0, r3
 3623 001a BD46     		mov	sp, r7
 3624              		@ sp needed
 3625 001c 80BD     		pop	{r7, pc}
 3626              	.L293:
 3627 001e C046     		.align	2
 3628              	.L292:
 3629 0020 00000000 		.word	devAddr
 3630 0024 00000000 		.word	buffer
 3631              		.cfi_endproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 84


 3632              	.LFE78:
 3633              		.size	MPU6050_getSlave4Register, .-MPU6050_getSlave4Register
 3634              		.section	.text.MPU6050_setSlave4Register,"ax",%progbits
 3635              		.align	2
 3636              		.global	MPU6050_setSlave4Register
 3637              		.code	16
 3638              		.thumb_func
 3639              		.type	MPU6050_setSlave4Register, %function
 3640              	MPU6050_setSlave4Register:
 3641              	.LFB79:
1101:.\mpu6050.c   **** /** Set the active internal register for Slave 4.
1102:.\mpu6050.c   ****  * @param reg New active register for Slave 4
1103:.\mpu6050.c   ****  * @see getSlave4Register()
1104:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_REG
1105:.\mpu6050.c   ****  */
1106:.\mpu6050.c   **** void MPU6050_setSlave4Register(uint8_t reg) {
 3642              		.loc 1 1106 0
 3643              		.cfi_startproc
 3644 0000 80B5     		push	{r7, lr}
 3645              		.cfi_def_cfa_offset 8
 3646              		.cfi_offset 7, -8
 3647              		.cfi_offset 14, -4
 3648 0002 82B0     		sub	sp, sp, #8
 3649              		.cfi_def_cfa_offset 16
 3650 0004 00AF     		add	r7, sp, #0
 3651              		.cfi_def_cfa_register 7
 3652 0006 021C     		mov	r2, r0
 3653 0008 FB1D     		add	r3, r7, #7
 3654 000a 1A70     		strb	r2, [r3]
1107:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV4_REG, reg);
 3655              		.loc 1 1107 0
 3656 000c 054B     		ldr	r3, .L295
 3657 000e 1A78     		ldrb	r2, [r3]
 3658 0010 FB1D     		add	r3, r7, #7
 3659 0012 1B78     		ldrb	r3, [r3]
 3660 0014 101C     		mov	r0, r2
 3661 0016 3221     		mov	r1, #50
 3662 0018 1A1C     		mov	r2, r3
 3663 001a FFF7FEFF 		bl	I2CWriteByte
1108:.\mpu6050.c   **** }
 3664              		.loc 1 1108 0
 3665 001e BD46     		mov	sp, r7
 3666 0020 02B0     		add	sp, sp, #8
 3667              		@ sp needed
 3668 0022 80BD     		pop	{r7, pc}
 3669              	.L296:
 3670              		.align	2
 3671              	.L295:
 3672 0024 00000000 		.word	devAddr
 3673              		.cfi_endproc
 3674              	.LFE79:
 3675              		.size	MPU6050_setSlave4Register, .-MPU6050_setSlave4Register
 3676              		.section	.text.MPU6050_setSlave4OutputByte,"ax",%progbits
 3677              		.align	2
 3678              		.global	MPU6050_setSlave4OutputByte
 3679              		.code	16
 3680              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 85


 3681              		.type	MPU6050_setSlave4OutputByte, %function
 3682              	MPU6050_setSlave4OutputByte:
 3683              	.LFB80:
1109:.\mpu6050.c   **** /** Set new byte to write to Slave 4.
1110:.\mpu6050.c   ****  * This register stores the data to be written into the Slave 4. If I2C_SLV4_RW
1111:.\mpu6050.c   ****  * is set 1 (set to read), this register has no effect.
1112:.\mpu6050.c   ****  * @param data New byte to write to Slave 4
1113:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_DO
1114:.\mpu6050.c   ****  */
1115:.\mpu6050.c   **** void MPU6050_setSlave4OutputByte(uint8_t data) {
 3684              		.loc 1 1115 0
 3685              		.cfi_startproc
 3686 0000 80B5     		push	{r7, lr}
 3687              		.cfi_def_cfa_offset 8
 3688              		.cfi_offset 7, -8
 3689              		.cfi_offset 14, -4
 3690 0002 82B0     		sub	sp, sp, #8
 3691              		.cfi_def_cfa_offset 16
 3692 0004 00AF     		add	r7, sp, #0
 3693              		.cfi_def_cfa_register 7
 3694 0006 021C     		mov	r2, r0
 3695 0008 FB1D     		add	r3, r7, #7
 3696 000a 1A70     		strb	r2, [r3]
1116:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV4_DO, data);
 3697              		.loc 1 1116 0
 3698 000c 054B     		ldr	r3, .L298
 3699 000e 1A78     		ldrb	r2, [r3]
 3700 0010 FB1D     		add	r3, r7, #7
 3701 0012 1B78     		ldrb	r3, [r3]
 3702 0014 101C     		mov	r0, r2
 3703 0016 3321     		mov	r1, #51
 3704 0018 1A1C     		mov	r2, r3
 3705 001a FFF7FEFF 		bl	I2CWriteByte
1117:.\mpu6050.c   **** }
 3706              		.loc 1 1117 0
 3707 001e BD46     		mov	sp, r7
 3708 0020 02B0     		add	sp, sp, #8
 3709              		@ sp needed
 3710 0022 80BD     		pop	{r7, pc}
 3711              	.L299:
 3712              		.align	2
 3713              	.L298:
 3714 0024 00000000 		.word	devAddr
 3715              		.cfi_endproc
 3716              	.LFE80:
 3717              		.size	MPU6050_setSlave4OutputByte, .-MPU6050_setSlave4OutputByte
 3718              		.section	.text.MPU6050_getSlave4Enabled,"ax",%progbits
 3719              		.align	2
 3720              		.global	MPU6050_getSlave4Enabled
 3721              		.code	16
 3722              		.thumb_func
 3723              		.type	MPU6050_getSlave4Enabled, %function
 3724              	MPU6050_getSlave4Enabled:
 3725              	.LFB81:
1118:.\mpu6050.c   **** /** Get the enabled value for the Slave 4.
1119:.\mpu6050.c   ****  * When set to 1, this bit enables Slave 4 for data transfer operations. When
1120:.\mpu6050.c   ****  * cleared to 0, this bit disables Slave 4 from data transfer operations.
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 86


1121:.\mpu6050.c   ****  * @return Current enabled value for Slave 4
1122:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1123:.\mpu6050.c   ****  */
1124:.\mpu6050.c   **** bool MPU6050_getSlave4Enabled() {
 3726              		.loc 1 1124 0
 3727              		.cfi_startproc
 3728 0000 80B5     		push	{r7, lr}
 3729              		.cfi_def_cfa_offset 8
 3730              		.cfi_offset 7, -8
 3731              		.cfi_offset 14, -4
 3732 0002 00AF     		add	r7, sp, #0
 3733              		.cfi_def_cfa_register 7
1125:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_EN_BIT, buffer);
 3734              		.loc 1 1125 0
 3735 0004 074B     		ldr	r3, .L302
 3736 0006 1A78     		ldrb	r2, [r3]
 3737 0008 074B     		ldr	r3, .L302+4
 3738 000a 101C     		mov	r0, r2
 3739 000c 3421     		mov	r1, #52
 3740 000e 0722     		mov	r2, #7
 3741 0010 FFF7FEFF 		bl	I2CReadBit
1126:.\mpu6050.c   ****     return buffer[0];
 3742              		.loc 1 1126 0
 3743 0014 044B     		ldr	r3, .L302+4
 3744 0016 1B78     		ldrb	r3, [r3]
 3745 0018 5A1E     		sub	r2, r3, #1
 3746 001a 9341     		sbc	r3, r3, r2
 3747 001c DBB2     		uxtb	r3, r3
1127:.\mpu6050.c   **** }
 3748              		.loc 1 1127 0
 3749 001e 181C     		mov	r0, r3
 3750 0020 BD46     		mov	sp, r7
 3751              		@ sp needed
 3752 0022 80BD     		pop	{r7, pc}
 3753              	.L303:
 3754              		.align	2
 3755              	.L302:
 3756 0024 00000000 		.word	devAddr
 3757 0028 00000000 		.word	buffer
 3758              		.cfi_endproc
 3759              	.LFE81:
 3760              		.size	MPU6050_getSlave4Enabled, .-MPU6050_getSlave4Enabled
 3761              		.section	.text.MPU6050_setSlave4Enabled,"ax",%progbits
 3762              		.align	2
 3763              		.global	MPU6050_setSlave4Enabled
 3764              		.code	16
 3765              		.thumb_func
 3766              		.type	MPU6050_setSlave4Enabled, %function
 3767              	MPU6050_setSlave4Enabled:
 3768              	.LFB82:
1128:.\mpu6050.c   **** /** Set the enabled value for Slave 4.
1129:.\mpu6050.c   ****  * @param enabled New enabled value for Slave 4
1130:.\mpu6050.c   ****  * @see getSlave4Enabled()
1131:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1132:.\mpu6050.c   ****  */
1133:.\mpu6050.c   **** void MPU6050_setSlave4Enabled(bool enabled) {
 3769              		.loc 1 1133 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 87


 3770              		.cfi_startproc
 3771 0000 80B5     		push	{r7, lr}
 3772              		.cfi_def_cfa_offset 8
 3773              		.cfi_offset 7, -8
 3774              		.cfi_offset 14, -4
 3775 0002 82B0     		sub	sp, sp, #8
 3776              		.cfi_def_cfa_offset 16
 3777 0004 00AF     		add	r7, sp, #0
 3778              		.cfi_def_cfa_register 7
 3779 0006 021C     		mov	r2, r0
 3780 0008 FB1D     		add	r3, r7, #7
 3781 000a 1A70     		strb	r2, [r3]
1134:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_EN_BIT, enabled);
 3782              		.loc 1 1134 0
 3783 000c 054B     		ldr	r3, .L305
 3784 000e 1A78     		ldrb	r2, [r3]
 3785 0010 FB1D     		add	r3, r7, #7
 3786 0012 1B78     		ldrb	r3, [r3]
 3787 0014 101C     		mov	r0, r2
 3788 0016 3421     		mov	r1, #52
 3789 0018 0722     		mov	r2, #7
 3790 001a FFF7FEFF 		bl	I2CWriteBit
1135:.\mpu6050.c   **** }
 3791              		.loc 1 1135 0
 3792 001e BD46     		mov	sp, r7
 3793 0020 02B0     		add	sp, sp, #8
 3794              		@ sp needed
 3795 0022 80BD     		pop	{r7, pc}
 3796              	.L306:
 3797              		.align	2
 3798              	.L305:
 3799 0024 00000000 		.word	devAddr
 3800              		.cfi_endproc
 3801              	.LFE82:
 3802              		.size	MPU6050_setSlave4Enabled, .-MPU6050_setSlave4Enabled
 3803              		.section	.text.MPU6050_getSlave4InterruptEnabled,"ax",%progbits
 3804              		.align	2
 3805              		.global	MPU6050_getSlave4InterruptEnabled
 3806              		.code	16
 3807              		.thumb_func
 3808              		.type	MPU6050_getSlave4InterruptEnabled, %function
 3809              	MPU6050_getSlave4InterruptEnabled:
 3810              	.LFB83:
1136:.\mpu6050.c   **** /** Get the enabled value for Slave 4 transaction interrupts.
1137:.\mpu6050.c   ****  * When set to 1, this bit enables the generation of an interrupt signal upon
1138:.\mpu6050.c   ****  * completion of a Slave 4 transaction. When cleared to 0, this bit disables the
1139:.\mpu6050.c   ****  * generation of an interrupt signal upon completion of a Slave 4 transaction.
1140:.\mpu6050.c   ****  * The interrupt status can be observed in Register 54.
1141:.\mpu6050.c   ****  *
1142:.\mpu6050.c   ****  * @return Current enabled value for Slave 4 transaction interrupts.
1143:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1144:.\mpu6050.c   ****  */
1145:.\mpu6050.c   **** bool MPU6050_getSlave4InterruptEnabled() {
 3811              		.loc 1 1145 0
 3812              		.cfi_startproc
 3813 0000 80B5     		push	{r7, lr}
 3814              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 88


 3815              		.cfi_offset 7, -8
 3816              		.cfi_offset 14, -4
 3817 0002 00AF     		add	r7, sp, #0
 3818              		.cfi_def_cfa_register 7
1146:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_INT_EN_BIT, buffer);
 3819              		.loc 1 1146 0
 3820 0004 074B     		ldr	r3, .L309
 3821 0006 1A78     		ldrb	r2, [r3]
 3822 0008 074B     		ldr	r3, .L309+4
 3823 000a 101C     		mov	r0, r2
 3824 000c 3421     		mov	r1, #52
 3825 000e 0622     		mov	r2, #6
 3826 0010 FFF7FEFF 		bl	I2CReadBit
1147:.\mpu6050.c   ****     return buffer[0];
 3827              		.loc 1 1147 0
 3828 0014 044B     		ldr	r3, .L309+4
 3829 0016 1B78     		ldrb	r3, [r3]
 3830 0018 5A1E     		sub	r2, r3, #1
 3831 001a 9341     		sbc	r3, r3, r2
 3832 001c DBB2     		uxtb	r3, r3
1148:.\mpu6050.c   **** }
 3833              		.loc 1 1148 0
 3834 001e 181C     		mov	r0, r3
 3835 0020 BD46     		mov	sp, r7
 3836              		@ sp needed
 3837 0022 80BD     		pop	{r7, pc}
 3838              	.L310:
 3839              		.align	2
 3840              	.L309:
 3841 0024 00000000 		.word	devAddr
 3842 0028 00000000 		.word	buffer
 3843              		.cfi_endproc
 3844              	.LFE83:
 3845              		.size	MPU6050_getSlave4InterruptEnabled, .-MPU6050_getSlave4InterruptEnabled
 3846              		.section	.text.MPU6050_setSlave4InterruptEnabled,"ax",%progbits
 3847              		.align	2
 3848              		.global	MPU6050_setSlave4InterruptEnabled
 3849              		.code	16
 3850              		.thumb_func
 3851              		.type	MPU6050_setSlave4InterruptEnabled, %function
 3852              	MPU6050_setSlave4InterruptEnabled:
 3853              	.LFB84:
1149:.\mpu6050.c   **** /** Set the enabled value for Slave 4 transaction interrupts.
1150:.\mpu6050.c   ****  * @param enabled New enabled value for Slave 4 transaction interrupts.
1151:.\mpu6050.c   ****  * @see getSlave4InterruptEnabled()
1152:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1153:.\mpu6050.c   ****  */
1154:.\mpu6050.c   **** void MPU6050_setSlave4InterruptEnabled(bool enabled) {
 3854              		.loc 1 1154 0
 3855              		.cfi_startproc
 3856 0000 80B5     		push	{r7, lr}
 3857              		.cfi_def_cfa_offset 8
 3858              		.cfi_offset 7, -8
 3859              		.cfi_offset 14, -4
 3860 0002 82B0     		sub	sp, sp, #8
 3861              		.cfi_def_cfa_offset 16
 3862 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 89


 3863              		.cfi_def_cfa_register 7
 3864 0006 021C     		mov	r2, r0
 3865 0008 FB1D     		add	r3, r7, #7
 3866 000a 1A70     		strb	r2, [r3]
1155:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_INT_EN_BIT, enabled);
 3867              		.loc 1 1155 0
 3868 000c 054B     		ldr	r3, .L312
 3869 000e 1A78     		ldrb	r2, [r3]
 3870 0010 FB1D     		add	r3, r7, #7
 3871 0012 1B78     		ldrb	r3, [r3]
 3872 0014 101C     		mov	r0, r2
 3873 0016 3421     		mov	r1, #52
 3874 0018 0622     		mov	r2, #6
 3875 001a FFF7FEFF 		bl	I2CWriteBit
1156:.\mpu6050.c   **** }
 3876              		.loc 1 1156 0
 3877 001e BD46     		mov	sp, r7
 3878 0020 02B0     		add	sp, sp, #8
 3879              		@ sp needed
 3880 0022 80BD     		pop	{r7, pc}
 3881              	.L313:
 3882              		.align	2
 3883              	.L312:
 3884 0024 00000000 		.word	devAddr
 3885              		.cfi_endproc
 3886              	.LFE84:
 3887              		.size	MPU6050_setSlave4InterruptEnabled, .-MPU6050_setSlave4InterruptEnabled
 3888              		.section	.text.MPU6050_getSlave4WriteMode,"ax",%progbits
 3889              		.align	2
 3890              		.global	MPU6050_getSlave4WriteMode
 3891              		.code	16
 3892              		.thumb_func
 3893              		.type	MPU6050_getSlave4WriteMode, %function
 3894              	MPU6050_getSlave4WriteMode:
 3895              	.LFB85:
1157:.\mpu6050.c   **** /** Get write mode for Slave 4.
1158:.\mpu6050.c   ****  * When set to 1, the transaction will read or write data only. When cleared to
1159:.\mpu6050.c   ****  * 0, the transaction will write a register address prior to reading or writing
1160:.\mpu6050.c   ****  * data. This should equal 0 when specifying the register address within the
1161:.\mpu6050.c   ****  * Slave device to/from which the ensuing data transaction will take place.
1162:.\mpu6050.c   ****  *
1163:.\mpu6050.c   ****  * @return Current write mode for Slave 4 (0 = register address + data, 1 = data only)
1164:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1165:.\mpu6050.c   ****  */
1166:.\mpu6050.c   **** bool MPU6050_getSlave4WriteMode() {
 3896              		.loc 1 1166 0
 3897              		.cfi_startproc
 3898 0000 80B5     		push	{r7, lr}
 3899              		.cfi_def_cfa_offset 8
 3900              		.cfi_offset 7, -8
 3901              		.cfi_offset 14, -4
 3902 0002 00AF     		add	r7, sp, #0
 3903              		.cfi_def_cfa_register 7
1167:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_REG_DIS_BIT, buffer);
 3904              		.loc 1 1167 0
 3905 0004 074B     		ldr	r3, .L316
 3906 0006 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 90


 3907 0008 074B     		ldr	r3, .L316+4
 3908 000a 101C     		mov	r0, r2
 3909 000c 3421     		mov	r1, #52
 3910 000e 0522     		mov	r2, #5
 3911 0010 FFF7FEFF 		bl	I2CReadBit
1168:.\mpu6050.c   ****     return buffer[0];
 3912              		.loc 1 1168 0
 3913 0014 044B     		ldr	r3, .L316+4
 3914 0016 1B78     		ldrb	r3, [r3]
 3915 0018 5A1E     		sub	r2, r3, #1
 3916 001a 9341     		sbc	r3, r3, r2
 3917 001c DBB2     		uxtb	r3, r3
1169:.\mpu6050.c   **** }
 3918              		.loc 1 1169 0
 3919 001e 181C     		mov	r0, r3
 3920 0020 BD46     		mov	sp, r7
 3921              		@ sp needed
 3922 0022 80BD     		pop	{r7, pc}
 3923              	.L317:
 3924              		.align	2
 3925              	.L316:
 3926 0024 00000000 		.word	devAddr
 3927 0028 00000000 		.word	buffer
 3928              		.cfi_endproc
 3929              	.LFE85:
 3930              		.size	MPU6050_getSlave4WriteMode, .-MPU6050_getSlave4WriteMode
 3931              		.section	.text.MPU6050_setSlave4WriteMode,"ax",%progbits
 3932              		.align	2
 3933              		.global	MPU6050_setSlave4WriteMode
 3934              		.code	16
 3935              		.thumb_func
 3936              		.type	MPU6050_setSlave4WriteMode, %function
 3937              	MPU6050_setSlave4WriteMode:
 3938              	.LFB86:
1170:.\mpu6050.c   **** /** Set write mode for the Slave 4.
1171:.\mpu6050.c   ****  * @param mode New write mode for Slave 4 (0 = register address + data, 1 = data only)
1172:.\mpu6050.c   ****  * @see getSlave4WriteMode()
1173:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1174:.\mpu6050.c   ****  */
1175:.\mpu6050.c   **** void MPU6050_setSlave4WriteMode(bool mode) {
 3939              		.loc 1 1175 0
 3940              		.cfi_startproc
 3941 0000 80B5     		push	{r7, lr}
 3942              		.cfi_def_cfa_offset 8
 3943              		.cfi_offset 7, -8
 3944              		.cfi_offset 14, -4
 3945 0002 82B0     		sub	sp, sp, #8
 3946              		.cfi_def_cfa_offset 16
 3947 0004 00AF     		add	r7, sp, #0
 3948              		.cfi_def_cfa_register 7
 3949 0006 021C     		mov	r2, r0
 3950 0008 FB1D     		add	r3, r7, #7
 3951 000a 1A70     		strb	r2, [r3]
1176:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_REG_DIS_BIT, mode);
 3952              		.loc 1 1176 0
 3953 000c 054B     		ldr	r3, .L319
 3954 000e 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 91


 3955 0010 FB1D     		add	r3, r7, #7
 3956 0012 1B78     		ldrb	r3, [r3]
 3957 0014 101C     		mov	r0, r2
 3958 0016 3421     		mov	r1, #52
 3959 0018 0522     		mov	r2, #5
 3960 001a FFF7FEFF 		bl	I2CWriteBit
1177:.\mpu6050.c   **** }
 3961              		.loc 1 1177 0
 3962 001e BD46     		mov	sp, r7
 3963 0020 02B0     		add	sp, sp, #8
 3964              		@ sp needed
 3965 0022 80BD     		pop	{r7, pc}
 3966              	.L320:
 3967              		.align	2
 3968              	.L319:
 3969 0024 00000000 		.word	devAddr
 3970              		.cfi_endproc
 3971              	.LFE86:
 3972              		.size	MPU6050_setSlave4WriteMode, .-MPU6050_setSlave4WriteMode
 3973              		.section	.text.MPU6050_getSlave4MasterDelay,"ax",%progbits
 3974              		.align	2
 3975              		.global	MPU6050_getSlave4MasterDelay
 3976              		.code	16
 3977              		.thumb_func
 3978              		.type	MPU6050_getSlave4MasterDelay, %function
 3979              	MPU6050_getSlave4MasterDelay:
 3980              	.LFB87:
1178:.\mpu6050.c   **** /** Get Slave 4 master delay value.
1179:.\mpu6050.c   ****  * This configures the reduced access rate of I2C slaves relative to the Sample
1180:.\mpu6050.c   ****  * Rate. When a slave's access rate is decreased relative to the Sample Rate,
1181:.\mpu6050.c   ****  * the slave is accessed every:
1182:.\mpu6050.c   ****  *
1183:.\mpu6050.c   ****  *     1 / (1 + I2C_MST_DLY) samples
1184:.\mpu6050.c   ****  *
1185:.\mpu6050.c   ****  * This base Sample Rate in turn is determined by SMPLRT_DIV (register 25) and
1186:.\mpu6050.c   ****  * DLPF_CFG (register 26). Whether a slave's access rate is reduced relative to
1187:.\mpu6050.c   ****  * the Sample Rate is determined by I2C_MST_DELAY_CTRL (register 103). For
1188:.\mpu6050.c   ****  * further information regarding the Sample Rate, please refer to register 25.
1189:.\mpu6050.c   ****  *
1190:.\mpu6050.c   ****  * @return Current Slave 4 master delay value
1191:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1192:.\mpu6050.c   ****  */
1193:.\mpu6050.c   **** uint8_t MPU6050_getSlave4MasterDelay() {
 3981              		.loc 1 1193 0
 3982              		.cfi_startproc
 3983 0000 80B5     		push	{r7, lr}
 3984              		.cfi_def_cfa_offset 8
 3985              		.cfi_offset 7, -8
 3986              		.cfi_offset 14, -4
 3987 0002 82B0     		sub	sp, sp, #8
 3988              		.cfi_def_cfa_offset 16
 3989 0004 02AF     		add	r7, sp, #8
 3990              		.cfi_def_cfa 7, 8
1194:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_MST_DLY_BIT, I2C_MPU6050_I2
 3991              		.loc 1 1194 0
 3992 0006 074B     		ldr	r3, .L323
 3993 0008 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 92


 3994 000a 074A     		ldr	r2, .L323+4
 3995 000c 0092     		str	r2, [sp]
 3996 000e 181C     		mov	r0, r3
 3997 0010 3421     		mov	r1, #52
 3998 0012 0422     		mov	r2, #4
 3999 0014 0523     		mov	r3, #5
 4000 0016 FFF7FEFF 		bl	I2CReadBits
1195:.\mpu6050.c   ****     return buffer[0];
 4001              		.loc 1 1195 0
 4002 001a 034B     		ldr	r3, .L323+4
 4003 001c 1B78     		ldrb	r3, [r3]
1196:.\mpu6050.c   **** }
 4004              		.loc 1 1196 0
 4005 001e 181C     		mov	r0, r3
 4006 0020 BD46     		mov	sp, r7
 4007              		@ sp needed
 4008 0022 80BD     		pop	{r7, pc}
 4009              	.L324:
 4010              		.align	2
 4011              	.L323:
 4012 0024 00000000 		.word	devAddr
 4013 0028 00000000 		.word	buffer
 4014              		.cfi_endproc
 4015              	.LFE87:
 4016              		.size	MPU6050_getSlave4MasterDelay, .-MPU6050_getSlave4MasterDelay
 4017              		.section	.text.MPU6050_setSlave4MasterDelay,"ax",%progbits
 4018              		.align	2
 4019              		.global	MPU6050_setSlave4MasterDelay
 4020              		.code	16
 4021              		.thumb_func
 4022              		.type	MPU6050_setSlave4MasterDelay, %function
 4023              	MPU6050_setSlave4MasterDelay:
 4024              	.LFB88:
1197:.\mpu6050.c   **** /** Set Slave 4 master delay value.
1198:.\mpu6050.c   ****  * @param delay New Slave 4 master delay value
1199:.\mpu6050.c   ****  * @see getSlave4MasterDelay()
1200:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_CTRL
1201:.\mpu6050.c   ****  */
1202:.\mpu6050.c   **** void MPU6050_setSlave4MasterDelay(uint8_t delay) {
 4025              		.loc 1 1202 0
 4026              		.cfi_startproc
 4027 0000 80B5     		push	{r7, lr}
 4028              		.cfi_def_cfa_offset 8
 4029              		.cfi_offset 7, -8
 4030              		.cfi_offset 14, -4
 4031 0002 84B0     		sub	sp, sp, #16
 4032              		.cfi_def_cfa_offset 24
 4033 0004 02AF     		add	r7, sp, #8
 4034              		.cfi_def_cfa 7, 16
 4035 0006 021C     		mov	r2, r0
 4036 0008 FB1D     		add	r3, r7, #7
 4037 000a 1A70     		strb	r2, [r3]
1203:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_I2C_SLV4_CTRL, I2C_MPU6050_I2C_SLV4_MST_DLY_BIT, I2C_MPU6050_I
 4038              		.loc 1 1203 0
 4039 000c 064B     		ldr	r3, .L326
 4040 000e 1B78     		ldrb	r3, [r3]
 4041 0010 FA1D     		add	r2, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 93


 4042 0012 1278     		ldrb	r2, [r2]
 4043 0014 0092     		str	r2, [sp]
 4044 0016 181C     		mov	r0, r3
 4045 0018 3421     		mov	r1, #52
 4046 001a 0422     		mov	r2, #4
 4047 001c 0523     		mov	r3, #5
 4048 001e FFF7FEFF 		bl	I2CWriteBits
1204:.\mpu6050.c   **** }
 4049              		.loc 1 1204 0
 4050 0022 BD46     		mov	sp, r7
 4051 0024 02B0     		add	sp, sp, #8
 4052              		@ sp needed
 4053 0026 80BD     		pop	{r7, pc}
 4054              	.L327:
 4055              		.align	2
 4056              	.L326:
 4057 0028 00000000 		.word	devAddr
 4058              		.cfi_endproc
 4059              	.LFE88:
 4060              		.size	MPU6050_setSlave4MasterDelay, .-MPU6050_setSlave4MasterDelay
 4061              		.section	.text.MPU6050_getSlate4InputByte,"ax",%progbits
 4062              		.align	2
 4063              		.global	MPU6050_getSlate4InputByte
 4064              		.code	16
 4065              		.thumb_func
 4066              		.type	MPU6050_getSlate4InputByte, %function
 4067              	MPU6050_getSlate4InputByte:
 4068              	.LFB89:
1205:.\mpu6050.c   **** /** Get last available byte read from Slave 4.
1206:.\mpu6050.c   ****  * This register stores the data read from Slave 4. This field is populated
1207:.\mpu6050.c   ****  * after a read transaction.
1208:.\mpu6050.c   ****  * @return Last available byte read from to Slave 4
1209:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV4_DI
1210:.\mpu6050.c   ****  */
1211:.\mpu6050.c   **** uint8_t MPU6050_getSlate4InputByte() {
 4069              		.loc 1 1211 0
 4070              		.cfi_startproc
 4071 0000 80B5     		push	{r7, lr}
 4072              		.cfi_def_cfa_offset 8
 4073              		.cfi_offset 7, -8
 4074              		.cfi_offset 14, -4
 4075 0002 00AF     		add	r7, sp, #0
 4076              		.cfi_def_cfa_register 7
1212:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_I2C_SLV4_DI, buffer);
 4077              		.loc 1 1212 0
 4078 0004 064B     		ldr	r3, .L330
 4079 0006 1A78     		ldrb	r2, [r3]
 4080 0008 064B     		ldr	r3, .L330+4
 4081 000a 101C     		mov	r0, r2
 4082 000c 3521     		mov	r1, #53
 4083 000e 1A1C     		mov	r2, r3
 4084 0010 FFF7FEFF 		bl	I2CReadByte
1213:.\mpu6050.c   ****     return buffer[0];
 4085              		.loc 1 1213 0
 4086 0014 034B     		ldr	r3, .L330+4
 4087 0016 1B78     		ldrb	r3, [r3]
1214:.\mpu6050.c   **** }
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 94


 4088              		.loc 1 1214 0
 4089 0018 181C     		mov	r0, r3
 4090 001a BD46     		mov	sp, r7
 4091              		@ sp needed
 4092 001c 80BD     		pop	{r7, pc}
 4093              	.L331:
 4094 001e C046     		.align	2
 4095              	.L330:
 4096 0020 00000000 		.word	devAddr
 4097 0024 00000000 		.word	buffer
 4098              		.cfi_endproc
 4099              	.LFE89:
 4100              		.size	MPU6050_getSlate4InputByte, .-MPU6050_getSlate4InputByte
 4101              		.section	.text.MPU6050_getPassthroughStatus,"ax",%progbits
 4102              		.align	2
 4103              		.global	MPU6050_getPassthroughStatus
 4104              		.code	16
 4105              		.thumb_func
 4106              		.type	MPU6050_getPassthroughStatus, %function
 4107              	MPU6050_getPassthroughStatus:
 4108              	.LFB90:
1215:.\mpu6050.c   **** 
1216:.\mpu6050.c   **** // I2C_MST_STATUS register
1217:.\mpu6050.c   **** 
1218:.\mpu6050.c   **** /** Get FSYNC interrupt status.
1219:.\mpu6050.c   ****  * This bit reflects the status of the FSYNC interrupt from an external device
1220:.\mpu6050.c   ****  * into the MPU-60X0. This is used as a way to pass an external interrupt
1221:.\mpu6050.c   ****  * through the MPU-60X0 to the host application processor. When set to 1, this
1222:.\mpu6050.c   ****  * bit will cause an interrupt if FSYNC_INT_EN is asserted in INT_PIN_CFG
1223:.\mpu6050.c   ****  * (Register 55).
1224:.\mpu6050.c   ****  * @return FSYNC interrupt status
1225:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1226:.\mpu6050.c   ****  */
1227:.\mpu6050.c   **** bool MPU6050_getPassthroughStatus() {
 4109              		.loc 1 1227 0
 4110              		.cfi_startproc
 4111 0000 80B5     		push	{r7, lr}
 4112              		.cfi_def_cfa_offset 8
 4113              		.cfi_offset 7, -8
 4114              		.cfi_offset 14, -4
 4115 0002 00AF     		add	r7, sp, #0
 4116              		.cfi_def_cfa_register 7
1228:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_PASS_THROUGH_BIT, buffer);
 4117              		.loc 1 1228 0
 4118 0004 074B     		ldr	r3, .L334
 4119 0006 1A78     		ldrb	r2, [r3]
 4120 0008 074B     		ldr	r3, .L334+4
 4121 000a 101C     		mov	r0, r2
 4122 000c 3621     		mov	r1, #54
 4123 000e 0722     		mov	r2, #7
 4124 0010 FFF7FEFF 		bl	I2CReadBit
1229:.\mpu6050.c   ****     return buffer[0];
 4125              		.loc 1 1229 0
 4126 0014 044B     		ldr	r3, .L334+4
 4127 0016 1B78     		ldrb	r3, [r3]
 4128 0018 5A1E     		sub	r2, r3, #1
 4129 001a 9341     		sbc	r3, r3, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 95


 4130 001c DBB2     		uxtb	r3, r3
1230:.\mpu6050.c   **** }
 4131              		.loc 1 1230 0
 4132 001e 181C     		mov	r0, r3
 4133 0020 BD46     		mov	sp, r7
 4134              		@ sp needed
 4135 0022 80BD     		pop	{r7, pc}
 4136              	.L335:
 4137              		.align	2
 4138              	.L334:
 4139 0024 00000000 		.word	devAddr
 4140 0028 00000000 		.word	buffer
 4141              		.cfi_endproc
 4142              	.LFE90:
 4143              		.size	MPU6050_getPassthroughStatus, .-MPU6050_getPassthroughStatus
 4144              		.section	.text.MPU6050_getSlave4IsDone,"ax",%progbits
 4145              		.align	2
 4146              		.global	MPU6050_getSlave4IsDone
 4147              		.code	16
 4148              		.thumb_func
 4149              		.type	MPU6050_getSlave4IsDone, %function
 4150              	MPU6050_getSlave4IsDone:
 4151              	.LFB91:
1231:.\mpu6050.c   **** /** Get Slave 4 transaction done status.
1232:.\mpu6050.c   ****  * Automatically sets to 1 when a Slave 4 transaction has completed. This
1233:.\mpu6050.c   ****  * triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register
1234:.\mpu6050.c   ****  * (Register 56) is asserted and if the SLV_4_DONE_INT bit is asserted in the
1235:.\mpu6050.c   ****  * I2C_SLV4_CTRL register (Register 52).
1236:.\mpu6050.c   ****  * @return Slave 4 transaction done status
1237:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1238:.\mpu6050.c   ****  */
1239:.\mpu6050.c   **** bool MPU6050_getSlave4IsDone() {
 4152              		.loc 1 1239 0
 4153              		.cfi_startproc
 4154 0000 80B5     		push	{r7, lr}
 4155              		.cfi_def_cfa_offset 8
 4156              		.cfi_offset 7, -8
 4157              		.cfi_offset 14, -4
 4158 0002 00AF     		add	r7, sp, #0
 4159              		.cfi_def_cfa_register 7
1240:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV4_DONE_BIT, buffer);
 4160              		.loc 1 1240 0
 4161 0004 074B     		ldr	r3, .L338
 4162 0006 1A78     		ldrb	r2, [r3]
 4163 0008 074B     		ldr	r3, .L338+4
 4164 000a 101C     		mov	r0, r2
 4165 000c 3621     		mov	r1, #54
 4166 000e 0622     		mov	r2, #6
 4167 0010 FFF7FEFF 		bl	I2CReadBit
1241:.\mpu6050.c   ****     return buffer[0];
 4168              		.loc 1 1241 0
 4169 0014 044B     		ldr	r3, .L338+4
 4170 0016 1B78     		ldrb	r3, [r3]
 4171 0018 5A1E     		sub	r2, r3, #1
 4172 001a 9341     		sbc	r3, r3, r2
 4173 001c DBB2     		uxtb	r3, r3
1242:.\mpu6050.c   **** }
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 96


 4174              		.loc 1 1242 0
 4175 001e 181C     		mov	r0, r3
 4176 0020 BD46     		mov	sp, r7
 4177              		@ sp needed
 4178 0022 80BD     		pop	{r7, pc}
 4179              	.L339:
 4180              		.align	2
 4181              	.L338:
 4182 0024 00000000 		.word	devAddr
 4183 0028 00000000 		.word	buffer
 4184              		.cfi_endproc
 4185              	.LFE91:
 4186              		.size	MPU6050_getSlave4IsDone, .-MPU6050_getSlave4IsDone
 4187              		.section	.text.MPU6050_getLostArbitration,"ax",%progbits
 4188              		.align	2
 4189              		.global	MPU6050_getLostArbitration
 4190              		.code	16
 4191              		.thumb_func
 4192              		.type	MPU6050_getLostArbitration, %function
 4193              	MPU6050_getLostArbitration:
 4194              	.LFB92:
1243:.\mpu6050.c   **** /** Get master arbitration lost status.
1244:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master has lost arbitration of
1245:.\mpu6050.c   ****  * the auxiliary I2C bus (an error condition). This triggers an interrupt if the
1246:.\mpu6050.c   ****  * I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted.
1247:.\mpu6050.c   ****  * @return Master arbitration lost status
1248:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1249:.\mpu6050.c   ****  */
1250:.\mpu6050.c   **** bool MPU6050_getLostArbitration() {
 4195              		.loc 1 1250 0
 4196              		.cfi_startproc
 4197 0000 80B5     		push	{r7, lr}
 4198              		.cfi_def_cfa_offset 8
 4199              		.cfi_offset 7, -8
 4200              		.cfi_offset 14, -4
 4201 0002 00AF     		add	r7, sp, #0
 4202              		.cfi_def_cfa_register 7
1251:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_LOST_ARB_BIT, buffer);
 4203              		.loc 1 1251 0
 4204 0004 074B     		ldr	r3, .L342
 4205 0006 1A78     		ldrb	r2, [r3]
 4206 0008 074B     		ldr	r3, .L342+4
 4207 000a 101C     		mov	r0, r2
 4208 000c 3621     		mov	r1, #54
 4209 000e 0522     		mov	r2, #5
 4210 0010 FFF7FEFF 		bl	I2CReadBit
1252:.\mpu6050.c   ****     return buffer[0];
 4211              		.loc 1 1252 0
 4212 0014 044B     		ldr	r3, .L342+4
 4213 0016 1B78     		ldrb	r3, [r3]
 4214 0018 5A1E     		sub	r2, r3, #1
 4215 001a 9341     		sbc	r3, r3, r2
 4216 001c DBB2     		uxtb	r3, r3
1253:.\mpu6050.c   **** }
 4217              		.loc 1 1253 0
 4218 001e 181C     		mov	r0, r3
 4219 0020 BD46     		mov	sp, r7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 97


 4220              		@ sp needed
 4221 0022 80BD     		pop	{r7, pc}
 4222              	.L343:
 4223              		.align	2
 4224              	.L342:
 4225 0024 00000000 		.word	devAddr
 4226 0028 00000000 		.word	buffer
 4227              		.cfi_endproc
 4228              	.LFE92:
 4229              		.size	MPU6050_getLostArbitration, .-MPU6050_getLostArbitration
 4230              		.section	.text.MPU6050_getSlave4Nack,"ax",%progbits
 4231              		.align	2
 4232              		.global	MPU6050_getSlave4Nack
 4233              		.code	16
 4234              		.thumb_func
 4235              		.type	MPU6050_getSlave4Nack, %function
 4236              	MPU6050_getSlave4Nack:
 4237              	.LFB93:
1254:.\mpu6050.c   **** /** Get Slave 4 NACK status.
1255:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1256:.\mpu6050.c   ****  * transaction with Slave 4. This triggers an interrupt if the I2C_MST_INT_EN
1257:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1258:.\mpu6050.c   ****  * @return Slave 4 NACK interrupt status
1259:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1260:.\mpu6050.c   ****  */
1261:.\mpu6050.c   **** bool MPU6050_getSlave4Nack() {
 4238              		.loc 1 1261 0
 4239              		.cfi_startproc
 4240 0000 80B5     		push	{r7, lr}
 4241              		.cfi_def_cfa_offset 8
 4242              		.cfi_offset 7, -8
 4243              		.cfi_offset 14, -4
 4244 0002 00AF     		add	r7, sp, #0
 4245              		.cfi_def_cfa_register 7
1262:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV4_NACK_BIT, buffer);
 4246              		.loc 1 1262 0
 4247 0004 074B     		ldr	r3, .L346
 4248 0006 1A78     		ldrb	r2, [r3]
 4249 0008 074B     		ldr	r3, .L346+4
 4250 000a 101C     		mov	r0, r2
 4251 000c 3621     		mov	r1, #54
 4252 000e 0422     		mov	r2, #4
 4253 0010 FFF7FEFF 		bl	I2CReadBit
1263:.\mpu6050.c   ****     return buffer[0];
 4254              		.loc 1 1263 0
 4255 0014 044B     		ldr	r3, .L346+4
 4256 0016 1B78     		ldrb	r3, [r3]
 4257 0018 5A1E     		sub	r2, r3, #1
 4258 001a 9341     		sbc	r3, r3, r2
 4259 001c DBB2     		uxtb	r3, r3
1264:.\mpu6050.c   **** }
 4260              		.loc 1 1264 0
 4261 001e 181C     		mov	r0, r3
 4262 0020 BD46     		mov	sp, r7
 4263              		@ sp needed
 4264 0022 80BD     		pop	{r7, pc}
 4265              	.L347:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 98


 4266              		.align	2
 4267              	.L346:
 4268 0024 00000000 		.word	devAddr
 4269 0028 00000000 		.word	buffer
 4270              		.cfi_endproc
 4271              	.LFE93:
 4272              		.size	MPU6050_getSlave4Nack, .-MPU6050_getSlave4Nack
 4273              		.section	.text.MPU6050_getSlave3Nack,"ax",%progbits
 4274              		.align	2
 4275              		.global	MPU6050_getSlave3Nack
 4276              		.code	16
 4277              		.thumb_func
 4278              		.type	MPU6050_getSlave3Nack, %function
 4279              	MPU6050_getSlave3Nack:
 4280              	.LFB94:
1265:.\mpu6050.c   **** /** Get Slave 3 NACK status.
1266:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1267:.\mpu6050.c   ****  * transaction with Slave 3. This triggers an interrupt if the I2C_MST_INT_EN
1268:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1269:.\mpu6050.c   ****  * @return Slave 3 NACK interrupt status
1270:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1271:.\mpu6050.c   ****  */
1272:.\mpu6050.c   **** bool MPU6050_getSlave3Nack() {
 4281              		.loc 1 1272 0
 4282              		.cfi_startproc
 4283 0000 80B5     		push	{r7, lr}
 4284              		.cfi_def_cfa_offset 8
 4285              		.cfi_offset 7, -8
 4286              		.cfi_offset 14, -4
 4287 0002 00AF     		add	r7, sp, #0
 4288              		.cfi_def_cfa_register 7
1273:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV3_NACK_BIT, buffer);
 4289              		.loc 1 1273 0
 4290 0004 074B     		ldr	r3, .L350
 4291 0006 1A78     		ldrb	r2, [r3]
 4292 0008 074B     		ldr	r3, .L350+4
 4293 000a 101C     		mov	r0, r2
 4294 000c 3621     		mov	r1, #54
 4295 000e 0322     		mov	r2, #3
 4296 0010 FFF7FEFF 		bl	I2CReadBit
1274:.\mpu6050.c   ****     return buffer[0];
 4297              		.loc 1 1274 0
 4298 0014 044B     		ldr	r3, .L350+4
 4299 0016 1B78     		ldrb	r3, [r3]
 4300 0018 5A1E     		sub	r2, r3, #1
 4301 001a 9341     		sbc	r3, r3, r2
 4302 001c DBB2     		uxtb	r3, r3
1275:.\mpu6050.c   **** }
 4303              		.loc 1 1275 0
 4304 001e 181C     		mov	r0, r3
 4305 0020 BD46     		mov	sp, r7
 4306              		@ sp needed
 4307 0022 80BD     		pop	{r7, pc}
 4308              	.L351:
 4309              		.align	2
 4310              	.L350:
 4311 0024 00000000 		.word	devAddr
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 99


 4312 0028 00000000 		.word	buffer
 4313              		.cfi_endproc
 4314              	.LFE94:
 4315              		.size	MPU6050_getSlave3Nack, .-MPU6050_getSlave3Nack
 4316              		.section	.text.MPU6050_getSlave2Nack,"ax",%progbits
 4317              		.align	2
 4318              		.global	MPU6050_getSlave2Nack
 4319              		.code	16
 4320              		.thumb_func
 4321              		.type	MPU6050_getSlave2Nack, %function
 4322              	MPU6050_getSlave2Nack:
 4323              	.LFB95:
1276:.\mpu6050.c   **** /** Get Slave 2 NACK status.
1277:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1278:.\mpu6050.c   ****  * transaction with Slave 2. This triggers an interrupt if the I2C_MST_INT_EN
1279:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1280:.\mpu6050.c   ****  * @return Slave 2 NACK interrupt status
1281:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1282:.\mpu6050.c   ****  */
1283:.\mpu6050.c   **** bool MPU6050_getSlave2Nack() {
 4324              		.loc 1 1283 0
 4325              		.cfi_startproc
 4326 0000 80B5     		push	{r7, lr}
 4327              		.cfi_def_cfa_offset 8
 4328              		.cfi_offset 7, -8
 4329              		.cfi_offset 14, -4
 4330 0002 00AF     		add	r7, sp, #0
 4331              		.cfi_def_cfa_register 7
1284:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV2_NACK_BIT, buffer);
 4332              		.loc 1 1284 0
 4333 0004 074B     		ldr	r3, .L354
 4334 0006 1A78     		ldrb	r2, [r3]
 4335 0008 074B     		ldr	r3, .L354+4
 4336 000a 101C     		mov	r0, r2
 4337 000c 3621     		mov	r1, #54
 4338 000e 0222     		mov	r2, #2
 4339 0010 FFF7FEFF 		bl	I2CReadBit
1285:.\mpu6050.c   ****     return buffer[0];
 4340              		.loc 1 1285 0
 4341 0014 044B     		ldr	r3, .L354+4
 4342 0016 1B78     		ldrb	r3, [r3]
 4343 0018 5A1E     		sub	r2, r3, #1
 4344 001a 9341     		sbc	r3, r3, r2
 4345 001c DBB2     		uxtb	r3, r3
1286:.\mpu6050.c   **** }
 4346              		.loc 1 1286 0
 4347 001e 181C     		mov	r0, r3
 4348 0020 BD46     		mov	sp, r7
 4349              		@ sp needed
 4350 0022 80BD     		pop	{r7, pc}
 4351              	.L355:
 4352              		.align	2
 4353              	.L354:
 4354 0024 00000000 		.word	devAddr
 4355 0028 00000000 		.word	buffer
 4356              		.cfi_endproc
 4357              	.LFE95:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 100


 4358              		.size	MPU6050_getSlave2Nack, .-MPU6050_getSlave2Nack
 4359              		.section	.text.MPU6050_getSlave1Nack,"ax",%progbits
 4360              		.align	2
 4361              		.global	MPU6050_getSlave1Nack
 4362              		.code	16
 4363              		.thumb_func
 4364              		.type	MPU6050_getSlave1Nack, %function
 4365              	MPU6050_getSlave1Nack:
 4366              	.LFB96:
1287:.\mpu6050.c   **** /** Get Slave 1 NACK status.
1288:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1289:.\mpu6050.c   ****  * transaction with Slave 1. This triggers an interrupt if the I2C_MST_INT_EN
1290:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1291:.\mpu6050.c   ****  * @return Slave 1 NACK interrupt status
1292:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1293:.\mpu6050.c   ****  */
1294:.\mpu6050.c   **** bool MPU6050_getSlave1Nack() {
 4367              		.loc 1 1294 0
 4368              		.cfi_startproc
 4369 0000 80B5     		push	{r7, lr}
 4370              		.cfi_def_cfa_offset 8
 4371              		.cfi_offset 7, -8
 4372              		.cfi_offset 14, -4
 4373 0002 00AF     		add	r7, sp, #0
 4374              		.cfi_def_cfa_register 7
1295:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV1_NACK_BIT, buffer);
 4375              		.loc 1 1295 0
 4376 0004 074B     		ldr	r3, .L358
 4377 0006 1A78     		ldrb	r2, [r3]
 4378 0008 074B     		ldr	r3, .L358+4
 4379 000a 101C     		mov	r0, r2
 4380 000c 3621     		mov	r1, #54
 4381 000e 0122     		mov	r2, #1
 4382 0010 FFF7FEFF 		bl	I2CReadBit
1296:.\mpu6050.c   ****     return buffer[0];
 4383              		.loc 1 1296 0
 4384 0014 044B     		ldr	r3, .L358+4
 4385 0016 1B78     		ldrb	r3, [r3]
 4386 0018 5A1E     		sub	r2, r3, #1
 4387 001a 9341     		sbc	r3, r3, r2
 4388 001c DBB2     		uxtb	r3, r3
1297:.\mpu6050.c   **** }
 4389              		.loc 1 1297 0
 4390 001e 181C     		mov	r0, r3
 4391 0020 BD46     		mov	sp, r7
 4392              		@ sp needed
 4393 0022 80BD     		pop	{r7, pc}
 4394              	.L359:
 4395              		.align	2
 4396              	.L358:
 4397 0024 00000000 		.word	devAddr
 4398 0028 00000000 		.word	buffer
 4399              		.cfi_endproc
 4400              	.LFE96:
 4401              		.size	MPU6050_getSlave1Nack, .-MPU6050_getSlave1Nack
 4402              		.section	.text.MPU6050_getSlave0Nack,"ax",%progbits
 4403              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 101


 4404              		.global	MPU6050_getSlave0Nack
 4405              		.code	16
 4406              		.thumb_func
 4407              		.type	MPU6050_getSlave0Nack, %function
 4408              	MPU6050_getSlave0Nack:
 4409              	.LFB97:
1298:.\mpu6050.c   **** /** Get Slave 0 NACK status.
1299:.\mpu6050.c   ****  * This bit automatically sets to 1 when the I2C Master receives a NACK in a
1300:.\mpu6050.c   ****  * transaction with Slave 0. This triggers an interrupt if the I2C_MST_INT_EN
1301:.\mpu6050.c   ****  * bit in the INT_ENABLE register (Register 56) is asserted.
1302:.\mpu6050.c   ****  * @return Slave 0 NACK interrupt status
1303:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_STATUS
1304:.\mpu6050.c   ****  */
1305:.\mpu6050.c   **** bool MPU6050_getSlave0Nack() {
 4410              		.loc 1 1305 0
 4411              		.cfi_startproc
 4412 0000 80B5     		push	{r7, lr}
 4413              		.cfi_def_cfa_offset 8
 4414              		.cfi_offset 7, -8
 4415              		.cfi_offset 14, -4
 4416 0002 00AF     		add	r7, sp, #0
 4417              		.cfi_def_cfa_register 7
1306:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV0_NACK_BIT, buffer);
 4418              		.loc 1 1306 0
 4419 0004 074B     		ldr	r3, .L362
 4420 0006 1A78     		ldrb	r2, [r3]
 4421 0008 074B     		ldr	r3, .L362+4
 4422 000a 101C     		mov	r0, r2
 4423 000c 3621     		mov	r1, #54
 4424 000e 0022     		mov	r2, #0
 4425 0010 FFF7FEFF 		bl	I2CReadBit
1307:.\mpu6050.c   ****     return buffer[0];
 4426              		.loc 1 1307 0
 4427 0014 044B     		ldr	r3, .L362+4
 4428 0016 1B78     		ldrb	r3, [r3]
 4429 0018 5A1E     		sub	r2, r3, #1
 4430 001a 9341     		sbc	r3, r3, r2
 4431 001c DBB2     		uxtb	r3, r3
1308:.\mpu6050.c   **** }
 4432              		.loc 1 1308 0
 4433 001e 181C     		mov	r0, r3
 4434 0020 BD46     		mov	sp, r7
 4435              		@ sp needed
 4436 0022 80BD     		pop	{r7, pc}
 4437              	.L363:
 4438              		.align	2
 4439              	.L362:
 4440 0024 00000000 		.word	devAddr
 4441 0028 00000000 		.word	buffer
 4442              		.cfi_endproc
 4443              	.LFE97:
 4444              		.size	MPU6050_getSlave0Nack, .-MPU6050_getSlave0Nack
 4445              		.section	.text.MPU6050_getInterruptMode,"ax",%progbits
 4446              		.align	2
 4447              		.global	MPU6050_getInterruptMode
 4448              		.code	16
 4449              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 102


 4450              		.type	MPU6050_getInterruptMode, %function
 4451              	MPU6050_getInterruptMode:
 4452              	.LFB98:
1309:.\mpu6050.c   **** 
1310:.\mpu6050.c   **** // INT_PIN_CFG register
1311:.\mpu6050.c   **** 
1312:.\mpu6050.c   **** /** Get interrupt logic level mode.
1313:.\mpu6050.c   ****  * Will be set 0 for active-high, 1 for active-low.
1314:.\mpu6050.c   ****  * @return Current interrupt mode (0=active-high, 1=active-low)
1315:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1316:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_LEVEL_BIT
1317:.\mpu6050.c   ****  */
1318:.\mpu6050.c   **** bool MPU6050_getInterruptMode() {
 4453              		.loc 1 1318 0
 4454              		.cfi_startproc
 4455 0000 80B5     		push	{r7, lr}
 4456              		.cfi_def_cfa_offset 8
 4457              		.cfi_offset 7, -8
 4458              		.cfi_offset 14, -4
 4459 0002 00AF     		add	r7, sp, #0
 4460              		.cfi_def_cfa_register 7
1319:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, buffer);
 4461              		.loc 1 1319 0
 4462 0004 074B     		ldr	r3, .L366
 4463 0006 1A78     		ldrb	r2, [r3]
 4464 0008 074B     		ldr	r3, .L366+4
 4465 000a 101C     		mov	r0, r2
 4466 000c 3721     		mov	r1, #55
 4467 000e 0722     		mov	r2, #7
 4468 0010 FFF7FEFF 		bl	I2CReadBit
1320:.\mpu6050.c   ****     return buffer[0];
 4469              		.loc 1 1320 0
 4470 0014 044B     		ldr	r3, .L366+4
 4471 0016 1B78     		ldrb	r3, [r3]
 4472 0018 5A1E     		sub	r2, r3, #1
 4473 001a 9341     		sbc	r3, r3, r2
 4474 001c DBB2     		uxtb	r3, r3
1321:.\mpu6050.c   **** }
 4475              		.loc 1 1321 0
 4476 001e 181C     		mov	r0, r3
 4477 0020 BD46     		mov	sp, r7
 4478              		@ sp needed
 4479 0022 80BD     		pop	{r7, pc}
 4480              	.L367:
 4481              		.align	2
 4482              	.L366:
 4483 0024 00000000 		.word	devAddr
 4484 0028 00000000 		.word	buffer
 4485              		.cfi_endproc
 4486              	.LFE98:
 4487              		.size	MPU6050_getInterruptMode, .-MPU6050_getInterruptMode
 4488              		.section	.text.MPU6050_setInterruptMode,"ax",%progbits
 4489              		.align	2
 4490              		.global	MPU6050_setInterruptMode
 4491              		.code	16
 4492              		.thumb_func
 4493              		.type	MPU6050_setInterruptMode, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 103


 4494              	MPU6050_setInterruptMode:
 4495              	.LFB99:
1322:.\mpu6050.c   **** /** Set interrupt logic level mode.
1323:.\mpu6050.c   ****  * @param mode New interrupt mode (0=active-high, 1=active-low)
1324:.\mpu6050.c   ****  * @see getInterruptMode()
1325:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1326:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_LEVEL_BIT
1327:.\mpu6050.c   ****  */
1328:.\mpu6050.c   **** void MPU6050_setInterruptMode(bool mode) {
 4496              		.loc 1 1328 0
 4497              		.cfi_startproc
 4498 0000 80B5     		push	{r7, lr}
 4499              		.cfi_def_cfa_offset 8
 4500              		.cfi_offset 7, -8
 4501              		.cfi_offset 14, -4
 4502 0002 82B0     		sub	sp, sp, #8
 4503              		.cfi_def_cfa_offset 16
 4504 0004 00AF     		add	r7, sp, #0
 4505              		.cfi_def_cfa_register 7
 4506 0006 021C     		mov	r2, r0
 4507 0008 FB1D     		add	r3, r7, #7
 4508 000a 1A70     		strb	r2, [r3]
1329:.\mpu6050.c   ****    I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, mode);
 4509              		.loc 1 1329 0
 4510 000c 054B     		ldr	r3, .L369
 4511 000e 1A78     		ldrb	r2, [r3]
 4512 0010 FB1D     		add	r3, r7, #7
 4513 0012 1B78     		ldrb	r3, [r3]
 4514 0014 101C     		mov	r0, r2
 4515 0016 3721     		mov	r1, #55
 4516 0018 0722     		mov	r2, #7
 4517 001a FFF7FEFF 		bl	I2CWriteBit
1330:.\mpu6050.c   **** }
 4518              		.loc 1 1330 0
 4519 001e BD46     		mov	sp, r7
 4520 0020 02B0     		add	sp, sp, #8
 4521              		@ sp needed
 4522 0022 80BD     		pop	{r7, pc}
 4523              	.L370:
 4524              		.align	2
 4525              	.L369:
 4526 0024 00000000 		.word	devAddr
 4527              		.cfi_endproc
 4528              	.LFE99:
 4529              		.size	MPU6050_setInterruptMode, .-MPU6050_setInterruptMode
 4530              		.section	.text.MPU6050_getInterruptDrive,"ax",%progbits
 4531              		.align	2
 4532              		.global	MPU6050_getInterruptDrive
 4533              		.code	16
 4534              		.thumb_func
 4535              		.type	MPU6050_getInterruptDrive, %function
 4536              	MPU6050_getInterruptDrive:
 4537              	.LFB100:
1331:.\mpu6050.c   **** /** Get interrupt drive mode.
1332:.\mpu6050.c   ****  * Will be set 0 for push-pull, 1 for open-drain.
1333:.\mpu6050.c   ****  * @return Current interrupt drive mode (0=push-pull, 1=open-drain)
1334:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 104


1335:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_OPEN_BIT
1336:.\mpu6050.c   ****  */
1337:.\mpu6050.c   **** bool MPU6050_getInterruptDrive() {
 4538              		.loc 1 1337 0
 4539              		.cfi_startproc
 4540 0000 80B5     		push	{r7, lr}
 4541              		.cfi_def_cfa_offset 8
 4542              		.cfi_offset 7, -8
 4543              		.cfi_offset 14, -4
 4544 0002 00AF     		add	r7, sp, #0
 4545              		.cfi_def_cfa_register 7
1338:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, buffer);
 4546              		.loc 1 1338 0
 4547 0004 074B     		ldr	r3, .L373
 4548 0006 1A78     		ldrb	r2, [r3]
 4549 0008 074B     		ldr	r3, .L373+4
 4550 000a 101C     		mov	r0, r2
 4551 000c 3721     		mov	r1, #55
 4552 000e 0622     		mov	r2, #6
 4553 0010 FFF7FEFF 		bl	I2CReadBit
1339:.\mpu6050.c   ****     return buffer[0];
 4554              		.loc 1 1339 0
 4555 0014 044B     		ldr	r3, .L373+4
 4556 0016 1B78     		ldrb	r3, [r3]
 4557 0018 5A1E     		sub	r2, r3, #1
 4558 001a 9341     		sbc	r3, r3, r2
 4559 001c DBB2     		uxtb	r3, r3
1340:.\mpu6050.c   **** }
 4560              		.loc 1 1340 0
 4561 001e 181C     		mov	r0, r3
 4562 0020 BD46     		mov	sp, r7
 4563              		@ sp needed
 4564 0022 80BD     		pop	{r7, pc}
 4565              	.L374:
 4566              		.align	2
 4567              	.L373:
 4568 0024 00000000 		.word	devAddr
 4569 0028 00000000 		.word	buffer
 4570              		.cfi_endproc
 4571              	.LFE100:
 4572              		.size	MPU6050_getInterruptDrive, .-MPU6050_getInterruptDrive
 4573              		.section	.text.MPU6050_setInterruptDrive,"ax",%progbits
 4574              		.align	2
 4575              		.global	MPU6050_setInterruptDrive
 4576              		.code	16
 4577              		.thumb_func
 4578              		.type	MPU6050_setInterruptDrive, %function
 4579              	MPU6050_setInterruptDrive:
 4580              	.LFB101:
1341:.\mpu6050.c   **** /** Set interrupt drive mode.
1342:.\mpu6050.c   ****  * @param drive New interrupt drive mode (0=push-pull, 1=open-drain)
1343:.\mpu6050.c   ****  * @see getInterruptDrive()
1344:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1345:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_OPEN_BIT
1346:.\mpu6050.c   ****  */
1347:.\mpu6050.c   **** void MPU6050_setInterruptDrive(bool drive) {
 4581              		.loc 1 1347 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 105


 4582              		.cfi_startproc
 4583 0000 80B5     		push	{r7, lr}
 4584              		.cfi_def_cfa_offset 8
 4585              		.cfi_offset 7, -8
 4586              		.cfi_offset 14, -4
 4587 0002 82B0     		sub	sp, sp, #8
 4588              		.cfi_def_cfa_offset 16
 4589 0004 00AF     		add	r7, sp, #0
 4590              		.cfi_def_cfa_register 7
 4591 0006 021C     		mov	r2, r0
 4592 0008 FB1D     		add	r3, r7, #7
 4593 000a 1A70     		strb	r2, [r3]
1348:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, drive);
 4594              		.loc 1 1348 0
 4595 000c 054B     		ldr	r3, .L376
 4596 000e 1A78     		ldrb	r2, [r3]
 4597 0010 FB1D     		add	r3, r7, #7
 4598 0012 1B78     		ldrb	r3, [r3]
 4599 0014 101C     		mov	r0, r2
 4600 0016 3721     		mov	r1, #55
 4601 0018 0622     		mov	r2, #6
 4602 001a FFF7FEFF 		bl	I2CWriteBit
1349:.\mpu6050.c   **** }
 4603              		.loc 1 1349 0
 4604 001e BD46     		mov	sp, r7
 4605 0020 02B0     		add	sp, sp, #8
 4606              		@ sp needed
 4607 0022 80BD     		pop	{r7, pc}
 4608              	.L377:
 4609              		.align	2
 4610              	.L376:
 4611 0024 00000000 		.word	devAddr
 4612              		.cfi_endproc
 4613              	.LFE101:
 4614              		.size	MPU6050_setInterruptDrive, .-MPU6050_setInterruptDrive
 4615              		.section	.text.MPU6050_getInterruptLatch,"ax",%progbits
 4616              		.align	2
 4617              		.global	MPU6050_getInterruptLatch
 4618              		.code	16
 4619              		.thumb_func
 4620              		.type	MPU6050_getInterruptLatch, %function
 4621              	MPU6050_getInterruptLatch:
 4622              	.LFB102:
1350:.\mpu6050.c   **** /** Get interrupt latch mode.
1351:.\mpu6050.c   ****  * Will be set 0 for 50us-pulse, 1 for latch-until-int-cleared.
1352:.\mpu6050.c   ****  * @return Current latch mode (0=50us-pulse, 1=latch-until-int-cleared)
1353:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1354:.\mpu6050.c   ****  * @see MPU6050_INTCFG_LATCH_INT_EN_BIT
1355:.\mpu6050.c   ****  */
1356:.\mpu6050.c   **** bool MPU6050_getInterruptLatch() {
 4623              		.loc 1 1356 0
 4624              		.cfi_startproc
 4625 0000 80B5     		push	{r7, lr}
 4626              		.cfi_def_cfa_offset 8
 4627              		.cfi_offset 7, -8
 4628              		.cfi_offset 14, -4
 4629 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 106


 4630              		.cfi_def_cfa_register 7
1357:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, buffer);
 4631              		.loc 1 1357 0
 4632 0004 074B     		ldr	r3, .L380
 4633 0006 1A78     		ldrb	r2, [r3]
 4634 0008 074B     		ldr	r3, .L380+4
 4635 000a 101C     		mov	r0, r2
 4636 000c 3721     		mov	r1, #55
 4637 000e 0522     		mov	r2, #5
 4638 0010 FFF7FEFF 		bl	I2CReadBit
1358:.\mpu6050.c   ****     return buffer[0];
 4639              		.loc 1 1358 0
 4640 0014 044B     		ldr	r3, .L380+4
 4641 0016 1B78     		ldrb	r3, [r3]
 4642 0018 5A1E     		sub	r2, r3, #1
 4643 001a 9341     		sbc	r3, r3, r2
 4644 001c DBB2     		uxtb	r3, r3
1359:.\mpu6050.c   **** }
 4645              		.loc 1 1359 0
 4646 001e 181C     		mov	r0, r3
 4647 0020 BD46     		mov	sp, r7
 4648              		@ sp needed
 4649 0022 80BD     		pop	{r7, pc}
 4650              	.L381:
 4651              		.align	2
 4652              	.L380:
 4653 0024 00000000 		.word	devAddr
 4654 0028 00000000 		.word	buffer
 4655              		.cfi_endproc
 4656              	.LFE102:
 4657              		.size	MPU6050_getInterruptLatch, .-MPU6050_getInterruptLatch
 4658              		.section	.text.MPU6050_setInterruptLatch,"ax",%progbits
 4659              		.align	2
 4660              		.global	MPU6050_setInterruptLatch
 4661              		.code	16
 4662              		.thumb_func
 4663              		.type	MPU6050_setInterruptLatch, %function
 4664              	MPU6050_setInterruptLatch:
 4665              	.LFB103:
1360:.\mpu6050.c   **** /** Set interrupt latch mode.
1361:.\mpu6050.c   ****  * @param latch New latch mode (0=50us-pulse, 1=latch-until-int-cleared)
1362:.\mpu6050.c   ****  * @see getInterruptLatch()
1363:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1364:.\mpu6050.c   ****  * @see MPU6050_INTCFG_LATCH_INT_EN_BIT
1365:.\mpu6050.c   ****  */
1366:.\mpu6050.c   **** void MPU6050_setInterruptLatch(bool latch) {
 4666              		.loc 1 1366 0
 4667              		.cfi_startproc
 4668 0000 80B5     		push	{r7, lr}
 4669              		.cfi_def_cfa_offset 8
 4670              		.cfi_offset 7, -8
 4671              		.cfi_offset 14, -4
 4672 0002 82B0     		sub	sp, sp, #8
 4673              		.cfi_def_cfa_offset 16
 4674 0004 00AF     		add	r7, sp, #0
 4675              		.cfi_def_cfa_register 7
 4676 0006 021C     		mov	r2, r0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 107


 4677 0008 FB1D     		add	r3, r7, #7
 4678 000a 1A70     		strb	r2, [r3]
1367:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, latch);
 4679              		.loc 1 1367 0
 4680 000c 054B     		ldr	r3, .L383
 4681 000e 1A78     		ldrb	r2, [r3]
 4682 0010 FB1D     		add	r3, r7, #7
 4683 0012 1B78     		ldrb	r3, [r3]
 4684 0014 101C     		mov	r0, r2
 4685 0016 3721     		mov	r1, #55
 4686 0018 0522     		mov	r2, #5
 4687 001a FFF7FEFF 		bl	I2CWriteBit
1368:.\mpu6050.c   **** }
 4688              		.loc 1 1368 0
 4689 001e BD46     		mov	sp, r7
 4690 0020 02B0     		add	sp, sp, #8
 4691              		@ sp needed
 4692 0022 80BD     		pop	{r7, pc}
 4693              	.L384:
 4694              		.align	2
 4695              	.L383:
 4696 0024 00000000 		.word	devAddr
 4697              		.cfi_endproc
 4698              	.LFE103:
 4699              		.size	MPU6050_setInterruptLatch, .-MPU6050_setInterruptLatch
 4700              		.section	.text.MPU6050_getInterruptLatchClear,"ax",%progbits
 4701              		.align	2
 4702              		.global	MPU6050_getInterruptLatchClear
 4703              		.code	16
 4704              		.thumb_func
 4705              		.type	MPU6050_getInterruptLatchClear, %function
 4706              	MPU6050_getInterruptLatchClear:
 4707              	.LFB104:
1369:.\mpu6050.c   **** /** Get interrupt latch clear mode.
1370:.\mpu6050.c   ****  * Will be set 0 for status-read-only, 1 for any-register-read.
1371:.\mpu6050.c   ****  * @return Current latch clear mode (0=status-read-only, 1=any-register-read)
1372:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1373:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT
1374:.\mpu6050.c   ****  */
1375:.\mpu6050.c   **** bool MPU6050_getInterruptLatchClear() {
 4708              		.loc 1 1375 0
 4709              		.cfi_startproc
 4710 0000 80B5     		push	{r7, lr}
 4711              		.cfi_def_cfa_offset 8
 4712              		.cfi_offset 7, -8
 4713              		.cfi_offset 14, -4
 4714 0002 00AF     		add	r7, sp, #0
 4715              		.cfi_def_cfa_register 7
1376:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, buffer);
 4716              		.loc 1 1376 0
 4717 0004 074B     		ldr	r3, .L387
 4718 0006 1A78     		ldrb	r2, [r3]
 4719 0008 074B     		ldr	r3, .L387+4
 4720 000a 101C     		mov	r0, r2
 4721 000c 3721     		mov	r1, #55
 4722 000e 0422     		mov	r2, #4
 4723 0010 FFF7FEFF 		bl	I2CReadBit
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 108


1377:.\mpu6050.c   ****     return buffer[0];
 4724              		.loc 1 1377 0
 4725 0014 044B     		ldr	r3, .L387+4
 4726 0016 1B78     		ldrb	r3, [r3]
 4727 0018 5A1E     		sub	r2, r3, #1
 4728 001a 9341     		sbc	r3, r3, r2
 4729 001c DBB2     		uxtb	r3, r3
1378:.\mpu6050.c   **** }
 4730              		.loc 1 1378 0
 4731 001e 181C     		mov	r0, r3
 4732 0020 BD46     		mov	sp, r7
 4733              		@ sp needed
 4734 0022 80BD     		pop	{r7, pc}
 4735              	.L388:
 4736              		.align	2
 4737              	.L387:
 4738 0024 00000000 		.word	devAddr
 4739 0028 00000000 		.word	buffer
 4740              		.cfi_endproc
 4741              	.LFE104:
 4742              		.size	MPU6050_getInterruptLatchClear, .-MPU6050_getInterruptLatchClear
 4743              		.section	.text.MPU6050_setInterruptLatchClear,"ax",%progbits
 4744              		.align	2
 4745              		.global	MPU6050_setInterruptLatchClear
 4746              		.code	16
 4747              		.thumb_func
 4748              		.type	MPU6050_setInterruptLatchClear, %function
 4749              	MPU6050_setInterruptLatchClear:
 4750              	.LFB105:
1379:.\mpu6050.c   **** /** Set interrupt latch clear mode.
1380:.\mpu6050.c   ****  * @param clear New latch clear mode (0=status-read-only, 1=any-register-read)
1381:.\mpu6050.c   ****  * @see getInterruptLatchClear()
1382:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1383:.\mpu6050.c   ****  * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT
1384:.\mpu6050.c   ****  */
1385:.\mpu6050.c   **** void MPU6050_setInterruptLatchClear(bool clear) {
 4751              		.loc 1 1385 0
 4752              		.cfi_startproc
 4753 0000 80B5     		push	{r7, lr}
 4754              		.cfi_def_cfa_offset 8
 4755              		.cfi_offset 7, -8
 4756              		.cfi_offset 14, -4
 4757 0002 82B0     		sub	sp, sp, #8
 4758              		.cfi_def_cfa_offset 16
 4759 0004 00AF     		add	r7, sp, #0
 4760              		.cfi_def_cfa_register 7
 4761 0006 021C     		mov	r2, r0
 4762 0008 FB1D     		add	r3, r7, #7
 4763 000a 1A70     		strb	r2, [r3]
1386:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, clear);
 4764              		.loc 1 1386 0
 4765 000c 054B     		ldr	r3, .L390
 4766 000e 1A78     		ldrb	r2, [r3]
 4767 0010 FB1D     		add	r3, r7, #7
 4768 0012 1B78     		ldrb	r3, [r3]
 4769 0014 101C     		mov	r0, r2
 4770 0016 3721     		mov	r1, #55
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 109


 4771 0018 0422     		mov	r2, #4
 4772 001a FFF7FEFF 		bl	I2CWriteBit
1387:.\mpu6050.c   **** }
 4773              		.loc 1 1387 0
 4774 001e BD46     		mov	sp, r7
 4775 0020 02B0     		add	sp, sp, #8
 4776              		@ sp needed
 4777 0022 80BD     		pop	{r7, pc}
 4778              	.L391:
 4779              		.align	2
 4780              	.L390:
 4781 0024 00000000 		.word	devAddr
 4782              		.cfi_endproc
 4783              	.LFE105:
 4784              		.size	MPU6050_setInterruptLatchClear, .-MPU6050_setInterruptLatchClear
 4785              		.section	.text.MPU6050_getFSyncInterruptLevel,"ax",%progbits
 4786              		.align	2
 4787              		.global	MPU6050_getFSyncInterruptLevel
 4788              		.code	16
 4789              		.thumb_func
 4790              		.type	MPU6050_getFSyncInterruptLevel, %function
 4791              	MPU6050_getFSyncInterruptLevel:
 4792              	.LFB106:
1388:.\mpu6050.c   **** /** Get FSYNC interrupt logic level mode.
1389:.\mpu6050.c   ****  * @return Current FSYNC interrupt mode (0=active-high, 1=active-low)
1390:.\mpu6050.c   ****  * @see getFSyncInterruptMode()
1391:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1392:.\mpu6050.c   ****  * @see MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT
1393:.\mpu6050.c   ****  */
1394:.\mpu6050.c   **** bool MPU6050_getFSyncInterruptLevel() {
 4793              		.loc 1 1394 0
 4794              		.cfi_startproc
 4795 0000 80B5     		push	{r7, lr}
 4796              		.cfi_def_cfa_offset 8
 4797              		.cfi_offset 7, -8
 4798              		.cfi_offset 14, -4
 4799 0002 00AF     		add	r7, sp, #0
 4800              		.cfi_def_cfa_register 7
1395:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT, buffer);
 4801              		.loc 1 1395 0
 4802 0004 074B     		ldr	r3, .L394
 4803 0006 1A78     		ldrb	r2, [r3]
 4804 0008 074B     		ldr	r3, .L394+4
 4805 000a 101C     		mov	r0, r2
 4806 000c 3721     		mov	r1, #55
 4807 000e 0322     		mov	r2, #3
 4808 0010 FFF7FEFF 		bl	I2CReadBit
1396:.\mpu6050.c   ****     return buffer[0];
 4809              		.loc 1 1396 0
 4810 0014 044B     		ldr	r3, .L394+4
 4811 0016 1B78     		ldrb	r3, [r3]
 4812 0018 5A1E     		sub	r2, r3, #1
 4813 001a 9341     		sbc	r3, r3, r2
 4814 001c DBB2     		uxtb	r3, r3
1397:.\mpu6050.c   **** }
 4815              		.loc 1 1397 0
 4816 001e 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 110


 4817 0020 BD46     		mov	sp, r7
 4818              		@ sp needed
 4819 0022 80BD     		pop	{r7, pc}
 4820              	.L395:
 4821              		.align	2
 4822              	.L394:
 4823 0024 00000000 		.word	devAddr
 4824 0028 00000000 		.word	buffer
 4825              		.cfi_endproc
 4826              	.LFE106:
 4827              		.size	MPU6050_getFSyncInterruptLevel, .-MPU6050_getFSyncInterruptLevel
 4828              		.section	.text.MPU6050_setFSyncInterruptLevel,"ax",%progbits
 4829              		.align	2
 4830              		.global	MPU6050_setFSyncInterruptLevel
 4831              		.code	16
 4832              		.thumb_func
 4833              		.type	MPU6050_setFSyncInterruptLevel, %function
 4834              	MPU6050_setFSyncInterruptLevel:
 4835              	.LFB107:
1398:.\mpu6050.c   **** /** Set FSYNC interrupt logic level mode.
1399:.\mpu6050.c   ****  * @param mode New FSYNC interrupt mode (0=active-high, 1=active-low)
1400:.\mpu6050.c   ****  * @see getFSyncInterruptMode()
1401:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1402:.\mpu6050.c   ****  * @see MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT
1403:.\mpu6050.c   ****  */
1404:.\mpu6050.c   **** void MPU6050_setFSyncInterruptLevel(bool level) {
 4836              		.loc 1 1404 0
 4837              		.cfi_startproc
 4838 0000 80B5     		push	{r7, lr}
 4839              		.cfi_def_cfa_offset 8
 4840              		.cfi_offset 7, -8
 4841              		.cfi_offset 14, -4
 4842 0002 82B0     		sub	sp, sp, #8
 4843              		.cfi_def_cfa_offset 16
 4844 0004 00AF     		add	r7, sp, #0
 4845              		.cfi_def_cfa_register 7
 4846 0006 021C     		mov	r2, r0
 4847 0008 FB1D     		add	r3, r7, #7
 4848 000a 1A70     		strb	r2, [r3]
1405:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT, level);
 4849              		.loc 1 1405 0
 4850 000c 054B     		ldr	r3, .L397
 4851 000e 1A78     		ldrb	r2, [r3]
 4852 0010 FB1D     		add	r3, r7, #7
 4853 0012 1B78     		ldrb	r3, [r3]
 4854 0014 101C     		mov	r0, r2
 4855 0016 3721     		mov	r1, #55
 4856 0018 0322     		mov	r2, #3
 4857 001a FFF7FEFF 		bl	I2CWriteBit
1406:.\mpu6050.c   **** }
 4858              		.loc 1 1406 0
 4859 001e BD46     		mov	sp, r7
 4860 0020 02B0     		add	sp, sp, #8
 4861              		@ sp needed
 4862 0022 80BD     		pop	{r7, pc}
 4863              	.L398:
 4864              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 111


 4865              	.L397:
 4866 0024 00000000 		.word	devAddr
 4867              		.cfi_endproc
 4868              	.LFE107:
 4869              		.size	MPU6050_setFSyncInterruptLevel, .-MPU6050_setFSyncInterruptLevel
 4870              		.section	.text.MPU6050_getFSyncInterruptEnabled,"ax",%progbits
 4871              		.align	2
 4872              		.global	MPU6050_getFSyncInterruptEnabled
 4873              		.code	16
 4874              		.thumb_func
 4875              		.type	MPU6050_getFSyncInterruptEnabled, %function
 4876              	MPU6050_getFSyncInterruptEnabled:
 4877              	.LFB108:
1407:.\mpu6050.c   **** /** Get FSYNC pin interrupt enabled setting.
1408:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1409:.\mpu6050.c   ****  * @return Current interrupt enabled setting
1410:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1411:.\mpu6050.c   ****  * @see MPU6050_INTCFG_FSYNC_INT_EN_BIT
1412:.\mpu6050.c   ****  */
1413:.\mpu6050.c   **** bool MPU6050_getFSyncInterruptEnabled() {
 4878              		.loc 1 1413 0
 4879              		.cfi_startproc
 4880 0000 80B5     		push	{r7, lr}
 4881              		.cfi_def_cfa_offset 8
 4882              		.cfi_offset 7, -8
 4883              		.cfi_offset 14, -4
 4884 0002 00AF     		add	r7, sp, #0
 4885              		.cfi_def_cfa_register 7
1414:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_EN_BIT, buffer);
 4886              		.loc 1 1414 0
 4887 0004 074B     		ldr	r3, .L401
 4888 0006 1A78     		ldrb	r2, [r3]
 4889 0008 074B     		ldr	r3, .L401+4
 4890 000a 101C     		mov	r0, r2
 4891 000c 3721     		mov	r1, #55
 4892 000e 0222     		mov	r2, #2
 4893 0010 FFF7FEFF 		bl	I2CReadBit
1415:.\mpu6050.c   ****     return buffer[0];
 4894              		.loc 1 1415 0
 4895 0014 044B     		ldr	r3, .L401+4
 4896 0016 1B78     		ldrb	r3, [r3]
 4897 0018 5A1E     		sub	r2, r3, #1
 4898 001a 9341     		sbc	r3, r3, r2
 4899 001c DBB2     		uxtb	r3, r3
1416:.\mpu6050.c   **** }
 4900              		.loc 1 1416 0
 4901 001e 181C     		mov	r0, r3
 4902 0020 BD46     		mov	sp, r7
 4903              		@ sp needed
 4904 0022 80BD     		pop	{r7, pc}
 4905              	.L402:
 4906              		.align	2
 4907              	.L401:
 4908 0024 00000000 		.word	devAddr
 4909 0028 00000000 		.word	buffer
 4910              		.cfi_endproc
 4911              	.LFE108:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 112


 4912              		.size	MPU6050_getFSyncInterruptEnabled, .-MPU6050_getFSyncInterruptEnabled
 4913              		.section	.text.MPU6050_setFSyncInterruptEnabled,"ax",%progbits
 4914              		.align	2
 4915              		.global	MPU6050_setFSyncInterruptEnabled
 4916              		.code	16
 4917              		.thumb_func
 4918              		.type	MPU6050_setFSyncInterruptEnabled, %function
 4919              	MPU6050_setFSyncInterruptEnabled:
 4920              	.LFB109:
1417:.\mpu6050.c   **** /** Set FSYNC pin interrupt enabled setting.
1418:.\mpu6050.c   ****  * @param enabled New FSYNC pin interrupt enabled setting
1419:.\mpu6050.c   ****  * @see getFSyncInterruptEnabled()
1420:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1421:.\mpu6050.c   ****  * @see MPU6050_INTCFG_FSYNC_INT_EN_BIT
1422:.\mpu6050.c   ****  */
1423:.\mpu6050.c   **** void MPU6050_setFSyncInterruptEnabled(bool enabled) {
 4921              		.loc 1 1423 0
 4922              		.cfi_startproc
 4923 0000 80B5     		push	{r7, lr}
 4924              		.cfi_def_cfa_offset 8
 4925              		.cfi_offset 7, -8
 4926              		.cfi_offset 14, -4
 4927 0002 82B0     		sub	sp, sp, #8
 4928              		.cfi_def_cfa_offset 16
 4929 0004 00AF     		add	r7, sp, #0
 4930              		.cfi_def_cfa_register 7
 4931 0006 021C     		mov	r2, r0
 4932 0008 FB1D     		add	r3, r7, #7
 4933 000a 1A70     		strb	r2, [r3]
1424:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_EN_BIT, enabled);
 4934              		.loc 1 1424 0
 4935 000c 054B     		ldr	r3, .L404
 4936 000e 1A78     		ldrb	r2, [r3]
 4937 0010 FB1D     		add	r3, r7, #7
 4938 0012 1B78     		ldrb	r3, [r3]
 4939 0014 101C     		mov	r0, r2
 4940 0016 3721     		mov	r1, #55
 4941 0018 0222     		mov	r2, #2
 4942 001a FFF7FEFF 		bl	I2CWriteBit
1425:.\mpu6050.c   **** }
 4943              		.loc 1 1425 0
 4944 001e BD46     		mov	sp, r7
 4945 0020 02B0     		add	sp, sp, #8
 4946              		@ sp needed
 4947 0022 80BD     		pop	{r7, pc}
 4948              	.L405:
 4949              		.align	2
 4950              	.L404:
 4951 0024 00000000 		.word	devAddr
 4952              		.cfi_endproc
 4953              	.LFE109:
 4954              		.size	MPU6050_setFSyncInterruptEnabled, .-MPU6050_setFSyncInterruptEnabled
 4955              		.section	.text.MPU6050_getI2CBypassEnabled,"ax",%progbits
 4956              		.align	2
 4957              		.global	MPU6050_getI2CBypassEnabled
 4958              		.code	16
 4959              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 113


 4960              		.type	MPU6050_getI2CBypassEnabled, %function
 4961              	MPU6050_getI2CBypassEnabled:
 4962              	.LFB110:
1426:.\mpu6050.c   **** /** Get I2C bypass enabled status.
1427:.\mpu6050.c   ****  * When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to
1428:.\mpu6050.c   ****  * 0, the host application processor will be able to directly access the
1429:.\mpu6050.c   ****  * auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host
1430:.\mpu6050.c   ****  * application processor will not be able to directly access the auxiliary I2C
1431:.\mpu6050.c   ****  * bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106
1432:.\mpu6050.c   ****  * bit[5]).
1433:.\mpu6050.c   ****  * @return Current I2C bypass enabled status
1434:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1435:.\mpu6050.c   ****  * @see MPU6050_INTCFG_I2C_BYPASS_EN_BIT
1436:.\mpu6050.c   ****  */
1437:.\mpu6050.c   **** bool MPU6050_getI2CBypassEnabled() {
 4963              		.loc 1 1437 0
 4964              		.cfi_startproc
 4965 0000 80B5     		push	{r7, lr}
 4966              		.cfi_def_cfa_offset 8
 4967              		.cfi_offset 7, -8
 4968              		.cfi_offset 14, -4
 4969 0002 00AF     		add	r7, sp, #0
 4970              		.cfi_def_cfa_register 7
1438:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, buffer);
 4971              		.loc 1 1438 0
 4972 0004 074B     		ldr	r3, .L408
 4973 0006 1A78     		ldrb	r2, [r3]
 4974 0008 074B     		ldr	r3, .L408+4
 4975 000a 101C     		mov	r0, r2
 4976 000c 3721     		mov	r1, #55
 4977 000e 0122     		mov	r2, #1
 4978 0010 FFF7FEFF 		bl	I2CReadBit
1439:.\mpu6050.c   ****     return buffer[0];
 4979              		.loc 1 1439 0
 4980 0014 044B     		ldr	r3, .L408+4
 4981 0016 1B78     		ldrb	r3, [r3]
 4982 0018 5A1E     		sub	r2, r3, #1
 4983 001a 9341     		sbc	r3, r3, r2
 4984 001c DBB2     		uxtb	r3, r3
1440:.\mpu6050.c   **** }
 4985              		.loc 1 1440 0
 4986 001e 181C     		mov	r0, r3
 4987 0020 BD46     		mov	sp, r7
 4988              		@ sp needed
 4989 0022 80BD     		pop	{r7, pc}
 4990              	.L409:
 4991              		.align	2
 4992              	.L408:
 4993 0024 00000000 		.word	devAddr
 4994 0028 00000000 		.word	buffer
 4995              		.cfi_endproc
 4996              	.LFE110:
 4997              		.size	MPU6050_getI2CBypassEnabled, .-MPU6050_getI2CBypassEnabled
 4998              		.section	.text.MPU6050_setI2CBypassEnabled,"ax",%progbits
 4999              		.align	2
 5000              		.global	MPU6050_setI2CBypassEnabled
 5001              		.code	16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 114


 5002              		.thumb_func
 5003              		.type	MPU6050_setI2CBypassEnabled, %function
 5004              	MPU6050_setI2CBypassEnabled:
 5005              	.LFB111:
1441:.\mpu6050.c   **** /** Set I2C bypass enabled status.
1442:.\mpu6050.c   ****  * When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to
1443:.\mpu6050.c   ****  * 0, the host application processor will be able to directly access the
1444:.\mpu6050.c   ****  * auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host
1445:.\mpu6050.c   ****  * application processor will not be able to directly access the auxiliary I2C
1446:.\mpu6050.c   ****  * bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106
1447:.\mpu6050.c   ****  * bit[5]).
1448:.\mpu6050.c   ****  * @param enabled New I2C bypass enabled status
1449:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1450:.\mpu6050.c   ****  * @see MPU6050_INTCFG_I2C_BYPASS_EN_BIT
1451:.\mpu6050.c   ****  */
1452:.\mpu6050.c   **** void MPU6050_setI2CBypassEnabled(bool enabled) {
 5006              		.loc 1 1452 0
 5007              		.cfi_startproc
 5008 0000 80B5     		push	{r7, lr}
 5009              		.cfi_def_cfa_offset 8
 5010              		.cfi_offset 7, -8
 5011              		.cfi_offset 14, -4
 5012 0002 82B0     		sub	sp, sp, #8
 5013              		.cfi_def_cfa_offset 16
 5014 0004 00AF     		add	r7, sp, #0
 5015              		.cfi_def_cfa_register 7
 5016 0006 021C     		mov	r2, r0
 5017 0008 FB1D     		add	r3, r7, #7
 5018 000a 1A70     		strb	r2, [r3]
1453:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 5019              		.loc 1 1453 0
 5020 000c 054B     		ldr	r3, .L411
 5021 000e 1A78     		ldrb	r2, [r3]
 5022 0010 FB1D     		add	r3, r7, #7
 5023 0012 1B78     		ldrb	r3, [r3]
 5024 0014 101C     		mov	r0, r2
 5025 0016 3721     		mov	r1, #55
 5026 0018 0122     		mov	r2, #1
 5027 001a FFF7FEFF 		bl	I2CWriteBit
1454:.\mpu6050.c   **** }
 5028              		.loc 1 1454 0
 5029 001e BD46     		mov	sp, r7
 5030 0020 02B0     		add	sp, sp, #8
 5031              		@ sp needed
 5032 0022 80BD     		pop	{r7, pc}
 5033              	.L412:
 5034              		.align	2
 5035              	.L411:
 5036 0024 00000000 		.word	devAddr
 5037              		.cfi_endproc
 5038              	.LFE111:
 5039              		.size	MPU6050_setI2CBypassEnabled, .-MPU6050_setI2CBypassEnabled
 5040              		.section	.text.MPU6050_getClockOutputEnabled,"ax",%progbits
 5041              		.align	2
 5042              		.global	MPU6050_getClockOutputEnabled
 5043              		.code	16
 5044              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 115


 5045              		.type	MPU6050_getClockOutputEnabled, %function
 5046              	MPU6050_getClockOutputEnabled:
 5047              	.LFB112:
1455:.\mpu6050.c   **** /** Get reference clock output enabled status.
1456:.\mpu6050.c   ****  * When this bit is equal to 1, a reference clock output is provided at the
1457:.\mpu6050.c   ****  * CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For
1458:.\mpu6050.c   ****  * further information regarding CLKOUT, please refer to the MPU-60X0 Product
1459:.\mpu6050.c   ****  * Specification document.
1460:.\mpu6050.c   ****  * @return Current reference clock output enabled status
1461:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1462:.\mpu6050.c   ****  * @see MPU6050_INTCFG_CLKOUT_EN_BIT
1463:.\mpu6050.c   ****  */
1464:.\mpu6050.c   **** bool MPU6050_getClockOutputEnabled() {
 5048              		.loc 1 1464 0
 5049              		.cfi_startproc
 5050 0000 80B5     		push	{r7, lr}
 5051              		.cfi_def_cfa_offset 8
 5052              		.cfi_offset 7, -8
 5053              		.cfi_offset 14, -4
 5054 0002 00AF     		add	r7, sp, #0
 5055              		.cfi_def_cfa_register 7
1465:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_CLKOUT_EN_BIT, buffer);
 5056              		.loc 1 1465 0
 5057 0004 074B     		ldr	r3, .L415
 5058 0006 1A78     		ldrb	r2, [r3]
 5059 0008 074B     		ldr	r3, .L415+4
 5060 000a 101C     		mov	r0, r2
 5061 000c 3721     		mov	r1, #55
 5062 000e 0022     		mov	r2, #0
 5063 0010 FFF7FEFF 		bl	I2CReadBit
1466:.\mpu6050.c   ****     return buffer[0];
 5064              		.loc 1 1466 0
 5065 0014 044B     		ldr	r3, .L415+4
 5066 0016 1B78     		ldrb	r3, [r3]
 5067 0018 5A1E     		sub	r2, r3, #1
 5068 001a 9341     		sbc	r3, r3, r2
 5069 001c DBB2     		uxtb	r3, r3
1467:.\mpu6050.c   **** }
 5070              		.loc 1 1467 0
 5071 001e 181C     		mov	r0, r3
 5072 0020 BD46     		mov	sp, r7
 5073              		@ sp needed
 5074 0022 80BD     		pop	{r7, pc}
 5075              	.L416:
 5076              		.align	2
 5077              	.L415:
 5078 0024 00000000 		.word	devAddr
 5079 0028 00000000 		.word	buffer
 5080              		.cfi_endproc
 5081              	.LFE112:
 5082              		.size	MPU6050_getClockOutputEnabled, .-MPU6050_getClockOutputEnabled
 5083              		.section	.text.MPU6050_setClockOutputEnabled,"ax",%progbits
 5084              		.align	2
 5085              		.global	MPU6050_setClockOutputEnabled
 5086              		.code	16
 5087              		.thumb_func
 5088              		.type	MPU6050_setClockOutputEnabled, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 116


 5089              	MPU6050_setClockOutputEnabled:
 5090              	.LFB113:
1468:.\mpu6050.c   **** /** Set reference clock output enabled status.
1469:.\mpu6050.c   ****  * When this bit is equal to 1, a reference clock output is provided at the
1470:.\mpu6050.c   ****  * CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For
1471:.\mpu6050.c   ****  * further information regarding CLKOUT, please refer to the MPU-60X0 Product
1472:.\mpu6050.c   ****  * Specification document.
1473:.\mpu6050.c   ****  * @param enabled New reference clock output enabled status
1474:.\mpu6050.c   ****  * @see MPU6050_RA_INT_PIN_CFG
1475:.\mpu6050.c   ****  * @see MPU6050_INTCFG_CLKOUT_EN_BIT
1476:.\mpu6050.c   ****  */
1477:.\mpu6050.c   **** void MPU6050_setClockOutputEnabled(bool enabled) {
 5091              		.loc 1 1477 0
 5092              		.cfi_startproc
 5093 0000 80B5     		push	{r7, lr}
 5094              		.cfi_def_cfa_offset 8
 5095              		.cfi_offset 7, -8
 5096              		.cfi_offset 14, -4
 5097 0002 82B0     		sub	sp, sp, #8
 5098              		.cfi_def_cfa_offset 16
 5099 0004 00AF     		add	r7, sp, #0
 5100              		.cfi_def_cfa_register 7
 5101 0006 021C     		mov	r2, r0
 5102 0008 FB1D     		add	r3, r7, #7
 5103 000a 1A70     		strb	r2, [r3]
1478:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_CLKOUT_EN_BIT, enabled);
 5104              		.loc 1 1478 0
 5105 000c 054B     		ldr	r3, .L418
 5106 000e 1A78     		ldrb	r2, [r3]
 5107 0010 FB1D     		add	r3, r7, #7
 5108 0012 1B78     		ldrb	r3, [r3]
 5109 0014 101C     		mov	r0, r2
 5110 0016 3721     		mov	r1, #55
 5111 0018 0022     		mov	r2, #0
 5112 001a FFF7FEFF 		bl	I2CWriteBit
1479:.\mpu6050.c   **** }
 5113              		.loc 1 1479 0
 5114 001e BD46     		mov	sp, r7
 5115 0020 02B0     		add	sp, sp, #8
 5116              		@ sp needed
 5117 0022 80BD     		pop	{r7, pc}
 5118              	.L419:
 5119              		.align	2
 5120              	.L418:
 5121 0024 00000000 		.word	devAddr
 5122              		.cfi_endproc
 5123              	.LFE113:
 5124              		.size	MPU6050_setClockOutputEnabled, .-MPU6050_setClockOutputEnabled
 5125              		.section	.text.MPU6050_getIntEnabled,"ax",%progbits
 5126              		.align	2
 5127              		.global	MPU6050_getIntEnabled
 5128              		.code	16
 5129              		.thumb_func
 5130              		.type	MPU6050_getIntEnabled, %function
 5131              	MPU6050_getIntEnabled:
 5132              	.LFB114:
1480:.\mpu6050.c   **** 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 117


1481:.\mpu6050.c   **** // INT_ENABLE register
1482:.\mpu6050.c   **** 
1483:.\mpu6050.c   **** /** Get full interrupt enabled status.
1484:.\mpu6050.c   ****  * Full register byte for all interrupts, for quick reading. Each bit will be
1485:.\mpu6050.c   ****  * set 0 for disabled, 1 for enabled.
1486:.\mpu6050.c   ****  * @return Current interrupt enabled status
1487:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1488:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1489:.\mpu6050.c   ****  **/
1490:.\mpu6050.c   **** uint8_t MPU6050_getIntEnabled() {
 5133              		.loc 1 1490 0
 5134              		.cfi_startproc
 5135 0000 80B5     		push	{r7, lr}
 5136              		.cfi_def_cfa_offset 8
 5137              		.cfi_offset 7, -8
 5138              		.cfi_offset 14, -4
 5139 0002 00AF     		add	r7, sp, #0
 5140              		.cfi_def_cfa_register 7
1491:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_INT_ENABLE, buffer);
 5141              		.loc 1 1491 0
 5142 0004 064B     		ldr	r3, .L422
 5143 0006 1A78     		ldrb	r2, [r3]
 5144 0008 064B     		ldr	r3, .L422+4
 5145 000a 101C     		mov	r0, r2
 5146 000c 3821     		mov	r1, #56
 5147 000e 1A1C     		mov	r2, r3
 5148 0010 FFF7FEFF 		bl	I2CReadByte
1492:.\mpu6050.c   ****     return buffer[0];
 5149              		.loc 1 1492 0
 5150 0014 034B     		ldr	r3, .L422+4
 5151 0016 1B78     		ldrb	r3, [r3]
1493:.\mpu6050.c   **** }
 5152              		.loc 1 1493 0
 5153 0018 181C     		mov	r0, r3
 5154 001a BD46     		mov	sp, r7
 5155              		@ sp needed
 5156 001c 80BD     		pop	{r7, pc}
 5157              	.L423:
 5158 001e C046     		.align	2
 5159              	.L422:
 5160 0020 00000000 		.word	devAddr
 5161 0024 00000000 		.word	buffer
 5162              		.cfi_endproc
 5163              	.LFE114:
 5164              		.size	MPU6050_getIntEnabled, .-MPU6050_getIntEnabled
 5165              		.section	.text.MPU6050_setIntEnabled,"ax",%progbits
 5166              		.align	2
 5167              		.global	MPU6050_setIntEnabled
 5168              		.code	16
 5169              		.thumb_func
 5170              		.type	MPU6050_setIntEnabled, %function
 5171              	MPU6050_setIntEnabled:
 5172              	.LFB115:
1494:.\mpu6050.c   **** /** Set full interrupt enabled status.
1495:.\mpu6050.c   ****  * Full register byte for all interrupts, for quick reading. Each bit should be
1496:.\mpu6050.c   ****  * set 0 for disabled, 1 for enabled.
1497:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 118


1498:.\mpu6050.c   ****  * @see getIntFreefallEnabled()
1499:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1500:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1501:.\mpu6050.c   ****  **/
1502:.\mpu6050.c   **** void MPU6050_setIntEnabled(uint8_t enabled) {
 5173              		.loc 1 1502 0
 5174              		.cfi_startproc
 5175 0000 80B5     		push	{r7, lr}
 5176              		.cfi_def_cfa_offset 8
 5177              		.cfi_offset 7, -8
 5178              		.cfi_offset 14, -4
 5179 0002 82B0     		sub	sp, sp, #8
 5180              		.cfi_def_cfa_offset 16
 5181 0004 00AF     		add	r7, sp, #0
 5182              		.cfi_def_cfa_register 7
 5183 0006 021C     		mov	r2, r0
 5184 0008 FB1D     		add	r3, r7, #7
 5185 000a 1A70     		strb	r2, [r3]
1503:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 5186              		.loc 1 1503 0
 5187 000c 054B     		ldr	r3, .L425
 5188 000e 1A78     		ldrb	r2, [r3]
 5189 0010 FB1D     		add	r3, r7, #7
 5190 0012 1B78     		ldrb	r3, [r3]
 5191 0014 101C     		mov	r0, r2
 5192 0016 3821     		mov	r1, #56
 5193 0018 1A1C     		mov	r2, r3
 5194 001a FFF7FEFF 		bl	I2CWriteByte
1504:.\mpu6050.c   **** }
 5195              		.loc 1 1504 0
 5196 001e BD46     		mov	sp, r7
 5197 0020 02B0     		add	sp, sp, #8
 5198              		@ sp needed
 5199 0022 80BD     		pop	{r7, pc}
 5200              	.L426:
 5201              		.align	2
 5202              	.L425:
 5203 0024 00000000 		.word	devAddr
 5204              		.cfi_endproc
 5205              	.LFE115:
 5206              		.size	MPU6050_setIntEnabled, .-MPU6050_setIntEnabled
 5207              		.section	.text.MPU6050_getIntFreefallEnabled,"ax",%progbits
 5208              		.align	2
 5209              		.global	MPU6050_getIntFreefallEnabled
 5210              		.code	16
 5211              		.thumb_func
 5212              		.type	MPU6050_getIntFreefallEnabled, %function
 5213              	MPU6050_getIntFreefallEnabled:
 5214              	.LFB116:
1505:.\mpu6050.c   **** /** Get Free Fall interrupt enabled status.
1506:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1507:.\mpu6050.c   ****  * @return Current interrupt enabled status
1508:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1509:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1510:.\mpu6050.c   ****  **/
1511:.\mpu6050.c   **** bool MPU6050_getIntFreefallEnabled() {
 5215              		.loc 1 1511 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 119


 5216              		.cfi_startproc
 5217 0000 80B5     		push	{r7, lr}
 5218              		.cfi_def_cfa_offset 8
 5219              		.cfi_offset 7, -8
 5220              		.cfi_offset 14, -4
 5221 0002 00AF     		add	r7, sp, #0
 5222              		.cfi_def_cfa_register 7
1512:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FF_BIT, buffer);
 5223              		.loc 1 1512 0
 5224 0004 074B     		ldr	r3, .L429
 5225 0006 1A78     		ldrb	r2, [r3]
 5226 0008 074B     		ldr	r3, .L429+4
 5227 000a 101C     		mov	r0, r2
 5228 000c 3821     		mov	r1, #56
 5229 000e 0722     		mov	r2, #7
 5230 0010 FFF7FEFF 		bl	I2CReadBit
1513:.\mpu6050.c   ****     return buffer[0];
 5231              		.loc 1 1513 0
 5232 0014 044B     		ldr	r3, .L429+4
 5233 0016 1B78     		ldrb	r3, [r3]
 5234 0018 5A1E     		sub	r2, r3, #1
 5235 001a 9341     		sbc	r3, r3, r2
 5236 001c DBB2     		uxtb	r3, r3
1514:.\mpu6050.c   **** }
 5237              		.loc 1 1514 0
 5238 001e 181C     		mov	r0, r3
 5239 0020 BD46     		mov	sp, r7
 5240              		@ sp needed
 5241 0022 80BD     		pop	{r7, pc}
 5242              	.L430:
 5243              		.align	2
 5244              	.L429:
 5245 0024 00000000 		.word	devAddr
 5246 0028 00000000 		.word	buffer
 5247              		.cfi_endproc
 5248              	.LFE116:
 5249              		.size	MPU6050_getIntFreefallEnabled, .-MPU6050_getIntFreefallEnabled
 5250              		.section	.text.MPU6050_setIntFreefallEnabled,"ax",%progbits
 5251              		.align	2
 5252              		.global	MPU6050_setIntFreefallEnabled
 5253              		.code	16
 5254              		.thumb_func
 5255              		.type	MPU6050_setIntFreefallEnabled, %function
 5256              	MPU6050_setIntFreefallEnabled:
 5257              	.LFB117:
1515:.\mpu6050.c   **** /** Set Free Fall interrupt enabled status.
1516:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1517:.\mpu6050.c   ****  * @see getIntFreefallEnabled()
1518:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1519:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1520:.\mpu6050.c   ****  **/
1521:.\mpu6050.c   **** void MPU6050_setIntFreefallEnabled(bool enabled) {
 5258              		.loc 1 1521 0
 5259              		.cfi_startproc
 5260 0000 80B5     		push	{r7, lr}
 5261              		.cfi_def_cfa_offset 8
 5262              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 120


 5263              		.cfi_offset 14, -4
 5264 0002 82B0     		sub	sp, sp, #8
 5265              		.cfi_def_cfa_offset 16
 5266 0004 00AF     		add	r7, sp, #0
 5267              		.cfi_def_cfa_register 7
 5268 0006 021C     		mov	r2, r0
 5269 0008 FB1D     		add	r3, r7, #7
 5270 000a 1A70     		strb	r2, [r3]
1522:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FF_BIT, enabled);
 5271              		.loc 1 1522 0
 5272 000c 054B     		ldr	r3, .L432
 5273 000e 1A78     		ldrb	r2, [r3]
 5274 0010 FB1D     		add	r3, r7, #7
 5275 0012 1B78     		ldrb	r3, [r3]
 5276 0014 101C     		mov	r0, r2
 5277 0016 3821     		mov	r1, #56
 5278 0018 0722     		mov	r2, #7
 5279 001a FFF7FEFF 		bl	I2CWriteBit
1523:.\mpu6050.c   **** }
 5280              		.loc 1 1523 0
 5281 001e BD46     		mov	sp, r7
 5282 0020 02B0     		add	sp, sp, #8
 5283              		@ sp needed
 5284 0022 80BD     		pop	{r7, pc}
 5285              	.L433:
 5286              		.align	2
 5287              	.L432:
 5288 0024 00000000 		.word	devAddr
 5289              		.cfi_endproc
 5290              	.LFE117:
 5291              		.size	MPU6050_setIntFreefallEnabled, .-MPU6050_setIntFreefallEnabled
 5292              		.section	.text.MPU6050_getIntMotionEnabled,"ax",%progbits
 5293              		.align	2
 5294              		.global	MPU6050_getIntMotionEnabled
 5295              		.code	16
 5296              		.thumb_func
 5297              		.type	MPU6050_getIntMotionEnabled, %function
 5298              	MPU6050_getIntMotionEnabled:
 5299              	.LFB118:
1524:.\mpu6050.c   **** /** Get Motion Detection interrupt enabled status.
1525:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1526:.\mpu6050.c   ****  * @return Current interrupt enabled status
1527:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1528:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_MOT_BIT
1529:.\mpu6050.c   ****  **/
1530:.\mpu6050.c   **** bool MPU6050_getIntMotionEnabled() {
 5300              		.loc 1 1530 0
 5301              		.cfi_startproc
 5302 0000 80B5     		push	{r7, lr}
 5303              		.cfi_def_cfa_offset 8
 5304              		.cfi_offset 7, -8
 5305              		.cfi_offset 14, -4
 5306 0002 00AF     		add	r7, sp, #0
 5307              		.cfi_def_cfa_register 7
1531:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_MOT_BIT, buffer);
 5308              		.loc 1 1531 0
 5309 0004 074B     		ldr	r3, .L436
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 121


 5310 0006 1A78     		ldrb	r2, [r3]
 5311 0008 074B     		ldr	r3, .L436+4
 5312 000a 101C     		mov	r0, r2
 5313 000c 3821     		mov	r1, #56
 5314 000e 0622     		mov	r2, #6
 5315 0010 FFF7FEFF 		bl	I2CReadBit
1532:.\mpu6050.c   ****     return buffer[0];
 5316              		.loc 1 1532 0
 5317 0014 044B     		ldr	r3, .L436+4
 5318 0016 1B78     		ldrb	r3, [r3]
 5319 0018 5A1E     		sub	r2, r3, #1
 5320 001a 9341     		sbc	r3, r3, r2
 5321 001c DBB2     		uxtb	r3, r3
1533:.\mpu6050.c   **** }
 5322              		.loc 1 1533 0
 5323 001e 181C     		mov	r0, r3
 5324 0020 BD46     		mov	sp, r7
 5325              		@ sp needed
 5326 0022 80BD     		pop	{r7, pc}
 5327              	.L437:
 5328              		.align	2
 5329              	.L436:
 5330 0024 00000000 		.word	devAddr
 5331 0028 00000000 		.word	buffer
 5332              		.cfi_endproc
 5333              	.LFE118:
 5334              		.size	MPU6050_getIntMotionEnabled, .-MPU6050_getIntMotionEnabled
 5335              		.section	.text.MPU6050_setIntMotionEnabled,"ax",%progbits
 5336              		.align	2
 5337              		.global	MPU6050_setIntMotionEnabled
 5338              		.code	16
 5339              		.thumb_func
 5340              		.type	MPU6050_setIntMotionEnabled, %function
 5341              	MPU6050_setIntMotionEnabled:
 5342              	.LFB119:
1534:.\mpu6050.c   **** /** Set Motion Detection interrupt enabled status.
1535:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1536:.\mpu6050.c   ****  * @see getIntMotionEnabled()
1537:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1538:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_MOT_BIT
1539:.\mpu6050.c   ****  **/
1540:.\mpu6050.c   **** void MPU6050_setIntMotionEnabled(bool enabled) {
 5343              		.loc 1 1540 0
 5344              		.cfi_startproc
 5345 0000 80B5     		push	{r7, lr}
 5346              		.cfi_def_cfa_offset 8
 5347              		.cfi_offset 7, -8
 5348              		.cfi_offset 14, -4
 5349 0002 82B0     		sub	sp, sp, #8
 5350              		.cfi_def_cfa_offset 16
 5351 0004 00AF     		add	r7, sp, #0
 5352              		.cfi_def_cfa_register 7
 5353 0006 021C     		mov	r2, r0
 5354 0008 FB1D     		add	r3, r7, #7
 5355 000a 1A70     		strb	r2, [r3]
1541:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_MOT_BIT, enabled);
 5356              		.loc 1 1541 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 122


 5357 000c 054B     		ldr	r3, .L439
 5358 000e 1A78     		ldrb	r2, [r3]
 5359 0010 FB1D     		add	r3, r7, #7
 5360 0012 1B78     		ldrb	r3, [r3]
 5361 0014 101C     		mov	r0, r2
 5362 0016 3821     		mov	r1, #56
 5363 0018 0622     		mov	r2, #6
 5364 001a FFF7FEFF 		bl	I2CWriteBit
1542:.\mpu6050.c   **** }
 5365              		.loc 1 1542 0
 5366 001e BD46     		mov	sp, r7
 5367 0020 02B0     		add	sp, sp, #8
 5368              		@ sp needed
 5369 0022 80BD     		pop	{r7, pc}
 5370              	.L440:
 5371              		.align	2
 5372              	.L439:
 5373 0024 00000000 		.word	devAddr
 5374              		.cfi_endproc
 5375              	.LFE119:
 5376              		.size	MPU6050_setIntMotionEnabled, .-MPU6050_setIntMotionEnabled
 5377              		.section	.text.MPU6050_getIntZeroMotionEnabled,"ax",%progbits
 5378              		.align	2
 5379              		.global	MPU6050_getIntZeroMotionEnabled
 5380              		.code	16
 5381              		.thumb_func
 5382              		.type	MPU6050_getIntZeroMotionEnabled, %function
 5383              	MPU6050_getIntZeroMotionEnabled:
 5384              	.LFB120:
1543:.\mpu6050.c   **** /** Get Zero Motion Detection interrupt enabled status.
1544:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1545:.\mpu6050.c   ****  * @return Current interrupt enabled status
1546:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1547:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_ZMOT_BIT
1548:.\mpu6050.c   ****  **/
1549:.\mpu6050.c   **** bool MPU6050_getIntZeroMotionEnabled() {
 5385              		.loc 1 1549 0
 5386              		.cfi_startproc
 5387 0000 80B5     		push	{r7, lr}
 5388              		.cfi_def_cfa_offset 8
 5389              		.cfi_offset 7, -8
 5390              		.cfi_offset 14, -4
 5391 0002 00AF     		add	r7, sp, #0
 5392              		.cfi_def_cfa_register 7
1550:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_ZMOT_BIT, buffer);
 5393              		.loc 1 1550 0
 5394 0004 074B     		ldr	r3, .L443
 5395 0006 1A78     		ldrb	r2, [r3]
 5396 0008 074B     		ldr	r3, .L443+4
 5397 000a 101C     		mov	r0, r2
 5398 000c 3821     		mov	r1, #56
 5399 000e 0522     		mov	r2, #5
 5400 0010 FFF7FEFF 		bl	I2CReadBit
1551:.\mpu6050.c   ****     return buffer[0];
 5401              		.loc 1 1551 0
 5402 0014 044B     		ldr	r3, .L443+4
 5403 0016 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 123


 5404 0018 5A1E     		sub	r2, r3, #1
 5405 001a 9341     		sbc	r3, r3, r2
 5406 001c DBB2     		uxtb	r3, r3
1552:.\mpu6050.c   **** }
 5407              		.loc 1 1552 0
 5408 001e 181C     		mov	r0, r3
 5409 0020 BD46     		mov	sp, r7
 5410              		@ sp needed
 5411 0022 80BD     		pop	{r7, pc}
 5412              	.L444:
 5413              		.align	2
 5414              	.L443:
 5415 0024 00000000 		.word	devAddr
 5416 0028 00000000 		.word	buffer
 5417              		.cfi_endproc
 5418              	.LFE120:
 5419              		.size	MPU6050_getIntZeroMotionEnabled, .-MPU6050_getIntZeroMotionEnabled
 5420              		.section	.text.MPU6050_setIntZeroMotionEnabled,"ax",%progbits
 5421              		.align	2
 5422              		.global	MPU6050_setIntZeroMotionEnabled
 5423              		.code	16
 5424              		.thumb_func
 5425              		.type	MPU6050_setIntZeroMotionEnabled, %function
 5426              	MPU6050_setIntZeroMotionEnabled:
 5427              	.LFB121:
1553:.\mpu6050.c   **** /** Set Zero Motion Detection interrupt enabled status.
1554:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1555:.\mpu6050.c   ****  * @see getIntZeroMotionEnabled()
1556:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1557:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_ZMOT_BIT
1558:.\mpu6050.c   ****  **/
1559:.\mpu6050.c   **** void MPU6050_setIntZeroMotionEnabled(bool enabled) {
 5428              		.loc 1 1559 0
 5429              		.cfi_startproc
 5430 0000 80B5     		push	{r7, lr}
 5431              		.cfi_def_cfa_offset 8
 5432              		.cfi_offset 7, -8
 5433              		.cfi_offset 14, -4
 5434 0002 82B0     		sub	sp, sp, #8
 5435              		.cfi_def_cfa_offset 16
 5436 0004 00AF     		add	r7, sp, #0
 5437              		.cfi_def_cfa_register 7
 5438 0006 021C     		mov	r2, r0
 5439 0008 FB1D     		add	r3, r7, #7
 5440 000a 1A70     		strb	r2, [r3]
1560:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_ZMOT_BIT, enabled);
 5441              		.loc 1 1560 0
 5442 000c 054B     		ldr	r3, .L446
 5443 000e 1A78     		ldrb	r2, [r3]
 5444 0010 FB1D     		add	r3, r7, #7
 5445 0012 1B78     		ldrb	r3, [r3]
 5446 0014 101C     		mov	r0, r2
 5447 0016 3821     		mov	r1, #56
 5448 0018 0522     		mov	r2, #5
 5449 001a FFF7FEFF 		bl	I2CWriteBit
1561:.\mpu6050.c   **** }
 5450              		.loc 1 1561 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 124


 5451 001e BD46     		mov	sp, r7
 5452 0020 02B0     		add	sp, sp, #8
 5453              		@ sp needed
 5454 0022 80BD     		pop	{r7, pc}
 5455              	.L447:
 5456              		.align	2
 5457              	.L446:
 5458 0024 00000000 		.word	devAddr
 5459              		.cfi_endproc
 5460              	.LFE121:
 5461              		.size	MPU6050_setIntZeroMotionEnabled, .-MPU6050_setIntZeroMotionEnabled
 5462              		.section	.text.MPU6050_getIntFIFOBufferOverflowEnabled,"ax",%progbits
 5463              		.align	2
 5464              		.global	MPU6050_getIntFIFOBufferOverflowEnabled
 5465              		.code	16
 5466              		.thumb_func
 5467              		.type	MPU6050_getIntFIFOBufferOverflowEnabled, %function
 5468              	MPU6050_getIntFIFOBufferOverflowEnabled:
 5469              	.LFB122:
1562:.\mpu6050.c   **** /** Get FIFO Buffer Overflow interrupt enabled status.
1563:.\mpu6050.c   ****  * Will be set 0 for disabled, 1 for enabled.
1564:.\mpu6050.c   ****  * @return Current interrupt enabled status
1565:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1566:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
1567:.\mpu6050.c   ****  **/
1568:.\mpu6050.c   **** bool MPU6050_getIntFIFOBufferOverflowEnabled() {
 5470              		.loc 1 1568 0
 5471              		.cfi_startproc
 5472 0000 80B5     		push	{r7, lr}
 5473              		.cfi_def_cfa_offset 8
 5474              		.cfi_offset 7, -8
 5475              		.cfi_offset 14, -4
 5476 0002 00AF     		add	r7, sp, #0
 5477              		.cfi_def_cfa_register 7
1569:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, buffer);
 5478              		.loc 1 1569 0
 5479 0004 074B     		ldr	r3, .L450
 5480 0006 1A78     		ldrb	r2, [r3]
 5481 0008 074B     		ldr	r3, .L450+4
 5482 000a 101C     		mov	r0, r2
 5483 000c 3821     		mov	r1, #56
 5484 000e 0422     		mov	r2, #4
 5485 0010 FFF7FEFF 		bl	I2CReadBit
1570:.\mpu6050.c   ****     return buffer[0];
 5486              		.loc 1 1570 0
 5487 0014 044B     		ldr	r3, .L450+4
 5488 0016 1B78     		ldrb	r3, [r3]
 5489 0018 5A1E     		sub	r2, r3, #1
 5490 001a 9341     		sbc	r3, r3, r2
 5491 001c DBB2     		uxtb	r3, r3
1571:.\mpu6050.c   **** }
 5492              		.loc 1 1571 0
 5493 001e 181C     		mov	r0, r3
 5494 0020 BD46     		mov	sp, r7
 5495              		@ sp needed
 5496 0022 80BD     		pop	{r7, pc}
 5497              	.L451:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 125


 5498              		.align	2
 5499              	.L450:
 5500 0024 00000000 		.word	devAddr
 5501 0028 00000000 		.word	buffer
 5502              		.cfi_endproc
 5503              	.LFE122:
 5504              		.size	MPU6050_getIntFIFOBufferOverflowEnabled, .-MPU6050_getIntFIFOBufferOverflowEnabled
 5505              		.section	.text.MPU6050_setIntFIFOBufferOverflowEnabled,"ax",%progbits
 5506              		.align	2
 5507              		.global	MPU6050_setIntFIFOBufferOverflowEnabled
 5508              		.code	16
 5509              		.thumb_func
 5510              		.type	MPU6050_setIntFIFOBufferOverflowEnabled, %function
 5511              	MPU6050_setIntFIFOBufferOverflowEnabled:
 5512              	.LFB123:
1572:.\mpu6050.c   **** /** Set FIFO Buffer Overflow interrupt enabled status.
1573:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1574:.\mpu6050.c   ****  * @see getIntFIFOBufferOverflowEnabled()
1575:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1576:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
1577:.\mpu6050.c   ****  **/
1578:.\mpu6050.c   **** void MPU6050_setIntFIFOBufferOverflowEnabled(bool enabled) {
 5513              		.loc 1 1578 0
 5514              		.cfi_startproc
 5515 0000 80B5     		push	{r7, lr}
 5516              		.cfi_def_cfa_offset 8
 5517              		.cfi_offset 7, -8
 5518              		.cfi_offset 14, -4
 5519 0002 82B0     		sub	sp, sp, #8
 5520              		.cfi_def_cfa_offset 16
 5521 0004 00AF     		add	r7, sp, #0
 5522              		.cfi_def_cfa_register 7
 5523 0006 021C     		mov	r2, r0
 5524 0008 FB1D     		add	r3, r7, #7
 5525 000a 1A70     		strb	r2, [r3]
1579:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, enabled);
 5526              		.loc 1 1579 0
 5527 000c 054B     		ldr	r3, .L453
 5528 000e 1A78     		ldrb	r2, [r3]
 5529 0010 FB1D     		add	r3, r7, #7
 5530 0012 1B78     		ldrb	r3, [r3]
 5531 0014 101C     		mov	r0, r2
 5532 0016 3821     		mov	r1, #56
 5533 0018 0422     		mov	r2, #4
 5534 001a FFF7FEFF 		bl	I2CWriteBit
1580:.\mpu6050.c   **** }
 5535              		.loc 1 1580 0
 5536 001e BD46     		mov	sp, r7
 5537 0020 02B0     		add	sp, sp, #8
 5538              		@ sp needed
 5539 0022 80BD     		pop	{r7, pc}
 5540              	.L454:
 5541              		.align	2
 5542              	.L453:
 5543 0024 00000000 		.word	devAddr
 5544              		.cfi_endproc
 5545              	.LFE123:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 126


 5546              		.size	MPU6050_setIntFIFOBufferOverflowEnabled, .-MPU6050_setIntFIFOBufferOverflowEnabled
 5547              		.section	.text.MPU6050_getIntI2CMasterEnabled,"ax",%progbits
 5548              		.align	2
 5549              		.global	MPU6050_getIntI2CMasterEnabled
 5550              		.code	16
 5551              		.thumb_func
 5552              		.type	MPU6050_getIntI2CMasterEnabled, %function
 5553              	MPU6050_getIntI2CMasterEnabled:
 5554              	.LFB124:
1581:.\mpu6050.c   **** /** Get I2C Master interrupt enabled status.
1582:.\mpu6050.c   ****  * This enables any of the I2C Master interrupt sources to generate an
1583:.\mpu6050.c   ****  * interrupt. Will be set 0 for disabled, 1 for enabled.
1584:.\mpu6050.c   ****  * @return Current interrupt enabled status
1585:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1586:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT
1587:.\mpu6050.c   ****  **/
1588:.\mpu6050.c   **** bool MPU6050_getIntI2CMasterEnabled() {
 5555              		.loc 1 1588 0
 5556              		.cfi_startproc
 5557 0000 80B5     		push	{r7, lr}
 5558              		.cfi_def_cfa_offset 8
 5559              		.cfi_offset 7, -8
 5560              		.cfi_offset 14, -4
 5561 0002 00AF     		add	r7, sp, #0
 5562              		.cfi_def_cfa_register 7
1589:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_I2C_MST_INT_BIT, buffer);
 5563              		.loc 1 1589 0
 5564 0004 074B     		ldr	r3, .L457
 5565 0006 1A78     		ldrb	r2, [r3]
 5566 0008 074B     		ldr	r3, .L457+4
 5567 000a 101C     		mov	r0, r2
 5568 000c 3821     		mov	r1, #56
 5569 000e 0322     		mov	r2, #3
 5570 0010 FFF7FEFF 		bl	I2CReadBit
1590:.\mpu6050.c   ****     return buffer[0];
 5571              		.loc 1 1590 0
 5572 0014 044B     		ldr	r3, .L457+4
 5573 0016 1B78     		ldrb	r3, [r3]
 5574 0018 5A1E     		sub	r2, r3, #1
 5575 001a 9341     		sbc	r3, r3, r2
 5576 001c DBB2     		uxtb	r3, r3
1591:.\mpu6050.c   **** }
 5577              		.loc 1 1591 0
 5578 001e 181C     		mov	r0, r3
 5579 0020 BD46     		mov	sp, r7
 5580              		@ sp needed
 5581 0022 80BD     		pop	{r7, pc}
 5582              	.L458:
 5583              		.align	2
 5584              	.L457:
 5585 0024 00000000 		.word	devAddr
 5586 0028 00000000 		.word	buffer
 5587              		.cfi_endproc
 5588              	.LFE124:
 5589              		.size	MPU6050_getIntI2CMasterEnabled, .-MPU6050_getIntI2CMasterEnabled
 5590              		.section	.text.MPU6050_setIntI2CMasterEnabled,"ax",%progbits
 5591              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 127


 5592              		.global	MPU6050_setIntI2CMasterEnabled
 5593              		.code	16
 5594              		.thumb_func
 5595              		.type	MPU6050_setIntI2CMasterEnabled, %function
 5596              	MPU6050_setIntI2CMasterEnabled:
 5597              	.LFB125:
1592:.\mpu6050.c   **** /** Set I2C Master interrupt enabled status.
1593:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1594:.\mpu6050.c   ****  * @see getIntI2CMasterEnabled()
1595:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1596:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT
1597:.\mpu6050.c   ****  **/
1598:.\mpu6050.c   **** void MPU6050_setIntI2CMasterEnabled(bool enabled) {
 5598              		.loc 1 1598 0
 5599              		.cfi_startproc
 5600 0000 80B5     		push	{r7, lr}
 5601              		.cfi_def_cfa_offset 8
 5602              		.cfi_offset 7, -8
 5603              		.cfi_offset 14, -4
 5604 0002 82B0     		sub	sp, sp, #8
 5605              		.cfi_def_cfa_offset 16
 5606 0004 00AF     		add	r7, sp, #0
 5607              		.cfi_def_cfa_register 7
 5608 0006 021C     		mov	r2, r0
 5609 0008 FB1D     		add	r3, r7, #7
 5610 000a 1A70     		strb	r2, [r3]
1599:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_I2C_MST_INT_BIT, enabled);
 5611              		.loc 1 1599 0
 5612 000c 054B     		ldr	r3, .L460
 5613 000e 1A78     		ldrb	r2, [r3]
 5614 0010 FB1D     		add	r3, r7, #7
 5615 0012 1B78     		ldrb	r3, [r3]
 5616 0014 101C     		mov	r0, r2
 5617 0016 3821     		mov	r1, #56
 5618 0018 0322     		mov	r2, #3
 5619 001a FFF7FEFF 		bl	I2CWriteBit
1600:.\mpu6050.c   **** }
 5620              		.loc 1 1600 0
 5621 001e BD46     		mov	sp, r7
 5622 0020 02B0     		add	sp, sp, #8
 5623              		@ sp needed
 5624 0022 80BD     		pop	{r7, pc}
 5625              	.L461:
 5626              		.align	2
 5627              	.L460:
 5628 0024 00000000 		.word	devAddr
 5629              		.cfi_endproc
 5630              	.LFE125:
 5631              		.size	MPU6050_setIntI2CMasterEnabled, .-MPU6050_setIntI2CMasterEnabled
 5632              		.section	.text.MPU6050_getIntDataReadyEnabled,"ax",%progbits
 5633              		.align	2
 5634              		.global	MPU6050_getIntDataReadyEnabled
 5635              		.code	16
 5636              		.thumb_func
 5637              		.type	MPU6050_getIntDataReadyEnabled, %function
 5638              	MPU6050_getIntDataReadyEnabled:
 5639              	.LFB126:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 128


1601:.\mpu6050.c   **** /** Get Data Ready interrupt enabled setting.
1602:.\mpu6050.c   ****  * This event occurs each time a write operation to all of the sensor registers
1603:.\mpu6050.c   ****  * has been completed. Will be set 0 for disabled, 1 for enabled.
1604:.\mpu6050.c   ****  * @return Current interrupt enabled status
1605:.\mpu6050.c   ****  * @see MPU6050_RA_INT_ENABLE
1606:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_DATA_RDY_BIT
1607:.\mpu6050.c   ****  */
1608:.\mpu6050.c   **** bool MPU6050_getIntDataReadyEnabled() {
 5640              		.loc 1 1608 0
 5641              		.cfi_startproc
 5642 0000 80B5     		push	{r7, lr}
 5643              		.cfi_def_cfa_offset 8
 5644              		.cfi_offset 7, -8
 5645              		.cfi_offset 14, -4
 5646 0002 00AF     		add	r7, sp, #0
 5647              		.cfi_def_cfa_register 7
1609:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, buffer);
 5648              		.loc 1 1609 0
 5649 0004 074B     		ldr	r3, .L464
 5650 0006 1A78     		ldrb	r2, [r3]
 5651 0008 074B     		ldr	r3, .L464+4
 5652 000a 101C     		mov	r0, r2
 5653 000c 3821     		mov	r1, #56
 5654 000e 0022     		mov	r2, #0
 5655 0010 FFF7FEFF 		bl	I2CReadBit
1610:.\mpu6050.c   ****     return buffer[0];
 5656              		.loc 1 1610 0
 5657 0014 044B     		ldr	r3, .L464+4
 5658 0016 1B78     		ldrb	r3, [r3]
 5659 0018 5A1E     		sub	r2, r3, #1
 5660 001a 9341     		sbc	r3, r3, r2
 5661 001c DBB2     		uxtb	r3, r3
1611:.\mpu6050.c   **** }
 5662              		.loc 1 1611 0
 5663 001e 181C     		mov	r0, r3
 5664 0020 BD46     		mov	sp, r7
 5665              		@ sp needed
 5666 0022 80BD     		pop	{r7, pc}
 5667              	.L465:
 5668              		.align	2
 5669              	.L464:
 5670 0024 00000000 		.word	devAddr
 5671 0028 00000000 		.word	buffer
 5672              		.cfi_endproc
 5673              	.LFE126:
 5674              		.size	MPU6050_getIntDataReadyEnabled, .-MPU6050_getIntDataReadyEnabled
 5675              		.section	.text.MPU6050_setIntDataReadyEnabled,"ax",%progbits
 5676              		.align	2
 5677              		.global	MPU6050_setIntDataReadyEnabled
 5678              		.code	16
 5679              		.thumb_func
 5680              		.type	MPU6050_setIntDataReadyEnabled, %function
 5681              	MPU6050_setIntDataReadyEnabled:
 5682              	.LFB127:
1612:.\mpu6050.c   **** /** Set Data Ready interrupt enabled status.
1613:.\mpu6050.c   ****  * @param enabled New interrupt enabled status
1614:.\mpu6050.c   ****  * @see getIntDataReadyEnabled()
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 129


1615:.\mpu6050.c   ****  * @see MPU6050_RA_INT_CFG
1616:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_DATA_RDY_BIT
1617:.\mpu6050.c   ****  */
1618:.\mpu6050.c   **** void MPU6050_setIntDataReadyEnabled(bool enabled) {
 5683              		.loc 1 1618 0
 5684              		.cfi_startproc
 5685 0000 80B5     		push	{r7, lr}
 5686              		.cfi_def_cfa_offset 8
 5687              		.cfi_offset 7, -8
 5688              		.cfi_offset 14, -4
 5689 0002 82B0     		sub	sp, sp, #8
 5690              		.cfi_def_cfa_offset 16
 5691 0004 00AF     		add	r7, sp, #0
 5692              		.cfi_def_cfa_register 7
 5693 0006 021C     		mov	r2, r0
 5694 0008 FB1D     		add	r3, r7, #7
 5695 000a 1A70     		strb	r2, [r3]
1619:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, enabled);
 5696              		.loc 1 1619 0
 5697 000c 054B     		ldr	r3, .L467
 5698 000e 1A78     		ldrb	r2, [r3]
 5699 0010 FB1D     		add	r3, r7, #7
 5700 0012 1B78     		ldrb	r3, [r3]
 5701 0014 101C     		mov	r0, r2
 5702 0016 3821     		mov	r1, #56
 5703 0018 0022     		mov	r2, #0
 5704 001a FFF7FEFF 		bl	I2CWriteBit
1620:.\mpu6050.c   **** }
 5705              		.loc 1 1620 0
 5706 001e BD46     		mov	sp, r7
 5707 0020 02B0     		add	sp, sp, #8
 5708              		@ sp needed
 5709 0022 80BD     		pop	{r7, pc}
 5710              	.L468:
 5711              		.align	2
 5712              	.L467:
 5713 0024 00000000 		.word	devAddr
 5714              		.cfi_endproc
 5715              	.LFE127:
 5716              		.size	MPU6050_setIntDataReadyEnabled, .-MPU6050_setIntDataReadyEnabled
 5717              		.section	.text.MPU6050_getIntStatus,"ax",%progbits
 5718              		.align	2
 5719              		.global	MPU6050_getIntStatus
 5720              		.code	16
 5721              		.thumb_func
 5722              		.type	MPU6050_getIntStatus, %function
 5723              	MPU6050_getIntStatus:
 5724              	.LFB128:
1621:.\mpu6050.c   **** 
1622:.\mpu6050.c   **** // INT_STATUS register
1623:.\mpu6050.c   **** 
1624:.\mpu6050.c   **** /** Get full set of interrupt status bits.
1625:.\mpu6050.c   ****  * These bits clear to 0 after the register has been read. Very useful
1626:.\mpu6050.c   ****  * for getting multiple INT statuses, since each single bit read clears
1627:.\mpu6050.c   ****  * all of them because it has to read the whole byte.
1628:.\mpu6050.c   ****  * @return Current interrupt status
1629:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 130


1630:.\mpu6050.c   ****  */
1631:.\mpu6050.c   **** uint8_t MPU6050_getIntStatus() {
 5725              		.loc 1 1631 0
 5726              		.cfi_startproc
 5727 0000 80B5     		push	{r7, lr}
 5728              		.cfi_def_cfa_offset 8
 5729              		.cfi_offset 7, -8
 5730              		.cfi_offset 14, -4
 5731 0002 00AF     		add	r7, sp, #0
 5732              		.cfi_def_cfa_register 7
1632:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 5733              		.loc 1 1632 0
 5734 0004 064B     		ldr	r3, .L471
 5735 0006 1A78     		ldrb	r2, [r3]
 5736 0008 064B     		ldr	r3, .L471+4
 5737 000a 101C     		mov	r0, r2
 5738 000c 3A21     		mov	r1, #58
 5739 000e 1A1C     		mov	r2, r3
 5740 0010 FFF7FEFF 		bl	I2CReadByte
1633:.\mpu6050.c   ****     return buffer[0];
 5741              		.loc 1 1633 0
 5742 0014 034B     		ldr	r3, .L471+4
 5743 0016 1B78     		ldrb	r3, [r3]
1634:.\mpu6050.c   **** }
 5744              		.loc 1 1634 0
 5745 0018 181C     		mov	r0, r3
 5746 001a BD46     		mov	sp, r7
 5747              		@ sp needed
 5748 001c 80BD     		pop	{r7, pc}
 5749              	.L472:
 5750 001e C046     		.align	2
 5751              	.L471:
 5752 0020 00000000 		.word	devAddr
 5753 0024 00000000 		.word	buffer
 5754              		.cfi_endproc
 5755              	.LFE128:
 5756              		.size	MPU6050_getIntStatus, .-MPU6050_getIntStatus
 5757              		.section	.text.MPU6050_getIntFreefallStatus,"ax",%progbits
 5758              		.align	2
 5759              		.global	MPU6050_getIntFreefallStatus
 5760              		.code	16
 5761              		.thumb_func
 5762              		.type	MPU6050_getIntFreefallStatus, %function
 5763              	MPU6050_getIntFreefallStatus:
 5764              	.LFB129:
1635:.\mpu6050.c   **** /** Get Free Fall interrupt status.
1636:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Free Fall interrupt has been
1637:.\mpu6050.c   ****  * generated. The bit clears to 0 after the register has been read.
1638:.\mpu6050.c   ****  * @return Current interrupt status
1639:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1640:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FF_BIT
1641:.\mpu6050.c   ****  */
1642:.\mpu6050.c   **** bool MPU6050_getIntFreefallStatus() {
 5765              		.loc 1 1642 0
 5766              		.cfi_startproc
 5767 0000 80B5     		push	{r7, lr}
 5768              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 131


 5769              		.cfi_offset 7, -8
 5770              		.cfi_offset 14, -4
 5771 0002 00AF     		add	r7, sp, #0
 5772              		.cfi_def_cfa_register 7
1643:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FF_BIT, buffer);
 5773              		.loc 1 1643 0
 5774 0004 074B     		ldr	r3, .L475
 5775 0006 1A78     		ldrb	r2, [r3]
 5776 0008 074B     		ldr	r3, .L475+4
 5777 000a 101C     		mov	r0, r2
 5778 000c 3A21     		mov	r1, #58
 5779 000e 0722     		mov	r2, #7
 5780 0010 FFF7FEFF 		bl	I2CReadBit
1644:.\mpu6050.c   ****     return buffer[0];
 5781              		.loc 1 1644 0
 5782 0014 044B     		ldr	r3, .L475+4
 5783 0016 1B78     		ldrb	r3, [r3]
 5784 0018 5A1E     		sub	r2, r3, #1
 5785 001a 9341     		sbc	r3, r3, r2
 5786 001c DBB2     		uxtb	r3, r3
1645:.\mpu6050.c   **** }
 5787              		.loc 1 1645 0
 5788 001e 181C     		mov	r0, r3
 5789 0020 BD46     		mov	sp, r7
 5790              		@ sp needed
 5791 0022 80BD     		pop	{r7, pc}
 5792              	.L476:
 5793              		.align	2
 5794              	.L475:
 5795 0024 00000000 		.word	devAddr
 5796 0028 00000000 		.word	buffer
 5797              		.cfi_endproc
 5798              	.LFE129:
 5799              		.size	MPU6050_getIntFreefallStatus, .-MPU6050_getIntFreefallStatus
 5800              		.section	.text.MPU6050_getIntMotionStatus,"ax",%progbits
 5801              		.align	2
 5802              		.global	MPU6050_getIntMotionStatus
 5803              		.code	16
 5804              		.thumb_func
 5805              		.type	MPU6050_getIntMotionStatus, %function
 5806              	MPU6050_getIntMotionStatus:
 5807              	.LFB130:
1646:.\mpu6050.c   **** /** Get Motion Detection interrupt status.
1647:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Motion Detection interrupt has been
1648:.\mpu6050.c   ****  * generated. The bit clears to 0 after the register has been read.
1649:.\mpu6050.c   ****  * @return Current interrupt status
1650:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1651:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_MOT_BIT
1652:.\mpu6050.c   ****  */
1653:.\mpu6050.c   **** bool MPU6050_getIntMotionStatus() {
 5808              		.loc 1 1653 0
 5809              		.cfi_startproc
 5810 0000 80B5     		push	{r7, lr}
 5811              		.cfi_def_cfa_offset 8
 5812              		.cfi_offset 7, -8
 5813              		.cfi_offset 14, -4
 5814 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 132


 5815              		.cfi_def_cfa_register 7
1654:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_MOT_BIT, buffer);
 5816              		.loc 1 1654 0
 5817 0004 074B     		ldr	r3, .L479
 5818 0006 1A78     		ldrb	r2, [r3]
 5819 0008 074B     		ldr	r3, .L479+4
 5820 000a 101C     		mov	r0, r2
 5821 000c 3A21     		mov	r1, #58
 5822 000e 0622     		mov	r2, #6
 5823 0010 FFF7FEFF 		bl	I2CReadBit
1655:.\mpu6050.c   ****     return buffer[0];
 5824              		.loc 1 1655 0
 5825 0014 044B     		ldr	r3, .L479+4
 5826 0016 1B78     		ldrb	r3, [r3]
 5827 0018 5A1E     		sub	r2, r3, #1
 5828 001a 9341     		sbc	r3, r3, r2
 5829 001c DBB2     		uxtb	r3, r3
1656:.\mpu6050.c   **** }
 5830              		.loc 1 1656 0
 5831 001e 181C     		mov	r0, r3
 5832 0020 BD46     		mov	sp, r7
 5833              		@ sp needed
 5834 0022 80BD     		pop	{r7, pc}
 5835              	.L480:
 5836              		.align	2
 5837              	.L479:
 5838 0024 00000000 		.word	devAddr
 5839 0028 00000000 		.word	buffer
 5840              		.cfi_endproc
 5841              	.LFE130:
 5842              		.size	MPU6050_getIntMotionStatus, .-MPU6050_getIntMotionStatus
 5843              		.section	.text.MPU6050_getIntZeroMotionStatus,"ax",%progbits
 5844              		.align	2
 5845              		.global	MPU6050_getIntZeroMotionStatus
 5846              		.code	16
 5847              		.thumb_func
 5848              		.type	MPU6050_getIntZeroMotionStatus, %function
 5849              	MPU6050_getIntZeroMotionStatus:
 5850              	.LFB131:
1657:.\mpu6050.c   **** /** Get Zero Motion Detection interrupt status.
1658:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Zero Motion Detection interrupt has
1659:.\mpu6050.c   ****  * been generated. The bit clears to 0 after the register has been read.
1660:.\mpu6050.c   ****  * @return Current interrupt status
1661:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1662:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_ZMOT_BIT
1663:.\mpu6050.c   ****  */
1664:.\mpu6050.c   **** bool MPU6050_getIntZeroMotionStatus() {
 5851              		.loc 1 1664 0
 5852              		.cfi_startproc
 5853 0000 80B5     		push	{r7, lr}
 5854              		.cfi_def_cfa_offset 8
 5855              		.cfi_offset 7, -8
 5856              		.cfi_offset 14, -4
 5857 0002 00AF     		add	r7, sp, #0
 5858              		.cfi_def_cfa_register 7
1665:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_ZMOT_BIT, buffer);
 5859              		.loc 1 1665 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 133


 5860 0004 074B     		ldr	r3, .L483
 5861 0006 1A78     		ldrb	r2, [r3]
 5862 0008 074B     		ldr	r3, .L483+4
 5863 000a 101C     		mov	r0, r2
 5864 000c 3A21     		mov	r1, #58
 5865 000e 0522     		mov	r2, #5
 5866 0010 FFF7FEFF 		bl	I2CReadBit
1666:.\mpu6050.c   ****     return buffer[0];
 5867              		.loc 1 1666 0
 5868 0014 044B     		ldr	r3, .L483+4
 5869 0016 1B78     		ldrb	r3, [r3]
 5870 0018 5A1E     		sub	r2, r3, #1
 5871 001a 9341     		sbc	r3, r3, r2
 5872 001c DBB2     		uxtb	r3, r3
1667:.\mpu6050.c   **** }
 5873              		.loc 1 1667 0
 5874 001e 181C     		mov	r0, r3
 5875 0020 BD46     		mov	sp, r7
 5876              		@ sp needed
 5877 0022 80BD     		pop	{r7, pc}
 5878              	.L484:
 5879              		.align	2
 5880              	.L483:
 5881 0024 00000000 		.word	devAddr
 5882 0028 00000000 		.word	buffer
 5883              		.cfi_endproc
 5884              	.LFE131:
 5885              		.size	MPU6050_getIntZeroMotionStatus, .-MPU6050_getIntZeroMotionStatus
 5886              		.section	.text.MPU6050_getIntFIFOBufferOverflowStatus,"ax",%progbits
 5887              		.align	2
 5888              		.global	MPU6050_getIntFIFOBufferOverflowStatus
 5889              		.code	16
 5890              		.thumb_func
 5891              		.type	MPU6050_getIntFIFOBufferOverflowStatus, %function
 5892              	MPU6050_getIntFIFOBufferOverflowStatus:
 5893              	.LFB132:
1668:.\mpu6050.c   **** /** Get FIFO Buffer Overflow interrupt status.
1669:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Free Fall interrupt has been
1670:.\mpu6050.c   ****  * generated. The bit clears to 0 after the register has been read.
1671:.\mpu6050.c   ****  * @return Current interrupt status
1672:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1673:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
1674:.\mpu6050.c   ****  */
1675:.\mpu6050.c   **** bool MPU6050_getIntFIFOBufferOverflowStatus() {
 5894              		.loc 1 1675 0
 5895              		.cfi_startproc
 5896 0000 80B5     		push	{r7, lr}
 5897              		.cfi_def_cfa_offset 8
 5898              		.cfi_offset 7, -8
 5899              		.cfi_offset 14, -4
 5900 0002 00AF     		add	r7, sp, #0
 5901              		.cfi_def_cfa_register 7
1676:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, buffer);
 5902              		.loc 1 1676 0
 5903 0004 074B     		ldr	r3, .L487
 5904 0006 1A78     		ldrb	r2, [r3]
 5905 0008 074B     		ldr	r3, .L487+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 134


 5906 000a 101C     		mov	r0, r2
 5907 000c 3A21     		mov	r1, #58
 5908 000e 0422     		mov	r2, #4
 5909 0010 FFF7FEFF 		bl	I2CReadBit
1677:.\mpu6050.c   ****     return buffer[0];
 5910              		.loc 1 1677 0
 5911 0014 044B     		ldr	r3, .L487+4
 5912 0016 1B78     		ldrb	r3, [r3]
 5913 0018 5A1E     		sub	r2, r3, #1
 5914 001a 9341     		sbc	r3, r3, r2
 5915 001c DBB2     		uxtb	r3, r3
1678:.\mpu6050.c   **** }
 5916              		.loc 1 1678 0
 5917 001e 181C     		mov	r0, r3
 5918 0020 BD46     		mov	sp, r7
 5919              		@ sp needed
 5920 0022 80BD     		pop	{r7, pc}
 5921              	.L488:
 5922              		.align	2
 5923              	.L487:
 5924 0024 00000000 		.word	devAddr
 5925 0028 00000000 		.word	buffer
 5926              		.cfi_endproc
 5927              	.LFE132:
 5928              		.size	MPU6050_getIntFIFOBufferOverflowStatus, .-MPU6050_getIntFIFOBufferOverflowStatus
 5929              		.section	.text.MPU6050_getIntI2CMasterStatus,"ax",%progbits
 5930              		.align	2
 5931              		.global	MPU6050_getIntI2CMasterStatus
 5932              		.code	16
 5933              		.thumb_func
 5934              		.type	MPU6050_getIntI2CMasterStatus, %function
 5935              	MPU6050_getIntI2CMasterStatus:
 5936              	.LFB133:
1679:.\mpu6050.c   **** /** Get I2C Master interrupt status.
1680:.\mpu6050.c   ****  * This bit automatically sets to 1 when an I2C Master interrupt has been
1681:.\mpu6050.c   ****  * generated. For a list of I2C Master interrupts, please refer to Register 54.
1682:.\mpu6050.c   ****  * The bit clears to 0 after the register has been read.
1683:.\mpu6050.c   ****  * @return Current interrupt status
1684:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1685:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT
1686:.\mpu6050.c   ****  */
1687:.\mpu6050.c   **** bool MPU6050_getIntI2CMasterStatus() {
 5937              		.loc 1 1687 0
 5938              		.cfi_startproc
 5939 0000 80B5     		push	{r7, lr}
 5940              		.cfi_def_cfa_offset 8
 5941              		.cfi_offset 7, -8
 5942              		.cfi_offset 14, -4
 5943 0002 00AF     		add	r7, sp, #0
 5944              		.cfi_def_cfa_register 7
1688:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_I2C_MST_INT_BIT, buffer);
 5945              		.loc 1 1688 0
 5946 0004 074B     		ldr	r3, .L491
 5947 0006 1A78     		ldrb	r2, [r3]
 5948 0008 074B     		ldr	r3, .L491+4
 5949 000a 101C     		mov	r0, r2
 5950 000c 3A21     		mov	r1, #58
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 135


 5951 000e 0322     		mov	r2, #3
 5952 0010 FFF7FEFF 		bl	I2CReadBit
1689:.\mpu6050.c   ****     return buffer[0];
 5953              		.loc 1 1689 0
 5954 0014 044B     		ldr	r3, .L491+4
 5955 0016 1B78     		ldrb	r3, [r3]
 5956 0018 5A1E     		sub	r2, r3, #1
 5957 001a 9341     		sbc	r3, r3, r2
 5958 001c DBB2     		uxtb	r3, r3
1690:.\mpu6050.c   **** }
 5959              		.loc 1 1690 0
 5960 001e 181C     		mov	r0, r3
 5961 0020 BD46     		mov	sp, r7
 5962              		@ sp needed
 5963 0022 80BD     		pop	{r7, pc}
 5964              	.L492:
 5965              		.align	2
 5966              	.L491:
 5967 0024 00000000 		.word	devAddr
 5968 0028 00000000 		.word	buffer
 5969              		.cfi_endproc
 5970              	.LFE133:
 5971              		.size	MPU6050_getIntI2CMasterStatus, .-MPU6050_getIntI2CMasterStatus
 5972              		.section	.text.MPU6050_getIntDataReadyStatus,"ax",%progbits
 5973              		.align	2
 5974              		.global	MPU6050_getIntDataReadyStatus
 5975              		.code	16
 5976              		.thumb_func
 5977              		.type	MPU6050_getIntDataReadyStatus, %function
 5978              	MPU6050_getIntDataReadyStatus:
 5979              	.LFB134:
1691:.\mpu6050.c   **** /** Get Data Ready interrupt status.
1692:.\mpu6050.c   ****  * This bit automatically sets to 1 when a Data Ready interrupt has been
1693:.\mpu6050.c   ****  * generated. The bit clears to 0 after the register has been read.
1694:.\mpu6050.c   ****  * @return Current interrupt status
1695:.\mpu6050.c   ****  * @see MPU6050_RA_INT_STATUS
1696:.\mpu6050.c   ****  * @see MPU6050_INTERRUPT_DATA_RDY_BIT
1697:.\mpu6050.c   ****  */
1698:.\mpu6050.c   **** bool MPU6050_getIntDataReadyStatus() {
 5980              		.loc 1 1698 0
 5981              		.cfi_startproc
 5982 0000 80B5     		push	{r7, lr}
 5983              		.cfi_def_cfa_offset 8
 5984              		.cfi_offset 7, -8
 5985              		.cfi_offset 14, -4
 5986 0002 00AF     		add	r7, sp, #0
 5987              		.cfi_def_cfa_register 7
1699:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, buffer);
 5988              		.loc 1 1699 0
 5989 0004 074B     		ldr	r3, .L495
 5990 0006 1A78     		ldrb	r2, [r3]
 5991 0008 074B     		ldr	r3, .L495+4
 5992 000a 101C     		mov	r0, r2
 5993 000c 3A21     		mov	r1, #58
 5994 000e 0022     		mov	r2, #0
 5995 0010 FFF7FEFF 		bl	I2CReadBit
1700:.\mpu6050.c   ****     return buffer[0];
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 136


 5996              		.loc 1 1700 0
 5997 0014 044B     		ldr	r3, .L495+4
 5998 0016 1B78     		ldrb	r3, [r3]
 5999 0018 5A1E     		sub	r2, r3, #1
 6000 001a 9341     		sbc	r3, r3, r2
 6001 001c DBB2     		uxtb	r3, r3
1701:.\mpu6050.c   **** }
 6002              		.loc 1 1701 0
 6003 001e 181C     		mov	r0, r3
 6004 0020 BD46     		mov	sp, r7
 6005              		@ sp needed
 6006 0022 80BD     		pop	{r7, pc}
 6007              	.L496:
 6008              		.align	2
 6009              	.L495:
 6010 0024 00000000 		.word	devAddr
 6011 0028 00000000 		.word	buffer
 6012              		.cfi_endproc
 6013              	.LFE134:
 6014              		.size	MPU6050_getIntDataReadyStatus, .-MPU6050_getIntDataReadyStatus
 6015              		.section	.text.MPU6050_getMotion9,"ax",%progbits
 6016              		.align	2
 6017              		.global	MPU6050_getMotion9
 6018              		.code	16
 6019              		.thumb_func
 6020              		.type	MPU6050_getMotion9, %function
 6021              	MPU6050_getMotion9:
 6022              	.LFB135:
1702:.\mpu6050.c   **** 
1703:.\mpu6050.c   **** // ACCEL_*OUT_* registers
1704:.\mpu6050.c   **** 
1705:.\mpu6050.c   **** /** Get raw 9-axis motion sensor readings (accel/gyro/compass) + temperature.
1706:.\mpu6050.c   ****  * FUNCTION NOT FULLY IMPLEMENTED YET.
1707:.\mpu6050.c   ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1708:.\mpu6050.c   ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1709:.\mpu6050.c   ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1710:.\mpu6050.c   ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1711:.\mpu6050.c   ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1712:.\mpu6050.c   ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1713:.\mpu6050.c   ****  * @param mx 16-bit signed integer container for magnetometer X-axis value
1714:.\mpu6050.c   ****  * @param my 16-bit signed integer container for magnetometer Y-axis value
1715:.\mpu6050.c   ****  * @param mz 16-bit signed integer container for magnetometer Z-axis value
1716:.\mpu6050.c   ****  * @see getMotion6()
1717:.\mpu6050.c   ****  * @see getAcceleration()
1718:.\mpu6050.c   ****  * @see getRotation()
1719:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
1720:.\mpu6050.c   ****  */
1721:.\mpu6050.c   **** void MPU6050_getMotion9(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* g
 6023              		.loc 1 1721 0
 6024              		.cfi_startproc
 6025 0000 80B5     		push	{r7, lr}
 6026              		.cfi_def_cfa_offset 8
 6027              		.cfi_offset 7, -8
 6028              		.cfi_offset 14, -4
 6029 0002 84B0     		sub	sp, sp, #16
 6030              		.cfi_def_cfa_offset 24
 6031 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 137


 6032              		.cfi_def_cfa_register 7
 6033 0006 F860     		str	r0, [r7, #12]
 6034 0008 B960     		str	r1, [r7, #8]
 6035 000a 7A60     		str	r2, [r7, #4]
 6036 000c 3B60     		str	r3, [r7]
1722:.\mpu6050.c   ****     I2CReadBytes(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 22, buffer);
 6037              		.loc 1 1722 0
 6038 000e 314B     		ldr	r3, .L498
 6039 0010 6820     		mov	r0, #104
 6040 0012 3B21     		mov	r1, #59
 6041 0014 1622     		mov	r2, #22
 6042 0016 FFF7FEFF 		bl	I2CReadBytes
1723:.\mpu6050.c   **** 	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6043              		.loc 1 1723 0
 6044 001a 2E4B     		ldr	r3, .L498
 6045 001c 1B78     		ldrb	r3, [r3]
 6046 001e 1B02     		lsl	r3, r3, #8
 6047 0020 9AB2     		uxth	r2, r3
 6048 0022 2C4B     		ldr	r3, .L498
 6049 0024 5B78     		ldrb	r3, [r3, #1]
 6050 0026 1343     		orr	r3, r2
 6051 0028 9AB2     		uxth	r2, r3
 6052 002a FB68     		ldr	r3, [r7, #12]
 6053 002c 1A80     		strh	r2, [r3]
1724:.\mpu6050.c   **** 	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6054              		.loc 1 1724 0
 6055 002e 294B     		ldr	r3, .L498
 6056 0030 9B78     		ldrb	r3, [r3, #2]
 6057 0032 1B02     		lsl	r3, r3, #8
 6058 0034 9AB2     		uxth	r2, r3
 6059 0036 274B     		ldr	r3, .L498
 6060 0038 DB78     		ldrb	r3, [r3, #3]
 6061 003a 1343     		orr	r3, r2
 6062 003c 9AB2     		uxth	r2, r3
 6063 003e BB68     		ldr	r3, [r7, #8]
 6064 0040 1A80     		strh	r2, [r3]
1725:.\mpu6050.c   **** 	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6065              		.loc 1 1725 0
 6066 0042 244B     		ldr	r3, .L498
 6067 0044 1B79     		ldrb	r3, [r3, #4]
 6068 0046 1B02     		lsl	r3, r3, #8
 6069 0048 9AB2     		uxth	r2, r3
 6070 004a 224B     		ldr	r3, .L498
 6071 004c 5B79     		ldrb	r3, [r3, #5]
 6072 004e 1343     		orr	r3, r2
 6073 0050 9AB2     		uxth	r2, r3
 6074 0052 7B68     		ldr	r3, [r7, #4]
 6075 0054 1A80     		strh	r2, [r3]
1726:.\mpu6050.c   **** //	*t  = (((int16_t)buffer[6]) << 8) | buffer[7];
1727:.\mpu6050.c   **** 	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6076              		.loc 1 1727 0
 6077 0056 1F4B     		ldr	r3, .L498
 6078 0058 1B7A     		ldrb	r3, [r3, #8]
 6079 005a 1B02     		lsl	r3, r3, #8
 6080 005c 9AB2     		uxth	r2, r3
 6081 005e 1D4B     		ldr	r3, .L498
 6082 0060 5B7A     		ldrb	r3, [r3, #9]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 138


 6083 0062 1343     		orr	r3, r2
 6084 0064 9AB2     		uxth	r2, r3
 6085 0066 3B68     		ldr	r3, [r7]
 6086 0068 1A80     		strh	r2, [r3]
1728:.\mpu6050.c   **** 	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6087              		.loc 1 1728 0
 6088 006a 1A4B     		ldr	r3, .L498
 6089 006c 9B7A     		ldrb	r3, [r3, #10]
 6090 006e 1B02     		lsl	r3, r3, #8
 6091 0070 9AB2     		uxth	r2, r3
 6092 0072 184B     		ldr	r3, .L498
 6093 0074 DB7A     		ldrb	r3, [r3, #11]
 6094 0076 1343     		orr	r3, r2
 6095 0078 9AB2     		uxth	r2, r3
 6096 007a BB69     		ldr	r3, [r7, #24]
 6097 007c 1A80     		strh	r2, [r3]
1729:.\mpu6050.c   **** 	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6098              		.loc 1 1729 0
 6099 007e 154B     		ldr	r3, .L498
 6100 0080 1B7B     		ldrb	r3, [r3, #12]
 6101 0082 1B02     		lsl	r3, r3, #8
 6102 0084 9AB2     		uxth	r2, r3
 6103 0086 134B     		ldr	r3, .L498
 6104 0088 5B7B     		ldrb	r3, [r3, #13]
 6105 008a 1343     		orr	r3, r2
 6106 008c 9AB2     		uxth	r2, r3
 6107 008e FB69     		ldr	r3, [r7, #28]
 6108 0090 1A80     		strh	r2, [r3]
1730:.\mpu6050.c   **** 	//buffer[14] is register 0x02 (ST1) of AK8975. Contains DRDY in BIT0
1731:.\mpu6050.c   **** 	*mx = (((int16_t)buffer[16]) << 8) | buffer[15]; // equals register 0x03 (HXL) and 0x04 (HXH) of A
 6109              		.loc 1 1731 0
 6110 0092 104B     		ldr	r3, .L498
 6111 0094 1B7C     		ldrb	r3, [r3, #16]
 6112 0096 1B02     		lsl	r3, r3, #8
 6113 0098 9AB2     		uxth	r2, r3
 6114 009a 0E4B     		ldr	r3, .L498
 6115 009c DB7B     		ldrb	r3, [r3, #15]
 6116 009e 1343     		orr	r3, r2
 6117 00a0 9AB2     		uxth	r2, r3
 6118 00a2 3B6A     		ldr	r3, [r7, #32]
 6119 00a4 1A80     		strh	r2, [r3]
1732:.\mpu6050.c   **** 	*my = (((int16_t)buffer[18]) << 8) | buffer[17]; // equals register 0x05 (HYL) and 0x06 (HYH) of A
 6120              		.loc 1 1732 0
 6121 00a6 0B4B     		ldr	r3, .L498
 6122 00a8 9B7C     		ldrb	r3, [r3, #18]
 6123 00aa 1B02     		lsl	r3, r3, #8
 6124 00ac 9AB2     		uxth	r2, r3
 6125 00ae 094B     		ldr	r3, .L498
 6126 00b0 5B7C     		ldrb	r3, [r3, #17]
 6127 00b2 1343     		orr	r3, r2
 6128 00b4 9AB2     		uxth	r2, r3
 6129 00b6 7B6A     		ldr	r3, [r7, #36]
 6130 00b8 1A80     		strh	r2, [r3]
1733:.\mpu6050.c   **** 	*mz = (((int16_t)buffer[20]) << 8) | buffer[19]; // equals register 0x07 (HZL) and 0x08 (HZH) of A
 6131              		.loc 1 1733 0
 6132 00ba 064B     		ldr	r3, .L498
 6133 00bc 1B7D     		ldrb	r3, [r3, #20]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 139


 6134 00be 1B02     		lsl	r3, r3, #8
 6135 00c0 9AB2     		uxth	r2, r3
 6136 00c2 044B     		ldr	r3, .L498
 6137 00c4 DB7C     		ldrb	r3, [r3, #19]
 6138 00c6 1343     		orr	r3, r2
 6139 00c8 9AB2     		uxth	r2, r3
 6140 00ca BB6A     		ldr	r3, [r7, #40]
 6141 00cc 1A80     		strh	r2, [r3]
1734:.\mpu6050.c   **** 	//buffer[21] is register 0x09 (ST2) of AK8975. Contains Data Error (DERR) in BIT2 and Sensor Overf
1735:.\mpu6050.c   **** 
1736:.\mpu6050.c   **** }
 6142              		.loc 1 1736 0
 6143 00ce BD46     		mov	sp, r7
 6144 00d0 04B0     		add	sp, sp, #16
 6145              		@ sp needed
 6146 00d2 80BD     		pop	{r7, pc}
 6147              	.L499:
 6148              		.align	2
 6149              	.L498:
 6150 00d4 00000000 		.word	buffer
 6151              		.cfi_endproc
 6152              	.LFE135:
 6153              		.size	MPU6050_getMotion9, .-MPU6050_getMotion9
 6154              		.section	.text.MPU6050_getMotion9t,"ax",%progbits
 6155              		.align	2
 6156              		.global	MPU6050_getMotion9t
 6157              		.code	16
 6158              		.thumb_func
 6159              		.type	MPU6050_getMotion9t, %function
 6160              	MPU6050_getMotion9t:
 6161              	.LFB136:
1737:.\mpu6050.c   **** 
1738:.\mpu6050.c   **** /** Get raw 9-axis motion sensor readings (accel/gyro/compass) + temperature.
1739:.\mpu6050.c   ****  * assumes setup of compass with setup_compass
1740:.\mpu6050.c   ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1741:.\mpu6050.c   ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1742:.\mpu6050.c   ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1743:.\mpu6050.c   ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1744:.\mpu6050.c   ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1745:.\mpu6050.c   ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1746:.\mpu6050.c   ****  * @param mx 16-bit signed integer container for magnetometer X-axis value
1747:.\mpu6050.c   ****  * @param my 16-bit signed integer container for magnetometer Y-axis value
1748:.\mpu6050.c   ****  * @param mz 16-bit signed integer container for magnetometer Z-axis value
1749:.\mpu6050.c   ****  * @param t  16-bit signed integer container for temperature value
1750:.\mpu6050.c   ****  * @see getMotion6()
1751:.\mpu6050.c   ****  * @see getAcceleration()
1752:.\mpu6050.c   ****  * @see getRotation()
1753:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
1754:.\mpu6050.c   ****  * @see setup_compass
1755:.\mpu6050.c   ****  */
1756:.\mpu6050.c   **** void MPU6050_getMotion9t(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* 
 6162              		.loc 1 1756 0
 6163              		.cfi_startproc
 6164 0000 80B5     		push	{r7, lr}
 6165              		.cfi_def_cfa_offset 8
 6166              		.cfi_offset 7, -8
 6167              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 140


 6168 0002 84B0     		sub	sp, sp, #16
 6169              		.cfi_def_cfa_offset 24
 6170 0004 00AF     		add	r7, sp, #0
 6171              		.cfi_def_cfa_register 7
 6172 0006 F860     		str	r0, [r7, #12]
 6173 0008 B960     		str	r1, [r7, #8]
 6174 000a 7A60     		str	r2, [r7, #4]
 6175 000c 3B60     		str	r3, [r7]
1757:.\mpu6050.c   ****     I2CReadBytes(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 22, buffer);
 6176              		.loc 1 1757 0
 6177 000e 364B     		ldr	r3, .L501
 6178 0010 6820     		mov	r0, #104
 6179 0012 3B21     		mov	r1, #59
 6180 0014 1622     		mov	r2, #22
 6181 0016 FFF7FEFF 		bl	I2CReadBytes
1758:.\mpu6050.c   **** 	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6182              		.loc 1 1758 0
 6183 001a 334B     		ldr	r3, .L501
 6184 001c 1B78     		ldrb	r3, [r3]
 6185 001e 1B02     		lsl	r3, r3, #8
 6186 0020 9AB2     		uxth	r2, r3
 6187 0022 314B     		ldr	r3, .L501
 6188 0024 5B78     		ldrb	r3, [r3, #1]
 6189 0026 1343     		orr	r3, r2
 6190 0028 9AB2     		uxth	r2, r3
 6191 002a FB68     		ldr	r3, [r7, #12]
 6192 002c 1A80     		strh	r2, [r3]
1759:.\mpu6050.c   **** 	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6193              		.loc 1 1759 0
 6194 002e 2E4B     		ldr	r3, .L501
 6195 0030 9B78     		ldrb	r3, [r3, #2]
 6196 0032 1B02     		lsl	r3, r3, #8
 6197 0034 9AB2     		uxth	r2, r3
 6198 0036 2C4B     		ldr	r3, .L501
 6199 0038 DB78     		ldrb	r3, [r3, #3]
 6200 003a 1343     		orr	r3, r2
 6201 003c 9AB2     		uxth	r2, r3
 6202 003e BB68     		ldr	r3, [r7, #8]
 6203 0040 1A80     		strh	r2, [r3]
1760:.\mpu6050.c   **** 	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6204              		.loc 1 1760 0
 6205 0042 294B     		ldr	r3, .L501
 6206 0044 1B79     		ldrb	r3, [r3, #4]
 6207 0046 1B02     		lsl	r3, r3, #8
 6208 0048 9AB2     		uxth	r2, r3
 6209 004a 274B     		ldr	r3, .L501
 6210 004c 5B79     		ldrb	r3, [r3, #5]
 6211 004e 1343     		orr	r3, r2
 6212 0050 9AB2     		uxth	r2, r3
 6213 0052 7B68     		ldr	r3, [r7, #4]
 6214 0054 1A80     		strh	r2, [r3]
1761:.\mpu6050.c   **** 	*t  = (((int16_t)buffer[6]) << 8) | buffer[7];
 6215              		.loc 1 1761 0
 6216 0056 244B     		ldr	r3, .L501
 6217 0058 9B79     		ldrb	r3, [r3, #6]
 6218 005a 1B02     		lsl	r3, r3, #8
 6219 005c 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 141


 6220 005e 224B     		ldr	r3, .L501
 6221 0060 DB79     		ldrb	r3, [r3, #7]
 6222 0062 1343     		orr	r3, r2
 6223 0064 9AB2     		uxth	r2, r3
 6224 0066 FB6A     		ldr	r3, [r7, #44]
 6225 0068 1A80     		strh	r2, [r3]
1762:.\mpu6050.c   **** 	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6226              		.loc 1 1762 0
 6227 006a 1F4B     		ldr	r3, .L501
 6228 006c 1B7A     		ldrb	r3, [r3, #8]
 6229 006e 1B02     		lsl	r3, r3, #8
 6230 0070 9AB2     		uxth	r2, r3
 6231 0072 1D4B     		ldr	r3, .L501
 6232 0074 5B7A     		ldrb	r3, [r3, #9]
 6233 0076 1343     		orr	r3, r2
 6234 0078 9AB2     		uxth	r2, r3
 6235 007a 3B68     		ldr	r3, [r7]
 6236 007c 1A80     		strh	r2, [r3]
1763:.\mpu6050.c   **** 	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6237              		.loc 1 1763 0
 6238 007e 1A4B     		ldr	r3, .L501
 6239 0080 9B7A     		ldrb	r3, [r3, #10]
 6240 0082 1B02     		lsl	r3, r3, #8
 6241 0084 9AB2     		uxth	r2, r3
 6242 0086 184B     		ldr	r3, .L501
 6243 0088 DB7A     		ldrb	r3, [r3, #11]
 6244 008a 1343     		orr	r3, r2
 6245 008c 9AB2     		uxth	r2, r3
 6246 008e BB69     		ldr	r3, [r7, #24]
 6247 0090 1A80     		strh	r2, [r3]
1764:.\mpu6050.c   **** 	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6248              		.loc 1 1764 0
 6249 0092 154B     		ldr	r3, .L501
 6250 0094 1B7B     		ldrb	r3, [r3, #12]
 6251 0096 1B02     		lsl	r3, r3, #8
 6252 0098 9AB2     		uxth	r2, r3
 6253 009a 134B     		ldr	r3, .L501
 6254 009c 5B7B     		ldrb	r3, [r3, #13]
 6255 009e 1343     		orr	r3, r2
 6256 00a0 9AB2     		uxth	r2, r3
 6257 00a2 FB69     		ldr	r3, [r7, #28]
 6258 00a4 1A80     		strh	r2, [r3]
1765:.\mpu6050.c   **** 	//buffer[14] is register 0x02 (ST1) of AK8975. Contains DRDY in BIT0
1766:.\mpu6050.c   **** 	*mx = (((int16_t)buffer[16]) << 8) | buffer[15]; // equals register 0x03 (HXL) and 0x04 (HXH) of A
 6259              		.loc 1 1766 0
 6260 00a6 104B     		ldr	r3, .L501
 6261 00a8 1B7C     		ldrb	r3, [r3, #16]
 6262 00aa 1B02     		lsl	r3, r3, #8
 6263 00ac 9AB2     		uxth	r2, r3
 6264 00ae 0E4B     		ldr	r3, .L501
 6265 00b0 DB7B     		ldrb	r3, [r3, #15]
 6266 00b2 1343     		orr	r3, r2
 6267 00b4 9AB2     		uxth	r2, r3
 6268 00b6 3B6A     		ldr	r3, [r7, #32]
 6269 00b8 1A80     		strh	r2, [r3]
1767:.\mpu6050.c   **** 	*my = (((int16_t)buffer[18]) << 8) | buffer[17]; // equals register 0x05 (HYL) and 0x06 (HYH) of A
 6270              		.loc 1 1767 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 142


 6271 00ba 0B4B     		ldr	r3, .L501
 6272 00bc 9B7C     		ldrb	r3, [r3, #18]
 6273 00be 1B02     		lsl	r3, r3, #8
 6274 00c0 9AB2     		uxth	r2, r3
 6275 00c2 094B     		ldr	r3, .L501
 6276 00c4 5B7C     		ldrb	r3, [r3, #17]
 6277 00c6 1343     		orr	r3, r2
 6278 00c8 9AB2     		uxth	r2, r3
 6279 00ca 7B6A     		ldr	r3, [r7, #36]
 6280 00cc 1A80     		strh	r2, [r3]
1768:.\mpu6050.c   **** 	*mz = (((int16_t)buffer[20]) << 8) | buffer[19]; // equals register 0x07 (HZL) and 0x08 (HZH) of A
 6281              		.loc 1 1768 0
 6282 00ce 064B     		ldr	r3, .L501
 6283 00d0 1B7D     		ldrb	r3, [r3, #20]
 6284 00d2 1B02     		lsl	r3, r3, #8
 6285 00d4 9AB2     		uxth	r2, r3
 6286 00d6 044B     		ldr	r3, .L501
 6287 00d8 DB7C     		ldrb	r3, [r3, #19]
 6288 00da 1343     		orr	r3, r2
 6289 00dc 9AB2     		uxth	r2, r3
 6290 00de BB6A     		ldr	r3, [r7, #40]
 6291 00e0 1A80     		strh	r2, [r3]
1769:.\mpu6050.c   **** 	//buffer[21] is register 0x09 (ST2) of AK8975. Contains Data Error (DERR) in BIT2 and Sensor Overf
1770:.\mpu6050.c   **** 
1771:.\mpu6050.c   **** }
 6292              		.loc 1 1771 0
 6293 00e2 BD46     		mov	sp, r7
 6294 00e4 04B0     		add	sp, sp, #16
 6295              		@ sp needed
 6296 00e6 80BD     		pop	{r7, pc}
 6297              	.L502:
 6298              		.align	2
 6299              	.L501:
 6300 00e8 00000000 		.word	buffer
 6301              		.cfi_endproc
 6302              	.LFE136:
 6303              		.size	MPU6050_getMotion9t, .-MPU6050_getMotion9t
 6304              		.section	.text.MPU6050_getMotion6,"ax",%progbits
 6305              		.align	2
 6306              		.global	MPU6050_getMotion6
 6307              		.code	16
 6308              		.thumb_func
 6309              		.type	MPU6050_getMotion6, %function
 6310              	MPU6050_getMotion6:
 6311              	.LFB137:
1772:.\mpu6050.c   **** 
1773:.\mpu6050.c   **** /** Get raw 6-axis motion sensor readings (accel/gyro).
1774:.\mpu6050.c   ****  * Retrieves all currently available motion sensor values.
1775:.\mpu6050.c   ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1776:.\mpu6050.c   ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1777:.\mpu6050.c   ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1778:.\mpu6050.c   ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1779:.\mpu6050.c   ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1780:.\mpu6050.c   ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1781:.\mpu6050.c   ****  * @see getAcceleration()
1782:.\mpu6050.c   ****  * @see getRotation()
1783:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 143


1784:.\mpu6050.c   ****  */
1785:.\mpu6050.c   **** void MPU6050_getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* g
 6312              		.loc 1 1785 0
 6313              		.cfi_startproc
 6314 0000 80B5     		push	{r7, lr}
 6315              		.cfi_def_cfa_offset 8
 6316              		.cfi_offset 7, -8
 6317              		.cfi_offset 14, -4
 6318 0002 84B0     		sub	sp, sp, #16
 6319              		.cfi_def_cfa_offset 24
 6320 0004 00AF     		add	r7, sp, #0
 6321              		.cfi_def_cfa_register 7
 6322 0006 F860     		str	r0, [r7, #12]
 6323 0008 B960     		str	r1, [r7, #8]
 6324 000a 7A60     		str	r2, [r7, #4]
 6325 000c 3B60     		str	r3, [r7]
1786:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 6326              		.loc 1 1786 0
 6327 000e 234B     		ldr	r3, .L504
 6328 0010 1A78     		ldrb	r2, [r3]
 6329 0012 234B     		ldr	r3, .L504+4
 6330 0014 101C     		mov	r0, r2
 6331 0016 3B21     		mov	r1, #59
 6332 0018 0E22     		mov	r2, #14
 6333 001a FFF7FEFF 		bl	I2CReadBytes
1787:.\mpu6050.c   ****     //fixme the following code needs to be examined. causes a interrupt to NMI_VECTOR
1788:.\mpu6050.c   ****     *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6334              		.loc 1 1788 0
 6335 001e 204B     		ldr	r3, .L504+4
 6336 0020 1B78     		ldrb	r3, [r3]
 6337 0022 1B02     		lsl	r3, r3, #8
 6338 0024 9AB2     		uxth	r2, r3
 6339 0026 1E4B     		ldr	r3, .L504+4
 6340 0028 5B78     		ldrb	r3, [r3, #1]
 6341 002a 1343     		orr	r3, r2
 6342 002c 9AB2     		uxth	r2, r3
 6343 002e FB68     		ldr	r3, [r7, #12]
 6344 0030 1A80     		strh	r2, [r3]
1789:.\mpu6050.c   ****     *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6345              		.loc 1 1789 0
 6346 0032 1B4B     		ldr	r3, .L504+4
 6347 0034 9B78     		ldrb	r3, [r3, #2]
 6348 0036 1B02     		lsl	r3, r3, #8
 6349 0038 9AB2     		uxth	r2, r3
 6350 003a 194B     		ldr	r3, .L504+4
 6351 003c DB78     		ldrb	r3, [r3, #3]
 6352 003e 1343     		orr	r3, r2
 6353 0040 9AB2     		uxth	r2, r3
 6354 0042 BB68     		ldr	r3, [r7, #8]
 6355 0044 1A80     		strh	r2, [r3]
1790:.\mpu6050.c   ****     *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6356              		.loc 1 1790 0
 6357 0046 164B     		ldr	r3, .L504+4
 6358 0048 1B79     		ldrb	r3, [r3, #4]
 6359 004a 1B02     		lsl	r3, r3, #8
 6360 004c 9AB2     		uxth	r2, r3
 6361 004e 144B     		ldr	r3, .L504+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 144


 6362 0050 5B79     		ldrb	r3, [r3, #5]
 6363 0052 1343     		orr	r3, r2
 6364 0054 9AB2     		uxth	r2, r3
 6365 0056 7B68     		ldr	r3, [r7, #4]
 6366 0058 1A80     		strh	r2, [r3]
1791:.\mpu6050.c   ****     *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6367              		.loc 1 1791 0
 6368 005a 114B     		ldr	r3, .L504+4
 6369 005c 1B7A     		ldrb	r3, [r3, #8]
 6370 005e 1B02     		lsl	r3, r3, #8
 6371 0060 9AB2     		uxth	r2, r3
 6372 0062 0F4B     		ldr	r3, .L504+4
 6373 0064 5B7A     		ldrb	r3, [r3, #9]
 6374 0066 1343     		orr	r3, r2
 6375 0068 9AB2     		uxth	r2, r3
 6376 006a 3B68     		ldr	r3, [r7]
 6377 006c 1A80     		strh	r2, [r3]
1792:.\mpu6050.c   ****     *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6378              		.loc 1 1792 0
 6379 006e 0C4B     		ldr	r3, .L504+4
 6380 0070 9B7A     		ldrb	r3, [r3, #10]
 6381 0072 1B02     		lsl	r3, r3, #8
 6382 0074 9AB2     		uxth	r2, r3
 6383 0076 0A4B     		ldr	r3, .L504+4
 6384 0078 DB7A     		ldrb	r3, [r3, #11]
 6385 007a 1343     		orr	r3, r2
 6386 007c 9AB2     		uxth	r2, r3
 6387 007e BB69     		ldr	r3, [r7, #24]
 6388 0080 1A80     		strh	r2, [r3]
1793:.\mpu6050.c   ****     *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6389              		.loc 1 1793 0
 6390 0082 074B     		ldr	r3, .L504+4
 6391 0084 1B7B     		ldrb	r3, [r3, #12]
 6392 0086 1B02     		lsl	r3, r3, #8
 6393 0088 9AB2     		uxth	r2, r3
 6394 008a 054B     		ldr	r3, .L504+4
 6395 008c 5B7B     		ldrb	r3, [r3, #13]
 6396 008e 1343     		orr	r3, r2
 6397 0090 9AB2     		uxth	r2, r3
 6398 0092 FB69     		ldr	r3, [r7, #28]
 6399 0094 1A80     		strh	r2, [r3]
1794:.\mpu6050.c   **** }
 6400              		.loc 1 1794 0
 6401 0096 BD46     		mov	sp, r7
 6402 0098 04B0     		add	sp, sp, #16
 6403              		@ sp needed
 6404 009a 80BD     		pop	{r7, pc}
 6405              	.L505:
 6406              		.align	2
 6407              	.L504:
 6408 009c 00000000 		.word	devAddr
 6409 00a0 00000000 		.word	buffer
 6410              		.cfi_endproc
 6411              	.LFE137:
 6412              		.size	MPU6050_getMotion6, .-MPU6050_getMotion6
 6413              		.section	.text.MPU6050_getMotion6t,"ax",%progbits
 6414              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 145


 6415              		.global	MPU6050_getMotion6t
 6416              		.code	16
 6417              		.thumb_func
 6418              		.type	MPU6050_getMotion6t, %function
 6419              	MPU6050_getMotion6t:
 6420              	.LFB138:
1795:.\mpu6050.c   **** 
1796:.\mpu6050.c   **** /** Get raw 6-axis motion sensor readings (accel/gyro) + temperature.
1797:.\mpu6050.c   ****  * Retrieves all currently available motion sensor values.
1798:.\mpu6050.c   ****  * @param ax 16-bit signed integer container for accelerometer X-axis value
1799:.\mpu6050.c   ****  * @param ay 16-bit signed integer container for accelerometer Y-axis value
1800:.\mpu6050.c   ****  * @param az 16-bit signed integer container for accelerometer Z-axis value
1801:.\mpu6050.c   ****  * @param gx 16-bit signed integer container for gyroscope X-axis value
1802:.\mpu6050.c   ****  * @param gy 16-bit signed integer container for gyroscope Y-axis value
1803:.\mpu6050.c   ****  * @param gz 16-bit signed integer container for gyroscope Z-axis value
1804:.\mpu6050.c   ****  * @param t  16-bit signed integer container for temperature value
1805:.\mpu6050.c   ****  * @see getAcceleration()
1806:.\mpu6050.c   ****  * @see getRotation()
1807:.\mpu6050.c   ****  * @see getTemperature()
1808:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
1809:.\mpu6050.c   ****  */
1810:.\mpu6050.c   **** void MPU6050_getMotion6t(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* 
 6421              		.loc 1 1810 0
 6422              		.cfi_startproc
 6423 0000 80B5     		push	{r7, lr}
 6424              		.cfi_def_cfa_offset 8
 6425              		.cfi_offset 7, -8
 6426              		.cfi_offset 14, -4
 6427 0002 84B0     		sub	sp, sp, #16
 6428              		.cfi_def_cfa_offset 24
 6429 0004 00AF     		add	r7, sp, #0
 6430              		.cfi_def_cfa_register 7
 6431 0006 F860     		str	r0, [r7, #12]
 6432 0008 B960     		str	r1, [r7, #8]
 6433 000a 7A60     		str	r2, [r7, #4]
 6434 000c 3B60     		str	r3, [r7]
1811:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 6435              		.loc 1 1811 0
 6436 000e 284B     		ldr	r3, .L507
 6437 0010 1A78     		ldrb	r2, [r3]
 6438 0012 284B     		ldr	r3, .L507+4
 6439 0014 101C     		mov	r0, r2
 6440 0016 3B21     		mov	r1, #59
 6441 0018 0E22     		mov	r2, #14
 6442 001a FFF7FEFF 		bl	I2CReadBytes
1812:.\mpu6050.c   ****     *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 6443              		.loc 1 1812 0
 6444 001e 254B     		ldr	r3, .L507+4
 6445 0020 1B78     		ldrb	r3, [r3]
 6446 0022 1B02     		lsl	r3, r3, #8
 6447 0024 9AB2     		uxth	r2, r3
 6448 0026 234B     		ldr	r3, .L507+4
 6449 0028 5B78     		ldrb	r3, [r3, #1]
 6450 002a 1343     		orr	r3, r2
 6451 002c 9AB2     		uxth	r2, r3
 6452 002e FB68     		ldr	r3, [r7, #12]
 6453 0030 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 146


1813:.\mpu6050.c   ****     *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 6454              		.loc 1 1813 0
 6455 0032 204B     		ldr	r3, .L507+4
 6456 0034 9B78     		ldrb	r3, [r3, #2]
 6457 0036 1B02     		lsl	r3, r3, #8
 6458 0038 9AB2     		uxth	r2, r3
 6459 003a 1E4B     		ldr	r3, .L507+4
 6460 003c DB78     		ldrb	r3, [r3, #3]
 6461 003e 1343     		orr	r3, r2
 6462 0040 9AB2     		uxth	r2, r3
 6463 0042 BB68     		ldr	r3, [r7, #8]
 6464 0044 1A80     		strh	r2, [r3]
1814:.\mpu6050.c   ****     *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 6465              		.loc 1 1814 0
 6466 0046 1B4B     		ldr	r3, .L507+4
 6467 0048 1B79     		ldrb	r3, [r3, #4]
 6468 004a 1B02     		lsl	r3, r3, #8
 6469 004c 9AB2     		uxth	r2, r3
 6470 004e 194B     		ldr	r3, .L507+4
 6471 0050 5B79     		ldrb	r3, [r3, #5]
 6472 0052 1343     		orr	r3, r2
 6473 0054 9AB2     		uxth	r2, r3
 6474 0056 7B68     		ldr	r3, [r7, #4]
 6475 0058 1A80     		strh	r2, [r3]
1815:.\mpu6050.c   ****     *t  = (((int16_t)buffer[6]) << 8) | buffer[7];
 6476              		.loc 1 1815 0
 6477 005a 164B     		ldr	r3, .L507+4
 6478 005c 9B79     		ldrb	r3, [r3, #6]
 6479 005e 1B02     		lsl	r3, r3, #8
 6480 0060 9AB2     		uxth	r2, r3
 6481 0062 144B     		ldr	r3, .L507+4
 6482 0064 DB79     		ldrb	r3, [r3, #7]
 6483 0066 1343     		orr	r3, r2
 6484 0068 9AB2     		uxth	r2, r3
 6485 006a 3B6A     		ldr	r3, [r7, #32]
 6486 006c 1A80     		strh	r2, [r3]
1816:.\mpu6050.c   ****     *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 6487              		.loc 1 1816 0
 6488 006e 114B     		ldr	r3, .L507+4
 6489 0070 1B7A     		ldrb	r3, [r3, #8]
 6490 0072 1B02     		lsl	r3, r3, #8
 6491 0074 9AB2     		uxth	r2, r3
 6492 0076 0F4B     		ldr	r3, .L507+4
 6493 0078 5B7A     		ldrb	r3, [r3, #9]
 6494 007a 1343     		orr	r3, r2
 6495 007c 9AB2     		uxth	r2, r3
 6496 007e 3B68     		ldr	r3, [r7]
 6497 0080 1A80     		strh	r2, [r3]
1817:.\mpu6050.c   ****     *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 6498              		.loc 1 1817 0
 6499 0082 0C4B     		ldr	r3, .L507+4
 6500 0084 9B7A     		ldrb	r3, [r3, #10]
 6501 0086 1B02     		lsl	r3, r3, #8
 6502 0088 9AB2     		uxth	r2, r3
 6503 008a 0A4B     		ldr	r3, .L507+4
 6504 008c DB7A     		ldrb	r3, [r3, #11]
 6505 008e 1343     		orr	r3, r2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 147


 6506 0090 9AB2     		uxth	r2, r3
 6507 0092 BB69     		ldr	r3, [r7, #24]
 6508 0094 1A80     		strh	r2, [r3]
1818:.\mpu6050.c   ****     *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 6509              		.loc 1 1818 0
 6510 0096 074B     		ldr	r3, .L507+4
 6511 0098 1B7B     		ldrb	r3, [r3, #12]
 6512 009a 1B02     		lsl	r3, r3, #8
 6513 009c 9AB2     		uxth	r2, r3
 6514 009e 054B     		ldr	r3, .L507+4
 6515 00a0 5B7B     		ldrb	r3, [r3, #13]
 6516 00a2 1343     		orr	r3, r2
 6517 00a4 9AB2     		uxth	r2, r3
 6518 00a6 FB69     		ldr	r3, [r7, #28]
 6519 00a8 1A80     		strh	r2, [r3]
1819:.\mpu6050.c   **** }
 6520              		.loc 1 1819 0
 6521 00aa BD46     		mov	sp, r7
 6522 00ac 04B0     		add	sp, sp, #16
 6523              		@ sp needed
 6524 00ae 80BD     		pop	{r7, pc}
 6525              	.L508:
 6526              		.align	2
 6527              	.L507:
 6528 00b0 00000000 		.word	devAddr
 6529 00b4 00000000 		.word	buffer
 6530              		.cfi_endproc
 6531              	.LFE138:
 6532              		.size	MPU6050_getMotion6t, .-MPU6050_getMotion6t
 6533              		.section	.text.MPU6050_getAcceleration,"ax",%progbits
 6534              		.align	2
 6535              		.global	MPU6050_getAcceleration
 6536              		.code	16
 6537              		.thumb_func
 6538              		.type	MPU6050_getAcceleration, %function
 6539              	MPU6050_getAcceleration:
 6540              	.LFB139:
1820:.\mpu6050.c   **** 
1821:.\mpu6050.c   **** /** Get 3-axis accelerometer readings.
1822:.\mpu6050.c   ****  * These registers store the most recent accelerometer measurements.
1823:.\mpu6050.c   ****  * Accelerometer measurements are written to these registers at the Sample Rate
1824:.\mpu6050.c   ****  * as defined in Register 25.
1825:.\mpu6050.c   ****  *
1826:.\mpu6050.c   ****  * The accelerometer measurement registers, along with the temperature
1827:.\mpu6050.c   ****  * measurement registers, gyroscope measurement registers, and external sensor
1828:.\mpu6050.c   ****  * data registers, are composed of two sets of registers: an internal register
1829:.\mpu6050.c   ****  * set and a user-facing read register set.
1830:.\mpu6050.c   ****  *
1831:.\mpu6050.c   ****  * The data within the accelerometer sensors' internal register set is always
1832:.\mpu6050.c   ****  * updated at the Sample Rate. Meanwhile, the user-facing read register set
1833:.\mpu6050.c   ****  * duplicates the internal register set's data values whenever the serial
1834:.\mpu6050.c   ****  * interface is idle. This guarantees that a burst read of sensor registers will
1835:.\mpu6050.c   ****  * read measurements from the same sampling instant. Note that if burst reads
1836:.\mpu6050.c   ****  * are not used, the user is responsible for ensuring a set of single byte reads
1837:.\mpu6050.c   ****  * correspond to a single sampling instant by checking the Data Ready interrupt.
1838:.\mpu6050.c   ****  *
1839:.\mpu6050.c   ****  * Each 16-bit accelerometer measurement has a full scale defined in ACCEL_FS
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 148


1840:.\mpu6050.c   ****  * (Register 28). For each full scale setting, the accelerometers' sensitivity
1841:.\mpu6050.c   ****  * per LSB in ACCEL_xOUT is shown in the table below:
1842:.\mpu6050.c   ****  *
1843:.\mpu6050.c   ****  * <pre>
1844:.\mpu6050.c   ****  * AFS_SEL | Full Scale Range | LSB Sensitivity
1845:.\mpu6050.c   ****  * --------+------------------+----------------
1846:.\mpu6050.c   ****  * 0       | +/- 2g           | 8192 LSB/mg
1847:.\mpu6050.c   ****  * 1       | +/- 4g           | 4096 LSB/mg
1848:.\mpu6050.c   ****  * 2       | +/- 8g           | 2048 LSB/mg
1849:.\mpu6050.c   ****  * 3       | +/- 16g          | 1024 LSB/mg
1850:.\mpu6050.c   ****  * </pre>
1851:.\mpu6050.c   ****  *
1852:.\mpu6050.c   ****  * @param x 16-bit signed integer container for X-axis acceleration
1853:.\mpu6050.c   ****  * @param y 16-bit signed integer container for Y-axis acceleration
1854:.\mpu6050.c   ****  * @param z 16-bit signed integer container for Z-axis acceleration
1855:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_XOUT_H
1856:.\mpu6050.c   ****  */
1857:.\mpu6050.c   **** void MPU6050_getAcceleration(int16_t* x, int16_t* y, int16_t* z) {
 6541              		.loc 1 1857 0
 6542              		.cfi_startproc
 6543 0000 80B5     		push	{r7, lr}
 6544              		.cfi_def_cfa_offset 8
 6545              		.cfi_offset 7, -8
 6546              		.cfi_offset 14, -4
 6547 0002 84B0     		sub	sp, sp, #16
 6548              		.cfi_def_cfa_offset 24
 6549 0004 00AF     		add	r7, sp, #0
 6550              		.cfi_def_cfa_register 7
 6551 0006 F860     		str	r0, [r7, #12]
 6552 0008 B960     		str	r1, [r7, #8]
 6553 000a 7A60     		str	r2, [r7, #4]
1858:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 6, buffer);
 6554              		.loc 1 1858 0
 6555 000c 144B     		ldr	r3, .L510
 6556 000e 1A78     		ldrb	r2, [r3]
 6557 0010 144B     		ldr	r3, .L510+4
 6558 0012 101C     		mov	r0, r2
 6559 0014 3B21     		mov	r1, #59
 6560 0016 0622     		mov	r2, #6
 6561 0018 FFF7FEFF 		bl	I2CReadBytes
1859:.\mpu6050.c   ****     *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 6562              		.loc 1 1859 0
 6563 001c 114B     		ldr	r3, .L510+4
 6564 001e 1B78     		ldrb	r3, [r3]
 6565 0020 1B02     		lsl	r3, r3, #8
 6566 0022 9AB2     		uxth	r2, r3
 6567 0024 0F4B     		ldr	r3, .L510+4
 6568 0026 5B78     		ldrb	r3, [r3, #1]
 6569 0028 1343     		orr	r3, r2
 6570 002a 9AB2     		uxth	r2, r3
 6571 002c FB68     		ldr	r3, [r7, #12]
 6572 002e 1A80     		strh	r2, [r3]
1860:.\mpu6050.c   ****     *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 6573              		.loc 1 1860 0
 6574 0030 0C4B     		ldr	r3, .L510+4
 6575 0032 9B78     		ldrb	r3, [r3, #2]
 6576 0034 1B02     		lsl	r3, r3, #8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 149


 6577 0036 9AB2     		uxth	r2, r3
 6578 0038 0A4B     		ldr	r3, .L510+4
 6579 003a DB78     		ldrb	r3, [r3, #3]
 6580 003c 1343     		orr	r3, r2
 6581 003e 9AB2     		uxth	r2, r3
 6582 0040 BB68     		ldr	r3, [r7, #8]
 6583 0042 1A80     		strh	r2, [r3]
1861:.\mpu6050.c   ****     *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 6584              		.loc 1 1861 0
 6585 0044 074B     		ldr	r3, .L510+4
 6586 0046 1B79     		ldrb	r3, [r3, #4]
 6587 0048 1B02     		lsl	r3, r3, #8
 6588 004a 9AB2     		uxth	r2, r3
 6589 004c 054B     		ldr	r3, .L510+4
 6590 004e 5B79     		ldrb	r3, [r3, #5]
 6591 0050 1343     		orr	r3, r2
 6592 0052 9AB2     		uxth	r2, r3
 6593 0054 7B68     		ldr	r3, [r7, #4]
 6594 0056 1A80     		strh	r2, [r3]
1862:.\mpu6050.c   **** }
 6595              		.loc 1 1862 0
 6596 0058 BD46     		mov	sp, r7
 6597 005a 04B0     		add	sp, sp, #16
 6598              		@ sp needed
 6599 005c 80BD     		pop	{r7, pc}
 6600              	.L511:
 6601 005e C046     		.align	2
 6602              	.L510:
 6603 0060 00000000 		.word	devAddr
 6604 0064 00000000 		.word	buffer
 6605              		.cfi_endproc
 6606              	.LFE139:
 6607              		.size	MPU6050_getAcceleration, .-MPU6050_getAcceleration
 6608              		.section	.text.MPU6050_getAccelerationX,"ax",%progbits
 6609              		.align	2
 6610              		.global	MPU6050_getAccelerationX
 6611              		.code	16
 6612              		.thumb_func
 6613              		.type	MPU6050_getAccelerationX, %function
 6614              	MPU6050_getAccelerationX:
 6615              	.LFB140:
1863:.\mpu6050.c   **** /** Get X-axis accelerometer reading.
1864:.\mpu6050.c   ****  * @return X-axis acceleration measurement in 16-bit 2's complement format
1865:.\mpu6050.c   ****  * @see getMotion6()
1866:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_XOUT_H
1867:.\mpu6050.c   ****  */
1868:.\mpu6050.c   **** int16_t MPU6050_getAccelerationX() {
 6616              		.loc 1 1868 0
 6617              		.cfi_startproc
 6618 0000 80B5     		push	{r7, lr}
 6619              		.cfi_def_cfa_offset 8
 6620              		.cfi_offset 7, -8
 6621              		.cfi_offset 14, -4
 6622 0002 00AF     		add	r7, sp, #0
 6623              		.cfi_def_cfa_register 7
1869:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 2, buffer);
 6624              		.loc 1 1869 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 150


 6625 0004 094B     		ldr	r3, .L514
 6626 0006 1A78     		ldrb	r2, [r3]
 6627 0008 094B     		ldr	r3, .L514+4
 6628 000a 101C     		mov	r0, r2
 6629 000c 3B21     		mov	r1, #59
 6630 000e 0222     		mov	r2, #2
 6631 0010 FFF7FEFF 		bl	I2CReadBytes
1870:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6632              		.loc 1 1870 0
 6633 0014 064B     		ldr	r3, .L514+4
 6634 0016 1B78     		ldrb	r3, [r3]
 6635 0018 1B02     		lsl	r3, r3, #8
 6636 001a 9AB2     		uxth	r2, r3
 6637 001c 044B     		ldr	r3, .L514+4
 6638 001e 5B78     		ldrb	r3, [r3, #1]
 6639 0020 1343     		orr	r3, r2
 6640 0022 9BB2     		uxth	r3, r3
 6641 0024 1BB2     		sxth	r3, r3
1871:.\mpu6050.c   **** }
 6642              		.loc 1 1871 0
 6643 0026 181C     		mov	r0, r3
 6644 0028 BD46     		mov	sp, r7
 6645              		@ sp needed
 6646 002a 80BD     		pop	{r7, pc}
 6647              	.L515:
 6648              		.align	2
 6649              	.L514:
 6650 002c 00000000 		.word	devAddr
 6651 0030 00000000 		.word	buffer
 6652              		.cfi_endproc
 6653              	.LFE140:
 6654              		.size	MPU6050_getAccelerationX, .-MPU6050_getAccelerationX
 6655              		.section	.text.MPU6050_getAccelerationY,"ax",%progbits
 6656              		.align	2
 6657              		.global	MPU6050_getAccelerationY
 6658              		.code	16
 6659              		.thumb_func
 6660              		.type	MPU6050_getAccelerationY, %function
 6661              	MPU6050_getAccelerationY:
 6662              	.LFB141:
1872:.\mpu6050.c   **** /** Get Y-axis accelerometer reading.
1873:.\mpu6050.c   ****  * @return Y-axis acceleration measurement in 16-bit 2's complement format
1874:.\mpu6050.c   ****  * @see getMotion6()
1875:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_YOUT_H
1876:.\mpu6050.c   ****  */
1877:.\mpu6050.c   **** int16_t MPU6050_getAccelerationY() {
 6663              		.loc 1 1877 0
 6664              		.cfi_startproc
 6665 0000 80B5     		push	{r7, lr}
 6666              		.cfi_def_cfa_offset 8
 6667              		.cfi_offset 7, -8
 6668              		.cfi_offset 14, -4
 6669 0002 00AF     		add	r7, sp, #0
 6670              		.cfi_def_cfa_register 7
1878:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_YOUT_H, 2, buffer);
 6671              		.loc 1 1878 0
 6672 0004 094B     		ldr	r3, .L518
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 151


 6673 0006 1A78     		ldrb	r2, [r3]
 6674 0008 094B     		ldr	r3, .L518+4
 6675 000a 101C     		mov	r0, r2
 6676 000c 3D21     		mov	r1, #61
 6677 000e 0222     		mov	r2, #2
 6678 0010 FFF7FEFF 		bl	I2CReadBytes
1879:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6679              		.loc 1 1879 0
 6680 0014 064B     		ldr	r3, .L518+4
 6681 0016 1B78     		ldrb	r3, [r3]
 6682 0018 1B02     		lsl	r3, r3, #8
 6683 001a 9AB2     		uxth	r2, r3
 6684 001c 044B     		ldr	r3, .L518+4
 6685 001e 5B78     		ldrb	r3, [r3, #1]
 6686 0020 1343     		orr	r3, r2
 6687 0022 9BB2     		uxth	r3, r3
 6688 0024 1BB2     		sxth	r3, r3
1880:.\mpu6050.c   **** }
 6689              		.loc 1 1880 0
 6690 0026 181C     		mov	r0, r3
 6691 0028 BD46     		mov	sp, r7
 6692              		@ sp needed
 6693 002a 80BD     		pop	{r7, pc}
 6694              	.L519:
 6695              		.align	2
 6696              	.L518:
 6697 002c 00000000 		.word	devAddr
 6698 0030 00000000 		.word	buffer
 6699              		.cfi_endproc
 6700              	.LFE141:
 6701              		.size	MPU6050_getAccelerationY, .-MPU6050_getAccelerationY
 6702              		.section	.text.MPU6050_getAccelerationZ,"ax",%progbits
 6703              		.align	2
 6704              		.global	MPU6050_getAccelerationZ
 6705              		.code	16
 6706              		.thumb_func
 6707              		.type	MPU6050_getAccelerationZ, %function
 6708              	MPU6050_getAccelerationZ:
 6709              	.LFB142:
1881:.\mpu6050.c   **** /** Get Z-axis accelerometer reading.
1882:.\mpu6050.c   ****  * @return Z-axis acceleration measurement in 16-bit 2's complement format
1883:.\mpu6050.c   ****  * @see getMotion6()
1884:.\mpu6050.c   ****  * @see MPU6050_RA_ACCEL_ZOUT_H
1885:.\mpu6050.c   ****  */
1886:.\mpu6050.c   **** int16_t MPU6050_getAccelerationZ() {
 6710              		.loc 1 1886 0
 6711              		.cfi_startproc
 6712 0000 80B5     		push	{r7, lr}
 6713              		.cfi_def_cfa_offset 8
 6714              		.cfi_offset 7, -8
 6715              		.cfi_offset 14, -4
 6716 0002 00AF     		add	r7, sp, #0
 6717              		.cfi_def_cfa_register 7
1887:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ACCEL_ZOUT_H, 2, buffer);
 6718              		.loc 1 1887 0
 6719 0004 094B     		ldr	r3, .L522
 6720 0006 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 152


 6721 0008 094B     		ldr	r3, .L522+4
 6722 000a 101C     		mov	r0, r2
 6723 000c 3F21     		mov	r1, #63
 6724 000e 0222     		mov	r2, #2
 6725 0010 FFF7FEFF 		bl	I2CReadBytes
1888:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6726              		.loc 1 1888 0
 6727 0014 064B     		ldr	r3, .L522+4
 6728 0016 1B78     		ldrb	r3, [r3]
 6729 0018 1B02     		lsl	r3, r3, #8
 6730 001a 9AB2     		uxth	r2, r3
 6731 001c 044B     		ldr	r3, .L522+4
 6732 001e 5B78     		ldrb	r3, [r3, #1]
 6733 0020 1343     		orr	r3, r2
 6734 0022 9BB2     		uxth	r3, r3
 6735 0024 1BB2     		sxth	r3, r3
1889:.\mpu6050.c   **** }
 6736              		.loc 1 1889 0
 6737 0026 181C     		mov	r0, r3
 6738 0028 BD46     		mov	sp, r7
 6739              		@ sp needed
 6740 002a 80BD     		pop	{r7, pc}
 6741              	.L523:
 6742              		.align	2
 6743              	.L522:
 6744 002c 00000000 		.word	devAddr
 6745 0030 00000000 		.word	buffer
 6746              		.cfi_endproc
 6747              	.LFE142:
 6748              		.size	MPU6050_getAccelerationZ, .-MPU6050_getAccelerationZ
 6749              		.section	.text.MPU6050_getTemperature,"ax",%progbits
 6750              		.align	2
 6751              		.global	MPU6050_getTemperature
 6752              		.code	16
 6753              		.thumb_func
 6754              		.type	MPU6050_getTemperature, %function
 6755              	MPU6050_getTemperature:
 6756              	.LFB143:
1890:.\mpu6050.c   **** 
1891:.\mpu6050.c   **** // TEMP_OUT_* registers
1892:.\mpu6050.c   **** 
1893:.\mpu6050.c   **** /** Get current internal temperature.
1894:.\mpu6050.c   ****  * @return Temperature reading in 16-bit 2's complement format
1895:.\mpu6050.c   ****  * @see MPU6050_RA_TEMP_OUT_H
1896:.\mpu6050.c   ****  */
1897:.\mpu6050.c   **** int16_t MPU6050_getTemperature() {
 6757              		.loc 1 1897 0
 6758              		.cfi_startproc
 6759 0000 80B5     		push	{r7, lr}
 6760              		.cfi_def_cfa_offset 8
 6761              		.cfi_offset 7, -8
 6762              		.cfi_offset 14, -4
 6763 0002 00AF     		add	r7, sp, #0
 6764              		.cfi_def_cfa_register 7
1898:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_TEMP_OUT_H, 2, buffer);
 6765              		.loc 1 1898 0
 6766 0004 094B     		ldr	r3, .L526
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 153


 6767 0006 1A78     		ldrb	r2, [r3]
 6768 0008 094B     		ldr	r3, .L526+4
 6769 000a 101C     		mov	r0, r2
 6770 000c 4121     		mov	r1, #65
 6771 000e 0222     		mov	r2, #2
 6772 0010 FFF7FEFF 		bl	I2CReadBytes
1899:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6773              		.loc 1 1899 0
 6774 0014 064B     		ldr	r3, .L526+4
 6775 0016 1B78     		ldrb	r3, [r3]
 6776 0018 1B02     		lsl	r3, r3, #8
 6777 001a 9AB2     		uxth	r2, r3
 6778 001c 044B     		ldr	r3, .L526+4
 6779 001e 5B78     		ldrb	r3, [r3, #1]
 6780 0020 1343     		orr	r3, r2
 6781 0022 9BB2     		uxth	r3, r3
 6782 0024 1BB2     		sxth	r3, r3
1900:.\mpu6050.c   **** }
 6783              		.loc 1 1900 0
 6784 0026 181C     		mov	r0, r3
 6785 0028 BD46     		mov	sp, r7
 6786              		@ sp needed
 6787 002a 80BD     		pop	{r7, pc}
 6788              	.L527:
 6789              		.align	2
 6790              	.L526:
 6791 002c 00000000 		.word	devAddr
 6792 0030 00000000 		.word	buffer
 6793              		.cfi_endproc
 6794              	.LFE143:
 6795              		.size	MPU6050_getTemperature, .-MPU6050_getTemperature
 6796              		.section	.text.MPU6050_getRotation,"ax",%progbits
 6797              		.align	2
 6798              		.global	MPU6050_getRotation
 6799              		.code	16
 6800              		.thumb_func
 6801              		.type	MPU6050_getRotation, %function
 6802              	MPU6050_getRotation:
 6803              	.LFB144:
1901:.\mpu6050.c   **** 
1902:.\mpu6050.c   **** // GYRO_*OUT_* registers
1903:.\mpu6050.c   **** 
1904:.\mpu6050.c   **** /** Get 3-axis gyroscope readings.
1905:.\mpu6050.c   ****  * These gyroscope measurement registers, along with the accelerometer
1906:.\mpu6050.c   ****  * measurement registers, temperature measurement registers, and external sensor
1907:.\mpu6050.c   ****  * data registers, are composed of two sets of registers: an internal register
1908:.\mpu6050.c   ****  * set and a user-facing read register set.
1909:.\mpu6050.c   ****  * The data within the gyroscope sensors' internal register set is always
1910:.\mpu6050.c   ****  * updated at the Sample Rate. Meanwhile, the user-facing read register set
1911:.\mpu6050.c   ****  * duplicates the internal register set's data values whenever the serial
1912:.\mpu6050.c   ****  * interface is idle. This guarantees that a burst read of sensor registers will
1913:.\mpu6050.c   ****  * read measurements from the same sampling instant. Note that if burst reads
1914:.\mpu6050.c   ****  * are not used, the user is responsible for ensuring a set of single byte reads
1915:.\mpu6050.c   ****  * correspond to a single sampling instant by checking the Data Ready interrupt.
1916:.\mpu6050.c   ****  *
1917:.\mpu6050.c   ****  * Each 16-bit gyroscope measurement has a full scale defined in FS_SEL
1918:.\mpu6050.c   ****  * (Register 27). For each full scale setting, the gyroscopes' sensitivity per
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 154


1919:.\mpu6050.c   ****  * LSB in GYRO_xOUT is shown in the table below:
1920:.\mpu6050.c   ****  *
1921:.\mpu6050.c   ****  * <pre>
1922:.\mpu6050.c   ****  * FS_SEL | Full Scale Range   | LSB Sensitivity
1923:.\mpu6050.c   ****  * -------+--------------------+----------------
1924:.\mpu6050.c   ****  * 0      | +/- 250 degrees/s  | 131 LSB/deg/s
1925:.\mpu6050.c   ****  * 1      | +/- 500 degrees/s  | 65.5 LSB/deg/s
1926:.\mpu6050.c   ****  * 2      | +/- 1000 degrees/s | 32.8 LSB/deg/s
1927:.\mpu6050.c   ****  * 3      | +/- 2000 degrees/s | 16.4 LSB/deg/s
1928:.\mpu6050.c   ****  * </pre>
1929:.\mpu6050.c   ****  *
1930:.\mpu6050.c   ****  * @param x 16-bit signed integer container for X-axis rotation
1931:.\mpu6050.c   ****  * @param y 16-bit signed integer container for Y-axis rotation
1932:.\mpu6050.c   ****  * @param z 16-bit signed integer container for Z-axis rotation
1933:.\mpu6050.c   ****  * @see getMotion6()
1934:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_XOUT_H
1935:.\mpu6050.c   ****  */
1936:.\mpu6050.c   **** void MPU6050_getRotation(int16_t* x, int16_t* y, int16_t* z) {
 6804              		.loc 1 1936 0
 6805              		.cfi_startproc
 6806 0000 80B5     		push	{r7, lr}
 6807              		.cfi_def_cfa_offset 8
 6808              		.cfi_offset 7, -8
 6809              		.cfi_offset 14, -4
 6810 0002 84B0     		sub	sp, sp, #16
 6811              		.cfi_def_cfa_offset 24
 6812 0004 00AF     		add	r7, sp, #0
 6813              		.cfi_def_cfa_register 7
 6814 0006 F860     		str	r0, [r7, #12]
 6815 0008 B960     		str	r1, [r7, #8]
 6816 000a 7A60     		str	r2, [r7, #4]
1937:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 6, buffer);
 6817              		.loc 1 1937 0
 6818 000c 144B     		ldr	r3, .L529
 6819 000e 1A78     		ldrb	r2, [r3]
 6820 0010 144B     		ldr	r3, .L529+4
 6821 0012 101C     		mov	r0, r2
 6822 0014 4321     		mov	r1, #67
 6823 0016 0622     		mov	r2, #6
 6824 0018 FFF7FEFF 		bl	I2CReadBytes
1938:.\mpu6050.c   ****     *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 6825              		.loc 1 1938 0
 6826 001c 114B     		ldr	r3, .L529+4
 6827 001e 1B78     		ldrb	r3, [r3]
 6828 0020 1B02     		lsl	r3, r3, #8
 6829 0022 9AB2     		uxth	r2, r3
 6830 0024 0F4B     		ldr	r3, .L529+4
 6831 0026 5B78     		ldrb	r3, [r3, #1]
 6832 0028 1343     		orr	r3, r2
 6833 002a 9AB2     		uxth	r2, r3
 6834 002c FB68     		ldr	r3, [r7, #12]
 6835 002e 1A80     		strh	r2, [r3]
1939:.\mpu6050.c   ****     *y = (((int16_t)buffer[2]) << 8) | buffer[3];
 6836              		.loc 1 1939 0
 6837 0030 0C4B     		ldr	r3, .L529+4
 6838 0032 9B78     		ldrb	r3, [r3, #2]
 6839 0034 1B02     		lsl	r3, r3, #8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 155


 6840 0036 9AB2     		uxth	r2, r3
 6841 0038 0A4B     		ldr	r3, .L529+4
 6842 003a DB78     		ldrb	r3, [r3, #3]
 6843 003c 1343     		orr	r3, r2
 6844 003e 9AB2     		uxth	r2, r3
 6845 0040 BB68     		ldr	r3, [r7, #8]
 6846 0042 1A80     		strh	r2, [r3]
1940:.\mpu6050.c   ****     *z = (((int16_t)buffer[4]) << 8) | buffer[5];
 6847              		.loc 1 1940 0
 6848 0044 074B     		ldr	r3, .L529+4
 6849 0046 1B79     		ldrb	r3, [r3, #4]
 6850 0048 1B02     		lsl	r3, r3, #8
 6851 004a 9AB2     		uxth	r2, r3
 6852 004c 054B     		ldr	r3, .L529+4
 6853 004e 5B79     		ldrb	r3, [r3, #5]
 6854 0050 1343     		orr	r3, r2
 6855 0052 9AB2     		uxth	r2, r3
 6856 0054 7B68     		ldr	r3, [r7, #4]
 6857 0056 1A80     		strh	r2, [r3]
1941:.\mpu6050.c   **** }
 6858              		.loc 1 1941 0
 6859 0058 BD46     		mov	sp, r7
 6860 005a 04B0     		add	sp, sp, #16
 6861              		@ sp needed
 6862 005c 80BD     		pop	{r7, pc}
 6863              	.L530:
 6864 005e C046     		.align	2
 6865              	.L529:
 6866 0060 00000000 		.word	devAddr
 6867 0064 00000000 		.word	buffer
 6868              		.cfi_endproc
 6869              	.LFE144:
 6870              		.size	MPU6050_getRotation, .-MPU6050_getRotation
 6871              		.section	.text.MPU6050_getRotationX,"ax",%progbits
 6872              		.align	2
 6873              		.global	MPU6050_getRotationX
 6874              		.code	16
 6875              		.thumb_func
 6876              		.type	MPU6050_getRotationX, %function
 6877              	MPU6050_getRotationX:
 6878              	.LFB145:
1942:.\mpu6050.c   **** /** Get X-axis gyroscope reading.
1943:.\mpu6050.c   ****  * @return X-axis rotation measurement in 16-bit 2's complement format
1944:.\mpu6050.c   ****  * @see getMotion6()
1945:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_XOUT_H
1946:.\mpu6050.c   ****  */
1947:.\mpu6050.c   **** int16_t MPU6050_getRotationX() {
 6879              		.loc 1 1947 0
 6880              		.cfi_startproc
 6881 0000 80B5     		push	{r7, lr}
 6882              		.cfi_def_cfa_offset 8
 6883              		.cfi_offset 7, -8
 6884              		.cfi_offset 14, -4
 6885 0002 00AF     		add	r7, sp, #0
 6886              		.cfi_def_cfa_register 7
1948:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 2, buffer);
 6887              		.loc 1 1948 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 156


 6888 0004 094B     		ldr	r3, .L533
 6889 0006 1A78     		ldrb	r2, [r3]
 6890 0008 094B     		ldr	r3, .L533+4
 6891 000a 101C     		mov	r0, r2
 6892 000c 4321     		mov	r1, #67
 6893 000e 0222     		mov	r2, #2
 6894 0010 FFF7FEFF 		bl	I2CReadBytes
1949:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6895              		.loc 1 1949 0
 6896 0014 064B     		ldr	r3, .L533+4
 6897 0016 1B78     		ldrb	r3, [r3]
 6898 0018 1B02     		lsl	r3, r3, #8
 6899 001a 9AB2     		uxth	r2, r3
 6900 001c 044B     		ldr	r3, .L533+4
 6901 001e 5B78     		ldrb	r3, [r3, #1]
 6902 0020 1343     		orr	r3, r2
 6903 0022 9BB2     		uxth	r3, r3
 6904 0024 1BB2     		sxth	r3, r3
1950:.\mpu6050.c   **** }
 6905              		.loc 1 1950 0
 6906 0026 181C     		mov	r0, r3
 6907 0028 BD46     		mov	sp, r7
 6908              		@ sp needed
 6909 002a 80BD     		pop	{r7, pc}
 6910              	.L534:
 6911              		.align	2
 6912              	.L533:
 6913 002c 00000000 		.word	devAddr
 6914 0030 00000000 		.word	buffer
 6915              		.cfi_endproc
 6916              	.LFE145:
 6917              		.size	MPU6050_getRotationX, .-MPU6050_getRotationX
 6918              		.section	.text.MPU6050_getRotationY,"ax",%progbits
 6919              		.align	2
 6920              		.global	MPU6050_getRotationY
 6921              		.code	16
 6922              		.thumb_func
 6923              		.type	MPU6050_getRotationY, %function
 6924              	MPU6050_getRotationY:
 6925              	.LFB146:
1951:.\mpu6050.c   **** /** Get Y-axis gyroscope reading.
1952:.\mpu6050.c   ****  * @return Y-axis rotation measurement in 16-bit 2's complement format
1953:.\mpu6050.c   ****  * @see getMotion6()
1954:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_YOUT_H
1955:.\mpu6050.c   ****  */
1956:.\mpu6050.c   **** int16_t MPU6050_getRotationY() {
 6926              		.loc 1 1956 0
 6927              		.cfi_startproc
 6928 0000 80B5     		push	{r7, lr}
 6929              		.cfi_def_cfa_offset 8
 6930              		.cfi_offset 7, -8
 6931              		.cfi_offset 14, -4
 6932 0002 00AF     		add	r7, sp, #0
 6933              		.cfi_def_cfa_register 7
1957:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_GYRO_YOUT_H, 2, buffer);
 6934              		.loc 1 1957 0
 6935 0004 094B     		ldr	r3, .L537
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 157


 6936 0006 1A78     		ldrb	r2, [r3]
 6937 0008 094B     		ldr	r3, .L537+4
 6938 000a 101C     		mov	r0, r2
 6939 000c 4521     		mov	r1, #69
 6940 000e 0222     		mov	r2, #2
 6941 0010 FFF7FEFF 		bl	I2CReadBytes
1958:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6942              		.loc 1 1958 0
 6943 0014 064B     		ldr	r3, .L537+4
 6944 0016 1B78     		ldrb	r3, [r3]
 6945 0018 1B02     		lsl	r3, r3, #8
 6946 001a 9AB2     		uxth	r2, r3
 6947 001c 044B     		ldr	r3, .L537+4
 6948 001e 5B78     		ldrb	r3, [r3, #1]
 6949 0020 1343     		orr	r3, r2
 6950 0022 9BB2     		uxth	r3, r3
 6951 0024 1BB2     		sxth	r3, r3
1959:.\mpu6050.c   **** }
 6952              		.loc 1 1959 0
 6953 0026 181C     		mov	r0, r3
 6954 0028 BD46     		mov	sp, r7
 6955              		@ sp needed
 6956 002a 80BD     		pop	{r7, pc}
 6957              	.L538:
 6958              		.align	2
 6959              	.L537:
 6960 002c 00000000 		.word	devAddr
 6961 0030 00000000 		.word	buffer
 6962              		.cfi_endproc
 6963              	.LFE146:
 6964              		.size	MPU6050_getRotationY, .-MPU6050_getRotationY
 6965              		.section	.text.MPU6050_getRotationZ,"ax",%progbits
 6966              		.align	2
 6967              		.global	MPU6050_getRotationZ
 6968              		.code	16
 6969              		.thumb_func
 6970              		.type	MPU6050_getRotationZ, %function
 6971              	MPU6050_getRotationZ:
 6972              	.LFB147:
1960:.\mpu6050.c   **** /** Get Z-axis gyroscope reading.
1961:.\mpu6050.c   ****  * @return Z-axis rotation measurement in 16-bit 2's complement format
1962:.\mpu6050.c   ****  * @see getMotion6()
1963:.\mpu6050.c   ****  * @see MPU6050_RA_GYRO_ZOUT_H
1964:.\mpu6050.c   ****  */
1965:.\mpu6050.c   **** int16_t MPU6050_getRotationZ() {
 6973              		.loc 1 1965 0
 6974              		.cfi_startproc
 6975 0000 80B5     		push	{r7, lr}
 6976              		.cfi_def_cfa_offset 8
 6977              		.cfi_offset 7, -8
 6978              		.cfi_offset 14, -4
 6979 0002 00AF     		add	r7, sp, #0
 6980              		.cfi_def_cfa_register 7
1966:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_GYRO_ZOUT_H, 2, buffer);
 6981              		.loc 1 1966 0
 6982 0004 094B     		ldr	r3, .L541
 6983 0006 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 158


 6984 0008 094B     		ldr	r3, .L541+4
 6985 000a 101C     		mov	r0, r2
 6986 000c 4721     		mov	r1, #71
 6987 000e 0222     		mov	r2, #2
 6988 0010 FFF7FEFF 		bl	I2CReadBytes
1967:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 6989              		.loc 1 1967 0
 6990 0014 064B     		ldr	r3, .L541+4
 6991 0016 1B78     		ldrb	r3, [r3]
 6992 0018 1B02     		lsl	r3, r3, #8
 6993 001a 9AB2     		uxth	r2, r3
 6994 001c 044B     		ldr	r3, .L541+4
 6995 001e 5B78     		ldrb	r3, [r3, #1]
 6996 0020 1343     		orr	r3, r2
 6997 0022 9BB2     		uxth	r3, r3
 6998 0024 1BB2     		sxth	r3, r3
1968:.\mpu6050.c   **** }
 6999              		.loc 1 1968 0
 7000 0026 181C     		mov	r0, r3
 7001 0028 BD46     		mov	sp, r7
 7002              		@ sp needed
 7003 002a 80BD     		pop	{r7, pc}
 7004              	.L542:
 7005              		.align	2
 7006              	.L541:
 7007 002c 00000000 		.word	devAddr
 7008 0030 00000000 		.word	buffer
 7009              		.cfi_endproc
 7010              	.LFE147:
 7011              		.size	MPU6050_getRotationZ, .-MPU6050_getRotationZ
 7012              		.section	.text.MPU6050_getExternalSensorByte,"ax",%progbits
 7013              		.align	2
 7014              		.global	MPU6050_getExternalSensorByte
 7015              		.code	16
 7016              		.thumb_func
 7017              		.type	MPU6050_getExternalSensorByte, %function
 7018              	MPU6050_getExternalSensorByte:
 7019              	.LFB148:
1969:.\mpu6050.c   **** 
1970:.\mpu6050.c   **** // EXT_SENS_DATA_* registers
1971:.\mpu6050.c   **** 
1972:.\mpu6050.c   **** /** Read single byte from external sensor data register.
1973:.\mpu6050.c   ****  * These registers store data read from external sensors by the Slave 0, 1, 2,
1974:.\mpu6050.c   ****  * and 3 on the auxiliary I2C interface. Data read by Slave 4 is stored in
1975:.\mpu6050.c   ****  * I2C_SLV4_DI (Register 53).
1976:.\mpu6050.c   ****  *
1977:.\mpu6050.c   ****  * External sensor data is written to these registers at the Sample Rate as
1978:.\mpu6050.c   ****  * defined in Register 25. This access rate can be reduced by using the Slave
1979:.\mpu6050.c   ****  * Delay Enable registers (Register 103).
1980:.\mpu6050.c   ****  *
1981:.\mpu6050.c   ****  * External sensor data registers, along with the gyroscope measurement
1982:.\mpu6050.c   ****  * registers, accelerometer measurement registers, and temperature measurement
1983:.\mpu6050.c   ****  * registers, are composed of two sets of registers: an internal register set
1984:.\mpu6050.c   ****  * and a user-facing read register set.
1985:.\mpu6050.c   ****  *
1986:.\mpu6050.c   ****  * The data within the external sensors' internal register set is always updated
1987:.\mpu6050.c   ****  * at the Sample Rate (or the reduced access rate) whenever the serial interface
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 159


1988:.\mpu6050.c   ****  * is idle. This guarantees that a burst read of sensor registers will read
1989:.\mpu6050.c   ****  * measurements from the same sampling instant. Note that if burst reads are not
1990:.\mpu6050.c   ****  * used, the user is responsible for ensuring a set of single byte reads
1991:.\mpu6050.c   ****  * correspond to a single sampling instant by checking the Data Ready interrupt.
1992:.\mpu6050.c   ****  *
1993:.\mpu6050.c   ****  * Data is placed in these external sensor data registers according to
1994:.\mpu6050.c   ****  * I2C_SLV0_CTRL, I2C_SLV1_CTRL, I2C_SLV2_CTRL, and I2C_SLV3_CTRL (Registers 39,
1995:.\mpu6050.c   ****  * 42, 45, and 48). When more than zero bytes are read (I2C_SLVx_LEN > 0) from
1996:.\mpu6050.c   ****  * an enabled slave (I2C_SLVx_EN = 1), the slave is read at the Sample Rate (as
1997:.\mpu6050.c   ****  * defined in Register 25) or delayed rate (if specified in Register 52 and
1998:.\mpu6050.c   ****  * 103). During each Sample cycle, slave reads are performed in order of Slave
1999:.\mpu6050.c   ****  * number. If all slaves are enabled with more than zero bytes to be read, the
2000:.\mpu6050.c   ****  * order will be Slave 0, followed by Slave 1, Slave 2, and Slave 3.
2001:.\mpu6050.c   ****  *
2002:.\mpu6050.c   ****  * Each enabled slave will have EXT_SENS_DATA registers associated with it by
2003:.\mpu6050.c   ****  * number of bytes read (I2C_SLVx_LEN) in order of slave number, starting from
2004:.\mpu6050.c   ****  * EXT_SENS_DATA_00. Note that this means enabling or disabling a slave may
2005:.\mpu6050.c   ****  * change the higher numbered slaves' associated registers. Furthermore, if
2006:.\mpu6050.c   ****  * fewer total bytes are being read from the external sensors as a result of
2007:.\mpu6050.c   ****  * such a change, then the data remaining in the registers which no longer have
2008:.\mpu6050.c   ****  * an associated slave device (i.e. high numbered registers) will remain in
2009:.\mpu6050.c   ****  * these previously allocated registers unless reset.
2010:.\mpu6050.c   ****  *
2011:.\mpu6050.c   ****  * If the sum of the read lengths of all SLVx transactions exceed the number of
2012:.\mpu6050.c   ****  * available EXT_SENS_DATA registers, the excess bytes will be dropped. There
2013:.\mpu6050.c   ****  * are 24 EXT_SENS_DATA registers and hence the total read lengths between all
2014:.\mpu6050.c   ****  * the slaves cannot be greater than 24 or some bytes will be lost.
2015:.\mpu6050.c   ****  *
2016:.\mpu6050.c   ****  * Note: Slave 4's behavior is distinct from that of Slaves 0-3. For further
2017:.\mpu6050.c   ****  * information regarding the characteristics of Slave 4, please refer to
2018:.\mpu6050.c   ****  * Registers 49 to 53.
2019:.\mpu6050.c   ****  *
2020:.\mpu6050.c   ****  * EXAMPLE:
2021:.\mpu6050.c   ****  * Suppose that Slave 0 is enabled with 4 bytes to be read (I2C_SLV0_EN = 1 and
2022:.\mpu6050.c   ****  * I2C_SLV0_LEN = 4) while Slave 1 is enabled with 2 bytes to be read so that
2023:.\mpu6050.c   ****  * I2C_SLV1_EN = 1 and I2C_SLV1_LEN = 2. In such a situation, EXT_SENS_DATA _00
2024:.\mpu6050.c   ****  * through _03 will be associated with Slave 0, while EXT_SENS_DATA _04 and 05
2025:.\mpu6050.c   ****  * will be associated with Slave 1. If Slave 2 is enabled as well, registers
2026:.\mpu6050.c   ****  * starting from EXT_SENS_DATA_06 will be allocated to Slave 2.
2027:.\mpu6050.c   ****  *
2028:.\mpu6050.c   ****  * If Slave 2 is disabled while Slave 3 is enabled in this same situation, then
2029:.\mpu6050.c   ****  * registers starting from EXT_SENS_DATA_06 will be allocated to Slave 3
2030:.\mpu6050.c   ****  * instead.
2031:.\mpu6050.c   ****  *
2032:.\mpu6050.c   ****  * REGISTER ALLOCATION FOR DYNAMIC DISABLE VS. NORMAL DISABLE:
2033:.\mpu6050.c   ****  * If a slave is disabled at any time, the space initially allocated to the
2034:.\mpu6050.c   ****  * slave in the EXT_SENS_DATA register, will remain associated with that slave.
2035:.\mpu6050.c   ****  * This is to avoid dynamic adjustment of the register allocation.
2036:.\mpu6050.c   ****  *
2037:.\mpu6050.c   ****  * The allocation of the EXT_SENS_DATA registers is recomputed only when (1) all
2038:.\mpu6050.c   ****  * slaves are disabled, or (2) the I2C_MST_RST bit is set (Register 106).
2039:.\mpu6050.c   ****  *
2040:.\mpu6050.c   ****  * This above is also true if one of the slaves gets NACKed and stops
2041:.\mpu6050.c   ****  * functioning.
2042:.\mpu6050.c   ****  *
2043:.\mpu6050.c   ****  * @param position Starting position (0-23)
2044:.\mpu6050.c   ****  * @return Byte read from register
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 160


2045:.\mpu6050.c   ****  */
2046:.\mpu6050.c   **** uint8_t MPU6050_getExternalSensorByte(int position) {
 7020              		.loc 1 2046 0
 7021              		.cfi_startproc
 7022 0000 80B5     		push	{r7, lr}
 7023              		.cfi_def_cfa_offset 8
 7024              		.cfi_offset 7, -8
 7025              		.cfi_offset 14, -4
 7026 0002 82B0     		sub	sp, sp, #8
 7027              		.cfi_def_cfa_offset 16
 7028 0004 00AF     		add	r7, sp, #0
 7029              		.cfi_def_cfa_register 7
 7030 0006 7860     		str	r0, [r7, #4]
2047:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, buffer);
 7031              		.loc 1 2047 0
 7032 0008 084B     		ldr	r3, .L545
 7033 000a 1978     		ldrb	r1, [r3]
 7034 000c 7B68     		ldr	r3, [r7, #4]
 7035 000e DBB2     		uxtb	r3, r3
 7036 0010 4933     		add	r3, r3, #73
 7037 0012 DAB2     		uxtb	r2, r3
 7038 0014 064B     		ldr	r3, .L545+4
 7039 0016 081C     		mov	r0, r1
 7040 0018 111C     		mov	r1, r2
 7041 001a 1A1C     		mov	r2, r3
 7042 001c FFF7FEFF 		bl	I2CReadByte
2048:.\mpu6050.c   ****     return buffer[0];
 7043              		.loc 1 2048 0
 7044 0020 034B     		ldr	r3, .L545+4
 7045 0022 1B78     		ldrb	r3, [r3]
2049:.\mpu6050.c   **** }
 7046              		.loc 1 2049 0
 7047 0024 181C     		mov	r0, r3
 7048 0026 BD46     		mov	sp, r7
 7049 0028 02B0     		add	sp, sp, #8
 7050              		@ sp needed
 7051 002a 80BD     		pop	{r7, pc}
 7052              	.L546:
 7053              		.align	2
 7054              	.L545:
 7055 002c 00000000 		.word	devAddr
 7056 0030 00000000 		.word	buffer
 7057              		.cfi_endproc
 7058              	.LFE148:
 7059              		.size	MPU6050_getExternalSensorByte, .-MPU6050_getExternalSensorByte
 7060              		.section	.text.MPU6050_getExternalSensorWord,"ax",%progbits
 7061              		.align	2
 7062              		.global	MPU6050_getExternalSensorWord
 7063              		.code	16
 7064              		.thumb_func
 7065              		.type	MPU6050_getExternalSensorWord, %function
 7066              	MPU6050_getExternalSensorWord:
 7067              	.LFB149:
2050:.\mpu6050.c   **** /** Read word (2 bytes) from external sensor data registers.
2051:.\mpu6050.c   ****  * @param position Starting position (0-21)
2052:.\mpu6050.c   ****  * @return Word read from register
2053:.\mpu6050.c   ****  * @see getExternalSensorByte()
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 161


2054:.\mpu6050.c   ****  */
2055:.\mpu6050.c   **** uint16_t MPU6050_getExternalSensorWord(int position) {
 7068              		.loc 1 2055 0
 7069              		.cfi_startproc
 7070 0000 80B5     		push	{r7, lr}
 7071              		.cfi_def_cfa_offset 8
 7072              		.cfi_offset 7, -8
 7073              		.cfi_offset 14, -4
 7074 0002 82B0     		sub	sp, sp, #8
 7075              		.cfi_def_cfa_offset 16
 7076 0004 00AF     		add	r7, sp, #0
 7077              		.cfi_def_cfa_register 7
 7078 0006 7860     		str	r0, [r7, #4]
2056:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, 2, buffer);
 7079              		.loc 1 2056 0
 7080 0008 0C4B     		ldr	r3, .L549
 7081 000a 1978     		ldrb	r1, [r3]
 7082 000c 7B68     		ldr	r3, [r7, #4]
 7083 000e DBB2     		uxtb	r3, r3
 7084 0010 4933     		add	r3, r3, #73
 7085 0012 DAB2     		uxtb	r2, r3
 7086 0014 0A4B     		ldr	r3, .L549+4
 7087 0016 081C     		mov	r0, r1
 7088 0018 111C     		mov	r1, r2
 7089 001a 0222     		mov	r2, #2
 7090 001c FFF7FEFF 		bl	I2CReadBytes
2057:.\mpu6050.c   ****     return (((uint16_t)buffer[0]) << 8) | buffer[1];
 7091              		.loc 1 2057 0
 7092 0020 074B     		ldr	r3, .L549+4
 7093 0022 1B78     		ldrb	r3, [r3]
 7094 0024 1B02     		lsl	r3, r3, #8
 7095 0026 9AB2     		uxth	r2, r3
 7096 0028 054B     		ldr	r3, .L549+4
 7097 002a 5B78     		ldrb	r3, [r3, #1]
 7098 002c 1343     		orr	r3, r2
 7099 002e 9BB2     		uxth	r3, r3
 7100 0030 9BB2     		uxth	r3, r3
2058:.\mpu6050.c   **** }
 7101              		.loc 1 2058 0
 7102 0032 181C     		mov	r0, r3
 7103 0034 BD46     		mov	sp, r7
 7104 0036 02B0     		add	sp, sp, #8
 7105              		@ sp needed
 7106 0038 80BD     		pop	{r7, pc}
 7107              	.L550:
 7108 003a C046     		.align	2
 7109              	.L549:
 7110 003c 00000000 		.word	devAddr
 7111 0040 00000000 		.word	buffer
 7112              		.cfi_endproc
 7113              	.LFE149:
 7114              		.size	MPU6050_getExternalSensorWord, .-MPU6050_getExternalSensorWord
 7115              		.section	.text.MPU6050_getExternalSensorDWord,"ax",%progbits
 7116              		.align	2
 7117              		.global	MPU6050_getExternalSensorDWord
 7118              		.code	16
 7119              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 162


 7120              		.type	MPU6050_getExternalSensorDWord, %function
 7121              	MPU6050_getExternalSensorDWord:
 7122              	.LFB150:
2059:.\mpu6050.c   **** /** Read double word (4 bytes) from external sensor data registers.
2060:.\mpu6050.c   ****  * @param position Starting position (0-20)
2061:.\mpu6050.c   ****  * @return Double word read from registers
2062:.\mpu6050.c   ****  * @see getExternalSensorByte()
2063:.\mpu6050.c   ****  */
2064:.\mpu6050.c   **** uint32_t MPU6050_getExternalSensorDWord(int position) {
 7123              		.loc 1 2064 0
 7124              		.cfi_startproc
 7125 0000 80B5     		push	{r7, lr}
 7126              		.cfi_def_cfa_offset 8
 7127              		.cfi_offset 7, -8
 7128              		.cfi_offset 14, -4
 7129 0002 82B0     		sub	sp, sp, #8
 7130              		.cfi_def_cfa_offset 16
 7131 0004 00AF     		add	r7, sp, #0
 7132              		.cfi_def_cfa_register 7
 7133 0006 7860     		str	r0, [r7, #4]
2065:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, 4, buffer);
 7134              		.loc 1 2065 0
 7135 0008 0E4B     		ldr	r3, .L553
 7136 000a 1978     		ldrb	r1, [r3]
 7137 000c 7B68     		ldr	r3, [r7, #4]
 7138 000e DBB2     		uxtb	r3, r3
 7139 0010 4933     		add	r3, r3, #73
 7140 0012 DAB2     		uxtb	r2, r3
 7141 0014 0C4B     		ldr	r3, .L553+4
 7142 0016 081C     		mov	r0, r1
 7143 0018 111C     		mov	r1, r2
 7144 001a 0422     		mov	r2, #4
 7145 001c FFF7FEFF 		bl	I2CReadBytes
2066:.\mpu6050.c   ****     return (((uint32_t)buffer[0]) << 24) | (((uint32_t)buffer[1]) << 16) | (((uint16_t)buffer[2]) <
 7146              		.loc 1 2066 0
 7147 0020 094B     		ldr	r3, .L553+4
 7148 0022 1B78     		ldrb	r3, [r3]
 7149 0024 1A06     		lsl	r2, r3, #24
 7150 0026 084B     		ldr	r3, .L553+4
 7151 0028 5B78     		ldrb	r3, [r3, #1]
 7152 002a 1B04     		lsl	r3, r3, #16
 7153 002c 1A43     		orr	r2, r3
 7154 002e 064B     		ldr	r3, .L553+4
 7155 0030 9B78     		ldrb	r3, [r3, #2]
 7156 0032 1B02     		lsl	r3, r3, #8
 7157 0034 1A43     		orr	r2, r3
 7158 0036 044B     		ldr	r3, .L553+4
 7159 0038 DB78     		ldrb	r3, [r3, #3]
 7160 003a 1343     		orr	r3, r2
2067:.\mpu6050.c   **** }
 7161              		.loc 1 2067 0
 7162 003c 181C     		mov	r0, r3
 7163 003e BD46     		mov	sp, r7
 7164 0040 02B0     		add	sp, sp, #8
 7165              		@ sp needed
 7166 0042 80BD     		pop	{r7, pc}
 7167              	.L554:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 163


 7168              		.align	2
 7169              	.L553:
 7170 0044 00000000 		.word	devAddr
 7171 0048 00000000 		.word	buffer
 7172              		.cfi_endproc
 7173              	.LFE150:
 7174              		.size	MPU6050_getExternalSensorDWord, .-MPU6050_getExternalSensorDWord
 7175              		.section	.text.MPU6050_getXNegMotionDetected,"ax",%progbits
 7176              		.align	2
 7177              		.global	MPU6050_getXNegMotionDetected
 7178              		.code	16
 7179              		.thumb_func
 7180              		.type	MPU6050_getXNegMotionDetected, %function
 7181              	MPU6050_getXNegMotionDetected:
 7182              	.LFB151:
2068:.\mpu6050.c   **** 
2069:.\mpu6050.c   **** // MOT_DETECT_STATUS register
2070:.\mpu6050.c   **** 
2071:.\mpu6050.c   **** /** Get X-axis negative motion detection interrupt status.
2072:.\mpu6050.c   ****  * @return Motion detection status
2073:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2074:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_XNEG_BIT
2075:.\mpu6050.c   ****  */
2076:.\mpu6050.c   **** bool MPU6050_getXNegMotionDetected() {
 7183              		.loc 1 2076 0
 7184              		.cfi_startproc
 7185 0000 80B5     		push	{r7, lr}
 7186              		.cfi_def_cfa_offset 8
 7187              		.cfi_offset 7, -8
 7188              		.cfi_offset 14, -4
 7189 0002 00AF     		add	r7, sp, #0
 7190              		.cfi_def_cfa_register 7
2077:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_XNEG_BIT, buffer);
 7191              		.loc 1 2077 0
 7192 0004 074B     		ldr	r3, .L557
 7193 0006 1A78     		ldrb	r2, [r3]
 7194 0008 074B     		ldr	r3, .L557+4
 7195 000a 101C     		mov	r0, r2
 7196 000c 6121     		mov	r1, #97
 7197 000e 0722     		mov	r2, #7
 7198 0010 FFF7FEFF 		bl	I2CReadBit
2078:.\mpu6050.c   ****     return buffer[0];
 7199              		.loc 1 2078 0
 7200 0014 044B     		ldr	r3, .L557+4
 7201 0016 1B78     		ldrb	r3, [r3]
 7202 0018 5A1E     		sub	r2, r3, #1
 7203 001a 9341     		sbc	r3, r3, r2
 7204 001c DBB2     		uxtb	r3, r3
2079:.\mpu6050.c   **** }
 7205              		.loc 1 2079 0
 7206 001e 181C     		mov	r0, r3
 7207 0020 BD46     		mov	sp, r7
 7208              		@ sp needed
 7209 0022 80BD     		pop	{r7, pc}
 7210              	.L558:
 7211              		.align	2
 7212              	.L557:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 164


 7213 0024 00000000 		.word	devAddr
 7214 0028 00000000 		.word	buffer
 7215              		.cfi_endproc
 7216              	.LFE151:
 7217              		.size	MPU6050_getXNegMotionDetected, .-MPU6050_getXNegMotionDetected
 7218              		.section	.text.MPU6050_getXPosMotionDetected,"ax",%progbits
 7219              		.align	2
 7220              		.global	MPU6050_getXPosMotionDetected
 7221              		.code	16
 7222              		.thumb_func
 7223              		.type	MPU6050_getXPosMotionDetected, %function
 7224              	MPU6050_getXPosMotionDetected:
 7225              	.LFB152:
2080:.\mpu6050.c   **** /** Get X-axis positive motion detection interrupt status.
2081:.\mpu6050.c   ****  * @return Motion detection status
2082:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2083:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_XPOS_BIT
2084:.\mpu6050.c   ****  */
2085:.\mpu6050.c   **** bool MPU6050_getXPosMotionDetected() {
 7226              		.loc 1 2085 0
 7227              		.cfi_startproc
 7228 0000 80B5     		push	{r7, lr}
 7229              		.cfi_def_cfa_offset 8
 7230              		.cfi_offset 7, -8
 7231              		.cfi_offset 14, -4
 7232 0002 00AF     		add	r7, sp, #0
 7233              		.cfi_def_cfa_register 7
2086:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_XPOS_BIT, buffer);
 7234              		.loc 1 2086 0
 7235 0004 074B     		ldr	r3, .L561
 7236 0006 1A78     		ldrb	r2, [r3]
 7237 0008 074B     		ldr	r3, .L561+4
 7238 000a 101C     		mov	r0, r2
 7239 000c 6121     		mov	r1, #97
 7240 000e 0622     		mov	r2, #6
 7241 0010 FFF7FEFF 		bl	I2CReadBit
2087:.\mpu6050.c   ****     return buffer[0];
 7242              		.loc 1 2087 0
 7243 0014 044B     		ldr	r3, .L561+4
 7244 0016 1B78     		ldrb	r3, [r3]
 7245 0018 5A1E     		sub	r2, r3, #1
 7246 001a 9341     		sbc	r3, r3, r2
 7247 001c DBB2     		uxtb	r3, r3
2088:.\mpu6050.c   **** }
 7248              		.loc 1 2088 0
 7249 001e 181C     		mov	r0, r3
 7250 0020 BD46     		mov	sp, r7
 7251              		@ sp needed
 7252 0022 80BD     		pop	{r7, pc}
 7253              	.L562:
 7254              		.align	2
 7255              	.L561:
 7256 0024 00000000 		.word	devAddr
 7257 0028 00000000 		.word	buffer
 7258              		.cfi_endproc
 7259              	.LFE152:
 7260              		.size	MPU6050_getXPosMotionDetected, .-MPU6050_getXPosMotionDetected
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 165


 7261              		.section	.text.MPU6050_getYNegMotionDetected,"ax",%progbits
 7262              		.align	2
 7263              		.global	MPU6050_getYNegMotionDetected
 7264              		.code	16
 7265              		.thumb_func
 7266              		.type	MPU6050_getYNegMotionDetected, %function
 7267              	MPU6050_getYNegMotionDetected:
 7268              	.LFB153:
2089:.\mpu6050.c   **** /** Get Y-axis negative motion detection interrupt status.
2090:.\mpu6050.c   ****  * @return Motion detection status
2091:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2092:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_YNEG_BIT
2093:.\mpu6050.c   ****  */
2094:.\mpu6050.c   **** bool MPU6050_getYNegMotionDetected() {
 7269              		.loc 1 2094 0
 7270              		.cfi_startproc
 7271 0000 80B5     		push	{r7, lr}
 7272              		.cfi_def_cfa_offset 8
 7273              		.cfi_offset 7, -8
 7274              		.cfi_offset 14, -4
 7275 0002 00AF     		add	r7, sp, #0
 7276              		.cfi_def_cfa_register 7
2095:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_YNEG_BIT, buffer);
 7277              		.loc 1 2095 0
 7278 0004 074B     		ldr	r3, .L565
 7279 0006 1A78     		ldrb	r2, [r3]
 7280 0008 074B     		ldr	r3, .L565+4
 7281 000a 101C     		mov	r0, r2
 7282 000c 6121     		mov	r1, #97
 7283 000e 0522     		mov	r2, #5
 7284 0010 FFF7FEFF 		bl	I2CReadBit
2096:.\mpu6050.c   ****     return buffer[0];
 7285              		.loc 1 2096 0
 7286 0014 044B     		ldr	r3, .L565+4
 7287 0016 1B78     		ldrb	r3, [r3]
 7288 0018 5A1E     		sub	r2, r3, #1
 7289 001a 9341     		sbc	r3, r3, r2
 7290 001c DBB2     		uxtb	r3, r3
2097:.\mpu6050.c   **** }
 7291              		.loc 1 2097 0
 7292 001e 181C     		mov	r0, r3
 7293 0020 BD46     		mov	sp, r7
 7294              		@ sp needed
 7295 0022 80BD     		pop	{r7, pc}
 7296              	.L566:
 7297              		.align	2
 7298              	.L565:
 7299 0024 00000000 		.word	devAddr
 7300 0028 00000000 		.word	buffer
 7301              		.cfi_endproc
 7302              	.LFE153:
 7303              		.size	MPU6050_getYNegMotionDetected, .-MPU6050_getYNegMotionDetected
 7304              		.section	.text.MPU6050_getYPosMotionDetected,"ax",%progbits
 7305              		.align	2
 7306              		.global	MPU6050_getYPosMotionDetected
 7307              		.code	16
 7308              		.thumb_func
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 166


 7309              		.type	MPU6050_getYPosMotionDetected, %function
 7310              	MPU6050_getYPosMotionDetected:
 7311              	.LFB154:
2098:.\mpu6050.c   **** /** Get Y-axis positive motion detection interrupt status.
2099:.\mpu6050.c   ****  * @return Motion detection status
2100:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2101:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_YPOS_BIT
2102:.\mpu6050.c   ****  */
2103:.\mpu6050.c   **** bool MPU6050_getYPosMotionDetected() {
 7312              		.loc 1 2103 0
 7313              		.cfi_startproc
 7314 0000 80B5     		push	{r7, lr}
 7315              		.cfi_def_cfa_offset 8
 7316              		.cfi_offset 7, -8
 7317              		.cfi_offset 14, -4
 7318 0002 00AF     		add	r7, sp, #0
 7319              		.cfi_def_cfa_register 7
2104:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_YPOS_BIT, buffer);
 7320              		.loc 1 2104 0
 7321 0004 074B     		ldr	r3, .L569
 7322 0006 1A78     		ldrb	r2, [r3]
 7323 0008 074B     		ldr	r3, .L569+4
 7324 000a 101C     		mov	r0, r2
 7325 000c 6121     		mov	r1, #97
 7326 000e 0422     		mov	r2, #4
 7327 0010 FFF7FEFF 		bl	I2CReadBit
2105:.\mpu6050.c   ****     return buffer[0];
 7328              		.loc 1 2105 0
 7329 0014 044B     		ldr	r3, .L569+4
 7330 0016 1B78     		ldrb	r3, [r3]
 7331 0018 5A1E     		sub	r2, r3, #1
 7332 001a 9341     		sbc	r3, r3, r2
 7333 001c DBB2     		uxtb	r3, r3
2106:.\mpu6050.c   **** }
 7334              		.loc 1 2106 0
 7335 001e 181C     		mov	r0, r3
 7336 0020 BD46     		mov	sp, r7
 7337              		@ sp needed
 7338 0022 80BD     		pop	{r7, pc}
 7339              	.L570:
 7340              		.align	2
 7341              	.L569:
 7342 0024 00000000 		.word	devAddr
 7343 0028 00000000 		.word	buffer
 7344              		.cfi_endproc
 7345              	.LFE154:
 7346              		.size	MPU6050_getYPosMotionDetected, .-MPU6050_getYPosMotionDetected
 7347              		.section	.text.MPU6050_getZNegMotionDetected,"ax",%progbits
 7348              		.align	2
 7349              		.global	MPU6050_getZNegMotionDetected
 7350              		.code	16
 7351              		.thumb_func
 7352              		.type	MPU6050_getZNegMotionDetected, %function
 7353              	MPU6050_getZNegMotionDetected:
 7354              	.LFB155:
2107:.\mpu6050.c   **** /** Get Z-axis negative motion detection interrupt status.
2108:.\mpu6050.c   ****  * @return Motion detection status
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 167


2109:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2110:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_ZNEG_BIT
2111:.\mpu6050.c   ****  */
2112:.\mpu6050.c   **** bool MPU6050_getZNegMotionDetected() {
 7355              		.loc 1 2112 0
 7356              		.cfi_startproc
 7357 0000 80B5     		push	{r7, lr}
 7358              		.cfi_def_cfa_offset 8
 7359              		.cfi_offset 7, -8
 7360              		.cfi_offset 14, -4
 7361 0002 00AF     		add	r7, sp, #0
 7362              		.cfi_def_cfa_register 7
2113:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZNEG_BIT, buffer);
 7363              		.loc 1 2113 0
 7364 0004 074B     		ldr	r3, .L573
 7365 0006 1A78     		ldrb	r2, [r3]
 7366 0008 074B     		ldr	r3, .L573+4
 7367 000a 101C     		mov	r0, r2
 7368 000c 6121     		mov	r1, #97
 7369 000e 0322     		mov	r2, #3
 7370 0010 FFF7FEFF 		bl	I2CReadBit
2114:.\mpu6050.c   ****     return buffer[0];
 7371              		.loc 1 2114 0
 7372 0014 044B     		ldr	r3, .L573+4
 7373 0016 1B78     		ldrb	r3, [r3]
 7374 0018 5A1E     		sub	r2, r3, #1
 7375 001a 9341     		sbc	r3, r3, r2
 7376 001c DBB2     		uxtb	r3, r3
2115:.\mpu6050.c   **** }
 7377              		.loc 1 2115 0
 7378 001e 181C     		mov	r0, r3
 7379 0020 BD46     		mov	sp, r7
 7380              		@ sp needed
 7381 0022 80BD     		pop	{r7, pc}
 7382              	.L574:
 7383              		.align	2
 7384              	.L573:
 7385 0024 00000000 		.word	devAddr
 7386 0028 00000000 		.word	buffer
 7387              		.cfi_endproc
 7388              	.LFE155:
 7389              		.size	MPU6050_getZNegMotionDetected, .-MPU6050_getZNegMotionDetected
 7390              		.section	.text.MPU6050_getZPosMotionDetected,"ax",%progbits
 7391              		.align	2
 7392              		.global	MPU6050_getZPosMotionDetected
 7393              		.code	16
 7394              		.thumb_func
 7395              		.type	MPU6050_getZPosMotionDetected, %function
 7396              	MPU6050_getZPosMotionDetected:
 7397              	.LFB156:
2116:.\mpu6050.c   **** /** Get Z-axis positive motion detection interrupt status.
2117:.\mpu6050.c   ****  * @return Motion detection status
2118:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2119:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_ZPOS_BIT
2120:.\mpu6050.c   ****  */
2121:.\mpu6050.c   **** bool MPU6050_getZPosMotionDetected() {
 7398              		.loc 1 2121 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 168


 7399              		.cfi_startproc
 7400 0000 80B5     		push	{r7, lr}
 7401              		.cfi_def_cfa_offset 8
 7402              		.cfi_offset 7, -8
 7403              		.cfi_offset 14, -4
 7404 0002 00AF     		add	r7, sp, #0
 7405              		.cfi_def_cfa_register 7
2122:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZPOS_BIT, buffer);
 7406              		.loc 1 2122 0
 7407 0004 074B     		ldr	r3, .L577
 7408 0006 1A78     		ldrb	r2, [r3]
 7409 0008 074B     		ldr	r3, .L577+4
 7410 000a 101C     		mov	r0, r2
 7411 000c 6121     		mov	r1, #97
 7412 000e 0222     		mov	r2, #2
 7413 0010 FFF7FEFF 		bl	I2CReadBit
2123:.\mpu6050.c   ****     return buffer[0];
 7414              		.loc 1 2123 0
 7415 0014 044B     		ldr	r3, .L577+4
 7416 0016 1B78     		ldrb	r3, [r3]
 7417 0018 5A1E     		sub	r2, r3, #1
 7418 001a 9341     		sbc	r3, r3, r2
 7419 001c DBB2     		uxtb	r3, r3
2124:.\mpu6050.c   **** }
 7420              		.loc 1 2124 0
 7421 001e 181C     		mov	r0, r3
 7422 0020 BD46     		mov	sp, r7
 7423              		@ sp needed
 7424 0022 80BD     		pop	{r7, pc}
 7425              	.L578:
 7426              		.align	2
 7427              	.L577:
 7428 0024 00000000 		.word	devAddr
 7429 0028 00000000 		.word	buffer
 7430              		.cfi_endproc
 7431              	.LFE156:
 7432              		.size	MPU6050_getZPosMotionDetected, .-MPU6050_getZPosMotionDetected
 7433              		.section	.text.MPU6050_getZeroMotionDetected,"ax",%progbits
 7434              		.align	2
 7435              		.global	MPU6050_getZeroMotionDetected
 7436              		.code	16
 7437              		.thumb_func
 7438              		.type	MPU6050_getZeroMotionDetected, %function
 7439              	MPU6050_getZeroMotionDetected:
 7440              	.LFB157:
2125:.\mpu6050.c   **** /** Get zero motion detection interrupt status.
2126:.\mpu6050.c   ****  * @return Motion detection status
2127:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_STATUS
2128:.\mpu6050.c   ****  * @see MPU6050_MOTION_MOT_ZRMOT_BIT
2129:.\mpu6050.c   ****  */
2130:.\mpu6050.c   **** bool MPU6050_getZeroMotionDetected() {
 7441              		.loc 1 2130 0
 7442              		.cfi_startproc
 7443 0000 80B5     		push	{r7, lr}
 7444              		.cfi_def_cfa_offset 8
 7445              		.cfi_offset 7, -8
 7446              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 169


 7447 0002 00AF     		add	r7, sp, #0
 7448              		.cfi_def_cfa_register 7
2131:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZRMOT_BIT, buffer);
 7449              		.loc 1 2131 0
 7450 0004 074B     		ldr	r3, .L581
 7451 0006 1A78     		ldrb	r2, [r3]
 7452 0008 074B     		ldr	r3, .L581+4
 7453 000a 101C     		mov	r0, r2
 7454 000c 6121     		mov	r1, #97
 7455 000e 0022     		mov	r2, #0
 7456 0010 FFF7FEFF 		bl	I2CReadBit
2132:.\mpu6050.c   ****     return buffer[0];
 7457              		.loc 1 2132 0
 7458 0014 044B     		ldr	r3, .L581+4
 7459 0016 1B78     		ldrb	r3, [r3]
 7460 0018 5A1E     		sub	r2, r3, #1
 7461 001a 9341     		sbc	r3, r3, r2
 7462 001c DBB2     		uxtb	r3, r3
2133:.\mpu6050.c   **** }
 7463              		.loc 1 2133 0
 7464 001e 181C     		mov	r0, r3
 7465 0020 BD46     		mov	sp, r7
 7466              		@ sp needed
 7467 0022 80BD     		pop	{r7, pc}
 7468              	.L582:
 7469              		.align	2
 7470              	.L581:
 7471 0024 00000000 		.word	devAddr
 7472 0028 00000000 		.word	buffer
 7473              		.cfi_endproc
 7474              	.LFE157:
 7475              		.size	MPU6050_getZeroMotionDetected, .-MPU6050_getZeroMotionDetected
 7476              		.section	.text.MPU6050_setSlaveOutputByte,"ax",%progbits
 7477              		.align	2
 7478              		.global	MPU6050_setSlaveOutputByte
 7479              		.code	16
 7480              		.thumb_func
 7481              		.type	MPU6050_setSlaveOutputByte, %function
 7482              	MPU6050_setSlaveOutputByte:
 7483              	.LFB158:
2134:.\mpu6050.c   **** 
2135:.\mpu6050.c   **** // I2C_SLV*_DO register
2136:.\mpu6050.c   **** 
2137:.\mpu6050.c   **** /** Write byte to Data Output container for specified slave.
2138:.\mpu6050.c   ****  * This register holds the output data written into Slave when Slave is set to
2139:.\mpu6050.c   ****  * write mode. For further information regarding Slave control, please
2140:.\mpu6050.c   ****  * refer to Registers 37 to 39 and immediately following.
2141:.\mpu6050.c   ****  * @param num Slave number (0-3)
2142:.\mpu6050.c   ****  * @param data Byte to write
2143:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_SLV0_DO
2144:.\mpu6050.c   ****  */
2145:.\mpu6050.c   **** void MPU6050_setSlaveOutputByte(uint8_t num, uint8_t data) {
 7484              		.loc 1 2145 0
 7485              		.cfi_startproc
 7486 0000 80B5     		push	{r7, lr}
 7487              		.cfi_def_cfa_offset 8
 7488              		.cfi_offset 7, -8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 170


 7489              		.cfi_offset 14, -4
 7490 0002 82B0     		sub	sp, sp, #8
 7491              		.cfi_def_cfa_offset 16
 7492 0004 00AF     		add	r7, sp, #0
 7493              		.cfi_def_cfa_register 7
 7494 0006 0A1C     		mov	r2, r1
 7495 0008 FB1D     		add	r3, r7, #7
 7496 000a 011C     		add	r1, r0, #0
 7497 000c 1970     		strb	r1, [r3]
 7498 000e BB1D     		add	r3, r7, #6
 7499 0010 1A70     		strb	r2, [r3]
2146:.\mpu6050.c   ****     if (num > 3) return;
 7500              		.loc 1 2146 0
 7501 0012 FB1D     		add	r3, r7, #7
 7502 0014 1B78     		ldrb	r3, [r3]
 7503 0016 032B     		cmp	r3, #3
 7504 0018 00D9     		bls	.L584
 7505              		.loc 1 2146 0 is_stmt 0 discriminator 1
 7506 001a 0CE0     		b	.L583
 7507              	.L584:
2147:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_I2C_SLV0_DO + num, data);
 7508              		.loc 1 2147 0 is_stmt 1
 7509 001c 074B     		ldr	r3, .L586
 7510 001e 1978     		ldrb	r1, [r3]
 7511 0020 FB1D     		add	r3, r7, #7
 7512 0022 1B78     		ldrb	r3, [r3]
 7513 0024 6333     		add	r3, r3, #99
 7514 0026 DAB2     		uxtb	r2, r3
 7515 0028 BB1D     		add	r3, r7, #6
 7516 002a 1B78     		ldrb	r3, [r3]
 7517 002c 081C     		mov	r0, r1
 7518 002e 111C     		mov	r1, r2
 7519 0030 1A1C     		mov	r2, r3
 7520 0032 FFF7FEFF 		bl	I2CWriteByte
 7521              	.L583:
2148:.\mpu6050.c   **** }
 7522              		.loc 1 2148 0
 7523 0036 BD46     		mov	sp, r7
 7524 0038 02B0     		add	sp, sp, #8
 7525              		@ sp needed
 7526 003a 80BD     		pop	{r7, pc}
 7527              	.L587:
 7528              		.align	2
 7529              	.L586:
 7530 003c 00000000 		.word	devAddr
 7531              		.cfi_endproc
 7532              	.LFE158:
 7533              		.size	MPU6050_setSlaveOutputByte, .-MPU6050_setSlaveOutputByte
 7534              		.section	.text.MPU6050_getExternalShadowDelayEnabled,"ax",%progbits
 7535              		.align	2
 7536              		.global	MPU6050_getExternalShadowDelayEnabled
 7537              		.code	16
 7538              		.thumb_func
 7539              		.type	MPU6050_getExternalShadowDelayEnabled, %function
 7540              	MPU6050_getExternalShadowDelayEnabled:
 7541              	.LFB159:
2149:.\mpu6050.c   **** 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 171


2150:.\mpu6050.c   **** // I2C_MST_DELAY_CTRL register
2151:.\mpu6050.c   **** 
2152:.\mpu6050.c   **** /** Get external data shadow delay enabled status.
2153:.\mpu6050.c   ****  * This register is used to specify the timing of external sensor data
2154:.\mpu6050.c   ****  * shadowing. When DELAY_ES_SHADOW is set to 1, shadowing of external
2155:.\mpu6050.c   ****  * sensor data is delayed until all data has been received.
2156:.\mpu6050.c   ****  * @return Current external data shadow delay enabled status.
2157:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2158:.\mpu6050.c   ****  * @see MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT
2159:.\mpu6050.c   ****  */
2160:.\mpu6050.c   **** bool MPU6050_getExternalShadowDelayEnabled() {
 7542              		.loc 1 2160 0
 7543              		.cfi_startproc
 7544 0000 80B5     		push	{r7, lr}
 7545              		.cfi_def_cfa_offset 8
 7546              		.cfi_offset 7, -8
 7547              		.cfi_offset 14, -4
 7548 0002 00AF     		add	r7, sp, #0
 7549              		.cfi_def_cfa_register 7
2161:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT, buffe
 7550              		.loc 1 2161 0
 7551 0004 074B     		ldr	r3, .L590
 7552 0006 1A78     		ldrb	r2, [r3]
 7553 0008 074B     		ldr	r3, .L590+4
 7554 000a 101C     		mov	r0, r2
 7555 000c 6721     		mov	r1, #103
 7556 000e 0722     		mov	r2, #7
 7557 0010 FFF7FEFF 		bl	I2CReadBit
2162:.\mpu6050.c   ****     return buffer[0];
 7558              		.loc 1 2162 0
 7559 0014 044B     		ldr	r3, .L590+4
 7560 0016 1B78     		ldrb	r3, [r3]
 7561 0018 5A1E     		sub	r2, r3, #1
 7562 001a 9341     		sbc	r3, r3, r2
 7563 001c DBB2     		uxtb	r3, r3
2163:.\mpu6050.c   **** }
 7564              		.loc 1 2163 0
 7565 001e 181C     		mov	r0, r3
 7566 0020 BD46     		mov	sp, r7
 7567              		@ sp needed
 7568 0022 80BD     		pop	{r7, pc}
 7569              	.L591:
 7570              		.align	2
 7571              	.L590:
 7572 0024 00000000 		.word	devAddr
 7573 0028 00000000 		.word	buffer
 7574              		.cfi_endproc
 7575              	.LFE159:
 7576              		.size	MPU6050_getExternalShadowDelayEnabled, .-MPU6050_getExternalShadowDelayEnabled
 7577              		.section	.text.MPU6050_setExternalShadowDelayEnabled,"ax",%progbits
 7578              		.align	2
 7579              		.global	MPU6050_setExternalShadowDelayEnabled
 7580              		.code	16
 7581              		.thumb_func
 7582              		.type	MPU6050_setExternalShadowDelayEnabled, %function
 7583              	MPU6050_setExternalShadowDelayEnabled:
 7584              	.LFB160:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 172


2164:.\mpu6050.c   **** /** Set external data shadow delay enabled status.
2165:.\mpu6050.c   ****  * @param enabled New external data shadow delay enabled status.
2166:.\mpu6050.c   ****  * @see getExternalShadowDelayEnabled()
2167:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2168:.\mpu6050.c   ****  * @see MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT
2169:.\mpu6050.c   ****  */
2170:.\mpu6050.c   **** void MPU6050_setExternalShadowDelayEnabled(bool enabled) {
 7585              		.loc 1 2170 0
 7586              		.cfi_startproc
 7587 0000 80B5     		push	{r7, lr}
 7588              		.cfi_def_cfa_offset 8
 7589              		.cfi_offset 7, -8
 7590              		.cfi_offset 14, -4
 7591 0002 82B0     		sub	sp, sp, #8
 7592              		.cfi_def_cfa_offset 16
 7593 0004 00AF     		add	r7, sp, #0
 7594              		.cfi_def_cfa_register 7
 7595 0006 021C     		mov	r2, r0
 7596 0008 FB1D     		add	r3, r7, #7
 7597 000a 1A70     		strb	r2, [r3]
2171:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT, enab
 7598              		.loc 1 2171 0
 7599 000c 054B     		ldr	r3, .L593
 7600 000e 1A78     		ldrb	r2, [r3]
 7601 0010 FB1D     		add	r3, r7, #7
 7602 0012 1B78     		ldrb	r3, [r3]
 7603 0014 101C     		mov	r0, r2
 7604 0016 6721     		mov	r1, #103
 7605 0018 0722     		mov	r2, #7
 7606 001a FFF7FEFF 		bl	I2CWriteBit
2172:.\mpu6050.c   **** }
 7607              		.loc 1 2172 0
 7608 001e BD46     		mov	sp, r7
 7609 0020 02B0     		add	sp, sp, #8
 7610              		@ sp needed
 7611 0022 80BD     		pop	{r7, pc}
 7612              	.L594:
 7613              		.align	2
 7614              	.L593:
 7615 0024 00000000 		.word	devAddr
 7616              		.cfi_endproc
 7617              	.LFE160:
 7618              		.size	MPU6050_setExternalShadowDelayEnabled, .-MPU6050_setExternalShadowDelayEnabled
 7619              		.section	.text.MPU6050_getSlaveDelayEnabled,"ax",%progbits
 7620              		.align	2
 7621              		.global	MPU6050_getSlaveDelayEnabled
 7622              		.code	16
 7623              		.thumb_func
 7624              		.type	MPU6050_getSlaveDelayEnabled, %function
 7625              	MPU6050_getSlaveDelayEnabled:
 7626              	.LFB161:
2173:.\mpu6050.c   **** /** Get slave delay enabled status.
2174:.\mpu6050.c   ****  * When a particular slave delay is enabled, the rate of access for the that
2175:.\mpu6050.c   ****  * slave device is reduced. When a slave's access rate is decreased relative to
2176:.\mpu6050.c   ****  * the Sample Rate, the slave is accessed every:
2177:.\mpu6050.c   ****  *
2178:.\mpu6050.c   ****  *     1 / (1 + I2C_MST_DLY) Samples
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 173


2179:.\mpu6050.c   ****  *
2180:.\mpu6050.c   ****  * This base Sample Rate in turn is determined by SMPLRT_DIV (register  * 25)
2181:.\mpu6050.c   ****  * and DLPF_CFG (register 26).
2182:.\mpu6050.c   ****  *
2183:.\mpu6050.c   ****  * For further information regarding I2C_MST_DLY, please refer to register 52.
2184:.\mpu6050.c   ****  * For further information regarding the Sample Rate, please refer to register 25.
2185:.\mpu6050.c   ****  *
2186:.\mpu6050.c   ****  * @param num Slave number (0-4)
2187:.\mpu6050.c   ****  * @return Current slave delay enabled status.
2188:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2189:.\mpu6050.c   ****  * @see MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT
2190:.\mpu6050.c   ****  */
2191:.\mpu6050.c   **** bool MPU6050_getSlaveDelayEnabled(uint8_t num) {
 7627              		.loc 1 2191 0
 7628              		.cfi_startproc
 7629 0000 80B5     		push	{r7, lr}
 7630              		.cfi_def_cfa_offset 8
 7631              		.cfi_offset 7, -8
 7632              		.cfi_offset 14, -4
 7633 0002 82B0     		sub	sp, sp, #8
 7634              		.cfi_def_cfa_offset 16
 7635 0004 00AF     		add	r7, sp, #0
 7636              		.cfi_def_cfa_register 7
 7637 0006 021C     		mov	r2, r0
 7638 0008 FB1D     		add	r3, r7, #7
 7639 000a 1A70     		strb	r2, [r3]
2192:.\mpu6050.c   ****     // MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT is 4, SLV3 is 3, etc.
2193:.\mpu6050.c   ****     if (num > 4) return 0;
 7640              		.loc 1 2193 0
 7641 000c FB1D     		add	r3, r7, #7
 7642 000e 1B78     		ldrb	r3, [r3]
 7643 0010 042B     		cmp	r3, #4
 7644 0012 01D9     		bls	.L596
 7645              		.loc 1 2193 0 is_stmt 0 discriminator 1
 7646 0014 0023     		mov	r3, #0
 7647 0016 0DE0     		b	.L597
 7648              	.L596:
2194:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, num, buffer);
 7649              		.loc 1 2194 0 is_stmt 1
 7650 0018 084B     		ldr	r3, .L598
 7651 001a 1978     		ldrb	r1, [r3]
 7652 001c FB1D     		add	r3, r7, #7
 7653 001e 1A78     		ldrb	r2, [r3]
 7654 0020 074B     		ldr	r3, .L598+4
 7655 0022 081C     		mov	r0, r1
 7656 0024 6721     		mov	r1, #103
 7657 0026 FFF7FEFF 		bl	I2CReadBit
2195:.\mpu6050.c   ****     return buffer[0];
 7658              		.loc 1 2195 0
 7659 002a 054B     		ldr	r3, .L598+4
 7660 002c 1B78     		ldrb	r3, [r3]
 7661 002e 5A1E     		sub	r2, r3, #1
 7662 0030 9341     		sbc	r3, r3, r2
 7663 0032 DBB2     		uxtb	r3, r3
 7664              	.L597:
2196:.\mpu6050.c   **** }
 7665              		.loc 1 2196 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 174


 7666 0034 181C     		mov	r0, r3
 7667 0036 BD46     		mov	sp, r7
 7668 0038 02B0     		add	sp, sp, #8
 7669              		@ sp needed
 7670 003a 80BD     		pop	{r7, pc}
 7671              	.L599:
 7672              		.align	2
 7673              	.L598:
 7674 003c 00000000 		.word	devAddr
 7675 0040 00000000 		.word	buffer
 7676              		.cfi_endproc
 7677              	.LFE161:
 7678              		.size	MPU6050_getSlaveDelayEnabled, .-MPU6050_getSlaveDelayEnabled
 7679              		.section	.text.MPU6050_setSlaveDelayEnabled,"ax",%progbits
 7680              		.align	2
 7681              		.global	MPU6050_setSlaveDelayEnabled
 7682              		.code	16
 7683              		.thumb_func
 7684              		.type	MPU6050_setSlaveDelayEnabled, %function
 7685              	MPU6050_setSlaveDelayEnabled:
 7686              	.LFB162:
2197:.\mpu6050.c   **** /** Set slave delay enabled status.
2198:.\mpu6050.c   ****  * @param num Slave number (0-4)
2199:.\mpu6050.c   ****  * @param enabled New slave delay enabled status.
2200:.\mpu6050.c   ****  * @see MPU6050_RA_I2C_MST_DELAY_CTRL
2201:.\mpu6050.c   ****  * @see MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT
2202:.\mpu6050.c   ****  */
2203:.\mpu6050.c   **** void MPU6050_setSlaveDelayEnabled(uint8_t num, bool enabled) {
 7687              		.loc 1 2203 0
 7688              		.cfi_startproc
 7689 0000 80B5     		push	{r7, lr}
 7690              		.cfi_def_cfa_offset 8
 7691              		.cfi_offset 7, -8
 7692              		.cfi_offset 14, -4
 7693 0002 82B0     		sub	sp, sp, #8
 7694              		.cfi_def_cfa_offset 16
 7695 0004 00AF     		add	r7, sp, #0
 7696              		.cfi_def_cfa_register 7
 7697 0006 0A1C     		mov	r2, r1
 7698 0008 FB1D     		add	r3, r7, #7
 7699 000a 011C     		add	r1, r0, #0
 7700 000c 1970     		strb	r1, [r3]
 7701 000e BB1D     		add	r3, r7, #6
 7702 0010 1A70     		strb	r2, [r3]
2204:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, num, enabled);
 7703              		.loc 1 2204 0
 7704 0012 064B     		ldr	r3, .L601
 7705 0014 1978     		ldrb	r1, [r3]
 7706 0016 BB1D     		add	r3, r7, #6
 7707 0018 1B78     		ldrb	r3, [r3]
 7708 001a FA1D     		add	r2, r7, #7
 7709 001c 1278     		ldrb	r2, [r2]
 7710 001e 081C     		mov	r0, r1
 7711 0020 6721     		mov	r1, #103
 7712 0022 FFF7FEFF 		bl	I2CWriteBit
2205:.\mpu6050.c   **** }
 7713              		.loc 1 2205 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 175


 7714 0026 BD46     		mov	sp, r7
 7715 0028 02B0     		add	sp, sp, #8
 7716              		@ sp needed
 7717 002a 80BD     		pop	{r7, pc}
 7718              	.L602:
 7719              		.align	2
 7720              	.L601:
 7721 002c 00000000 		.word	devAddr
 7722              		.cfi_endproc
 7723              	.LFE162:
 7724              		.size	MPU6050_setSlaveDelayEnabled, .-MPU6050_setSlaveDelayEnabled
 7725              		.section	.text.MPU6050_resetGyroscopePath,"ax",%progbits
 7726              		.align	2
 7727              		.global	MPU6050_resetGyroscopePath
 7728              		.code	16
 7729              		.thumb_func
 7730              		.type	MPU6050_resetGyroscopePath, %function
 7731              	MPU6050_resetGyroscopePath:
 7732              	.LFB163:
2206:.\mpu6050.c   **** 
2207:.\mpu6050.c   **** // SIGNAL_PATH_RESET register
2208:.\mpu6050.c   **** 
2209:.\mpu6050.c   **** /** Reset gyroscope signal path.
2210:.\mpu6050.c   ****  * The reset will revert the signal path analog to digital converters and
2211:.\mpu6050.c   ****  * filters to their power up configurations.
2212:.\mpu6050.c   ****  * @see MPU6050_RA_SIGNAL_PATH_RESET
2213:.\mpu6050.c   ****  * @see MPU6050_PATHRESET_GYRO_RESET_BIT
2214:.\mpu6050.c   ****  */
2215:.\mpu6050.c   **** void MPU6050_resetGyroscopePath() {
 7733              		.loc 1 2215 0
 7734              		.cfi_startproc
 7735 0000 80B5     		push	{r7, lr}
 7736              		.cfi_def_cfa_offset 8
 7737              		.cfi_offset 7, -8
 7738              		.cfi_offset 14, -4
 7739 0002 00AF     		add	r7, sp, #0
 7740              		.cfi_def_cfa_register 7
2216:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_GYRO_RESET_BIT, true);
 7741              		.loc 1 2216 0
 7742 0004 044B     		ldr	r3, .L604
 7743 0006 1B78     		ldrb	r3, [r3]
 7744 0008 181C     		mov	r0, r3
 7745 000a 6821     		mov	r1, #104
 7746 000c 0222     		mov	r2, #2
 7747 000e 0123     		mov	r3, #1
 7748 0010 FFF7FEFF 		bl	I2CWriteBit
2217:.\mpu6050.c   **** }
 7749              		.loc 1 2217 0
 7750 0014 BD46     		mov	sp, r7
 7751              		@ sp needed
 7752 0016 80BD     		pop	{r7, pc}
 7753              	.L605:
 7754              		.align	2
 7755              	.L604:
 7756 0018 00000000 		.word	devAddr
 7757              		.cfi_endproc
 7758              	.LFE163:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 176


 7759              		.size	MPU6050_resetGyroscopePath, .-MPU6050_resetGyroscopePath
 7760              		.section	.text.MPU6050_resetAccelerometerPath,"ax",%progbits
 7761              		.align	2
 7762              		.global	MPU6050_resetAccelerometerPath
 7763              		.code	16
 7764              		.thumb_func
 7765              		.type	MPU6050_resetAccelerometerPath, %function
 7766              	MPU6050_resetAccelerometerPath:
 7767              	.LFB164:
2218:.\mpu6050.c   **** /** Reset accelerometer signal path.
2219:.\mpu6050.c   ****  * The reset will revert the signal path analog to digital converters and
2220:.\mpu6050.c   ****  * filters to their power up configurations.
2221:.\mpu6050.c   ****  * @see MPU6050_RA_SIGNAL_PATH_RESET
2222:.\mpu6050.c   ****  * @see MPU6050_PATHRESET_ACCEL_RESET_BIT
2223:.\mpu6050.c   ****  */
2224:.\mpu6050.c   **** void MPU6050_resetAccelerometerPath() {
 7768              		.loc 1 2224 0
 7769              		.cfi_startproc
 7770 0000 80B5     		push	{r7, lr}
 7771              		.cfi_def_cfa_offset 8
 7772              		.cfi_offset 7, -8
 7773              		.cfi_offset 14, -4
 7774 0002 00AF     		add	r7, sp, #0
 7775              		.cfi_def_cfa_register 7
2225:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_ACCEL_RESET_BIT, true);
 7776              		.loc 1 2225 0
 7777 0004 044B     		ldr	r3, .L607
 7778 0006 1B78     		ldrb	r3, [r3]
 7779 0008 181C     		mov	r0, r3
 7780 000a 6821     		mov	r1, #104
 7781 000c 0122     		mov	r2, #1
 7782 000e 0123     		mov	r3, #1
 7783 0010 FFF7FEFF 		bl	I2CWriteBit
2226:.\mpu6050.c   **** }
 7784              		.loc 1 2226 0
 7785 0014 BD46     		mov	sp, r7
 7786              		@ sp needed
 7787 0016 80BD     		pop	{r7, pc}
 7788              	.L608:
 7789              		.align	2
 7790              	.L607:
 7791 0018 00000000 		.word	devAddr
 7792              		.cfi_endproc
 7793              	.LFE164:
 7794              		.size	MPU6050_resetAccelerometerPath, .-MPU6050_resetAccelerometerPath
 7795              		.section	.text.MPU6050_resetTemperaturePath,"ax",%progbits
 7796              		.align	2
 7797              		.global	MPU6050_resetTemperaturePath
 7798              		.code	16
 7799              		.thumb_func
 7800              		.type	MPU6050_resetTemperaturePath, %function
 7801              	MPU6050_resetTemperaturePath:
 7802              	.LFB165:
2227:.\mpu6050.c   **** /** Reset temperature sensor signal path.
2228:.\mpu6050.c   ****  * The reset will revert the signal path analog to digital converters and
2229:.\mpu6050.c   ****  * filters to their power up configurations.
2230:.\mpu6050.c   ****  * @see MPU6050_RA_SIGNAL_PATH_RESET
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 177


2231:.\mpu6050.c   ****  * @see MPU6050_PATHRESET_TEMP_RESET_BIT
2232:.\mpu6050.c   ****  */
2233:.\mpu6050.c   **** void MPU6050_resetTemperaturePath() {
 7803              		.loc 1 2233 0
 7804              		.cfi_startproc
 7805 0000 80B5     		push	{r7, lr}
 7806              		.cfi_def_cfa_offset 8
 7807              		.cfi_offset 7, -8
 7808              		.cfi_offset 14, -4
 7809 0002 00AF     		add	r7, sp, #0
 7810              		.cfi_def_cfa_register 7
2234:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_TEMP_RESET_BIT, true);
 7811              		.loc 1 2234 0
 7812 0004 044B     		ldr	r3, .L610
 7813 0006 1B78     		ldrb	r3, [r3]
 7814 0008 181C     		mov	r0, r3
 7815 000a 6821     		mov	r1, #104
 7816 000c 0022     		mov	r2, #0
 7817 000e 0123     		mov	r3, #1
 7818 0010 FFF7FEFF 		bl	I2CWriteBit
2235:.\mpu6050.c   **** }
 7819              		.loc 1 2235 0
 7820 0014 BD46     		mov	sp, r7
 7821              		@ sp needed
 7822 0016 80BD     		pop	{r7, pc}
 7823              	.L611:
 7824              		.align	2
 7825              	.L610:
 7826 0018 00000000 		.word	devAddr
 7827              		.cfi_endproc
 7828              	.LFE165:
 7829              		.size	MPU6050_resetTemperaturePath, .-MPU6050_resetTemperaturePath
 7830              		.section	.text.MPU6050_getAccelerometerPowerOnDelay,"ax",%progbits
 7831              		.align	2
 7832              		.global	MPU6050_getAccelerometerPowerOnDelay
 7833              		.code	16
 7834              		.thumb_func
 7835              		.type	MPU6050_getAccelerometerPowerOnDelay, %function
 7836              	MPU6050_getAccelerometerPowerOnDelay:
 7837              	.LFB166:
2236:.\mpu6050.c   **** 
2237:.\mpu6050.c   **** // MOT_DETECT_CTRL register
2238:.\mpu6050.c   **** 
2239:.\mpu6050.c   **** /** Get accelerometer power-on delay.
2240:.\mpu6050.c   ****  * The accelerometer data path provides samples to the sensor registers, Motion
2241:.\mpu6050.c   ****  * detection, Zero Motion detection, and Free Fall detection modules. The
2242:.\mpu6050.c   ****  * signal path contains filters which must be flushed on wake-up with new
2243:.\mpu6050.c   ****  * samples before the detection modules begin operations. The default wake-up
2244:.\mpu6050.c   ****  * delay, of 4ms can be lengthened by up to 3ms. This additional delay is
2245:.\mpu6050.c   ****  * specified in ACCEL_ON_DELAY in units of 1 LSB = 1 ms. The user may select
2246:.\mpu6050.c   ****  * any value above zero unless instructed otherwise by InvenSense. Please refer
2247:.\mpu6050.c   ****  * to Section 8 of the MPU-6000/MPU-6050 Product Specification document for
2248:.\mpu6050.c   ****  * further information regarding the detection modules.
2249:.\mpu6050.c   ****  * @return Current accelerometer power-on delay
2250:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2251:.\mpu6050.c   ****  * @see MPU6050_DETECT_ACCEL_ON_DELAY_BIT
2252:.\mpu6050.c   ****  */
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 178


2253:.\mpu6050.c   **** uint8_t MPU6050_getAccelerometerPowerOnDelay() {
 7838              		.loc 1 2253 0
 7839              		.cfi_startproc
 7840 0000 80B5     		push	{r7, lr}
 7841              		.cfi_def_cfa_offset 8
 7842              		.cfi_offset 7, -8
 7843              		.cfi_offset 14, -4
 7844 0002 82B0     		sub	sp, sp, #8
 7845              		.cfi_def_cfa_offset 16
 7846 0004 02AF     		add	r7, sp, #8
 7847              		.cfi_def_cfa 7, 8
2254:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_ACCEL_ON_DELAY_BIT, MPU6050_DET
 7848              		.loc 1 2254 0
 7849 0006 074B     		ldr	r3, .L614
 7850 0008 1B78     		ldrb	r3, [r3]
 7851 000a 074A     		ldr	r2, .L614+4
 7852 000c 0092     		str	r2, [sp]
 7853 000e 181C     		mov	r0, r3
 7854 0010 6921     		mov	r1, #105
 7855 0012 0522     		mov	r2, #5
 7856 0014 0223     		mov	r3, #2
 7857 0016 FFF7FEFF 		bl	I2CReadBits
2255:.\mpu6050.c   ****     return buffer[0];
 7858              		.loc 1 2255 0
 7859 001a 034B     		ldr	r3, .L614+4
 7860 001c 1B78     		ldrb	r3, [r3]
2256:.\mpu6050.c   **** }
 7861              		.loc 1 2256 0
 7862 001e 181C     		mov	r0, r3
 7863 0020 BD46     		mov	sp, r7
 7864              		@ sp needed
 7865 0022 80BD     		pop	{r7, pc}
 7866              	.L615:
 7867              		.align	2
 7868              	.L614:
 7869 0024 00000000 		.word	devAddr
 7870 0028 00000000 		.word	buffer
 7871              		.cfi_endproc
 7872              	.LFE166:
 7873              		.size	MPU6050_getAccelerometerPowerOnDelay, .-MPU6050_getAccelerometerPowerOnDelay
 7874              		.section	.text.MPU6050_setAccelerometerPowerOnDelay,"ax",%progbits
 7875              		.align	2
 7876              		.global	MPU6050_setAccelerometerPowerOnDelay
 7877              		.code	16
 7878              		.thumb_func
 7879              		.type	MPU6050_setAccelerometerPowerOnDelay, %function
 7880              	MPU6050_setAccelerometerPowerOnDelay:
 7881              	.LFB167:
2257:.\mpu6050.c   **** /** Set accelerometer power-on delay.
2258:.\mpu6050.c   ****  * @param delay New accelerometer power-on delay (0-3)
2259:.\mpu6050.c   ****  * @see getAccelerometerPowerOnDelay()
2260:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2261:.\mpu6050.c   ****  * @see MPU6050_DETECT_ACCEL_ON_DELAY_BIT
2262:.\mpu6050.c   ****  */
2263:.\mpu6050.c   **** void MPU6050_setAccelerometerPowerOnDelay(uint8_t delay) {
 7882              		.loc 1 2263 0
 7883              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 179


 7884 0000 80B5     		push	{r7, lr}
 7885              		.cfi_def_cfa_offset 8
 7886              		.cfi_offset 7, -8
 7887              		.cfi_offset 14, -4
 7888 0002 84B0     		sub	sp, sp, #16
 7889              		.cfi_def_cfa_offset 24
 7890 0004 02AF     		add	r7, sp, #8
 7891              		.cfi_def_cfa 7, 16
 7892 0006 021C     		mov	r2, r0
 7893 0008 FB1D     		add	r3, r7, #7
 7894 000a 1A70     		strb	r2, [r3]
2264:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_ACCEL_ON_DELAY_BIT, MPU6050_DE
 7895              		.loc 1 2264 0
 7896 000c 064B     		ldr	r3, .L617
 7897 000e 1B78     		ldrb	r3, [r3]
 7898 0010 FA1D     		add	r2, r7, #7
 7899 0012 1278     		ldrb	r2, [r2]
 7900 0014 0092     		str	r2, [sp]
 7901 0016 181C     		mov	r0, r3
 7902 0018 6921     		mov	r1, #105
 7903 001a 0522     		mov	r2, #5
 7904 001c 0223     		mov	r3, #2
 7905 001e FFF7FEFF 		bl	I2CWriteBits
2265:.\mpu6050.c   **** }
 7906              		.loc 1 2265 0
 7907 0022 BD46     		mov	sp, r7
 7908 0024 02B0     		add	sp, sp, #8
 7909              		@ sp needed
 7910 0026 80BD     		pop	{r7, pc}
 7911              	.L618:
 7912              		.align	2
 7913              	.L617:
 7914 0028 00000000 		.word	devAddr
 7915              		.cfi_endproc
 7916              	.LFE167:
 7917              		.size	MPU6050_setAccelerometerPowerOnDelay, .-MPU6050_setAccelerometerPowerOnDelay
 7918              		.section	.text.MPU6050_getFreefallDetectionCounterDecrement,"ax",%progbits
 7919              		.align	2
 7920              		.global	MPU6050_getFreefallDetectionCounterDecrement
 7921              		.code	16
 7922              		.thumb_func
 7923              		.type	MPU6050_getFreefallDetectionCounterDecrement, %function
 7924              	MPU6050_getFreefallDetectionCounterDecrement:
 7925              	.LFB168:
2266:.\mpu6050.c   **** /** Get Free Fall detection counter decrement configuration.
2267:.\mpu6050.c   ****  * Detection is registered by the Free Fall detection module after accelerometer
2268:.\mpu6050.c   ****  * measurements meet their respective threshold conditions over a specified
2269:.\mpu6050.c   ****  * number of samples. When the threshold conditions are met, the corresponding
2270:.\mpu6050.c   ****  * detection counter increments by 1. The user may control the rate at which the
2271:.\mpu6050.c   ****  * detection counter decrements when the threshold condition is not met by
2272:.\mpu6050.c   ****  * configuring FF_COUNT. The decrement rate can be set according to the
2273:.\mpu6050.c   ****  * following table:
2274:.\mpu6050.c   ****  *
2275:.\mpu6050.c   ****  * <pre>
2276:.\mpu6050.c   ****  * FF_COUNT | Counter Decrement
2277:.\mpu6050.c   ****  * ---------+------------------
2278:.\mpu6050.c   ****  * 0        | Reset
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 180


2279:.\mpu6050.c   ****  * 1        | 1
2280:.\mpu6050.c   ****  * 2        | 2
2281:.\mpu6050.c   ****  * 3        | 4
2282:.\mpu6050.c   ****  * </pre>
2283:.\mpu6050.c   ****  *
2284:.\mpu6050.c   ****  * When FF_COUNT is configured to 0 (reset), any non-qualifying sample will
2285:.\mpu6050.c   ****  * reset the counter to 0. For further information on Free Fall detection,
2286:.\mpu6050.c   ****  * please refer to Registers 29 to 32.
2287:.\mpu6050.c   ****  *
2288:.\mpu6050.c   ****  * @return Current decrement configuration
2289:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2290:.\mpu6050.c   ****  * @see MPU6050_DETECT_FF_COUNT_BIT
2291:.\mpu6050.c   ****  */
2292:.\mpu6050.c   **** uint8_t MPU6050_getFreefallDetectionCounterDecrement() {
 7926              		.loc 1 2292 0
 7927              		.cfi_startproc
 7928 0000 80B5     		push	{r7, lr}
 7929              		.cfi_def_cfa_offset 8
 7930              		.cfi_offset 7, -8
 7931              		.cfi_offset 14, -4
 7932 0002 82B0     		sub	sp, sp, #8
 7933              		.cfi_def_cfa_offset 16
 7934 0004 02AF     		add	r7, sp, #8
 7935              		.cfi_def_cfa 7, 8
2293:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_FF_COUNT_BIT, MPU6050_DETECT_FF
 7936              		.loc 1 2293 0
 7937 0006 074B     		ldr	r3, .L621
 7938 0008 1B78     		ldrb	r3, [r3]
 7939 000a 074A     		ldr	r2, .L621+4
 7940 000c 0092     		str	r2, [sp]
 7941 000e 181C     		mov	r0, r3
 7942 0010 6921     		mov	r1, #105
 7943 0012 0322     		mov	r2, #3
 7944 0014 0223     		mov	r3, #2
 7945 0016 FFF7FEFF 		bl	I2CReadBits
2294:.\mpu6050.c   ****     return buffer[0];
 7946              		.loc 1 2294 0
 7947 001a 034B     		ldr	r3, .L621+4
 7948 001c 1B78     		ldrb	r3, [r3]
2295:.\mpu6050.c   **** }
 7949              		.loc 1 2295 0
 7950 001e 181C     		mov	r0, r3
 7951 0020 BD46     		mov	sp, r7
 7952              		@ sp needed
 7953 0022 80BD     		pop	{r7, pc}
 7954              	.L622:
 7955              		.align	2
 7956              	.L621:
 7957 0024 00000000 		.word	devAddr
 7958 0028 00000000 		.word	buffer
 7959              		.cfi_endproc
 7960              	.LFE168:
 7961              		.size	MPU6050_getFreefallDetectionCounterDecrement, .-MPU6050_getFreefallDetectionCounterDecrement
 7962              		.section	.text.MPU6050_setFreefallDetectionCounterDecrement,"ax",%progbits
 7963              		.align	2
 7964              		.global	MPU6050_setFreefallDetectionCounterDecrement
 7965              		.code	16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 181


 7966              		.thumb_func
 7967              		.type	MPU6050_setFreefallDetectionCounterDecrement, %function
 7968              	MPU6050_setFreefallDetectionCounterDecrement:
 7969              	.LFB169:
2296:.\mpu6050.c   **** /** Set Free Fall detection counter decrement configuration.
2297:.\mpu6050.c   ****  * @param decrement New decrement configuration value
2298:.\mpu6050.c   ****  * @see getFreefallDetectionCounterDecrement()
2299:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2300:.\mpu6050.c   ****  * @see MPU6050_DETECT_FF_COUNT_BIT
2301:.\mpu6050.c   ****  */
2302:.\mpu6050.c   **** void MPU6050_setFreefallDetectionCounterDecrement(uint8_t decrement) {
 7970              		.loc 1 2302 0
 7971              		.cfi_startproc
 7972 0000 80B5     		push	{r7, lr}
 7973              		.cfi_def_cfa_offset 8
 7974              		.cfi_offset 7, -8
 7975              		.cfi_offset 14, -4
 7976 0002 84B0     		sub	sp, sp, #16
 7977              		.cfi_def_cfa_offset 24
 7978 0004 02AF     		add	r7, sp, #8
 7979              		.cfi_def_cfa 7, 16
 7980 0006 021C     		mov	r2, r0
 7981 0008 FB1D     		add	r3, r7, #7
 7982 000a 1A70     		strb	r2, [r3]
2303:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_FF_COUNT_BIT, MPU6050_DETECT_F
 7983              		.loc 1 2303 0
 7984 000c 064B     		ldr	r3, .L624
 7985 000e 1B78     		ldrb	r3, [r3]
 7986 0010 FA1D     		add	r2, r7, #7
 7987 0012 1278     		ldrb	r2, [r2]
 7988 0014 0092     		str	r2, [sp]
 7989 0016 181C     		mov	r0, r3
 7990 0018 6921     		mov	r1, #105
 7991 001a 0322     		mov	r2, #3
 7992 001c 0223     		mov	r3, #2
 7993 001e FFF7FEFF 		bl	I2CWriteBits
2304:.\mpu6050.c   **** }
 7994              		.loc 1 2304 0
 7995 0022 BD46     		mov	sp, r7
 7996 0024 02B0     		add	sp, sp, #8
 7997              		@ sp needed
 7998 0026 80BD     		pop	{r7, pc}
 7999              	.L625:
 8000              		.align	2
 8001              	.L624:
 8002 0028 00000000 		.word	devAddr
 8003              		.cfi_endproc
 8004              	.LFE169:
 8005              		.size	MPU6050_setFreefallDetectionCounterDecrement, .-MPU6050_setFreefallDetectionCounterDecrement
 8006              		.section	.text.MPU6050_getMotionDetectionCounterDecrement,"ax",%progbits
 8007              		.align	2
 8008              		.global	MPU6050_getMotionDetectionCounterDecrement
 8009              		.code	16
 8010              		.thumb_func
 8011              		.type	MPU6050_getMotionDetectionCounterDecrement, %function
 8012              	MPU6050_getMotionDetectionCounterDecrement:
 8013              	.LFB170:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 182


2305:.\mpu6050.c   **** /** Get Motion detection counter decrement configuration.
2306:.\mpu6050.c   ****  * Detection is registered by the Motion detection module after accelerometer
2307:.\mpu6050.c   ****  * measurements meet their respective threshold conditions over a specified
2308:.\mpu6050.c   ****  * number of samples. When the threshold conditions are met, the corresponding
2309:.\mpu6050.c   ****  * detection counter increments by 1. The user may control the rate at which the
2310:.\mpu6050.c   ****  * detection counter decrements when the threshold condition is not met by
2311:.\mpu6050.c   ****  * configuring MOT_COUNT. The decrement rate can be set according to the
2312:.\mpu6050.c   ****  * following table:
2313:.\mpu6050.c   ****  *
2314:.\mpu6050.c   ****  * <pre>
2315:.\mpu6050.c   ****  * MOT_COUNT | Counter Decrement
2316:.\mpu6050.c   ****  * ----------+------------------
2317:.\mpu6050.c   ****  * 0         | Reset
2318:.\mpu6050.c   ****  * 1         | 1
2319:.\mpu6050.c   ****  * 2         | 2
2320:.\mpu6050.c   ****  * 3         | 4
2321:.\mpu6050.c   ****  * </pre>
2322:.\mpu6050.c   ****  *
2323:.\mpu6050.c   ****  * When MOT_COUNT is configured to 0 (reset), any non-qualifying sample will
2324:.\mpu6050.c   ****  * reset the counter to 0. For further information on Motion detection,
2325:.\mpu6050.c   ****  * please refer to Registers 29 to 32.
2326:.\mpu6050.c   ****  *
2327:.\mpu6050.c   ****  */
2328:.\mpu6050.c   **** uint8_t MPU6050_getMotionDetectionCounterDecrement() {
 8014              		.loc 1 2328 0
 8015              		.cfi_startproc
 8016 0000 80B5     		push	{r7, lr}
 8017              		.cfi_def_cfa_offset 8
 8018              		.cfi_offset 7, -8
 8019              		.cfi_offset 14, -4
 8020 0002 82B0     		sub	sp, sp, #8
 8021              		.cfi_def_cfa_offset 16
 8022 0004 02AF     		add	r7, sp, #8
 8023              		.cfi_def_cfa 7, 8
2329:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_MOT_COUNT_BIT, MPU6050_DETECT_M
 8024              		.loc 1 2329 0
 8025 0006 074B     		ldr	r3, .L628
 8026 0008 1B78     		ldrb	r3, [r3]
 8027 000a 074A     		ldr	r2, .L628+4
 8028 000c 0092     		str	r2, [sp]
 8029 000e 181C     		mov	r0, r3
 8030 0010 6921     		mov	r1, #105
 8031 0012 0122     		mov	r2, #1
 8032 0014 0223     		mov	r3, #2
 8033 0016 FFF7FEFF 		bl	I2CReadBits
2330:.\mpu6050.c   ****     return buffer[0];
 8034              		.loc 1 2330 0
 8035 001a 034B     		ldr	r3, .L628+4
 8036 001c 1B78     		ldrb	r3, [r3]
2331:.\mpu6050.c   **** }
 8037              		.loc 1 2331 0
 8038 001e 181C     		mov	r0, r3
 8039 0020 BD46     		mov	sp, r7
 8040              		@ sp needed
 8041 0022 80BD     		pop	{r7, pc}
 8042              	.L629:
 8043              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 183


 8044              	.L628:
 8045 0024 00000000 		.word	devAddr
 8046 0028 00000000 		.word	buffer
 8047              		.cfi_endproc
 8048              	.LFE170:
 8049              		.size	MPU6050_getMotionDetectionCounterDecrement, .-MPU6050_getMotionDetectionCounterDecrement
 8050              		.section	.text.MPU6050_setMotionDetectionCounterDecrement,"ax",%progbits
 8051              		.align	2
 8052              		.global	MPU6050_setMotionDetectionCounterDecrement
 8053              		.code	16
 8054              		.thumb_func
 8055              		.type	MPU6050_setMotionDetectionCounterDecrement, %function
 8056              	MPU6050_setMotionDetectionCounterDecrement:
 8057              	.LFB171:
2332:.\mpu6050.c   **** /** Set Motion detection counter decrement configuration.
2333:.\mpu6050.c   ****  * @param decrement New decrement configuration value
2334:.\mpu6050.c   ****  * @see getMotionDetectionCounterDecrement()
2335:.\mpu6050.c   ****  * @see MPU6050_RA_MOT_DETECT_CTRL
2336:.\mpu6050.c   ****  * @see MPU6050_DETECT_MOT_COUNT_BIT
2337:.\mpu6050.c   ****  */
2338:.\mpu6050.c   **** void MPU6050_setMotionDetectionCounterDecrement(uint8_t decrement) {
 8058              		.loc 1 2338 0
 8059              		.cfi_startproc
 8060 0000 80B5     		push	{r7, lr}
 8061              		.cfi_def_cfa_offset 8
 8062              		.cfi_offset 7, -8
 8063              		.cfi_offset 14, -4
 8064 0002 84B0     		sub	sp, sp, #16
 8065              		.cfi_def_cfa_offset 24
 8066 0004 02AF     		add	r7, sp, #8
 8067              		.cfi_def_cfa 7, 16
 8068 0006 021C     		mov	r2, r0
 8069 0008 FB1D     		add	r3, r7, #7
 8070 000a 1A70     		strb	r2, [r3]
2339:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_MOT_COUNT_BIT, MPU6050_DETECT_
 8071              		.loc 1 2339 0
 8072 000c 064B     		ldr	r3, .L631
 8073 000e 1B78     		ldrb	r3, [r3]
 8074 0010 FA1D     		add	r2, r7, #7
 8075 0012 1278     		ldrb	r2, [r2]
 8076 0014 0092     		str	r2, [sp]
 8077 0016 181C     		mov	r0, r3
 8078 0018 6921     		mov	r1, #105
 8079 001a 0122     		mov	r2, #1
 8080 001c 0223     		mov	r3, #2
 8081 001e FFF7FEFF 		bl	I2CWriteBits
2340:.\mpu6050.c   **** }
 8082              		.loc 1 2340 0
 8083 0022 BD46     		mov	sp, r7
 8084 0024 02B0     		add	sp, sp, #8
 8085              		@ sp needed
 8086 0026 80BD     		pop	{r7, pc}
 8087              	.L632:
 8088              		.align	2
 8089              	.L631:
 8090 0028 00000000 		.word	devAddr
 8091              		.cfi_endproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 184


 8092              	.LFE171:
 8093              		.size	MPU6050_setMotionDetectionCounterDecrement, .-MPU6050_setMotionDetectionCounterDecrement
 8094              		.section	.text.MPU6050_getFIFOEnabled,"ax",%progbits
 8095              		.align	2
 8096              		.global	MPU6050_getFIFOEnabled
 8097              		.code	16
 8098              		.thumb_func
 8099              		.type	MPU6050_getFIFOEnabled, %function
 8100              	MPU6050_getFIFOEnabled:
 8101              	.LFB172:
2341:.\mpu6050.c   **** 
2342:.\mpu6050.c   **** // USER_CTRL register
2343:.\mpu6050.c   **** 
2344:.\mpu6050.c   **** /** Get FIFO enabled status.
2345:.\mpu6050.c   ****  * When this bit is set to 0, the FIFO buffer is disabled. The FIFO buffer
2346:.\mpu6050.c   ****  * cannot be written to or read from while disabled. The FIFO buffer's state
2347:.\mpu6050.c   ****  * does not change unless the MPU-60X0 is power cycled.
2348:.\mpu6050.c   ****  * @return Current FIFO enabled status
2349:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2350:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_FIFO_EN_BIT
2351:.\mpu6050.c   ****  */
2352:.\mpu6050.c   **** bool MPU6050_getFIFOEnabled() {
 8102              		.loc 1 2352 0
 8103              		.cfi_startproc
 8104 0000 80B5     		push	{r7, lr}
 8105              		.cfi_def_cfa_offset 8
 8106              		.cfi_offset 7, -8
 8107              		.cfi_offset 14, -4
 8108 0002 00AF     		add	r7, sp, #0
 8109              		.cfi_def_cfa_register 7
2353:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, buffer);
 8110              		.loc 1 2353 0
 8111 0004 074B     		ldr	r3, .L635
 8112 0006 1A78     		ldrb	r2, [r3]
 8113 0008 074B     		ldr	r3, .L635+4
 8114 000a 101C     		mov	r0, r2
 8115 000c 6A21     		mov	r1, #106
 8116 000e 0622     		mov	r2, #6
 8117 0010 FFF7FEFF 		bl	I2CReadBit
2354:.\mpu6050.c   ****     return buffer[0];
 8118              		.loc 1 2354 0
 8119 0014 044B     		ldr	r3, .L635+4
 8120 0016 1B78     		ldrb	r3, [r3]
 8121 0018 5A1E     		sub	r2, r3, #1
 8122 001a 9341     		sbc	r3, r3, r2
 8123 001c DBB2     		uxtb	r3, r3
2355:.\mpu6050.c   **** }
 8124              		.loc 1 2355 0
 8125 001e 181C     		mov	r0, r3
 8126 0020 BD46     		mov	sp, r7
 8127              		@ sp needed
 8128 0022 80BD     		pop	{r7, pc}
 8129              	.L636:
 8130              		.align	2
 8131              	.L635:
 8132 0024 00000000 		.word	devAddr
 8133 0028 00000000 		.word	buffer
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 185


 8134              		.cfi_endproc
 8135              	.LFE172:
 8136              		.size	MPU6050_getFIFOEnabled, .-MPU6050_getFIFOEnabled
 8137              		.section	.text.MPU6050_setFIFOEnabled,"ax",%progbits
 8138              		.align	2
 8139              		.global	MPU6050_setFIFOEnabled
 8140              		.code	16
 8141              		.thumb_func
 8142              		.type	MPU6050_setFIFOEnabled, %function
 8143              	MPU6050_setFIFOEnabled:
 8144              	.LFB173:
2356:.\mpu6050.c   **** /** Set FIFO enabled status.
2357:.\mpu6050.c   ****  * @param enabled New FIFO enabled status
2358:.\mpu6050.c   ****  * @see getFIFOEnabled()
2359:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2360:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_FIFO_EN_BIT
2361:.\mpu6050.c   ****  */
2362:.\mpu6050.c   **** void MPU6050_setFIFOEnabled(bool enabled) {
 8145              		.loc 1 2362 0
 8146              		.cfi_startproc
 8147 0000 80B5     		push	{r7, lr}
 8148              		.cfi_def_cfa_offset 8
 8149              		.cfi_offset 7, -8
 8150              		.cfi_offset 14, -4
 8151 0002 82B0     		sub	sp, sp, #8
 8152              		.cfi_def_cfa_offset 16
 8153 0004 00AF     		add	r7, sp, #0
 8154              		.cfi_def_cfa_register 7
 8155 0006 021C     		mov	r2, r0
 8156 0008 FB1D     		add	r3, r7, #7
 8157 000a 1A70     		strb	r2, [r3]
2363:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8158              		.loc 1 2363 0
 8159 000c 054B     		ldr	r3, .L638
 8160 000e 1A78     		ldrb	r2, [r3]
 8161 0010 FB1D     		add	r3, r7, #7
 8162 0012 1B78     		ldrb	r3, [r3]
 8163 0014 101C     		mov	r0, r2
 8164 0016 6A21     		mov	r1, #106
 8165 0018 0622     		mov	r2, #6
 8166 001a FFF7FEFF 		bl	I2CWriteBit
2364:.\mpu6050.c   **** }
 8167              		.loc 1 2364 0
 8168 001e BD46     		mov	sp, r7
 8169 0020 02B0     		add	sp, sp, #8
 8170              		@ sp needed
 8171 0022 80BD     		pop	{r7, pc}
 8172              	.L639:
 8173              		.align	2
 8174              	.L638:
 8175 0024 00000000 		.word	devAddr
 8176              		.cfi_endproc
 8177              	.LFE173:
 8178              		.size	MPU6050_setFIFOEnabled, .-MPU6050_setFIFOEnabled
 8179              		.section	.text.MPU6050_getI2CMasterModeEnabled,"ax",%progbits
 8180              		.align	2
 8181              		.global	MPU6050_getI2CMasterModeEnabled
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 186


 8182              		.code	16
 8183              		.thumb_func
 8184              		.type	MPU6050_getI2CMasterModeEnabled, %function
 8185              	MPU6050_getI2CMasterModeEnabled:
 8186              	.LFB174:
2365:.\mpu6050.c   **** /** Get I2C Master Mode enabled status.
2366:.\mpu6050.c   ****  * When this mode is enabled, the MPU-60X0 acts as the I2C Master to the
2367:.\mpu6050.c   ****  * external sensor slave devices on the auxiliary I2C bus. When this bit is
2368:.\mpu6050.c   ****  * cleared to 0, the auxiliary I2C bus lines (AUX_DA and AUX_CL) are logically
2369:.\mpu6050.c   ****  * driven by the primary I2C bus (SDA and SCL). This is a precondition to
2370:.\mpu6050.c   ****  * enabling Bypass Mode. For further information regarding Bypass Mode, please
2371:.\mpu6050.c   ****  * refer to Register 55.
2372:.\mpu6050.c   ****  * @return Current I2C Master Mode enabled status
2373:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2374:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
2375:.\mpu6050.c   ****  */
2376:.\mpu6050.c   **** bool MPU6050_getI2CMasterModeEnabled() {
 8187              		.loc 1 2376 0
 8188              		.cfi_startproc
 8189 0000 80B5     		push	{r7, lr}
 8190              		.cfi_def_cfa_offset 8
 8191              		.cfi_offset 7, -8
 8192              		.cfi_offset 14, -4
 8193 0002 00AF     		add	r7, sp, #0
 8194              		.cfi_def_cfa_register 7
2377:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, buffer);
 8195              		.loc 1 2377 0
 8196 0004 074B     		ldr	r3, .L642
 8197 0006 1A78     		ldrb	r2, [r3]
 8198 0008 074B     		ldr	r3, .L642+4
 8199 000a 101C     		mov	r0, r2
 8200 000c 6A21     		mov	r1, #106
 8201 000e 0522     		mov	r2, #5
 8202 0010 FFF7FEFF 		bl	I2CReadBit
2378:.\mpu6050.c   ****     return buffer[0];
 8203              		.loc 1 2378 0
 8204 0014 044B     		ldr	r3, .L642+4
 8205 0016 1B78     		ldrb	r3, [r3]
 8206 0018 5A1E     		sub	r2, r3, #1
 8207 001a 9341     		sbc	r3, r3, r2
 8208 001c DBB2     		uxtb	r3, r3
2379:.\mpu6050.c   **** }
 8209              		.loc 1 2379 0
 8210 001e 181C     		mov	r0, r3
 8211 0020 BD46     		mov	sp, r7
 8212              		@ sp needed
 8213 0022 80BD     		pop	{r7, pc}
 8214              	.L643:
 8215              		.align	2
 8216              	.L642:
 8217 0024 00000000 		.word	devAddr
 8218 0028 00000000 		.word	buffer
 8219              		.cfi_endproc
 8220              	.LFE174:
 8221              		.size	MPU6050_getI2CMasterModeEnabled, .-MPU6050_getI2CMasterModeEnabled
 8222              		.section	.text.MPU6050_setI2CMasterModeEnabled,"ax",%progbits
 8223              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 187


 8224              		.global	MPU6050_setI2CMasterModeEnabled
 8225              		.code	16
 8226              		.thumb_func
 8227              		.type	MPU6050_setI2CMasterModeEnabled, %function
 8228              	MPU6050_setI2CMasterModeEnabled:
 8229              	.LFB175:
2380:.\mpu6050.c   **** /** Set I2C Master Mode enabled status.
2381:.\mpu6050.c   ****  * @param enabled New I2C Master Mode enabled status
2382:.\mpu6050.c   ****  * @see getI2CMasterModeEnabled()
2383:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2384:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
2385:.\mpu6050.c   ****  */
2386:.\mpu6050.c   **** void MPU6050_setI2CMasterModeEnabled(bool enabled) {
 8230              		.loc 1 2386 0
 8231              		.cfi_startproc
 8232 0000 80B5     		push	{r7, lr}
 8233              		.cfi_def_cfa_offset 8
 8234              		.cfi_offset 7, -8
 8235              		.cfi_offset 14, -4
 8236 0002 82B0     		sub	sp, sp, #8
 8237              		.cfi_def_cfa_offset 16
 8238 0004 00AF     		add	r7, sp, #0
 8239              		.cfi_def_cfa_register 7
 8240 0006 021C     		mov	r2, r0
 8241 0008 FB1D     		add	r3, r7, #7
 8242 000a 1A70     		strb	r2, [r3]
2387:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8243              		.loc 1 2387 0
 8244 000c 054B     		ldr	r3, .L645
 8245 000e 1A78     		ldrb	r2, [r3]
 8246 0010 FB1D     		add	r3, r7, #7
 8247 0012 1B78     		ldrb	r3, [r3]
 8248 0014 101C     		mov	r0, r2
 8249 0016 6A21     		mov	r1, #106
 8250 0018 0522     		mov	r2, #5
 8251 001a FFF7FEFF 		bl	I2CWriteBit
2388:.\mpu6050.c   **** }
 8252              		.loc 1 2388 0
 8253 001e BD46     		mov	sp, r7
 8254 0020 02B0     		add	sp, sp, #8
 8255              		@ sp needed
 8256 0022 80BD     		pop	{r7, pc}
 8257              	.L646:
 8258              		.align	2
 8259              	.L645:
 8260 0024 00000000 		.word	devAddr
 8261              		.cfi_endproc
 8262              	.LFE175:
 8263              		.size	MPU6050_setI2CMasterModeEnabled, .-MPU6050_setI2CMasterModeEnabled
 8264              		.section	.text.MPU6050_switchSPIEnabled,"ax",%progbits
 8265              		.align	2
 8266              		.global	MPU6050_switchSPIEnabled
 8267              		.code	16
 8268              		.thumb_func
 8269              		.type	MPU6050_switchSPIEnabled, %function
 8270              	MPU6050_switchSPIEnabled:
 8271              	.LFB176:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 188


2389:.\mpu6050.c   **** /** Switch from I2C to SPI mode (MPU-6000 only)
2390:.\mpu6050.c   ****  * If this is set, the primary SPI interface will be enabled in place of the
2391:.\mpu6050.c   ****  * disabled primary I2C interface.
2392:.\mpu6050.c   ****  */
2393:.\mpu6050.c   **** void MPU6050_switchSPIEnabled(bool enabled) {
 8272              		.loc 1 2393 0
 8273              		.cfi_startproc
 8274 0000 80B5     		push	{r7, lr}
 8275              		.cfi_def_cfa_offset 8
 8276              		.cfi_offset 7, -8
 8277              		.cfi_offset 14, -4
 8278 0002 82B0     		sub	sp, sp, #8
 8279              		.cfi_def_cfa_offset 16
 8280 0004 00AF     		add	r7, sp, #0
 8281              		.cfi_def_cfa_register 7
 8282 0006 021C     		mov	r2, r0
 8283 0008 FB1D     		add	r3, r7, #7
 8284 000a 1A70     		strb	r2, [r3]
2394:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_IF_DIS_BIT, enabled);
 8285              		.loc 1 2394 0
 8286 000c 054B     		ldr	r3, .L648
 8287 000e 1A78     		ldrb	r2, [r3]
 8288 0010 FB1D     		add	r3, r7, #7
 8289 0012 1B78     		ldrb	r3, [r3]
 8290 0014 101C     		mov	r0, r2
 8291 0016 6A21     		mov	r1, #106
 8292 0018 0422     		mov	r2, #4
 8293 001a FFF7FEFF 		bl	I2CWriteBit
2395:.\mpu6050.c   **** }
 8294              		.loc 1 2395 0
 8295 001e BD46     		mov	sp, r7
 8296 0020 02B0     		add	sp, sp, #8
 8297              		@ sp needed
 8298 0022 80BD     		pop	{r7, pc}
 8299              	.L649:
 8300              		.align	2
 8301              	.L648:
 8302 0024 00000000 		.word	devAddr
 8303              		.cfi_endproc
 8304              	.LFE176:
 8305              		.size	MPU6050_switchSPIEnabled, .-MPU6050_switchSPIEnabled
 8306              		.section	.text.MPU6050_resetFIFO,"ax",%progbits
 8307              		.align	2
 8308              		.global	MPU6050_resetFIFO
 8309              		.code	16
 8310              		.thumb_func
 8311              		.type	MPU6050_resetFIFO, %function
 8312              	MPU6050_resetFIFO:
 8313              	.LFB177:
2396:.\mpu6050.c   **** /** Reset the FIFO.
2397:.\mpu6050.c   ****  * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
2398:.\mpu6050.c   ****  * bit automatically clears to 0 after the reset has been triggered.
2399:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2400:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_FIFO_RESET_BIT
2401:.\mpu6050.c   ****  */
2402:.\mpu6050.c   **** void MPU6050_resetFIFO() {
 8314              		.loc 1 2402 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 189


 8315              		.cfi_startproc
 8316 0000 80B5     		push	{r7, lr}
 8317              		.cfi_def_cfa_offset 8
 8318              		.cfi_offset 7, -8
 8319              		.cfi_offset 14, -4
 8320 0002 00AF     		add	r7, sp, #0
 8321              		.cfi_def_cfa_register 7
2403:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8322              		.loc 1 2403 0
 8323 0004 044B     		ldr	r3, .L651
 8324 0006 1B78     		ldrb	r3, [r3]
 8325 0008 181C     		mov	r0, r3
 8326 000a 6A21     		mov	r1, #106
 8327 000c 0222     		mov	r2, #2
 8328 000e 0123     		mov	r3, #1
 8329 0010 FFF7FEFF 		bl	I2CWriteBit
2404:.\mpu6050.c   **** }
 8330              		.loc 1 2404 0
 8331 0014 BD46     		mov	sp, r7
 8332              		@ sp needed
 8333 0016 80BD     		pop	{r7, pc}
 8334              	.L652:
 8335              		.align	2
 8336              	.L651:
 8337 0018 00000000 		.word	devAddr
 8338              		.cfi_endproc
 8339              	.LFE177:
 8340              		.size	MPU6050_resetFIFO, .-MPU6050_resetFIFO
 8341              		.section	.text.MPU6050_resetI2CMaster,"ax",%progbits
 8342              		.align	2
 8343              		.global	MPU6050_resetI2CMaster
 8344              		.code	16
 8345              		.thumb_func
 8346              		.type	MPU6050_resetI2CMaster, %function
 8347              	MPU6050_resetI2CMaster:
 8348              	.LFB178:
2405:.\mpu6050.c   **** /** Reset the I2C Master.
2406:.\mpu6050.c   ****  * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
2407:.\mpu6050.c   ****  * This bit automatically clears to 0 after the reset has been triggered.
2408:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2409:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
2410:.\mpu6050.c   ****  */
2411:.\mpu6050.c   **** void MPU6050_resetI2CMaster() {
 8349              		.loc 1 2411 0
 8350              		.cfi_startproc
 8351 0000 80B5     		push	{r7, lr}
 8352              		.cfi_def_cfa_offset 8
 8353              		.cfi_offset 7, -8
 8354              		.cfi_offset 14, -4
 8355 0002 00AF     		add	r7, sp, #0
 8356              		.cfi_def_cfa_register 7
2412:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8357              		.loc 1 2412 0
 8358 0004 044B     		ldr	r3, .L654
 8359 0006 1B78     		ldrb	r3, [r3]
 8360 0008 181C     		mov	r0, r3
 8361 000a 6A21     		mov	r1, #106
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 190


 8362 000c 0122     		mov	r2, #1
 8363 000e 0123     		mov	r3, #1
 8364 0010 FFF7FEFF 		bl	I2CWriteBit
2413:.\mpu6050.c   **** }
 8365              		.loc 1 2413 0
 8366 0014 BD46     		mov	sp, r7
 8367              		@ sp needed
 8368 0016 80BD     		pop	{r7, pc}
 8369              	.L655:
 8370              		.align	2
 8371              	.L654:
 8372 0018 00000000 		.word	devAddr
 8373              		.cfi_endproc
 8374              	.LFE178:
 8375              		.size	MPU6050_resetI2CMaster, .-MPU6050_resetI2CMaster
 8376              		.section	.text.MPU6050_resetSensors,"ax",%progbits
 8377              		.align	2
 8378              		.global	MPU6050_resetSensors
 8379              		.code	16
 8380              		.thumb_func
 8381              		.type	MPU6050_resetSensors, %function
 8382              	MPU6050_resetSensors:
 8383              	.LFB179:
2414:.\mpu6050.c   **** /** Reset all sensor registers and signal paths.
2415:.\mpu6050.c   ****  * When set to 1, this bit resets the signal paths for all sensors (gyroscopes,
2416:.\mpu6050.c   ****  * accelerometers, and temperature sensor). This operation will also clear the
2417:.\mpu6050.c   ****  * sensor registers. This bit automatically clears to 0 after the reset has been
2418:.\mpu6050.c   ****  * triggered.
2419:.\mpu6050.c   ****  *
2420:.\mpu6050.c   ****  * When resetting only the signal path (and not the sensor registers), please
2421:.\mpu6050.c   ****  * use Register 104, SIGNAL_PATH_RESET.
2422:.\mpu6050.c   ****  *
2423:.\mpu6050.c   ****  * @see MPU6050_RA_USER_CTRL
2424:.\mpu6050.c   ****  * @see MPU6050_USERCTRL_SIG_COND_RESET_BIT
2425:.\mpu6050.c   ****  */
2426:.\mpu6050.c   **** void MPU6050_resetSensors() {
 8384              		.loc 1 2426 0
 8385              		.cfi_startproc
 8386 0000 80B5     		push	{r7, lr}
 8387              		.cfi_def_cfa_offset 8
 8388              		.cfi_offset 7, -8
 8389              		.cfi_offset 14, -4
 8390 0002 00AF     		add	r7, sp, #0
 8391              		.cfi_def_cfa_register 7
2427:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_SIG_COND_RESET_BIT, true);
 8392              		.loc 1 2427 0
 8393 0004 044B     		ldr	r3, .L657
 8394 0006 1B78     		ldrb	r3, [r3]
 8395 0008 181C     		mov	r0, r3
 8396 000a 6A21     		mov	r1, #106
 8397 000c 0022     		mov	r2, #0
 8398 000e 0123     		mov	r3, #1
 8399 0010 FFF7FEFF 		bl	I2CWriteBit
2428:.\mpu6050.c   **** }
 8400              		.loc 1 2428 0
 8401 0014 BD46     		mov	sp, r7
 8402              		@ sp needed
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 191


 8403 0016 80BD     		pop	{r7, pc}
 8404              	.L658:
 8405              		.align	2
 8406              	.L657:
 8407 0018 00000000 		.word	devAddr
 8408              		.cfi_endproc
 8409              	.LFE179:
 8410              		.size	MPU6050_resetSensors, .-MPU6050_resetSensors
 8411              		.section	.text.MPU6050_reset,"ax",%progbits
 8412              		.align	2
 8413              		.global	MPU6050_reset
 8414              		.code	16
 8415              		.thumb_func
 8416              		.type	MPU6050_reset, %function
 8417              	MPU6050_reset:
 8418              	.LFB180:
2429:.\mpu6050.c   **** 
2430:.\mpu6050.c   **** // PWR_MGMT_1 register
2431:.\mpu6050.c   **** 
2432:.\mpu6050.c   **** /** Trigger a full device reset.
2433:.\mpu6050.c   ****  * A small delay of ~50ms may be desirable after triggering a reset.
2434:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2435:.\mpu6050.c   ****  * @see MPU6050_PWR1_DEVICE_RESET_BIT
2436:.\mpu6050.c   ****  */
2437:.\mpu6050.c   **** void MPU6050_reset() {
 8419              		.loc 1 2437 0
 8420              		.cfi_startproc
 8421 0000 80B5     		push	{r7, lr}
 8422              		.cfi_def_cfa_offset 8
 8423              		.cfi_offset 7, -8
 8424              		.cfi_offset 14, -4
 8425 0002 00AF     		add	r7, sp, #0
 8426              		.cfi_def_cfa_register 7
2438:.\mpu6050.c   **** 	//todo consider writing byte 0x80 without reading the register before since it is reset anyways
2439:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8427              		.loc 1 2439 0
 8428 0004 044B     		ldr	r3, .L660
 8429 0006 1B78     		ldrb	r3, [r3]
 8430 0008 181C     		mov	r0, r3
 8431 000a 6B21     		mov	r1, #107
 8432 000c 0722     		mov	r2, #7
 8433 000e 0123     		mov	r3, #1
 8434 0010 FFF7FEFF 		bl	I2CWriteBit
2440:.\mpu6050.c   **** }
 8435              		.loc 1 2440 0
 8436 0014 BD46     		mov	sp, r7
 8437              		@ sp needed
 8438 0016 80BD     		pop	{r7, pc}
 8439              	.L661:
 8440              		.align	2
 8441              	.L660:
 8442 0018 00000000 		.word	devAddr
 8443              		.cfi_endproc
 8444              	.LFE180:
 8445              		.size	MPU6050_reset, .-MPU6050_reset
 8446              		.section	.text.MPU6050_getSleepEnabled,"ax",%progbits
 8447              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 192


 8448              		.global	MPU6050_getSleepEnabled
 8449              		.code	16
 8450              		.thumb_func
 8451              		.type	MPU6050_getSleepEnabled, %function
 8452              	MPU6050_getSleepEnabled:
 8453              	.LFB181:
2441:.\mpu6050.c   **** /** Get sleep mode status.
2442:.\mpu6050.c   ****  * Setting the SLEEP bit in the register puts the device into very low power
2443:.\mpu6050.c   ****  * sleep mode. In this mode, only the serial interface and internal registers
2444:.\mpu6050.c   ****  * remain active, allowing for a very low standby current. Clearing this bit
2445:.\mpu6050.c   ****  * puts the device back into normal mode. To save power, the individual standby
2446:.\mpu6050.c   ****  * selections for each of the gyros should be used if any gyro axis is not used
2447:.\mpu6050.c   ****  * by the application.
2448:.\mpu6050.c   ****  * @return Current sleep mode enabled status
2449:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2450:.\mpu6050.c   ****  * @see MPU6050_PWR1_SLEEP_BIT
2451:.\mpu6050.c   ****  */
2452:.\mpu6050.c   **** bool MPU6050_getSleepEnabled() {
 8454              		.loc 1 2452 0
 8455              		.cfi_startproc
 8456 0000 80B5     		push	{r7, lr}
 8457              		.cfi_def_cfa_offset 8
 8458              		.cfi_offset 7, -8
 8459              		.cfi_offset 14, -4
 8460 0002 00AF     		add	r7, sp, #0
 8461              		.cfi_def_cfa_register 7
2453:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, buffer);
 8462              		.loc 1 2453 0
 8463 0004 074B     		ldr	r3, .L664
 8464 0006 1A78     		ldrb	r2, [r3]
 8465 0008 074B     		ldr	r3, .L664+4
 8466 000a 101C     		mov	r0, r2
 8467 000c 6B21     		mov	r1, #107
 8468 000e 0622     		mov	r2, #6
 8469 0010 FFF7FEFF 		bl	I2CReadBit
2454:.\mpu6050.c   ****     return buffer[0];
 8470              		.loc 1 2454 0
 8471 0014 044B     		ldr	r3, .L664+4
 8472 0016 1B78     		ldrb	r3, [r3]
 8473 0018 5A1E     		sub	r2, r3, #1
 8474 001a 9341     		sbc	r3, r3, r2
 8475 001c DBB2     		uxtb	r3, r3
2455:.\mpu6050.c   **** }
 8476              		.loc 1 2455 0
 8477 001e 181C     		mov	r0, r3
 8478 0020 BD46     		mov	sp, r7
 8479              		@ sp needed
 8480 0022 80BD     		pop	{r7, pc}
 8481              	.L665:
 8482              		.align	2
 8483              	.L664:
 8484 0024 00000000 		.word	devAddr
 8485 0028 00000000 		.word	buffer
 8486              		.cfi_endproc
 8487              	.LFE181:
 8488              		.size	MPU6050_getSleepEnabled, .-MPU6050_getSleepEnabled
 8489              		.section	.text.MPU6050_setSleepEnabled,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 193


 8490              		.align	2
 8491              		.global	MPU6050_setSleepEnabled
 8492              		.code	16
 8493              		.thumb_func
 8494              		.type	MPU6050_setSleepEnabled, %function
 8495              	MPU6050_setSleepEnabled:
 8496              	.LFB182:
2456:.\mpu6050.c   **** /** Set sleep mode status.
2457:.\mpu6050.c   ****  * @param enabled New sleep mode enabled status
2458:.\mpu6050.c   ****  * @see getSleepEnabled()
2459:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2460:.\mpu6050.c   ****  * @see MPU6050_PWR1_SLEEP_BIT
2461:.\mpu6050.c   ****  */
2462:.\mpu6050.c   **** void MPU6050_setSleepEnabled(bool enabled) {
 8497              		.loc 1 2462 0
 8498              		.cfi_startproc
 8499 0000 80B5     		push	{r7, lr}
 8500              		.cfi_def_cfa_offset 8
 8501              		.cfi_offset 7, -8
 8502              		.cfi_offset 14, -4
 8503 0002 82B0     		sub	sp, sp, #8
 8504              		.cfi_def_cfa_offset 16
 8505 0004 00AF     		add	r7, sp, #0
 8506              		.cfi_def_cfa_register 7
 8507 0006 021C     		mov	r2, r0
 8508 0008 FB1D     		add	r3, r7, #7
 8509 000a 1A70     		strb	r2, [r3]
2463:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8510              		.loc 1 2463 0
 8511 000c 054B     		ldr	r3, .L667
 8512 000e 1A78     		ldrb	r2, [r3]
 8513 0010 FB1D     		add	r3, r7, #7
 8514 0012 1B78     		ldrb	r3, [r3]
 8515 0014 101C     		mov	r0, r2
 8516 0016 6B21     		mov	r1, #107
 8517 0018 0622     		mov	r2, #6
 8518 001a FFF7FEFF 		bl	I2CWriteBit
2464:.\mpu6050.c   **** }
 8519              		.loc 1 2464 0
 8520 001e BD46     		mov	sp, r7
 8521 0020 02B0     		add	sp, sp, #8
 8522              		@ sp needed
 8523 0022 80BD     		pop	{r7, pc}
 8524              	.L668:
 8525              		.align	2
 8526              	.L667:
 8527 0024 00000000 		.word	devAddr
 8528              		.cfi_endproc
 8529              	.LFE182:
 8530              		.size	MPU6050_setSleepEnabled, .-MPU6050_setSleepEnabled
 8531              		.section	.text.MPU6050_getWakeCycleEnabled,"ax",%progbits
 8532              		.align	2
 8533              		.global	MPU6050_getWakeCycleEnabled
 8534              		.code	16
 8535              		.thumb_func
 8536              		.type	MPU6050_getWakeCycleEnabled, %function
 8537              	MPU6050_getWakeCycleEnabled:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 194


 8538              	.LFB183:
2465:.\mpu6050.c   **** /** Get wake cycle enabled status.
2466:.\mpu6050.c   ****  * When this bit is set to 1 and SLEEP is disabled, the MPU-60X0 will cycle
2467:.\mpu6050.c   ****  * between sleep mode and waking up to take a single sample of data from active
2468:.\mpu6050.c   ****  * sensors at a rate determined by LP_WAKE_CTRL (register 108).
2469:.\mpu6050.c   ****  * @return Current sleep mode enabled status
2470:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2471:.\mpu6050.c   ****  * @see MPU6050_PWR1_CYCLE_BIT
2472:.\mpu6050.c   ****  */
2473:.\mpu6050.c   **** bool MPU6050_getWakeCycleEnabled() {
 8539              		.loc 1 2473 0
 8540              		.cfi_startproc
 8541 0000 80B5     		push	{r7, lr}
 8542              		.cfi_def_cfa_offset 8
 8543              		.cfi_offset 7, -8
 8544              		.cfi_offset 14, -4
 8545 0002 00AF     		add	r7, sp, #0
 8546              		.cfi_def_cfa_register 7
2474:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CYCLE_BIT, buffer);
 8547              		.loc 1 2474 0
 8548 0004 074B     		ldr	r3, .L671
 8549 0006 1A78     		ldrb	r2, [r3]
 8550 0008 074B     		ldr	r3, .L671+4
 8551 000a 101C     		mov	r0, r2
 8552 000c 6B21     		mov	r1, #107
 8553 000e 0522     		mov	r2, #5
 8554 0010 FFF7FEFF 		bl	I2CReadBit
2475:.\mpu6050.c   ****     return buffer[0];
 8555              		.loc 1 2475 0
 8556 0014 044B     		ldr	r3, .L671+4
 8557 0016 1B78     		ldrb	r3, [r3]
 8558 0018 5A1E     		sub	r2, r3, #1
 8559 001a 9341     		sbc	r3, r3, r2
 8560 001c DBB2     		uxtb	r3, r3
2476:.\mpu6050.c   **** }
 8561              		.loc 1 2476 0
 8562 001e 181C     		mov	r0, r3
 8563 0020 BD46     		mov	sp, r7
 8564              		@ sp needed
 8565 0022 80BD     		pop	{r7, pc}
 8566              	.L672:
 8567              		.align	2
 8568              	.L671:
 8569 0024 00000000 		.word	devAddr
 8570 0028 00000000 		.word	buffer
 8571              		.cfi_endproc
 8572              	.LFE183:
 8573              		.size	MPU6050_getWakeCycleEnabled, .-MPU6050_getWakeCycleEnabled
 8574              		.section	.text.MPU6050_setWakeCycleEnabled,"ax",%progbits
 8575              		.align	2
 8576              		.global	MPU6050_setWakeCycleEnabled
 8577              		.code	16
 8578              		.thumb_func
 8579              		.type	MPU6050_setWakeCycleEnabled, %function
 8580              	MPU6050_setWakeCycleEnabled:
 8581              	.LFB184:
2477:.\mpu6050.c   **** /** Set wake cycle enabled status.
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 195


2478:.\mpu6050.c   ****  * @param enabled New sleep mode enabled status
2479:.\mpu6050.c   ****  * @see getWakeCycleEnabled()
2480:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2481:.\mpu6050.c   ****  * @see MPU6050_PWR1_CYCLE_BIT
2482:.\mpu6050.c   ****  */
2483:.\mpu6050.c   **** void MPU6050_setWakeCycleEnabled(bool enabled) {
 8582              		.loc 1 2483 0
 8583              		.cfi_startproc
 8584 0000 80B5     		push	{r7, lr}
 8585              		.cfi_def_cfa_offset 8
 8586              		.cfi_offset 7, -8
 8587              		.cfi_offset 14, -4
 8588 0002 82B0     		sub	sp, sp, #8
 8589              		.cfi_def_cfa_offset 16
 8590 0004 00AF     		add	r7, sp, #0
 8591              		.cfi_def_cfa_register 7
 8592 0006 021C     		mov	r2, r0
 8593 0008 FB1D     		add	r3, r7, #7
 8594 000a 1A70     		strb	r2, [r3]
2484:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CYCLE_BIT, enabled);
 8595              		.loc 1 2484 0
 8596 000c 054B     		ldr	r3, .L674
 8597 000e 1A78     		ldrb	r2, [r3]
 8598 0010 FB1D     		add	r3, r7, #7
 8599 0012 1B78     		ldrb	r3, [r3]
 8600 0014 101C     		mov	r0, r2
 8601 0016 6B21     		mov	r1, #107
 8602 0018 0522     		mov	r2, #5
 8603 001a FFF7FEFF 		bl	I2CWriteBit
2485:.\mpu6050.c   **** }
 8604              		.loc 1 2485 0
 8605 001e BD46     		mov	sp, r7
 8606 0020 02B0     		add	sp, sp, #8
 8607              		@ sp needed
 8608 0022 80BD     		pop	{r7, pc}
 8609              	.L675:
 8610              		.align	2
 8611              	.L674:
 8612 0024 00000000 		.word	devAddr
 8613              		.cfi_endproc
 8614              	.LFE184:
 8615              		.size	MPU6050_setWakeCycleEnabled, .-MPU6050_setWakeCycleEnabled
 8616              		.section	.text.MPU6050_getTempSensorEnabled,"ax",%progbits
 8617              		.align	2
 8618              		.global	MPU6050_getTempSensorEnabled
 8619              		.code	16
 8620              		.thumb_func
 8621              		.type	MPU6050_getTempSensorEnabled, %function
 8622              	MPU6050_getTempSensorEnabled:
 8623              	.LFB185:
2486:.\mpu6050.c   **** /** Get temperature sensor enabled status.
2487:.\mpu6050.c   ****  * Control the usage of the internal temperature sensor.
2488:.\mpu6050.c   ****  *
2489:.\mpu6050.c   ****  * Note: this register stores the *disabled* value, but for consistency with the
2490:.\mpu6050.c   ****  * rest of the code, the function is named and used with standard true/false
2491:.\mpu6050.c   ****  * values to indicate whether the sensor is enabled or disabled, respectively.
2492:.\mpu6050.c   ****  *
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 196


2493:.\mpu6050.c   ****  * @return Current temperature sensor enabled status
2494:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2495:.\mpu6050.c   ****  * @see MPU6050_PWR1_TEMP_DIS_BIT
2496:.\mpu6050.c   ****  */
2497:.\mpu6050.c   **** bool MPU6050_getTempSensorEnabled() {
 8624              		.loc 1 2497 0
 8625              		.cfi_startproc
 8626 0000 80B5     		push	{r7, lr}
 8627              		.cfi_def_cfa_offset 8
 8628              		.cfi_offset 7, -8
 8629              		.cfi_offset 14, -4
 8630 0002 00AF     		add	r7, sp, #0
 8631              		.cfi_def_cfa_register 7
2498:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_TEMP_DIS_BIT, buffer);
 8632              		.loc 1 2498 0
 8633 0004 074B     		ldr	r3, .L678
 8634 0006 1A78     		ldrb	r2, [r3]
 8635 0008 074B     		ldr	r3, .L678+4
 8636 000a 101C     		mov	r0, r2
 8637 000c 6B21     		mov	r1, #107
 8638 000e 0322     		mov	r2, #3
 8639 0010 FFF7FEFF 		bl	I2CReadBit
2499:.\mpu6050.c   ****     return buffer[0] == 0; // 1 is actually disabled here
 8640              		.loc 1 2499 0
 8641 0014 044B     		ldr	r3, .L678+4
 8642 0016 1B78     		ldrb	r3, [r3]
 8643 0018 5A42     		neg	r2, r3
 8644 001a 5341     		adc	r3, r3, r2
 8645 001c DBB2     		uxtb	r3, r3
2500:.\mpu6050.c   **** }
 8646              		.loc 1 2500 0
 8647 001e 181C     		mov	r0, r3
 8648 0020 BD46     		mov	sp, r7
 8649              		@ sp needed
 8650 0022 80BD     		pop	{r7, pc}
 8651              	.L679:
 8652              		.align	2
 8653              	.L678:
 8654 0024 00000000 		.word	devAddr
 8655 0028 00000000 		.word	buffer
 8656              		.cfi_endproc
 8657              	.LFE185:
 8658              		.size	MPU6050_getTempSensorEnabled, .-MPU6050_getTempSensorEnabled
 8659              		.section	.text.MPU6050_setTempSensorEnabled,"ax",%progbits
 8660              		.align	2
 8661              		.global	MPU6050_setTempSensorEnabled
 8662              		.code	16
 8663              		.thumb_func
 8664              		.type	MPU6050_setTempSensorEnabled, %function
 8665              	MPU6050_setTempSensorEnabled:
 8666              	.LFB186:
2501:.\mpu6050.c   **** /** Set temperature sensor enabled status.
2502:.\mpu6050.c   ****  * Note: this register stores the *disabled* value, but for consistency with the
2503:.\mpu6050.c   ****  * rest of the code, the function is named and used with standard true/false
2504:.\mpu6050.c   ****  * values to indicate whether the sensor is enabled or disabled, respectively.
2505:.\mpu6050.c   ****  *
2506:.\mpu6050.c   ****  * @param enabled New temperature sensor enabled status
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 197


2507:.\mpu6050.c   ****  * @see getTempSensorEnabled()
2508:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2509:.\mpu6050.c   ****  * @see MPU6050_PWR1_TEMP_DIS_BIT
2510:.\mpu6050.c   ****  */
2511:.\mpu6050.c   **** void MPU6050_setTempSensorEnabled(bool enabled) {
 8667              		.loc 1 2511 0
 8668              		.cfi_startproc
 8669 0000 80B5     		push	{r7, lr}
 8670              		.cfi_def_cfa_offset 8
 8671              		.cfi_offset 7, -8
 8672              		.cfi_offset 14, -4
 8673 0002 82B0     		sub	sp, sp, #8
 8674              		.cfi_def_cfa_offset 16
 8675 0004 00AF     		add	r7, sp, #0
 8676              		.cfi_def_cfa_register 7
 8677 0006 021C     		mov	r2, r0
 8678 0008 FB1D     		add	r3, r7, #7
 8679 000a 1A70     		strb	r2, [r3]
2512:.\mpu6050.c   ****     // 1 is actually disabled here
2513:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_TEMP_DIS_BIT, !enabled);
 8680              		.loc 1 2513 0
 8681 000c 074B     		ldr	r3, .L681
 8682 000e 1A78     		ldrb	r2, [r3]
 8683 0010 FB1D     		add	r3, r7, #7
 8684 0012 1B78     		ldrb	r3, [r3]
 8685 0014 0121     		mov	r1, #1
 8686 0016 4B40     		eor	r3, r1
 8687 0018 DBB2     		uxtb	r3, r3
 8688 001a 101C     		mov	r0, r2
 8689 001c 6B21     		mov	r1, #107
 8690 001e 0322     		mov	r2, #3
 8691 0020 FFF7FEFF 		bl	I2CWriteBit
2514:.\mpu6050.c   **** }
 8692              		.loc 1 2514 0
 8693 0024 BD46     		mov	sp, r7
 8694 0026 02B0     		add	sp, sp, #8
 8695              		@ sp needed
 8696 0028 80BD     		pop	{r7, pc}
 8697              	.L682:
 8698 002a C046     		.align	2
 8699              	.L681:
 8700 002c 00000000 		.word	devAddr
 8701              		.cfi_endproc
 8702              	.LFE186:
 8703              		.size	MPU6050_setTempSensorEnabled, .-MPU6050_setTempSensorEnabled
 8704              		.section	.text.MPU6050_getClockSource,"ax",%progbits
 8705              		.align	2
 8706              		.global	MPU6050_getClockSource
 8707              		.code	16
 8708              		.thumb_func
 8709              		.type	MPU6050_getClockSource, %function
 8710              	MPU6050_getClockSource:
 8711              	.LFB187:
2515:.\mpu6050.c   **** /** Get clock source setting.
2516:.\mpu6050.c   ****  * @return Current clock source setting
2517:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2518:.\mpu6050.c   ****  * @see MPU6050_PWR1_CLKSEL_BIT
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 198


2519:.\mpu6050.c   ****  * @see MPU6050_PWR1_CLKSEL_LENGTH
2520:.\mpu6050.c   ****  */
2521:.\mpu6050.c   **** uint8_t MPU6050_getClockSource() {
 8712              		.loc 1 2521 0
 8713              		.cfi_startproc
 8714 0000 80B5     		push	{r7, lr}
 8715              		.cfi_def_cfa_offset 8
 8716              		.cfi_offset 7, -8
 8717              		.cfi_offset 14, -4
 8718 0002 82B0     		sub	sp, sp, #8
 8719              		.cfi_def_cfa_offset 16
 8720 0004 02AF     		add	r7, sp, #8
 8721              		.cfi_def_cfa 7, 8
2522:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH
 8722              		.loc 1 2522 0
 8723 0006 074B     		ldr	r3, .L685
 8724 0008 1B78     		ldrb	r3, [r3]
 8725 000a 074A     		ldr	r2, .L685+4
 8726 000c 0092     		str	r2, [sp]
 8727 000e 181C     		mov	r0, r3
 8728 0010 6B21     		mov	r1, #107
 8729 0012 0222     		mov	r2, #2
 8730 0014 0323     		mov	r3, #3
 8731 0016 FFF7FEFF 		bl	I2CReadBits
2523:.\mpu6050.c   ****     return buffer[0];
 8732              		.loc 1 2523 0
 8733 001a 034B     		ldr	r3, .L685+4
 8734 001c 1B78     		ldrb	r3, [r3]
2524:.\mpu6050.c   **** }
 8735              		.loc 1 2524 0
 8736 001e 181C     		mov	r0, r3
 8737 0020 BD46     		mov	sp, r7
 8738              		@ sp needed
 8739 0022 80BD     		pop	{r7, pc}
 8740              	.L686:
 8741              		.align	2
 8742              	.L685:
 8743 0024 00000000 		.word	devAddr
 8744 0028 00000000 		.word	buffer
 8745              		.cfi_endproc
 8746              	.LFE187:
 8747              		.size	MPU6050_getClockSource, .-MPU6050_getClockSource
 8748              		.section	.text.MPU6050_setClockSource,"ax",%progbits
 8749              		.align	2
 8750              		.global	MPU6050_setClockSource
 8751              		.code	16
 8752              		.thumb_func
 8753              		.type	MPU6050_setClockSource, %function
 8754              	MPU6050_setClockSource:
 8755              	.LFB188:
2525:.\mpu6050.c   **** /** Set clock source setting.
2526:.\mpu6050.c   ****  * An internal 8MHz oscillator, gyroscope based clock, or external sources can
2527:.\mpu6050.c   ****  * be selected as the MPU-60X0 clock source. When the internal 8 MHz oscillator
2528:.\mpu6050.c   ****  * or an external source is chosen as the clock source, the MPU-60X0 can operate
2529:.\mpu6050.c   ****  * in low power modes with the gyroscopes disabled.
2530:.\mpu6050.c   ****  *
2531:.\mpu6050.c   ****  * Upon power up, the MPU-60X0 clock source defaults to the internal oscillator.
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 199


2532:.\mpu6050.c   ****  * However, it is highly recommended that the device be configured to use one of
2533:.\mpu6050.c   ****  * the gyroscopes (or an external clock source) as the clock reference for
2534:.\mpu6050.c   ****  * improved stability. The clock source can be selected according to the following table:
2535:.\mpu6050.c   ****  *
2536:.\mpu6050.c   ****  * <pre>
2537:.\mpu6050.c   ****  * CLK_SEL | Clock Source
2538:.\mpu6050.c   ****  * --------+--------------------------------------
2539:.\mpu6050.c   ****  * 0       | Internal oscillator
2540:.\mpu6050.c   ****  * 1       | PLL with X Gyro reference
2541:.\mpu6050.c   ****  * 2       | PLL with Y Gyro reference
2542:.\mpu6050.c   ****  * 3       | PLL with Z Gyro reference
2543:.\mpu6050.c   ****  * 4       | PLL with external 32.768kHz reference
2544:.\mpu6050.c   ****  * 5       | PLL with external 19.2MHz reference
2545:.\mpu6050.c   ****  * 6       | Reserved
2546:.\mpu6050.c   ****  * 7       | Stops the clock and keeps the timing generator in reset
2547:.\mpu6050.c   ****  * </pre>
2548:.\mpu6050.c   ****  *
2549:.\mpu6050.c   ****  * @param source New clock source setting
2550:.\mpu6050.c   ****  * @see getClockSource()
2551:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_1
2552:.\mpu6050.c   ****  * @see MPU6050_PWR1_CLKSEL_BIT
2553:.\mpu6050.c   ****  * @see MPU6050_PWR1_CLKSEL_LENGTH
2554:.\mpu6050.c   ****  */
2555:.\mpu6050.c   **** void MPU6050_setClockSource(uint8_t source) {
 8756              		.loc 1 2555 0
 8757              		.cfi_startproc
 8758 0000 80B5     		push	{r7, lr}
 8759              		.cfi_def_cfa_offset 8
 8760              		.cfi_offset 7, -8
 8761              		.cfi_offset 14, -4
 8762 0002 84B0     		sub	sp, sp, #16
 8763              		.cfi_def_cfa_offset 24
 8764 0004 02AF     		add	r7, sp, #8
 8765              		.cfi_def_cfa 7, 16
 8766 0006 021C     		mov	r2, r0
 8767 0008 FB1D     		add	r3, r7, #7
 8768 000a 1A70     		strb	r2, [r3]
2556:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGT
 8769              		.loc 1 2556 0
 8770 000c 064B     		ldr	r3, .L688
 8771 000e 1B78     		ldrb	r3, [r3]
 8772 0010 FA1D     		add	r2, r7, #7
 8773 0012 1278     		ldrb	r2, [r2]
 8774 0014 0092     		str	r2, [sp]
 8775 0016 181C     		mov	r0, r3
 8776 0018 6B21     		mov	r1, #107
 8777 001a 0222     		mov	r2, #2
 8778 001c 0323     		mov	r3, #3
 8779 001e FFF7FEFF 		bl	I2CWriteBits
2557:.\mpu6050.c   **** }
 8780              		.loc 1 2557 0
 8781 0022 BD46     		mov	sp, r7
 8782 0024 02B0     		add	sp, sp, #8
 8783              		@ sp needed
 8784 0026 80BD     		pop	{r7, pc}
 8785              	.L689:
 8786              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 200


 8787              	.L688:
 8788 0028 00000000 		.word	devAddr
 8789              		.cfi_endproc
 8790              	.LFE188:
 8791              		.size	MPU6050_setClockSource, .-MPU6050_setClockSource
 8792              		.section	.text.MPU6050_getWakeFrequency,"ax",%progbits
 8793              		.align	2
 8794              		.global	MPU6050_getWakeFrequency
 8795              		.code	16
 8796              		.thumb_func
 8797              		.type	MPU6050_getWakeFrequency, %function
 8798              	MPU6050_getWakeFrequency:
 8799              	.LFB189:
2558:.\mpu6050.c   **** 
2559:.\mpu6050.c   **** // PWR_MGMT_2 register
2560:.\mpu6050.c   **** 
2561:.\mpu6050.c   **** /** Get wake frequency in Accel-Only Low Power Mode.
2562:.\mpu6050.c   ****  * The MPU-60X0 can be put into Accerlerometer Only Low Power Mode by setting
2563:.\mpu6050.c   ****  * PWRSEL to 1 in the Power Management 1 register (Register 107). In this mode,
2564:.\mpu6050.c   ****  * the device will power off all devices except for the primary I2C interface,
2565:.\mpu6050.c   ****  * waking only the accelerometer at fixed intervals to take a single
2566:.\mpu6050.c   ****  * measurement. The frequency of wake-ups can be configured with LP_WAKE_CTRL
2567:.\mpu6050.c   ****  * as shown below:
2568:.\mpu6050.c   ****  *
2569:.\mpu6050.c   ****  * <pre>
2570:.\mpu6050.c   ****  * LP_WAKE_CTRL | Wake-up Frequency
2571:.\mpu6050.c   ****  * -------------+------------------
2572:.\mpu6050.c   ****  * 0            | 1.25 Hz
2573:.\mpu6050.c   ****  * 1            | 2.5 Hz
2574:.\mpu6050.c   ****  * 2            | 5 Hz
2575:.\mpu6050.c   ****  * 3            | 10 Hz
2576:.\mpu6050.c   ****  * <pre>
2577:.\mpu6050.c   ****  *
2578:.\mpu6050.c   ****  * For further information regarding the MPU-60X0's power modes, please refer to
2579:.\mpu6050.c   ****  * Register 107.
2580:.\mpu6050.c   ****  *
2581:.\mpu6050.c   ****  * @return Current wake frequency
2582:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2583:.\mpu6050.c   ****  */
2584:.\mpu6050.c   **** uint8_t MPU6050_getWakeFrequency() {
 8800              		.loc 1 2584 0
 8801              		.cfi_startproc
 8802 0000 80B5     		push	{r7, lr}
 8803              		.cfi_def_cfa_offset 8
 8804              		.cfi_offset 7, -8
 8805              		.cfi_offset 14, -4
 8806 0002 82B0     		sub	sp, sp, #8
 8807              		.cfi_def_cfa_offset 16
 8808 0004 02AF     		add	r7, sp, #8
 8809              		.cfi_def_cfa 7, 8
2585:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAKE
 8810              		.loc 1 2585 0
 8811 0006 074B     		ldr	r3, .L692
 8812 0008 1B78     		ldrb	r3, [r3]
 8813 000a 074A     		ldr	r2, .L692+4
 8814 000c 0092     		str	r2, [sp]
 8815 000e 181C     		mov	r0, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 201


 8816 0010 6C21     		mov	r1, #108
 8817 0012 0722     		mov	r2, #7
 8818 0014 0223     		mov	r3, #2
 8819 0016 FFF7FEFF 		bl	I2CReadBits
2586:.\mpu6050.c   ****     return buffer[0];
 8820              		.loc 1 2586 0
 8821 001a 034B     		ldr	r3, .L692+4
 8822 001c 1B78     		ldrb	r3, [r3]
2587:.\mpu6050.c   **** }
 8823              		.loc 1 2587 0
 8824 001e 181C     		mov	r0, r3
 8825 0020 BD46     		mov	sp, r7
 8826              		@ sp needed
 8827 0022 80BD     		pop	{r7, pc}
 8828              	.L693:
 8829              		.align	2
 8830              	.L692:
 8831 0024 00000000 		.word	devAddr
 8832 0028 00000000 		.word	buffer
 8833              		.cfi_endproc
 8834              	.LFE189:
 8835              		.size	MPU6050_getWakeFrequency, .-MPU6050_getWakeFrequency
 8836              		.section	.text.MPU6050_setWakeFrequency,"ax",%progbits
 8837              		.align	2
 8838              		.global	MPU6050_setWakeFrequency
 8839              		.code	16
 8840              		.thumb_func
 8841              		.type	MPU6050_setWakeFrequency, %function
 8842              	MPU6050_setWakeFrequency:
 8843              	.LFB190:
2588:.\mpu6050.c   **** /** Set wake frequency in Accel-Only Low Power Mode.
2589:.\mpu6050.c   ****  * @param frequency New wake frequency
2590:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2591:.\mpu6050.c   ****  */
2592:.\mpu6050.c   **** void MPU6050_setWakeFrequency(uint8_t frequency) {
 8844              		.loc 1 2592 0
 8845              		.cfi_startproc
 8846 0000 80B5     		push	{r7, lr}
 8847              		.cfi_def_cfa_offset 8
 8848              		.cfi_offset 7, -8
 8849              		.cfi_offset 14, -4
 8850 0002 84B0     		sub	sp, sp, #16
 8851              		.cfi_def_cfa_offset 24
 8852 0004 02AF     		add	r7, sp, #8
 8853              		.cfi_def_cfa 7, 16
 8854 0006 021C     		mov	r2, r0
 8855 0008 FB1D     		add	r3, r7, #7
 8856 000a 1A70     		strb	r2, [r3]
2593:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAK
 8857              		.loc 1 2593 0
 8858 000c 064B     		ldr	r3, .L695
 8859 000e 1B78     		ldrb	r3, [r3]
 8860 0010 FA1D     		add	r2, r7, #7
 8861 0012 1278     		ldrb	r2, [r2]
 8862 0014 0092     		str	r2, [sp]
 8863 0016 181C     		mov	r0, r3
 8864 0018 6C21     		mov	r1, #108
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 202


 8865 001a 0722     		mov	r2, #7
 8866 001c 0223     		mov	r3, #2
 8867 001e FFF7FEFF 		bl	I2CWriteBits
2594:.\mpu6050.c   **** }
 8868              		.loc 1 2594 0
 8869 0022 BD46     		mov	sp, r7
 8870 0024 02B0     		add	sp, sp, #8
 8871              		@ sp needed
 8872 0026 80BD     		pop	{r7, pc}
 8873              	.L696:
 8874              		.align	2
 8875              	.L695:
 8876 0028 00000000 		.word	devAddr
 8877              		.cfi_endproc
 8878              	.LFE190:
 8879              		.size	MPU6050_setWakeFrequency, .-MPU6050_setWakeFrequency
 8880              		.section	.text.MPU6050_getStandbyXAccelEnabled,"ax",%progbits
 8881              		.align	2
 8882              		.global	MPU6050_getStandbyXAccelEnabled
 8883              		.code	16
 8884              		.thumb_func
 8885              		.type	MPU6050_getStandbyXAccelEnabled, %function
 8886              	MPU6050_getStandbyXAccelEnabled:
 8887              	.LFB191:
2595:.\mpu6050.c   **** 
2596:.\mpu6050.c   **** /** Get X-axis accelerometer standby enabled status.
2597:.\mpu6050.c   ****  * If enabled, the X-axis will not gather or report data (or use power).
2598:.\mpu6050.c   ****  * @return Current X-axis standby enabled status
2599:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2600:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_XA_BIT
2601:.\mpu6050.c   ****  */
2602:.\mpu6050.c   **** bool MPU6050_getStandbyXAccelEnabled() {
 8888              		.loc 1 2602 0
 8889              		.cfi_startproc
 8890 0000 80B5     		push	{r7, lr}
 8891              		.cfi_def_cfa_offset 8
 8892              		.cfi_offset 7, -8
 8893              		.cfi_offset 14, -4
 8894 0002 00AF     		add	r7, sp, #0
 8895              		.cfi_def_cfa_register 7
2603:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XA_BIT, buffer);
 8896              		.loc 1 2603 0
 8897 0004 074B     		ldr	r3, .L699
 8898 0006 1A78     		ldrb	r2, [r3]
 8899 0008 074B     		ldr	r3, .L699+4
 8900 000a 101C     		mov	r0, r2
 8901 000c 6C21     		mov	r1, #108
 8902 000e 0522     		mov	r2, #5
 8903 0010 FFF7FEFF 		bl	I2CReadBit
2604:.\mpu6050.c   ****     return buffer[0];
 8904              		.loc 1 2604 0
 8905 0014 044B     		ldr	r3, .L699+4
 8906 0016 1B78     		ldrb	r3, [r3]
 8907 0018 5A1E     		sub	r2, r3, #1
 8908 001a 9341     		sbc	r3, r3, r2
 8909 001c DBB2     		uxtb	r3, r3
2605:.\mpu6050.c   **** }
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 203


 8910              		.loc 1 2605 0
 8911 001e 181C     		mov	r0, r3
 8912 0020 BD46     		mov	sp, r7
 8913              		@ sp needed
 8914 0022 80BD     		pop	{r7, pc}
 8915              	.L700:
 8916              		.align	2
 8917              	.L699:
 8918 0024 00000000 		.word	devAddr
 8919 0028 00000000 		.word	buffer
 8920              		.cfi_endproc
 8921              	.LFE191:
 8922              		.size	MPU6050_getStandbyXAccelEnabled, .-MPU6050_getStandbyXAccelEnabled
 8923              		.section	.text.MPU6050_setStandbyXAccelEnabled,"ax",%progbits
 8924              		.align	2
 8925              		.global	MPU6050_setStandbyXAccelEnabled
 8926              		.code	16
 8927              		.thumb_func
 8928              		.type	MPU6050_setStandbyXAccelEnabled, %function
 8929              	MPU6050_setStandbyXAccelEnabled:
 8930              	.LFB192:
2606:.\mpu6050.c   **** /** Set X-axis accelerometer standby enabled status.
2607:.\mpu6050.c   ****  * @param New X-axis standby enabled status
2608:.\mpu6050.c   ****  * @see getStandbyXAccelEnabled()
2609:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2610:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_XA_BIT
2611:.\mpu6050.c   ****  */
2612:.\mpu6050.c   **** void MPU6050_setStandbyXAccelEnabled(bool enabled) {
 8931              		.loc 1 2612 0
 8932              		.cfi_startproc
 8933 0000 80B5     		push	{r7, lr}
 8934              		.cfi_def_cfa_offset 8
 8935              		.cfi_offset 7, -8
 8936              		.cfi_offset 14, -4
 8937 0002 82B0     		sub	sp, sp, #8
 8938              		.cfi_def_cfa_offset 16
 8939 0004 00AF     		add	r7, sp, #0
 8940              		.cfi_def_cfa_register 7
 8941 0006 021C     		mov	r2, r0
 8942 0008 FB1D     		add	r3, r7, #7
 8943 000a 1A70     		strb	r2, [r3]
2613:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XA_BIT, enabled);
 8944              		.loc 1 2613 0
 8945 000c 054B     		ldr	r3, .L702
 8946 000e 1A78     		ldrb	r2, [r3]
 8947 0010 FB1D     		add	r3, r7, #7
 8948 0012 1B78     		ldrb	r3, [r3]
 8949 0014 101C     		mov	r0, r2
 8950 0016 6C21     		mov	r1, #108
 8951 0018 0522     		mov	r2, #5
 8952 001a FFF7FEFF 		bl	I2CWriteBit
2614:.\mpu6050.c   **** }
 8953              		.loc 1 2614 0
 8954 001e BD46     		mov	sp, r7
 8955 0020 02B0     		add	sp, sp, #8
 8956              		@ sp needed
 8957 0022 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 204


 8958              	.L703:
 8959              		.align	2
 8960              	.L702:
 8961 0024 00000000 		.word	devAddr
 8962              		.cfi_endproc
 8963              	.LFE192:
 8964              		.size	MPU6050_setStandbyXAccelEnabled, .-MPU6050_setStandbyXAccelEnabled
 8965              		.section	.text.MPU6050_getStandbyYAccelEnabled,"ax",%progbits
 8966              		.align	2
 8967              		.global	MPU6050_getStandbyYAccelEnabled
 8968              		.code	16
 8969              		.thumb_func
 8970              		.type	MPU6050_getStandbyYAccelEnabled, %function
 8971              	MPU6050_getStandbyYAccelEnabled:
 8972              	.LFB193:
2615:.\mpu6050.c   **** /** Get Y-axis accelerometer standby enabled status.
2616:.\mpu6050.c   ****  * If enabled, the Y-axis will not gather or report data (or use power).
2617:.\mpu6050.c   ****  * @return Current Y-axis standby enabled status
2618:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2619:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_YA_BIT
2620:.\mpu6050.c   ****  */
2621:.\mpu6050.c   **** bool MPU6050_getStandbyYAccelEnabled() {
 8973              		.loc 1 2621 0
 8974              		.cfi_startproc
 8975 0000 80B5     		push	{r7, lr}
 8976              		.cfi_def_cfa_offset 8
 8977              		.cfi_offset 7, -8
 8978              		.cfi_offset 14, -4
 8979 0002 00AF     		add	r7, sp, #0
 8980              		.cfi_def_cfa_register 7
2622:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YA_BIT, buffer);
 8981              		.loc 1 2622 0
 8982 0004 074B     		ldr	r3, .L706
 8983 0006 1A78     		ldrb	r2, [r3]
 8984 0008 074B     		ldr	r3, .L706+4
 8985 000a 101C     		mov	r0, r2
 8986 000c 6C21     		mov	r1, #108
 8987 000e 0422     		mov	r2, #4
 8988 0010 FFF7FEFF 		bl	I2CReadBit
2623:.\mpu6050.c   ****     return buffer[0];
 8989              		.loc 1 2623 0
 8990 0014 044B     		ldr	r3, .L706+4
 8991 0016 1B78     		ldrb	r3, [r3]
 8992 0018 5A1E     		sub	r2, r3, #1
 8993 001a 9341     		sbc	r3, r3, r2
 8994 001c DBB2     		uxtb	r3, r3
2624:.\mpu6050.c   **** }
 8995              		.loc 1 2624 0
 8996 001e 181C     		mov	r0, r3
 8997 0020 BD46     		mov	sp, r7
 8998              		@ sp needed
 8999 0022 80BD     		pop	{r7, pc}
 9000              	.L707:
 9001              		.align	2
 9002              	.L706:
 9003 0024 00000000 		.word	devAddr
 9004 0028 00000000 		.word	buffer
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 205


 9005              		.cfi_endproc
 9006              	.LFE193:
 9007              		.size	MPU6050_getStandbyYAccelEnabled, .-MPU6050_getStandbyYAccelEnabled
 9008              		.section	.text.MPU6050_setStandbyYAccelEnabled,"ax",%progbits
 9009              		.align	2
 9010              		.global	MPU6050_setStandbyYAccelEnabled
 9011              		.code	16
 9012              		.thumb_func
 9013              		.type	MPU6050_setStandbyYAccelEnabled, %function
 9014              	MPU6050_setStandbyYAccelEnabled:
 9015              	.LFB194:
2625:.\mpu6050.c   **** /** Set Y-axis accelerometer standby enabled status.
2626:.\mpu6050.c   ****  * @param New Y-axis standby enabled status
2627:.\mpu6050.c   ****  * @see getStandbyYAccelEnabled()
2628:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2629:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_YA_BIT
2630:.\mpu6050.c   ****  */
2631:.\mpu6050.c   **** void MPU6050_setStandbyYAccelEnabled(bool enabled) {
 9016              		.loc 1 2631 0
 9017              		.cfi_startproc
 9018 0000 80B5     		push	{r7, lr}
 9019              		.cfi_def_cfa_offset 8
 9020              		.cfi_offset 7, -8
 9021              		.cfi_offset 14, -4
 9022 0002 82B0     		sub	sp, sp, #8
 9023              		.cfi_def_cfa_offset 16
 9024 0004 00AF     		add	r7, sp, #0
 9025              		.cfi_def_cfa_register 7
 9026 0006 021C     		mov	r2, r0
 9027 0008 FB1D     		add	r3, r7, #7
 9028 000a 1A70     		strb	r2, [r3]
2632:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YA_BIT, enabled);
 9029              		.loc 1 2632 0
 9030 000c 054B     		ldr	r3, .L709
 9031 000e 1A78     		ldrb	r2, [r3]
 9032 0010 FB1D     		add	r3, r7, #7
 9033 0012 1B78     		ldrb	r3, [r3]
 9034 0014 101C     		mov	r0, r2
 9035 0016 6C21     		mov	r1, #108
 9036 0018 0422     		mov	r2, #4
 9037 001a FFF7FEFF 		bl	I2CWriteBit
2633:.\mpu6050.c   **** }
 9038              		.loc 1 2633 0
 9039 001e BD46     		mov	sp, r7
 9040 0020 02B0     		add	sp, sp, #8
 9041              		@ sp needed
 9042 0022 80BD     		pop	{r7, pc}
 9043              	.L710:
 9044              		.align	2
 9045              	.L709:
 9046 0024 00000000 		.word	devAddr
 9047              		.cfi_endproc
 9048              	.LFE194:
 9049              		.size	MPU6050_setStandbyYAccelEnabled, .-MPU6050_setStandbyYAccelEnabled
 9050              		.section	.text.MPU6050_getStandbyZAccelEnabled,"ax",%progbits
 9051              		.align	2
 9052              		.global	MPU6050_getStandbyZAccelEnabled
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 206


 9053              		.code	16
 9054              		.thumb_func
 9055              		.type	MPU6050_getStandbyZAccelEnabled, %function
 9056              	MPU6050_getStandbyZAccelEnabled:
 9057              	.LFB195:
2634:.\mpu6050.c   **** /** Get Z-axis accelerometer standby enabled status.
2635:.\mpu6050.c   ****  * If enabled, the Z-axis will not gather or report data (or use power).
2636:.\mpu6050.c   ****  * @return Current Z-axis standby enabled status
2637:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2638:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_ZA_BIT
2639:.\mpu6050.c   ****  */
2640:.\mpu6050.c   **** bool MPU6050_getStandbyZAccelEnabled() {
 9058              		.loc 1 2640 0
 9059              		.cfi_startproc
 9060 0000 80B5     		push	{r7, lr}
 9061              		.cfi_def_cfa_offset 8
 9062              		.cfi_offset 7, -8
 9063              		.cfi_offset 14, -4
 9064 0002 00AF     		add	r7, sp, #0
 9065              		.cfi_def_cfa_register 7
2641:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZA_BIT, buffer);
 9066              		.loc 1 2641 0
 9067 0004 074B     		ldr	r3, .L713
 9068 0006 1A78     		ldrb	r2, [r3]
 9069 0008 074B     		ldr	r3, .L713+4
 9070 000a 101C     		mov	r0, r2
 9071 000c 6C21     		mov	r1, #108
 9072 000e 0322     		mov	r2, #3
 9073 0010 FFF7FEFF 		bl	I2CReadBit
2642:.\mpu6050.c   ****     return buffer[0];
 9074              		.loc 1 2642 0
 9075 0014 044B     		ldr	r3, .L713+4
 9076 0016 1B78     		ldrb	r3, [r3]
 9077 0018 5A1E     		sub	r2, r3, #1
 9078 001a 9341     		sbc	r3, r3, r2
 9079 001c DBB2     		uxtb	r3, r3
2643:.\mpu6050.c   **** }
 9080              		.loc 1 2643 0
 9081 001e 181C     		mov	r0, r3
 9082 0020 BD46     		mov	sp, r7
 9083              		@ sp needed
 9084 0022 80BD     		pop	{r7, pc}
 9085              	.L714:
 9086              		.align	2
 9087              	.L713:
 9088 0024 00000000 		.word	devAddr
 9089 0028 00000000 		.word	buffer
 9090              		.cfi_endproc
 9091              	.LFE195:
 9092              		.size	MPU6050_getStandbyZAccelEnabled, .-MPU6050_getStandbyZAccelEnabled
 9093              		.section	.text.MPU6050_setStandbyZAccelEnabled,"ax",%progbits
 9094              		.align	2
 9095              		.global	MPU6050_setStandbyZAccelEnabled
 9096              		.code	16
 9097              		.thumb_func
 9098              		.type	MPU6050_setStandbyZAccelEnabled, %function
 9099              	MPU6050_setStandbyZAccelEnabled:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 207


 9100              	.LFB196:
2644:.\mpu6050.c   **** /** Set Z-axis accelerometer standby enabled status.
2645:.\mpu6050.c   ****  * @param New Z-axis standby enabled status
2646:.\mpu6050.c   ****  * @see getStandbyZAccelEnabled()
2647:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2648:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_ZA_BIT
2649:.\mpu6050.c   ****  */
2650:.\mpu6050.c   **** void MPU6050_setStandbyZAccelEnabled(bool enabled) {
 9101              		.loc 1 2650 0
 9102              		.cfi_startproc
 9103 0000 80B5     		push	{r7, lr}
 9104              		.cfi_def_cfa_offset 8
 9105              		.cfi_offset 7, -8
 9106              		.cfi_offset 14, -4
 9107 0002 82B0     		sub	sp, sp, #8
 9108              		.cfi_def_cfa_offset 16
 9109 0004 00AF     		add	r7, sp, #0
 9110              		.cfi_def_cfa_register 7
 9111 0006 021C     		mov	r2, r0
 9112 0008 FB1D     		add	r3, r7, #7
 9113 000a 1A70     		strb	r2, [r3]
2651:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZA_BIT, enabled);
 9114              		.loc 1 2651 0
 9115 000c 054B     		ldr	r3, .L716
 9116 000e 1A78     		ldrb	r2, [r3]
 9117 0010 FB1D     		add	r3, r7, #7
 9118 0012 1B78     		ldrb	r3, [r3]
 9119 0014 101C     		mov	r0, r2
 9120 0016 6C21     		mov	r1, #108
 9121 0018 0322     		mov	r2, #3
 9122 001a FFF7FEFF 		bl	I2CWriteBit
2652:.\mpu6050.c   **** }
 9123              		.loc 1 2652 0
 9124 001e BD46     		mov	sp, r7
 9125 0020 02B0     		add	sp, sp, #8
 9126              		@ sp needed
 9127 0022 80BD     		pop	{r7, pc}
 9128              	.L717:
 9129              		.align	2
 9130              	.L716:
 9131 0024 00000000 		.word	devAddr
 9132              		.cfi_endproc
 9133              	.LFE196:
 9134              		.size	MPU6050_setStandbyZAccelEnabled, .-MPU6050_setStandbyZAccelEnabled
 9135              		.section	.text.MPU6050_getStandbyXGyroEnabled,"ax",%progbits
 9136              		.align	2
 9137              		.global	MPU6050_getStandbyXGyroEnabled
 9138              		.code	16
 9139              		.thumb_func
 9140              		.type	MPU6050_getStandbyXGyroEnabled, %function
 9141              	MPU6050_getStandbyXGyroEnabled:
 9142              	.LFB197:
2653:.\mpu6050.c   **** /** Get X-axis gyroscope standby enabled status.
2654:.\mpu6050.c   ****  * If enabled, the X-axis will not gather or report data (or use power).
2655:.\mpu6050.c   ****  * @return Current X-axis standby enabled status
2656:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2657:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_XG_BIT
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 208


2658:.\mpu6050.c   ****  */
2659:.\mpu6050.c   **** bool MPU6050_getStandbyXGyroEnabled() {
 9143              		.loc 1 2659 0
 9144              		.cfi_startproc
 9145 0000 80B5     		push	{r7, lr}
 9146              		.cfi_def_cfa_offset 8
 9147              		.cfi_offset 7, -8
 9148              		.cfi_offset 14, -4
 9149 0002 00AF     		add	r7, sp, #0
 9150              		.cfi_def_cfa_register 7
2660:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XG_BIT, buffer);
 9151              		.loc 1 2660 0
 9152 0004 074B     		ldr	r3, .L720
 9153 0006 1A78     		ldrb	r2, [r3]
 9154 0008 074B     		ldr	r3, .L720+4
 9155 000a 101C     		mov	r0, r2
 9156 000c 6C21     		mov	r1, #108
 9157 000e 0222     		mov	r2, #2
 9158 0010 FFF7FEFF 		bl	I2CReadBit
2661:.\mpu6050.c   ****     return buffer[0];
 9159              		.loc 1 2661 0
 9160 0014 044B     		ldr	r3, .L720+4
 9161 0016 1B78     		ldrb	r3, [r3]
 9162 0018 5A1E     		sub	r2, r3, #1
 9163 001a 9341     		sbc	r3, r3, r2
 9164 001c DBB2     		uxtb	r3, r3
2662:.\mpu6050.c   **** }
 9165              		.loc 1 2662 0
 9166 001e 181C     		mov	r0, r3
 9167 0020 BD46     		mov	sp, r7
 9168              		@ sp needed
 9169 0022 80BD     		pop	{r7, pc}
 9170              	.L721:
 9171              		.align	2
 9172              	.L720:
 9173 0024 00000000 		.word	devAddr
 9174 0028 00000000 		.word	buffer
 9175              		.cfi_endproc
 9176              	.LFE197:
 9177              		.size	MPU6050_getStandbyXGyroEnabled, .-MPU6050_getStandbyXGyroEnabled
 9178              		.section	.text.MPU6050_setStandbyXGyroEnabled,"ax",%progbits
 9179              		.align	2
 9180              		.global	MPU6050_setStandbyXGyroEnabled
 9181              		.code	16
 9182              		.thumb_func
 9183              		.type	MPU6050_setStandbyXGyroEnabled, %function
 9184              	MPU6050_setStandbyXGyroEnabled:
 9185              	.LFB198:
2663:.\mpu6050.c   **** /** Set X-axis gyroscope standby enabled status.
2664:.\mpu6050.c   ****  * @param New X-axis standby enabled status
2665:.\mpu6050.c   ****  * @see getStandbyXGyroEnabled()
2666:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2667:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_XG_BIT
2668:.\mpu6050.c   ****  */
2669:.\mpu6050.c   **** void MPU6050_setStandbyXGyroEnabled(bool enabled) {
 9186              		.loc 1 2669 0
 9187              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 209


 9188 0000 80B5     		push	{r7, lr}
 9189              		.cfi_def_cfa_offset 8
 9190              		.cfi_offset 7, -8
 9191              		.cfi_offset 14, -4
 9192 0002 82B0     		sub	sp, sp, #8
 9193              		.cfi_def_cfa_offset 16
 9194 0004 00AF     		add	r7, sp, #0
 9195              		.cfi_def_cfa_register 7
 9196 0006 021C     		mov	r2, r0
 9197 0008 FB1D     		add	r3, r7, #7
 9198 000a 1A70     		strb	r2, [r3]
2670:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XG_BIT, enabled);
 9199              		.loc 1 2670 0
 9200 000c 054B     		ldr	r3, .L723
 9201 000e 1A78     		ldrb	r2, [r3]
 9202 0010 FB1D     		add	r3, r7, #7
 9203 0012 1B78     		ldrb	r3, [r3]
 9204 0014 101C     		mov	r0, r2
 9205 0016 6C21     		mov	r1, #108
 9206 0018 0222     		mov	r2, #2
 9207 001a FFF7FEFF 		bl	I2CWriteBit
2671:.\mpu6050.c   **** }
 9208              		.loc 1 2671 0
 9209 001e BD46     		mov	sp, r7
 9210 0020 02B0     		add	sp, sp, #8
 9211              		@ sp needed
 9212 0022 80BD     		pop	{r7, pc}
 9213              	.L724:
 9214              		.align	2
 9215              	.L723:
 9216 0024 00000000 		.word	devAddr
 9217              		.cfi_endproc
 9218              	.LFE198:
 9219              		.size	MPU6050_setStandbyXGyroEnabled, .-MPU6050_setStandbyXGyroEnabled
 9220              		.section	.text.MPU6050_getStandbyYGyroEnabled,"ax",%progbits
 9221              		.align	2
 9222              		.global	MPU6050_getStandbyYGyroEnabled
 9223              		.code	16
 9224              		.thumb_func
 9225              		.type	MPU6050_getStandbyYGyroEnabled, %function
 9226              	MPU6050_getStandbyYGyroEnabled:
 9227              	.LFB199:
2672:.\mpu6050.c   **** /** Get Y-axis gyroscope standby enabled status.
2673:.\mpu6050.c   ****  * If enabled, the Y-axis will not gather or report data (or use power).
2674:.\mpu6050.c   ****  * @return Current Y-axis standby enabled status
2675:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2676:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_YG_BIT
2677:.\mpu6050.c   ****  */
2678:.\mpu6050.c   **** bool MPU6050_getStandbyYGyroEnabled() {
 9228              		.loc 1 2678 0
 9229              		.cfi_startproc
 9230 0000 80B5     		push	{r7, lr}
 9231              		.cfi_def_cfa_offset 8
 9232              		.cfi_offset 7, -8
 9233              		.cfi_offset 14, -4
 9234 0002 00AF     		add	r7, sp, #0
 9235              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 210


2679:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YG_BIT, buffer);
 9236              		.loc 1 2679 0
 9237 0004 074B     		ldr	r3, .L727
 9238 0006 1A78     		ldrb	r2, [r3]
 9239 0008 074B     		ldr	r3, .L727+4
 9240 000a 101C     		mov	r0, r2
 9241 000c 6C21     		mov	r1, #108
 9242 000e 0122     		mov	r2, #1
 9243 0010 FFF7FEFF 		bl	I2CReadBit
2680:.\mpu6050.c   ****     return buffer[0];
 9244              		.loc 1 2680 0
 9245 0014 044B     		ldr	r3, .L727+4
 9246 0016 1B78     		ldrb	r3, [r3]
 9247 0018 5A1E     		sub	r2, r3, #1
 9248 001a 9341     		sbc	r3, r3, r2
 9249 001c DBB2     		uxtb	r3, r3
2681:.\mpu6050.c   **** }
 9250              		.loc 1 2681 0
 9251 001e 181C     		mov	r0, r3
 9252 0020 BD46     		mov	sp, r7
 9253              		@ sp needed
 9254 0022 80BD     		pop	{r7, pc}
 9255              	.L728:
 9256              		.align	2
 9257              	.L727:
 9258 0024 00000000 		.word	devAddr
 9259 0028 00000000 		.word	buffer
 9260              		.cfi_endproc
 9261              	.LFE199:
 9262              		.size	MPU6050_getStandbyYGyroEnabled, .-MPU6050_getStandbyYGyroEnabled
 9263              		.section	.text.MPU6050_setStandbyYGyroEnabled,"ax",%progbits
 9264              		.align	2
 9265              		.global	MPU6050_setStandbyYGyroEnabled
 9266              		.code	16
 9267              		.thumb_func
 9268              		.type	MPU6050_setStandbyYGyroEnabled, %function
 9269              	MPU6050_setStandbyYGyroEnabled:
 9270              	.LFB200:
2682:.\mpu6050.c   **** /** Set Y-axis gyroscope standby enabled status.
2683:.\mpu6050.c   ****  * @param New Y-axis standby enabled status
2684:.\mpu6050.c   ****  * @see getStandbyYGyroEnabled()
2685:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2686:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_YG_BIT
2687:.\mpu6050.c   ****  */
2688:.\mpu6050.c   **** void MPU6050_setStandbyYGyroEnabled(bool enabled) {
 9271              		.loc 1 2688 0
 9272              		.cfi_startproc
 9273 0000 80B5     		push	{r7, lr}
 9274              		.cfi_def_cfa_offset 8
 9275              		.cfi_offset 7, -8
 9276              		.cfi_offset 14, -4
 9277 0002 82B0     		sub	sp, sp, #8
 9278              		.cfi_def_cfa_offset 16
 9279 0004 00AF     		add	r7, sp, #0
 9280              		.cfi_def_cfa_register 7
 9281 0006 021C     		mov	r2, r0
 9282 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 211


 9283 000a 1A70     		strb	r2, [r3]
2689:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YG_BIT, enabled);
 9284              		.loc 1 2689 0
 9285 000c 054B     		ldr	r3, .L730
 9286 000e 1A78     		ldrb	r2, [r3]
 9287 0010 FB1D     		add	r3, r7, #7
 9288 0012 1B78     		ldrb	r3, [r3]
 9289 0014 101C     		mov	r0, r2
 9290 0016 6C21     		mov	r1, #108
 9291 0018 0122     		mov	r2, #1
 9292 001a FFF7FEFF 		bl	I2CWriteBit
2690:.\mpu6050.c   **** }
 9293              		.loc 1 2690 0
 9294 001e BD46     		mov	sp, r7
 9295 0020 02B0     		add	sp, sp, #8
 9296              		@ sp needed
 9297 0022 80BD     		pop	{r7, pc}
 9298              	.L731:
 9299              		.align	2
 9300              	.L730:
 9301 0024 00000000 		.word	devAddr
 9302              		.cfi_endproc
 9303              	.LFE200:
 9304              		.size	MPU6050_setStandbyYGyroEnabled, .-MPU6050_setStandbyYGyroEnabled
 9305              		.section	.text.MPU6050_getStandbyZGyroEnabled,"ax",%progbits
 9306              		.align	2
 9307              		.global	MPU6050_getStandbyZGyroEnabled
 9308              		.code	16
 9309              		.thumb_func
 9310              		.type	MPU6050_getStandbyZGyroEnabled, %function
 9311              	MPU6050_getStandbyZGyroEnabled:
 9312              	.LFB201:
2691:.\mpu6050.c   **** /** Get Z-axis gyroscope standby enabled status.
2692:.\mpu6050.c   ****  * If enabled, the Z-axis will not gather or report data (or use power).
2693:.\mpu6050.c   ****  * @return Current Z-axis standby enabled status
2694:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2695:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_ZG_BIT
2696:.\mpu6050.c   ****  */
2697:.\mpu6050.c   **** bool MPU6050_getStandbyZGyroEnabled() {
 9313              		.loc 1 2697 0
 9314              		.cfi_startproc
 9315 0000 80B5     		push	{r7, lr}
 9316              		.cfi_def_cfa_offset 8
 9317              		.cfi_offset 7, -8
 9318              		.cfi_offset 14, -4
 9319 0002 00AF     		add	r7, sp, #0
 9320              		.cfi_def_cfa_register 7
2698:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZG_BIT, buffer);
 9321              		.loc 1 2698 0
 9322 0004 074B     		ldr	r3, .L734
 9323 0006 1A78     		ldrb	r2, [r3]
 9324 0008 074B     		ldr	r3, .L734+4
 9325 000a 101C     		mov	r0, r2
 9326 000c 6C21     		mov	r1, #108
 9327 000e 0022     		mov	r2, #0
 9328 0010 FFF7FEFF 		bl	I2CReadBit
2699:.\mpu6050.c   ****     return buffer[0];
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 212


 9329              		.loc 1 2699 0
 9330 0014 044B     		ldr	r3, .L734+4
 9331 0016 1B78     		ldrb	r3, [r3]
 9332 0018 5A1E     		sub	r2, r3, #1
 9333 001a 9341     		sbc	r3, r3, r2
 9334 001c DBB2     		uxtb	r3, r3
2700:.\mpu6050.c   **** }
 9335              		.loc 1 2700 0
 9336 001e 181C     		mov	r0, r3
 9337 0020 BD46     		mov	sp, r7
 9338              		@ sp needed
 9339 0022 80BD     		pop	{r7, pc}
 9340              	.L735:
 9341              		.align	2
 9342              	.L734:
 9343 0024 00000000 		.word	devAddr
 9344 0028 00000000 		.word	buffer
 9345              		.cfi_endproc
 9346              	.LFE201:
 9347              		.size	MPU6050_getStandbyZGyroEnabled, .-MPU6050_getStandbyZGyroEnabled
 9348              		.section	.text.MPU6050_setStandbyZGyroEnabled,"ax",%progbits
 9349              		.align	2
 9350              		.global	MPU6050_setStandbyZGyroEnabled
 9351              		.code	16
 9352              		.thumb_func
 9353              		.type	MPU6050_setStandbyZGyroEnabled, %function
 9354              	MPU6050_setStandbyZGyroEnabled:
 9355              	.LFB202:
2701:.\mpu6050.c   **** /** Set Z-axis gyroscope standby enabled status.
2702:.\mpu6050.c   ****  * @param New Z-axis standby enabled status
2703:.\mpu6050.c   ****  * @see getStandbyZGyroEnabled()
2704:.\mpu6050.c   ****  * @see MPU6050_RA_PWR_MGMT_2
2705:.\mpu6050.c   ****  * @see MPU6050_PWR2_STBY_ZG_BIT
2706:.\mpu6050.c   ****  */
2707:.\mpu6050.c   **** void MPU6050_setStandbyZGyroEnabled(bool enabled) {
 9356              		.loc 1 2707 0
 9357              		.cfi_startproc
 9358 0000 80B5     		push	{r7, lr}
 9359              		.cfi_def_cfa_offset 8
 9360              		.cfi_offset 7, -8
 9361              		.cfi_offset 14, -4
 9362 0002 82B0     		sub	sp, sp, #8
 9363              		.cfi_def_cfa_offset 16
 9364 0004 00AF     		add	r7, sp, #0
 9365              		.cfi_def_cfa_register 7
 9366 0006 021C     		mov	r2, r0
 9367 0008 FB1D     		add	r3, r7, #7
 9368 000a 1A70     		strb	r2, [r3]
2708:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZG_BIT, enabled);
 9369              		.loc 1 2708 0
 9370 000c 054B     		ldr	r3, .L737
 9371 000e 1A78     		ldrb	r2, [r3]
 9372 0010 FB1D     		add	r3, r7, #7
 9373 0012 1B78     		ldrb	r3, [r3]
 9374 0014 101C     		mov	r0, r2
 9375 0016 6C21     		mov	r1, #108
 9376 0018 0022     		mov	r2, #0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 213


 9377 001a FFF7FEFF 		bl	I2CWriteBit
2709:.\mpu6050.c   **** }
 9378              		.loc 1 2709 0
 9379 001e BD46     		mov	sp, r7
 9380 0020 02B0     		add	sp, sp, #8
 9381              		@ sp needed
 9382 0022 80BD     		pop	{r7, pc}
 9383              	.L738:
 9384              		.align	2
 9385              	.L737:
 9386 0024 00000000 		.word	devAddr
 9387              		.cfi_endproc
 9388              	.LFE202:
 9389              		.size	MPU6050_setStandbyZGyroEnabled, .-MPU6050_setStandbyZGyroEnabled
 9390              		.section	.text.MPU6050_getFIFOCount,"ax",%progbits
 9391              		.align	2
 9392              		.global	MPU6050_getFIFOCount
 9393              		.code	16
 9394              		.thumb_func
 9395              		.type	MPU6050_getFIFOCount, %function
 9396              	MPU6050_getFIFOCount:
 9397              	.LFB203:
2710:.\mpu6050.c   **** 
2711:.\mpu6050.c   **** // FIFO_COUNT* registers
2712:.\mpu6050.c   **** 
2713:.\mpu6050.c   **** /** Get current FIFO buffer size.
2714:.\mpu6050.c   ****  * This value indicates the number of bytes stored in the FIFO buffer. This
2715:.\mpu6050.c   ****  * number is in turn the number of bytes that can be read from the FIFO buffer
2716:.\mpu6050.c   ****  * and it is directly proportional to the number of samples available given the
2717:.\mpu6050.c   ****  * set of sensor data bound to be stored in the FIFO (register 35 and 36).
2718:.\mpu6050.c   ****  * @return Current FIFO buffer size
2719:.\mpu6050.c   ****  */
2720:.\mpu6050.c   **** uint16_t MPU6050_getFIFOCount() {
 9398              		.loc 1 2720 0
 9399              		.cfi_startproc
 9400 0000 80B5     		push	{r7, lr}
 9401              		.cfi_def_cfa_offset 8
 9402              		.cfi_offset 7, -8
 9403              		.cfi_offset 14, -4
 9404 0002 00AF     		add	r7, sp, #0
 9405              		.cfi_def_cfa_register 7
2721:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 9406              		.loc 1 2721 0
 9407 0004 094B     		ldr	r3, .L741
 9408 0006 1A78     		ldrb	r2, [r3]
 9409 0008 094B     		ldr	r3, .L741+4
 9410 000a 101C     		mov	r0, r2
 9411 000c 7221     		mov	r1, #114
 9412 000e 0222     		mov	r2, #2
 9413 0010 FFF7FEFF 		bl	I2CReadBytes
2722:.\mpu6050.c   ****     return (((uint16_t)buffer[0]) << 8) | buffer[1];
 9414              		.loc 1 2722 0
 9415 0014 064B     		ldr	r3, .L741+4
 9416 0016 1B78     		ldrb	r3, [r3]
 9417 0018 1B02     		lsl	r3, r3, #8
 9418 001a 9AB2     		uxth	r2, r3
 9419 001c 044B     		ldr	r3, .L741+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 214


 9420 001e 5B78     		ldrb	r3, [r3, #1]
 9421 0020 1343     		orr	r3, r2
 9422 0022 9BB2     		uxth	r3, r3
 9423 0024 9BB2     		uxth	r3, r3
2723:.\mpu6050.c   **** }
 9424              		.loc 1 2723 0
 9425 0026 181C     		mov	r0, r3
 9426 0028 BD46     		mov	sp, r7
 9427              		@ sp needed
 9428 002a 80BD     		pop	{r7, pc}
 9429              	.L742:
 9430              		.align	2
 9431              	.L741:
 9432 002c 00000000 		.word	devAddr
 9433 0030 00000000 		.word	buffer
 9434              		.cfi_endproc
 9435              	.LFE203:
 9436              		.size	MPU6050_getFIFOCount, .-MPU6050_getFIFOCount
 9437              		.section	.text.MPU6050_getFIFOByte,"ax",%progbits
 9438              		.align	2
 9439              		.global	MPU6050_getFIFOByte
 9440              		.code	16
 9441              		.thumb_func
 9442              		.type	MPU6050_getFIFOByte, %function
 9443              	MPU6050_getFIFOByte:
 9444              	.LFB204:
2724:.\mpu6050.c   **** 
2725:.\mpu6050.c   **** // FIFO_R_W register
2726:.\mpu6050.c   **** 
2727:.\mpu6050.c   **** /** Get byte from FIFO buffer.
2728:.\mpu6050.c   ****  * This register is used to read and write data from the FIFO buffer. Data is
2729:.\mpu6050.c   ****  * written to the FIFO in order of register number (from lowest to highest). If
2730:.\mpu6050.c   ****  * all the FIFO enable flags (see below) are enabled and all External Sensor
2731:.\mpu6050.c   ****  * Data registers (Registers 73 to 96) are associated with a Slave device, the
2732:.\mpu6050.c   ****  * contents of registers 59 through 96 will be written in order at the Sample
2733:.\mpu6050.c   ****  * Rate.
2734:.\mpu6050.c   ****  *
2735:.\mpu6050.c   ****  * The contents of the sensor data registers (Registers 59 to 96) are written
2736:.\mpu6050.c   ****  * into the FIFO buffer when their corresponding FIFO enable flags are set to 1
2737:.\mpu6050.c   ****  * in FIFO_EN (Register 35). An additional flag for the sensor data registers
2738:.\mpu6050.c   ****  * associated with I2C Slave 3 can be found in I2C_MST_CTRL (Register 36).
2739:.\mpu6050.c   ****  *
2740:.\mpu6050.c   ****  * If the FIFO buffer has overflowed, the status bit FIFO_OFLOW_INT is
2741:.\mpu6050.c   ****  * automatically set to 1. This bit is located in INT_STATUS (Register 58).
2742:.\mpu6050.c   ****  * When the FIFO buffer has overflowed, the oldest data will be lost and new
2743:.\mpu6050.c   ****  * data will be written to the FIFO.
2744:.\mpu6050.c   ****  *
2745:.\mpu6050.c   ****  * If the FIFO buffer is empty, reading this register will return the last byte
2746:.\mpu6050.c   ****  * that was previously read from the FIFO until new data is available. The user
2747:.\mpu6050.c   ****  * should check FIFO_COUNT to ensure that the FIFO buffer is not read when
2748:.\mpu6050.c   ****  * empty.
2749:.\mpu6050.c   ****  *
2750:.\mpu6050.c   ****  * @return Byte from FIFO buffer
2751:.\mpu6050.c   ****  */
2752:.\mpu6050.c   **** uint8_t MPU6050_getFIFOByte() {
 9445              		.loc 1 2752 0
 9446              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 215


 9447 0000 80B5     		push	{r7, lr}
 9448              		.cfi_def_cfa_offset 8
 9449              		.cfi_offset 7, -8
 9450              		.cfi_offset 14, -4
 9451 0002 00AF     		add	r7, sp, #0
 9452              		.cfi_def_cfa_register 7
2753:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
 9453              		.loc 1 2753 0
 9454 0004 064B     		ldr	r3, .L745
 9455 0006 1A78     		ldrb	r2, [r3]
 9456 0008 064B     		ldr	r3, .L745+4
 9457 000a 101C     		mov	r0, r2
 9458 000c 7421     		mov	r1, #116
 9459 000e 1A1C     		mov	r2, r3
 9460 0010 FFF7FEFF 		bl	I2CReadByte
2754:.\mpu6050.c   ****     return buffer[0];
 9461              		.loc 1 2754 0
 9462 0014 034B     		ldr	r3, .L745+4
 9463 0016 1B78     		ldrb	r3, [r3]
2755:.\mpu6050.c   **** }
 9464              		.loc 1 2755 0
 9465 0018 181C     		mov	r0, r3
 9466 001a BD46     		mov	sp, r7
 9467              		@ sp needed
 9468 001c 80BD     		pop	{r7, pc}
 9469              	.L746:
 9470 001e C046     		.align	2
 9471              	.L745:
 9472 0020 00000000 		.word	devAddr
 9473 0024 00000000 		.word	buffer
 9474              		.cfi_endproc
 9475              	.LFE204:
 9476              		.size	MPU6050_getFIFOByte, .-MPU6050_getFIFOByte
 9477              		.section	.text.MPU6050_getFIFOBytes,"ax",%progbits
 9478              		.align	2
 9479              		.global	MPU6050_getFIFOBytes
 9480              		.code	16
 9481              		.thumb_func
 9482              		.type	MPU6050_getFIFOBytes, %function
 9483              	MPU6050_getFIFOBytes:
 9484              	.LFB205:
2756:.\mpu6050.c   **** void MPU6050_getFIFOBytes(uint8_t *data, uint8_t length) {
 9485              		.loc 1 2756 0
 9486              		.cfi_startproc
 9487 0000 80B5     		push	{r7, lr}
 9488              		.cfi_def_cfa_offset 8
 9489              		.cfi_offset 7, -8
 9490              		.cfi_offset 14, -4
 9491 0002 82B0     		sub	sp, sp, #8
 9492              		.cfi_def_cfa_offset 16
 9493 0004 00AF     		add	r7, sp, #0
 9494              		.cfi_def_cfa_register 7
 9495 0006 7860     		str	r0, [r7, #4]
 9496 0008 0A1C     		mov	r2, r1
 9497 000a FB1C     		add	r3, r7, #3
 9498 000c 1A70     		strb	r2, [r3]
2757:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 216


 9499              		.loc 1 2757 0
 9500 000e 064B     		ldr	r3, .L748
 9501 0010 1978     		ldrb	r1, [r3]
 9502 0012 FB1C     		add	r3, r7, #3
 9503 0014 1A78     		ldrb	r2, [r3]
 9504 0016 7B68     		ldr	r3, [r7, #4]
 9505 0018 081C     		mov	r0, r1
 9506 001a 7421     		mov	r1, #116
 9507 001c FFF7FEFF 		bl	I2CReadBytes
2758:.\mpu6050.c   **** }
 9508              		.loc 1 2758 0
 9509 0020 BD46     		mov	sp, r7
 9510 0022 02B0     		add	sp, sp, #8
 9511              		@ sp needed
 9512 0024 80BD     		pop	{r7, pc}
 9513              	.L749:
 9514 0026 C046     		.align	2
 9515              	.L748:
 9516 0028 00000000 		.word	devAddr
 9517              		.cfi_endproc
 9518              	.LFE205:
 9519              		.size	MPU6050_getFIFOBytes, .-MPU6050_getFIFOBytes
 9520              		.section	.text.MPU6050_setFIFOByte,"ax",%progbits
 9521              		.align	2
 9522              		.global	MPU6050_setFIFOByte
 9523              		.code	16
 9524              		.thumb_func
 9525              		.type	MPU6050_setFIFOByte, %function
 9526              	MPU6050_setFIFOByte:
 9527              	.LFB206:
2759:.\mpu6050.c   **** /** Write byte to FIFO buffer.
2760:.\mpu6050.c   ****  * @see getFIFOByte()
2761:.\mpu6050.c   ****  * @see MPU6050_RA_FIFO_R_W
2762:.\mpu6050.c   ****  */
2763:.\mpu6050.c   **** void MPU6050_setFIFOByte(uint8_t data) {
 9528              		.loc 1 2763 0
 9529              		.cfi_startproc
 9530 0000 80B5     		push	{r7, lr}
 9531              		.cfi_def_cfa_offset 8
 9532              		.cfi_offset 7, -8
 9533              		.cfi_offset 14, -4
 9534 0002 82B0     		sub	sp, sp, #8
 9535              		.cfi_def_cfa_offset 16
 9536 0004 00AF     		add	r7, sp, #0
 9537              		.cfi_def_cfa_register 7
 9538 0006 021C     		mov	r2, r0
 9539 0008 FB1D     		add	r3, r7, #7
 9540 000a 1A70     		strb	r2, [r3]
2764:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_FIFO_R_W, data);
 9541              		.loc 1 2764 0
 9542 000c 054B     		ldr	r3, .L751
 9543 000e 1A78     		ldrb	r2, [r3]
 9544 0010 FB1D     		add	r3, r7, #7
 9545 0012 1B78     		ldrb	r3, [r3]
 9546 0014 101C     		mov	r0, r2
 9547 0016 7421     		mov	r1, #116
 9548 0018 1A1C     		mov	r2, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 217


 9549 001a FFF7FEFF 		bl	I2CWriteByte
2765:.\mpu6050.c   **** }
 9550              		.loc 1 2765 0
 9551 001e BD46     		mov	sp, r7
 9552 0020 02B0     		add	sp, sp, #8
 9553              		@ sp needed
 9554 0022 80BD     		pop	{r7, pc}
 9555              	.L752:
 9556              		.align	2
 9557              	.L751:
 9558 0024 00000000 		.word	devAddr
 9559              		.cfi_endproc
 9560              	.LFE206:
 9561              		.size	MPU6050_setFIFOByte, .-MPU6050_setFIFOByte
 9562              		.section	.text.MPU6050_getDeviceID,"ax",%progbits
 9563              		.align	2
 9564              		.global	MPU6050_getDeviceID
 9565              		.code	16
 9566              		.thumb_func
 9567              		.type	MPU6050_getDeviceID, %function
 9568              	MPU6050_getDeviceID:
 9569              	.LFB207:
2766:.\mpu6050.c   **** 
2767:.\mpu6050.c   **** // WHO_AM_I register
2768:.\mpu6050.c   **** 
2769:.\mpu6050.c   **** /** Get Device ID.
2770:.\mpu6050.c   ****  * This register is used to verify the identity of the device (0b110100, 0x34).
2771:.\mpu6050.c   ****  * @return Device ID (6 bits only! should be 0x34)
2772:.\mpu6050.c   ****  * @see MPU6050_RA_WHO_AM_I
2773:.\mpu6050.c   ****  * @see MPU6050_WHO_AM_I_BIT
2774:.\mpu6050.c   ****  * @see MPU6050_WHO_AM_I_LENGTH
2775:.\mpu6050.c   ****  */
2776:.\mpu6050.c   **** uint8_t MPU6050_getDeviceID() {
 9570              		.loc 1 2776 0
 9571              		.cfi_startproc
 9572 0000 80B5     		push	{r7, lr}
 9573              		.cfi_def_cfa_offset 8
 9574              		.cfi_offset 7, -8
 9575              		.cfi_offset 14, -4
 9576 0002 82B0     		sub	sp, sp, #8
 9577              		.cfi_def_cfa_offset 16
 9578 0004 02AF     		add	r7, sp, #8
 9579              		.cfi_def_cfa 7, 8
2777:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer
 9580              		.loc 1 2777 0
 9581 0006 074B     		ldr	r3, .L755
 9582 0008 1B78     		ldrb	r3, [r3]
 9583 000a 074A     		ldr	r2, .L755+4
 9584 000c 0092     		str	r2, [sp]
 9585 000e 181C     		mov	r0, r3
 9586 0010 7521     		mov	r1, #117
 9587 0012 0622     		mov	r2, #6
 9588 0014 0623     		mov	r3, #6
 9589 0016 FFF7FEFF 		bl	I2CReadBits
2778:.\mpu6050.c   ****     return buffer[0];
 9590              		.loc 1 2778 0
 9591 001a 034B     		ldr	r3, .L755+4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 218


 9592 001c 1B78     		ldrb	r3, [r3]
2779:.\mpu6050.c   **** }
 9593              		.loc 1 2779 0
 9594 001e 181C     		mov	r0, r3
 9595 0020 BD46     		mov	sp, r7
 9596              		@ sp needed
 9597 0022 80BD     		pop	{r7, pc}
 9598              	.L756:
 9599              		.align	2
 9600              	.L755:
 9601 0024 00000000 		.word	devAddr
 9602 0028 00000000 		.word	buffer
 9603              		.cfi_endproc
 9604              	.LFE207:
 9605              		.size	MPU6050_getDeviceID, .-MPU6050_getDeviceID
 9606              		.section	.text.MPU6050_setDeviceID,"ax",%progbits
 9607              		.align	2
 9608              		.global	MPU6050_setDeviceID
 9609              		.code	16
 9610              		.thumb_func
 9611              		.type	MPU6050_setDeviceID, %function
 9612              	MPU6050_setDeviceID:
 9613              	.LFB208:
2780:.\mpu6050.c   **** /** Set Device ID.
2781:.\mpu6050.c   ****  * Write a new ID into the WHO_AM_I register (no idea why this should ever be
2782:.\mpu6050.c   ****  * necessary though).
2783:.\mpu6050.c   ****  * @param id New device ID to set.
2784:.\mpu6050.c   ****  * @see getDeviceID()
2785:.\mpu6050.c   ****  * @see MPU6050_RA_WHO_AM_I
2786:.\mpu6050.c   ****  * @see MPU6050_WHO_AM_I_BIT
2787:.\mpu6050.c   ****  * @see MPU6050_WHO_AM_I_LENGTH
2788:.\mpu6050.c   ****  */
2789:.\mpu6050.c   **** void MPU6050_setDeviceID(uint8_t id) {
 9614              		.loc 1 2789 0
 9615              		.cfi_startproc
 9616 0000 80B5     		push	{r7, lr}
 9617              		.cfi_def_cfa_offset 8
 9618              		.cfi_offset 7, -8
 9619              		.cfi_offset 14, -4
 9620 0002 84B0     		sub	sp, sp, #16
 9621              		.cfi_def_cfa_offset 24
 9622 0004 02AF     		add	r7, sp, #8
 9623              		.cfi_def_cfa 7, 16
 9624 0006 021C     		mov	r2, r0
 9625 0008 FB1D     		add	r3, r7, #7
 9626 000a 1A70     		strb	r2, [r3]
2790:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, id);
 9627              		.loc 1 2790 0
 9628 000c 064B     		ldr	r3, .L758
 9629 000e 1B78     		ldrb	r3, [r3]
 9630 0010 FA1D     		add	r2, r7, #7
 9631 0012 1278     		ldrb	r2, [r2]
 9632 0014 0092     		str	r2, [sp]
 9633 0016 181C     		mov	r0, r3
 9634 0018 7521     		mov	r1, #117
 9635 001a 0622     		mov	r2, #6
 9636 001c 0623     		mov	r3, #6
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 219


 9637 001e FFF7FEFF 		bl	I2CWriteBits
2791:.\mpu6050.c   **** }
 9638              		.loc 1 2791 0
 9639 0022 BD46     		mov	sp, r7
 9640 0024 02B0     		add	sp, sp, #8
 9641              		@ sp needed
 9642 0026 80BD     		pop	{r7, pc}
 9643              	.L759:
 9644              		.align	2
 9645              	.L758:
 9646 0028 00000000 		.word	devAddr
 9647              		.cfi_endproc
 9648              	.LFE208:
 9649              		.size	MPU6050_setDeviceID, .-MPU6050_setDeviceID
 9650              		.section	.text.MPU6050_getOTPBankValid,"ax",%progbits
 9651              		.align	2
 9652              		.global	MPU6050_getOTPBankValid
 9653              		.code	16
 9654              		.thumb_func
 9655              		.type	MPU6050_getOTPBankValid, %function
 9656              	MPU6050_getOTPBankValid:
 9657              	.LFB209:
2792:.\mpu6050.c   **** 
2793:.\mpu6050.c   **** // ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========
2794:.\mpu6050.c   **** 
2795:.\mpu6050.c   **** // XG_OFFS_TC register
2796:.\mpu6050.c   **** 
2797:.\mpu6050.c   **** uint8_t MPU6050_getOTPBankValid() {
 9658              		.loc 1 2797 0
 9659              		.cfi_startproc
 9660 0000 80B5     		push	{r7, lr}
 9661              		.cfi_def_cfa_offset 8
 9662              		.cfi_offset 7, -8
 9663              		.cfi_offset 14, -4
 9664 0002 00AF     		add	r7, sp, #0
 9665              		.cfi_def_cfa_register 7
2798:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
 9666              		.loc 1 2798 0
 9667 0004 064B     		ldr	r3, .L762
 9668 0006 1A78     		ldrb	r2, [r3]
 9669 0008 064B     		ldr	r3, .L762+4
 9670 000a 101C     		mov	r0, r2
 9671 000c 0021     		mov	r1, #0
 9672 000e 0022     		mov	r2, #0
 9673 0010 FFF7FEFF 		bl	I2CReadBit
2799:.\mpu6050.c   ****     return buffer[0];
 9674              		.loc 1 2799 0
 9675 0014 034B     		ldr	r3, .L762+4
 9676 0016 1B78     		ldrb	r3, [r3]
2800:.\mpu6050.c   **** }
 9677              		.loc 1 2800 0
 9678 0018 181C     		mov	r0, r3
 9679 001a BD46     		mov	sp, r7
 9680              		@ sp needed
 9681 001c 80BD     		pop	{r7, pc}
 9682              	.L763:
 9683 001e C046     		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 220


 9684              	.L762:
 9685 0020 00000000 		.word	devAddr
 9686 0024 00000000 		.word	buffer
 9687              		.cfi_endproc
 9688              	.LFE209:
 9689              		.size	MPU6050_getOTPBankValid, .-MPU6050_getOTPBankValid
 9690              		.section	.text.MPU6050_setOTPBankValid,"ax",%progbits
 9691              		.align	2
 9692              		.global	MPU6050_setOTPBankValid
 9693              		.code	16
 9694              		.thumb_func
 9695              		.type	MPU6050_setOTPBankValid, %function
 9696              	MPU6050_setOTPBankValid:
 9697              	.LFB210:
2801:.\mpu6050.c   **** void MPU6050_setOTPBankValid(bool enabled) {
 9698              		.loc 1 2801 0
 9699              		.cfi_startproc
 9700 0000 80B5     		push	{r7, lr}
 9701              		.cfi_def_cfa_offset 8
 9702              		.cfi_offset 7, -8
 9703              		.cfi_offset 14, -4
 9704 0002 82B0     		sub	sp, sp, #8
 9705              		.cfi_def_cfa_offset 16
 9706 0004 00AF     		add	r7, sp, #0
 9707              		.cfi_def_cfa_register 7
 9708 0006 021C     		mov	r2, r0
 9709 0008 FB1D     		add	r3, r7, #7
 9710 000a 1A70     		strb	r2, [r3]
2802:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 9711              		.loc 1 2802 0
 9712 000c 054B     		ldr	r3, .L765
 9713 000e 1A78     		ldrb	r2, [r3]
 9714 0010 FB1D     		add	r3, r7, #7
 9715 0012 1B78     		ldrb	r3, [r3]
 9716 0014 101C     		mov	r0, r2
 9717 0016 0021     		mov	r1, #0
 9718 0018 0022     		mov	r2, #0
 9719 001a FFF7FEFF 		bl	I2CWriteBit
2803:.\mpu6050.c   **** }
 9720              		.loc 1 2803 0
 9721 001e BD46     		mov	sp, r7
 9722 0020 02B0     		add	sp, sp, #8
 9723              		@ sp needed
 9724 0022 80BD     		pop	{r7, pc}
 9725              	.L766:
 9726              		.align	2
 9727              	.L765:
 9728 0024 00000000 		.word	devAddr
 9729              		.cfi_endproc
 9730              	.LFE210:
 9731              		.size	MPU6050_setOTPBankValid, .-MPU6050_setOTPBankValid
 9732              		.section	.text.MPU6050_getXGyroOffset,"ax",%progbits
 9733              		.align	2
 9734              		.global	MPU6050_getXGyroOffset
 9735              		.code	16
 9736              		.thumb_func
 9737              		.type	MPU6050_getXGyroOffset, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 221


 9738              	MPU6050_getXGyroOffset:
 9739              	.LFB211:
2804:.\mpu6050.c   **** int8_t MPU6050_getXGyroOffset() {
 9740              		.loc 1 2804 0
 9741              		.cfi_startproc
 9742 0000 80B5     		push	{r7, lr}
 9743              		.cfi_def_cfa_offset 8
 9744              		.cfi_offset 7, -8
 9745              		.cfi_offset 14, -4
 9746 0002 82B0     		sub	sp, sp, #8
 9747              		.cfi_def_cfa_offset 16
 9748 0004 02AF     		add	r7, sp, #8
 9749              		.cfi_def_cfa 7, 8
2805:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, bu
 9750              		.loc 1 2805 0
 9751 0006 084B     		ldr	r3, .L769
 9752 0008 1B78     		ldrb	r3, [r3]
 9753 000a 084A     		ldr	r2, .L769+4
 9754 000c 0092     		str	r2, [sp]
 9755 000e 181C     		mov	r0, r3
 9756 0010 0021     		mov	r1, #0
 9757 0012 0622     		mov	r2, #6
 9758 0014 0623     		mov	r3, #6
 9759 0016 FFF7FEFF 		bl	I2CReadBits
2806:.\mpu6050.c   ****     return buffer[0];
 9760              		.loc 1 2806 0
 9761 001a 044B     		ldr	r3, .L769+4
 9762 001c 1B78     		ldrb	r3, [r3]
 9763 001e DBB2     		uxtb	r3, r3
 9764 0020 5BB2     		sxtb	r3, r3
2807:.\mpu6050.c   **** }
 9765              		.loc 1 2807 0
 9766 0022 181C     		mov	r0, r3
 9767 0024 BD46     		mov	sp, r7
 9768              		@ sp needed
 9769 0026 80BD     		pop	{r7, pc}
 9770              	.L770:
 9771              		.align	2
 9772              	.L769:
 9773 0028 00000000 		.word	devAddr
 9774 002c 00000000 		.word	buffer
 9775              		.cfi_endproc
 9776              	.LFE211:
 9777              		.size	MPU6050_getXGyroOffset, .-MPU6050_getXGyroOffset
 9778              		.section	.text.MPU6050_setXGyroOffset,"ax",%progbits
 9779              		.align	2
 9780              		.global	MPU6050_setXGyroOffset
 9781              		.code	16
 9782              		.thumb_func
 9783              		.type	MPU6050_setXGyroOffset, %function
 9784              	MPU6050_setXGyroOffset:
 9785              	.LFB212:
2808:.\mpu6050.c   **** void MPU6050_setXGyroOffset(int8_t offset) {
 9786              		.loc 1 2808 0
 9787              		.cfi_startproc
 9788 0000 80B5     		push	{r7, lr}
 9789              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 222


 9790              		.cfi_offset 7, -8
 9791              		.cfi_offset 14, -4
 9792 0002 84B0     		sub	sp, sp, #16
 9793              		.cfi_def_cfa_offset 24
 9794 0004 02AF     		add	r7, sp, #8
 9795              		.cfi_def_cfa 7, 16
 9796 0006 021C     		mov	r2, r0
 9797 0008 FB1D     		add	r3, r7, #7
 9798 000a 1A70     		strb	r2, [r3]
2809:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, o
 9799              		.loc 1 2809 0
 9800 000c 064B     		ldr	r3, .L772
 9801 000e 1B78     		ldrb	r3, [r3]
 9802 0010 FA1D     		add	r2, r7, #7
 9803 0012 1278     		ldrb	r2, [r2]
 9804 0014 0092     		str	r2, [sp]
 9805 0016 181C     		mov	r0, r3
 9806 0018 0021     		mov	r1, #0
 9807 001a 0622     		mov	r2, #6
 9808 001c 0623     		mov	r3, #6
 9809 001e FFF7FEFF 		bl	I2CWriteBits
2810:.\mpu6050.c   **** }
 9810              		.loc 1 2810 0
 9811 0022 BD46     		mov	sp, r7
 9812 0024 02B0     		add	sp, sp, #8
 9813              		@ sp needed
 9814 0026 80BD     		pop	{r7, pc}
 9815              	.L773:
 9816              		.align	2
 9817              	.L772:
 9818 0028 00000000 		.word	devAddr
 9819              		.cfi_endproc
 9820              	.LFE212:
 9821              		.size	MPU6050_setXGyroOffset, .-MPU6050_setXGyroOffset
 9822              		.section	.text.MPU6050_getYGyroOffset,"ax",%progbits
 9823              		.align	2
 9824              		.global	MPU6050_getYGyroOffset
 9825              		.code	16
 9826              		.thumb_func
 9827              		.type	MPU6050_getYGyroOffset, %function
 9828              	MPU6050_getYGyroOffset:
 9829              	.LFB213:
2811:.\mpu6050.c   **** 
2812:.\mpu6050.c   **** // YG_OFFS_TC register
2813:.\mpu6050.c   **** 
2814:.\mpu6050.c   **** int8_t MPU6050_getYGyroOffset() {
 9830              		.loc 1 2814 0
 9831              		.cfi_startproc
 9832 0000 80B5     		push	{r7, lr}
 9833              		.cfi_def_cfa_offset 8
 9834              		.cfi_offset 7, -8
 9835              		.cfi_offset 14, -4
 9836 0002 82B0     		sub	sp, sp, #8
 9837              		.cfi_def_cfa_offset 16
 9838 0004 02AF     		add	r7, sp, #8
 9839              		.cfi_def_cfa 7, 8
2815:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, bu
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 223


 9840              		.loc 1 2815 0
 9841 0006 084B     		ldr	r3, .L776
 9842 0008 1B78     		ldrb	r3, [r3]
 9843 000a 084A     		ldr	r2, .L776+4
 9844 000c 0092     		str	r2, [sp]
 9845 000e 181C     		mov	r0, r3
 9846 0010 0121     		mov	r1, #1
 9847 0012 0622     		mov	r2, #6
 9848 0014 0623     		mov	r3, #6
 9849 0016 FFF7FEFF 		bl	I2CReadBits
2816:.\mpu6050.c   ****     return buffer[0];
 9850              		.loc 1 2816 0
 9851 001a 044B     		ldr	r3, .L776+4
 9852 001c 1B78     		ldrb	r3, [r3]
 9853 001e DBB2     		uxtb	r3, r3
 9854 0020 5BB2     		sxtb	r3, r3
2817:.\mpu6050.c   **** }
 9855              		.loc 1 2817 0
 9856 0022 181C     		mov	r0, r3
 9857 0024 BD46     		mov	sp, r7
 9858              		@ sp needed
 9859 0026 80BD     		pop	{r7, pc}
 9860              	.L777:
 9861              		.align	2
 9862              	.L776:
 9863 0028 00000000 		.word	devAddr
 9864 002c 00000000 		.word	buffer
 9865              		.cfi_endproc
 9866              	.LFE213:
 9867              		.size	MPU6050_getYGyroOffset, .-MPU6050_getYGyroOffset
 9868              		.section	.text.MPU6050_setYGyroOffset,"ax",%progbits
 9869              		.align	2
 9870              		.global	MPU6050_setYGyroOffset
 9871              		.code	16
 9872              		.thumb_func
 9873              		.type	MPU6050_setYGyroOffset, %function
 9874              	MPU6050_setYGyroOffset:
 9875              	.LFB214:
2818:.\mpu6050.c   **** void MPU6050_setYGyroOffset(int8_t offset) {
 9876              		.loc 1 2818 0
 9877              		.cfi_startproc
 9878 0000 80B5     		push	{r7, lr}
 9879              		.cfi_def_cfa_offset 8
 9880              		.cfi_offset 7, -8
 9881              		.cfi_offset 14, -4
 9882 0002 84B0     		sub	sp, sp, #16
 9883              		.cfi_def_cfa_offset 24
 9884 0004 02AF     		add	r7, sp, #8
 9885              		.cfi_def_cfa 7, 16
 9886 0006 021C     		mov	r2, r0
 9887 0008 FB1D     		add	r3, r7, #7
 9888 000a 1A70     		strb	r2, [r3]
2819:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, o
 9889              		.loc 1 2819 0
 9890 000c 064B     		ldr	r3, .L779
 9891 000e 1B78     		ldrb	r3, [r3]
 9892 0010 FA1D     		add	r2, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 224


 9893 0012 1278     		ldrb	r2, [r2]
 9894 0014 0092     		str	r2, [sp]
 9895 0016 181C     		mov	r0, r3
 9896 0018 0121     		mov	r1, #1
 9897 001a 0622     		mov	r2, #6
 9898 001c 0623     		mov	r3, #6
 9899 001e FFF7FEFF 		bl	I2CWriteBits
2820:.\mpu6050.c   **** }
 9900              		.loc 1 2820 0
 9901 0022 BD46     		mov	sp, r7
 9902 0024 02B0     		add	sp, sp, #8
 9903              		@ sp needed
 9904 0026 80BD     		pop	{r7, pc}
 9905              	.L780:
 9906              		.align	2
 9907              	.L779:
 9908 0028 00000000 		.word	devAddr
 9909              		.cfi_endproc
 9910              	.LFE214:
 9911              		.size	MPU6050_setYGyroOffset, .-MPU6050_setYGyroOffset
 9912              		.section	.text.MPU6050_getZGyroOffset,"ax",%progbits
 9913              		.align	2
 9914              		.global	MPU6050_getZGyroOffset
 9915              		.code	16
 9916              		.thumb_func
 9917              		.type	MPU6050_getZGyroOffset, %function
 9918              	MPU6050_getZGyroOffset:
 9919              	.LFB215:
2821:.\mpu6050.c   **** 
2822:.\mpu6050.c   **** // ZG_OFFS_TC register
2823:.\mpu6050.c   **** 
2824:.\mpu6050.c   **** int8_t MPU6050_getZGyroOffset() {
 9920              		.loc 1 2824 0
 9921              		.cfi_startproc
 9922 0000 80B5     		push	{r7, lr}
 9923              		.cfi_def_cfa_offset 8
 9924              		.cfi_offset 7, -8
 9925              		.cfi_offset 14, -4
 9926 0002 82B0     		sub	sp, sp, #8
 9927              		.cfi_def_cfa_offset 16
 9928 0004 02AF     		add	r7, sp, #8
 9929              		.cfi_def_cfa 7, 8
2825:.\mpu6050.c   ****     I2CReadBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, bu
 9930              		.loc 1 2825 0
 9931 0006 084B     		ldr	r3, .L783
 9932 0008 1B78     		ldrb	r3, [r3]
 9933 000a 084A     		ldr	r2, .L783+4
 9934 000c 0092     		str	r2, [sp]
 9935 000e 181C     		mov	r0, r3
 9936 0010 0221     		mov	r1, #2
 9937 0012 0622     		mov	r2, #6
 9938 0014 0623     		mov	r3, #6
 9939 0016 FFF7FEFF 		bl	I2CReadBits
2826:.\mpu6050.c   ****     return buffer[0];
 9940              		.loc 1 2826 0
 9941 001a 044B     		ldr	r3, .L783+4
 9942 001c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 225


 9943 001e DBB2     		uxtb	r3, r3
 9944 0020 5BB2     		sxtb	r3, r3
2827:.\mpu6050.c   **** }
 9945              		.loc 1 2827 0
 9946 0022 181C     		mov	r0, r3
 9947 0024 BD46     		mov	sp, r7
 9948              		@ sp needed
 9949 0026 80BD     		pop	{r7, pc}
 9950              	.L784:
 9951              		.align	2
 9952              	.L783:
 9953 0028 00000000 		.word	devAddr
 9954 002c 00000000 		.word	buffer
 9955              		.cfi_endproc
 9956              	.LFE215:
 9957              		.size	MPU6050_getZGyroOffset, .-MPU6050_getZGyroOffset
 9958              		.section	.text.MPU6050_setZGyroOffset,"ax",%progbits
 9959              		.align	2
 9960              		.global	MPU6050_setZGyroOffset
 9961              		.code	16
 9962              		.thumb_func
 9963              		.type	MPU6050_setZGyroOffset, %function
 9964              	MPU6050_setZGyroOffset:
 9965              	.LFB216:
2828:.\mpu6050.c   **** void MPU6050_setZGyroOffset(int8_t offset) {
 9966              		.loc 1 2828 0
 9967              		.cfi_startproc
 9968 0000 80B5     		push	{r7, lr}
 9969              		.cfi_def_cfa_offset 8
 9970              		.cfi_offset 7, -8
 9971              		.cfi_offset 14, -4
 9972 0002 84B0     		sub	sp, sp, #16
 9973              		.cfi_def_cfa_offset 24
 9974 0004 02AF     		add	r7, sp, #8
 9975              		.cfi_def_cfa 7, 16
 9976 0006 021C     		mov	r2, r0
 9977 0008 FB1D     		add	r3, r7, #7
 9978 000a 1A70     		strb	r2, [r3]
2829:.\mpu6050.c   ****     I2CWriteBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, o
 9979              		.loc 1 2829 0
 9980 000c 064B     		ldr	r3, .L786
 9981 000e 1B78     		ldrb	r3, [r3]
 9982 0010 FA1D     		add	r2, r7, #7
 9983 0012 1278     		ldrb	r2, [r2]
 9984 0014 0092     		str	r2, [sp]
 9985 0016 181C     		mov	r0, r3
 9986 0018 0221     		mov	r1, #2
 9987 001a 0622     		mov	r2, #6
 9988 001c 0623     		mov	r3, #6
 9989 001e FFF7FEFF 		bl	I2CWriteBits
2830:.\mpu6050.c   **** }
 9990              		.loc 1 2830 0
 9991 0022 BD46     		mov	sp, r7
 9992 0024 02B0     		add	sp, sp, #8
 9993              		@ sp needed
 9994 0026 80BD     		pop	{r7, pc}
 9995              	.L787:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 226


 9996              		.align	2
 9997              	.L786:
 9998 0028 00000000 		.word	devAddr
 9999              		.cfi_endproc
 10000              	.LFE216:
 10001              		.size	MPU6050_setZGyroOffset, .-MPU6050_setZGyroOffset
 10002              		.section	.text.MPU6050_getXFineGain,"ax",%progbits
 10003              		.align	2
 10004              		.global	MPU6050_getXFineGain
 10005              		.code	16
 10006              		.thumb_func
 10007              		.type	MPU6050_getXFineGain, %function
 10008              	MPU6050_getXFineGain:
 10009              	.LFB217:
2831:.\mpu6050.c   **** 
2832:.\mpu6050.c   **** // X_FINE_GAIN register
2833:.\mpu6050.c   **** 
2834:.\mpu6050.c   **** int8_t MPU6050_getXFineGain() {
 10010              		.loc 1 2834 0
 10011              		.cfi_startproc
 10012 0000 80B5     		push	{r7, lr}
 10013              		.cfi_def_cfa_offset 8
 10014              		.cfi_offset 7, -8
 10015              		.cfi_offset 14, -4
 10016 0002 00AF     		add	r7, sp, #0
 10017              		.cfi_def_cfa_register 7
2835:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_X_FINE_GAIN, buffer);
 10018              		.loc 1 2835 0
 10019 0004 074B     		ldr	r3, .L790
 10020 0006 1A78     		ldrb	r2, [r3]
 10021 0008 074B     		ldr	r3, .L790+4
 10022 000a 101C     		mov	r0, r2
 10023 000c 0321     		mov	r1, #3
 10024 000e 1A1C     		mov	r2, r3
 10025 0010 FFF7FEFF 		bl	I2CReadByte
2836:.\mpu6050.c   ****     return buffer[0];
 10026              		.loc 1 2836 0
 10027 0014 044B     		ldr	r3, .L790+4
 10028 0016 1B78     		ldrb	r3, [r3]
 10029 0018 DBB2     		uxtb	r3, r3
 10030 001a 5BB2     		sxtb	r3, r3
2837:.\mpu6050.c   **** }
 10031              		.loc 1 2837 0
 10032 001c 181C     		mov	r0, r3
 10033 001e BD46     		mov	sp, r7
 10034              		@ sp needed
 10035 0020 80BD     		pop	{r7, pc}
 10036              	.L791:
 10037 0022 C046     		.align	2
 10038              	.L790:
 10039 0024 00000000 		.word	devAddr
 10040 0028 00000000 		.word	buffer
 10041              		.cfi_endproc
 10042              	.LFE217:
 10043              		.size	MPU6050_getXFineGain, .-MPU6050_getXFineGain
 10044              		.section	.text.MPU6050_setXFineGain,"ax",%progbits
 10045              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 227


 10046              		.global	MPU6050_setXFineGain
 10047              		.code	16
 10048              		.thumb_func
 10049              		.type	MPU6050_setXFineGain, %function
 10050              	MPU6050_setXFineGain:
 10051              	.LFB218:
2838:.\mpu6050.c   **** void MPU6050_setXFineGain(int8_t gain) {
 10052              		.loc 1 2838 0
 10053              		.cfi_startproc
 10054 0000 80B5     		push	{r7, lr}
 10055              		.cfi_def_cfa_offset 8
 10056              		.cfi_offset 7, -8
 10057              		.cfi_offset 14, -4
 10058 0002 82B0     		sub	sp, sp, #8
 10059              		.cfi_def_cfa_offset 16
 10060 0004 00AF     		add	r7, sp, #0
 10061              		.cfi_def_cfa_register 7
 10062 0006 021C     		mov	r2, r0
 10063 0008 FB1D     		add	r3, r7, #7
 10064 000a 1A70     		strb	r2, [r3]
2839:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_X_FINE_GAIN, gain);
 10065              		.loc 1 2839 0
 10066 000c 054B     		ldr	r3, .L793
 10067 000e 1A78     		ldrb	r2, [r3]
 10068 0010 FB1D     		add	r3, r7, #7
 10069 0012 1B78     		ldrb	r3, [r3]
 10070 0014 101C     		mov	r0, r2
 10071 0016 0321     		mov	r1, #3
 10072 0018 1A1C     		mov	r2, r3
 10073 001a FFF7FEFF 		bl	I2CWriteByte
2840:.\mpu6050.c   **** }
 10074              		.loc 1 2840 0
 10075 001e BD46     		mov	sp, r7
 10076 0020 02B0     		add	sp, sp, #8
 10077              		@ sp needed
 10078 0022 80BD     		pop	{r7, pc}
 10079              	.L794:
 10080              		.align	2
 10081              	.L793:
 10082 0024 00000000 		.word	devAddr
 10083              		.cfi_endproc
 10084              	.LFE218:
 10085              		.size	MPU6050_setXFineGain, .-MPU6050_setXFineGain
 10086              		.section	.text.MPU6050_getYFineGain,"ax",%progbits
 10087              		.align	2
 10088              		.global	MPU6050_getYFineGain
 10089              		.code	16
 10090              		.thumb_func
 10091              		.type	MPU6050_getYFineGain, %function
 10092              	MPU6050_getYFineGain:
 10093              	.LFB219:
2841:.\mpu6050.c   **** 
2842:.\mpu6050.c   **** // Y_FINE_GAIN register
2843:.\mpu6050.c   **** 
2844:.\mpu6050.c   **** int8_t MPU6050_getYFineGain() {
 10094              		.loc 1 2844 0
 10095              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 228


 10096 0000 80B5     		push	{r7, lr}
 10097              		.cfi_def_cfa_offset 8
 10098              		.cfi_offset 7, -8
 10099              		.cfi_offset 14, -4
 10100 0002 00AF     		add	r7, sp, #0
 10101              		.cfi_def_cfa_register 7
2845:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_Y_FINE_GAIN, buffer);
 10102              		.loc 1 2845 0
 10103 0004 074B     		ldr	r3, .L797
 10104 0006 1A78     		ldrb	r2, [r3]
 10105 0008 074B     		ldr	r3, .L797+4
 10106 000a 101C     		mov	r0, r2
 10107 000c 0421     		mov	r1, #4
 10108 000e 1A1C     		mov	r2, r3
 10109 0010 FFF7FEFF 		bl	I2CReadByte
2846:.\mpu6050.c   ****     return buffer[0];
 10110              		.loc 1 2846 0
 10111 0014 044B     		ldr	r3, .L797+4
 10112 0016 1B78     		ldrb	r3, [r3]
 10113 0018 DBB2     		uxtb	r3, r3
 10114 001a 5BB2     		sxtb	r3, r3
2847:.\mpu6050.c   **** }
 10115              		.loc 1 2847 0
 10116 001c 181C     		mov	r0, r3
 10117 001e BD46     		mov	sp, r7
 10118              		@ sp needed
 10119 0020 80BD     		pop	{r7, pc}
 10120              	.L798:
 10121 0022 C046     		.align	2
 10122              	.L797:
 10123 0024 00000000 		.word	devAddr
 10124 0028 00000000 		.word	buffer
 10125              		.cfi_endproc
 10126              	.LFE219:
 10127              		.size	MPU6050_getYFineGain, .-MPU6050_getYFineGain
 10128              		.section	.text.MPU6050_setYFineGain,"ax",%progbits
 10129              		.align	2
 10130              		.global	MPU6050_setYFineGain
 10131              		.code	16
 10132              		.thumb_func
 10133              		.type	MPU6050_setYFineGain, %function
 10134              	MPU6050_setYFineGain:
 10135              	.LFB220:
2848:.\mpu6050.c   **** void MPU6050_setYFineGain(int8_t gain) {
 10136              		.loc 1 2848 0
 10137              		.cfi_startproc
 10138 0000 80B5     		push	{r7, lr}
 10139              		.cfi_def_cfa_offset 8
 10140              		.cfi_offset 7, -8
 10141              		.cfi_offset 14, -4
 10142 0002 82B0     		sub	sp, sp, #8
 10143              		.cfi_def_cfa_offset 16
 10144 0004 00AF     		add	r7, sp, #0
 10145              		.cfi_def_cfa_register 7
 10146 0006 021C     		mov	r2, r0
 10147 0008 FB1D     		add	r3, r7, #7
 10148 000a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 229


2849:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_Y_FINE_GAIN, gain);
 10149              		.loc 1 2849 0
 10150 000c 054B     		ldr	r3, .L800
 10151 000e 1A78     		ldrb	r2, [r3]
 10152 0010 FB1D     		add	r3, r7, #7
 10153 0012 1B78     		ldrb	r3, [r3]
 10154 0014 101C     		mov	r0, r2
 10155 0016 0421     		mov	r1, #4
 10156 0018 1A1C     		mov	r2, r3
 10157 001a FFF7FEFF 		bl	I2CWriteByte
2850:.\mpu6050.c   **** }
 10158              		.loc 1 2850 0
 10159 001e BD46     		mov	sp, r7
 10160 0020 02B0     		add	sp, sp, #8
 10161              		@ sp needed
 10162 0022 80BD     		pop	{r7, pc}
 10163              	.L801:
 10164              		.align	2
 10165              	.L800:
 10166 0024 00000000 		.word	devAddr
 10167              		.cfi_endproc
 10168              	.LFE220:
 10169              		.size	MPU6050_setYFineGain, .-MPU6050_setYFineGain
 10170              		.section	.text.MPU6050_getZFineGain,"ax",%progbits
 10171              		.align	2
 10172              		.global	MPU6050_getZFineGain
 10173              		.code	16
 10174              		.thumb_func
 10175              		.type	MPU6050_getZFineGain, %function
 10176              	MPU6050_getZFineGain:
 10177              	.LFB221:
2851:.\mpu6050.c   **** 
2852:.\mpu6050.c   **** // Z_FINE_GAIN register
2853:.\mpu6050.c   **** 
2854:.\mpu6050.c   **** int8_t MPU6050_getZFineGain() {
 10178              		.loc 1 2854 0
 10179              		.cfi_startproc
 10180 0000 80B5     		push	{r7, lr}
 10181              		.cfi_def_cfa_offset 8
 10182              		.cfi_offset 7, -8
 10183              		.cfi_offset 14, -4
 10184 0002 00AF     		add	r7, sp, #0
 10185              		.cfi_def_cfa_register 7
2855:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_Z_FINE_GAIN, buffer);
 10186              		.loc 1 2855 0
 10187 0004 074B     		ldr	r3, .L804
 10188 0006 1A78     		ldrb	r2, [r3]
 10189 0008 074B     		ldr	r3, .L804+4
 10190 000a 101C     		mov	r0, r2
 10191 000c 0521     		mov	r1, #5
 10192 000e 1A1C     		mov	r2, r3
 10193 0010 FFF7FEFF 		bl	I2CReadByte
2856:.\mpu6050.c   ****     return buffer[0];
 10194              		.loc 1 2856 0
 10195 0014 044B     		ldr	r3, .L804+4
 10196 0016 1B78     		ldrb	r3, [r3]
 10197 0018 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 230


 10198 001a 5BB2     		sxtb	r3, r3
2857:.\mpu6050.c   **** }
 10199              		.loc 1 2857 0
 10200 001c 181C     		mov	r0, r3
 10201 001e BD46     		mov	sp, r7
 10202              		@ sp needed
 10203 0020 80BD     		pop	{r7, pc}
 10204              	.L805:
 10205 0022 C046     		.align	2
 10206              	.L804:
 10207 0024 00000000 		.word	devAddr
 10208 0028 00000000 		.word	buffer
 10209              		.cfi_endproc
 10210              	.LFE221:
 10211              		.size	MPU6050_getZFineGain, .-MPU6050_getZFineGain
 10212              		.section	.text.MPU6050_setZFineGain,"ax",%progbits
 10213              		.align	2
 10214              		.global	MPU6050_setZFineGain
 10215              		.code	16
 10216              		.thumb_func
 10217              		.type	MPU6050_setZFineGain, %function
 10218              	MPU6050_setZFineGain:
 10219              	.LFB222:
2858:.\mpu6050.c   **** void MPU6050_setZFineGain(int8_t gain) {
 10220              		.loc 1 2858 0
 10221              		.cfi_startproc
 10222 0000 80B5     		push	{r7, lr}
 10223              		.cfi_def_cfa_offset 8
 10224              		.cfi_offset 7, -8
 10225              		.cfi_offset 14, -4
 10226 0002 82B0     		sub	sp, sp, #8
 10227              		.cfi_def_cfa_offset 16
 10228 0004 00AF     		add	r7, sp, #0
 10229              		.cfi_def_cfa_register 7
 10230 0006 021C     		mov	r2, r0
 10231 0008 FB1D     		add	r3, r7, #7
 10232 000a 1A70     		strb	r2, [r3]
2859:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_Z_FINE_GAIN, gain);
 10233              		.loc 1 2859 0
 10234 000c 054B     		ldr	r3, .L807
 10235 000e 1A78     		ldrb	r2, [r3]
 10236 0010 FB1D     		add	r3, r7, #7
 10237 0012 1B78     		ldrb	r3, [r3]
 10238 0014 101C     		mov	r0, r2
 10239 0016 0521     		mov	r1, #5
 10240 0018 1A1C     		mov	r2, r3
 10241 001a FFF7FEFF 		bl	I2CWriteByte
2860:.\mpu6050.c   **** }
 10242              		.loc 1 2860 0
 10243 001e BD46     		mov	sp, r7
 10244 0020 02B0     		add	sp, sp, #8
 10245              		@ sp needed
 10246 0022 80BD     		pop	{r7, pc}
 10247              	.L808:
 10248              		.align	2
 10249              	.L807:
 10250 0024 00000000 		.word	devAddr
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 231


 10251              		.cfi_endproc
 10252              	.LFE222:
 10253              		.size	MPU6050_setZFineGain, .-MPU6050_setZFineGain
 10254              		.section	.text.MPU6050_getXAccelOffset,"ax",%progbits
 10255              		.align	2
 10256              		.global	MPU6050_getXAccelOffset
 10257              		.code	16
 10258              		.thumb_func
 10259              		.type	MPU6050_getXAccelOffset, %function
 10260              	MPU6050_getXAccelOffset:
 10261              	.LFB223:
2861:.\mpu6050.c   **** 
2862:.\mpu6050.c   **** // XA_OFFS_* registers
2863:.\mpu6050.c   **** 
2864:.\mpu6050.c   **** int16_t MPU6050_getXAccelOffset() {
 10262              		.loc 1 2864 0
 10263              		.cfi_startproc
 10264 0000 80B5     		push	{r7, lr}
 10265              		.cfi_def_cfa_offset 8
 10266              		.cfi_offset 7, -8
 10267              		.cfi_offset 14, -4
 10268 0002 00AF     		add	r7, sp, #0
 10269              		.cfi_def_cfa_register 7
2865:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
 10270              		.loc 1 2865 0
 10271 0004 094B     		ldr	r3, .L811
 10272 0006 1A78     		ldrb	r2, [r3]
 10273 0008 094B     		ldr	r3, .L811+4
 10274 000a 101C     		mov	r0, r2
 10275 000c 0621     		mov	r1, #6
 10276 000e 0222     		mov	r2, #2
 10277 0010 FFF7FEFF 		bl	I2CReadBytes
2866:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10278              		.loc 1 2866 0
 10279 0014 064B     		ldr	r3, .L811+4
 10280 0016 1B78     		ldrb	r3, [r3]
 10281 0018 1B02     		lsl	r3, r3, #8
 10282 001a 9AB2     		uxth	r2, r3
 10283 001c 044B     		ldr	r3, .L811+4
 10284 001e 5B78     		ldrb	r3, [r3, #1]
 10285 0020 1343     		orr	r3, r2
 10286 0022 9BB2     		uxth	r3, r3
 10287 0024 1BB2     		sxth	r3, r3
2867:.\mpu6050.c   **** }
 10288              		.loc 1 2867 0
 10289 0026 181C     		mov	r0, r3
 10290 0028 BD46     		mov	sp, r7
 10291              		@ sp needed
 10292 002a 80BD     		pop	{r7, pc}
 10293              	.L812:
 10294              		.align	2
 10295              	.L811:
 10296 002c 00000000 		.word	devAddr
 10297 0030 00000000 		.word	buffer
 10298              		.cfi_endproc
 10299              	.LFE223:
 10300              		.size	MPU6050_getXAccelOffset, .-MPU6050_getXAccelOffset
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 232


 10301              		.section	.text.MPU6050_setXAccelOffset,"ax",%progbits
 10302              		.align	2
 10303              		.global	MPU6050_setXAccelOffset
 10304              		.code	16
 10305              		.thumb_func
 10306              		.type	MPU6050_setXAccelOffset, %function
 10307              	MPU6050_setXAccelOffset:
 10308              	.LFB224:
2868:.\mpu6050.c   **** void MPU6050_setXAccelOffset(int16_t offset) {
 10309              		.loc 1 2868 0
 10310              		.cfi_startproc
 10311 0000 80B5     		push	{r7, lr}
 10312              		.cfi_def_cfa_offset 8
 10313              		.cfi_offset 7, -8
 10314              		.cfi_offset 14, -4
 10315 0002 82B0     		sub	sp, sp, #8
 10316              		.cfi_def_cfa_offset 16
 10317 0004 00AF     		add	r7, sp, #0
 10318              		.cfi_def_cfa_register 7
 10319 0006 021C     		mov	r2, r0
 10320 0008 BB1D     		add	r3, r7, #6
 10321 000a 1A80     		strh	r2, [r3]
2869:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 10322              		.loc 1 2869 0
 10323 000c 054B     		ldr	r3, .L814
 10324 000e 1A78     		ldrb	r2, [r3]
 10325 0010 BB1D     		add	r3, r7, #6
 10326 0012 1B88     		ldrh	r3, [r3]
 10327 0014 101C     		mov	r0, r2
 10328 0016 0621     		mov	r1, #6
 10329 0018 1A1C     		mov	r2, r3
 10330 001a FFF7FEFF 		bl	I2CWriteWord
2870:.\mpu6050.c   **** }
 10331              		.loc 1 2870 0
 10332 001e BD46     		mov	sp, r7
 10333 0020 02B0     		add	sp, sp, #8
 10334              		@ sp needed
 10335 0022 80BD     		pop	{r7, pc}
 10336              	.L815:
 10337              		.align	2
 10338              	.L814:
 10339 0024 00000000 		.word	devAddr
 10340              		.cfi_endproc
 10341              	.LFE224:
 10342              		.size	MPU6050_setXAccelOffset, .-MPU6050_setXAccelOffset
 10343              		.section	.text.MPU6050_getYAccelOffset,"ax",%progbits
 10344              		.align	2
 10345              		.global	MPU6050_getYAccelOffset
 10346              		.code	16
 10347              		.thumb_func
 10348              		.type	MPU6050_getYAccelOffset, %function
 10349              	MPU6050_getYAccelOffset:
 10350              	.LFB225:
2871:.\mpu6050.c   **** 
2872:.\mpu6050.c   **** // YA_OFFS_* register
2873:.\mpu6050.c   **** 
2874:.\mpu6050.c   **** int16_t MPU6050_getYAccelOffset() {
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 233


 10351              		.loc 1 2874 0
 10352              		.cfi_startproc
 10353 0000 80B5     		push	{r7, lr}
 10354              		.cfi_def_cfa_offset 8
 10355              		.cfi_offset 7, -8
 10356              		.cfi_offset 14, -4
 10357 0002 00AF     		add	r7, sp, #0
 10358              		.cfi_def_cfa_register 7
2875:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
 10359              		.loc 1 2875 0
 10360 0004 094B     		ldr	r3, .L818
 10361 0006 1A78     		ldrb	r2, [r3]
 10362 0008 094B     		ldr	r3, .L818+4
 10363 000a 101C     		mov	r0, r2
 10364 000c 0821     		mov	r1, #8
 10365 000e 0222     		mov	r2, #2
 10366 0010 FFF7FEFF 		bl	I2CReadBytes
2876:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10367              		.loc 1 2876 0
 10368 0014 064B     		ldr	r3, .L818+4
 10369 0016 1B78     		ldrb	r3, [r3]
 10370 0018 1B02     		lsl	r3, r3, #8
 10371 001a 9AB2     		uxth	r2, r3
 10372 001c 044B     		ldr	r3, .L818+4
 10373 001e 5B78     		ldrb	r3, [r3, #1]
 10374 0020 1343     		orr	r3, r2
 10375 0022 9BB2     		uxth	r3, r3
 10376 0024 1BB2     		sxth	r3, r3
2877:.\mpu6050.c   **** }
 10377              		.loc 1 2877 0
 10378 0026 181C     		mov	r0, r3
 10379 0028 BD46     		mov	sp, r7
 10380              		@ sp needed
 10381 002a 80BD     		pop	{r7, pc}
 10382              	.L819:
 10383              		.align	2
 10384              	.L818:
 10385 002c 00000000 		.word	devAddr
 10386 0030 00000000 		.word	buffer
 10387              		.cfi_endproc
 10388              	.LFE225:
 10389              		.size	MPU6050_getYAccelOffset, .-MPU6050_getYAccelOffset
 10390              		.section	.text.MPU6050_setYAccelOffset,"ax",%progbits
 10391              		.align	2
 10392              		.global	MPU6050_setYAccelOffset
 10393              		.code	16
 10394              		.thumb_func
 10395              		.type	MPU6050_setYAccelOffset, %function
 10396              	MPU6050_setYAccelOffset:
 10397              	.LFB226:
2878:.\mpu6050.c   **** void MPU6050_setYAccelOffset(int16_t offset) {
 10398              		.loc 1 2878 0
 10399              		.cfi_startproc
 10400 0000 80B5     		push	{r7, lr}
 10401              		.cfi_def_cfa_offset 8
 10402              		.cfi_offset 7, -8
 10403              		.cfi_offset 14, -4
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 234


 10404 0002 82B0     		sub	sp, sp, #8
 10405              		.cfi_def_cfa_offset 16
 10406 0004 00AF     		add	r7, sp, #0
 10407              		.cfi_def_cfa_register 7
 10408 0006 021C     		mov	r2, r0
 10409 0008 BB1D     		add	r3, r7, #6
 10410 000a 1A80     		strh	r2, [r3]
2879:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 10411              		.loc 1 2879 0
 10412 000c 054B     		ldr	r3, .L821
 10413 000e 1A78     		ldrb	r2, [r3]
 10414 0010 BB1D     		add	r3, r7, #6
 10415 0012 1B88     		ldrh	r3, [r3]
 10416 0014 101C     		mov	r0, r2
 10417 0016 0821     		mov	r1, #8
 10418 0018 1A1C     		mov	r2, r3
 10419 001a FFF7FEFF 		bl	I2CWriteWord
2880:.\mpu6050.c   **** }
 10420              		.loc 1 2880 0
 10421 001e BD46     		mov	sp, r7
 10422 0020 02B0     		add	sp, sp, #8
 10423              		@ sp needed
 10424 0022 80BD     		pop	{r7, pc}
 10425              	.L822:
 10426              		.align	2
 10427              	.L821:
 10428 0024 00000000 		.word	devAddr
 10429              		.cfi_endproc
 10430              	.LFE226:
 10431              		.size	MPU6050_setYAccelOffset, .-MPU6050_setYAccelOffset
 10432              		.section	.text.MPU6050_getZAccelOffset,"ax",%progbits
 10433              		.align	2
 10434              		.global	MPU6050_getZAccelOffset
 10435              		.code	16
 10436              		.thumb_func
 10437              		.type	MPU6050_getZAccelOffset, %function
 10438              	MPU6050_getZAccelOffset:
 10439              	.LFB227:
2881:.\mpu6050.c   **** 
2882:.\mpu6050.c   **** // ZA_OFFS_* register
2883:.\mpu6050.c   **** 
2884:.\mpu6050.c   **** int16_t MPU6050_getZAccelOffset() {
 10440              		.loc 1 2884 0
 10441              		.cfi_startproc
 10442 0000 80B5     		push	{r7, lr}
 10443              		.cfi_def_cfa_offset 8
 10444              		.cfi_offset 7, -8
 10445              		.cfi_offset 14, -4
 10446 0002 00AF     		add	r7, sp, #0
 10447              		.cfi_def_cfa_register 7
2885:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
 10448              		.loc 1 2885 0
 10449 0004 094B     		ldr	r3, .L825
 10450 0006 1A78     		ldrb	r2, [r3]
 10451 0008 094B     		ldr	r3, .L825+4
 10452 000a 101C     		mov	r0, r2
 10453 000c 0A21     		mov	r1, #10
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 235


 10454 000e 0222     		mov	r2, #2
 10455 0010 FFF7FEFF 		bl	I2CReadBytes
2886:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10456              		.loc 1 2886 0
 10457 0014 064B     		ldr	r3, .L825+4
 10458 0016 1B78     		ldrb	r3, [r3]
 10459 0018 1B02     		lsl	r3, r3, #8
 10460 001a 9AB2     		uxth	r2, r3
 10461 001c 044B     		ldr	r3, .L825+4
 10462 001e 5B78     		ldrb	r3, [r3, #1]
 10463 0020 1343     		orr	r3, r2
 10464 0022 9BB2     		uxth	r3, r3
 10465 0024 1BB2     		sxth	r3, r3
2887:.\mpu6050.c   **** }
 10466              		.loc 1 2887 0
 10467 0026 181C     		mov	r0, r3
 10468 0028 BD46     		mov	sp, r7
 10469              		@ sp needed
 10470 002a 80BD     		pop	{r7, pc}
 10471              	.L826:
 10472              		.align	2
 10473              	.L825:
 10474 002c 00000000 		.word	devAddr
 10475 0030 00000000 		.word	buffer
 10476              		.cfi_endproc
 10477              	.LFE227:
 10478              		.size	MPU6050_getZAccelOffset, .-MPU6050_getZAccelOffset
 10479              		.section	.text.MPU6050_setZAccelOffset,"ax",%progbits
 10480              		.align	2
 10481              		.global	MPU6050_setZAccelOffset
 10482              		.code	16
 10483              		.thumb_func
 10484              		.type	MPU6050_setZAccelOffset, %function
 10485              	MPU6050_setZAccelOffset:
 10486              	.LFB228:
2888:.\mpu6050.c   **** void MPU6050_setZAccelOffset(int16_t offset) {
 10487              		.loc 1 2888 0
 10488              		.cfi_startproc
 10489 0000 80B5     		push	{r7, lr}
 10490              		.cfi_def_cfa_offset 8
 10491              		.cfi_offset 7, -8
 10492              		.cfi_offset 14, -4
 10493 0002 82B0     		sub	sp, sp, #8
 10494              		.cfi_def_cfa_offset 16
 10495 0004 00AF     		add	r7, sp, #0
 10496              		.cfi_def_cfa_register 7
 10497 0006 021C     		mov	r2, r0
 10498 0008 BB1D     		add	r3, r7, #6
 10499 000a 1A80     		strh	r2, [r3]
2889:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 10500              		.loc 1 2889 0
 10501 000c 054B     		ldr	r3, .L828
 10502 000e 1A78     		ldrb	r2, [r3]
 10503 0010 BB1D     		add	r3, r7, #6
 10504 0012 1B88     		ldrh	r3, [r3]
 10505 0014 101C     		mov	r0, r2
 10506 0016 0A21     		mov	r1, #10
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 236


 10507 0018 1A1C     		mov	r2, r3
 10508 001a FFF7FEFF 		bl	I2CWriteWord
2890:.\mpu6050.c   **** }
 10509              		.loc 1 2890 0
 10510 001e BD46     		mov	sp, r7
 10511 0020 02B0     		add	sp, sp, #8
 10512              		@ sp needed
 10513 0022 80BD     		pop	{r7, pc}
 10514              	.L829:
 10515              		.align	2
 10516              	.L828:
 10517 0024 00000000 		.word	devAddr
 10518              		.cfi_endproc
 10519              	.LFE228:
 10520              		.size	MPU6050_setZAccelOffset, .-MPU6050_setZAccelOffset
 10521              		.section	.text.MPU6050_getXGyroOffsetUser,"ax",%progbits
 10522              		.align	2
 10523              		.global	MPU6050_getXGyroOffsetUser
 10524              		.code	16
 10525              		.thumb_func
 10526              		.type	MPU6050_getXGyroOffsetUser, %function
 10527              	MPU6050_getXGyroOffsetUser:
 10528              	.LFB229:
2891:.\mpu6050.c   **** 
2892:.\mpu6050.c   **** // XG_OFFS_USR* registers
2893:.\mpu6050.c   **** 
2894:.\mpu6050.c   **** int16_t MPU6050_getXGyroOffsetUser() {
 10529              		.loc 1 2894 0
 10530              		.cfi_startproc
 10531 0000 80B5     		push	{r7, lr}
 10532              		.cfi_def_cfa_offset 8
 10533              		.cfi_offset 7, -8
 10534              		.cfi_offset 14, -4
 10535 0002 00AF     		add	r7, sp, #0
 10536              		.cfi_def_cfa_register 7
2895:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
 10537              		.loc 1 2895 0
 10538 0004 094B     		ldr	r3, .L832
 10539 0006 1A78     		ldrb	r2, [r3]
 10540 0008 094B     		ldr	r3, .L832+4
 10541 000a 101C     		mov	r0, r2
 10542 000c 1321     		mov	r1, #19
 10543 000e 0222     		mov	r2, #2
 10544 0010 FFF7FEFF 		bl	I2CReadBytes
2896:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10545              		.loc 1 2896 0
 10546 0014 064B     		ldr	r3, .L832+4
 10547 0016 1B78     		ldrb	r3, [r3]
 10548 0018 1B02     		lsl	r3, r3, #8
 10549 001a 9AB2     		uxth	r2, r3
 10550 001c 044B     		ldr	r3, .L832+4
 10551 001e 5B78     		ldrb	r3, [r3, #1]
 10552 0020 1343     		orr	r3, r2
 10553 0022 9BB2     		uxth	r3, r3
 10554 0024 1BB2     		sxth	r3, r3
2897:.\mpu6050.c   **** }
 10555              		.loc 1 2897 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 237


 10556 0026 181C     		mov	r0, r3
 10557 0028 BD46     		mov	sp, r7
 10558              		@ sp needed
 10559 002a 80BD     		pop	{r7, pc}
 10560              	.L833:
 10561              		.align	2
 10562              	.L832:
 10563 002c 00000000 		.word	devAddr
 10564 0030 00000000 		.word	buffer
 10565              		.cfi_endproc
 10566              	.LFE229:
 10567              		.size	MPU6050_getXGyroOffsetUser, .-MPU6050_getXGyroOffsetUser
 10568              		.section	.text.MPU6050_setXGyroOffsetUser,"ax",%progbits
 10569              		.align	2
 10570              		.global	MPU6050_setXGyroOffsetUser
 10571              		.code	16
 10572              		.thumb_func
 10573              		.type	MPU6050_setXGyroOffsetUser, %function
 10574              	MPU6050_setXGyroOffsetUser:
 10575              	.LFB230:
2898:.\mpu6050.c   **** void MPU6050_setXGyroOffsetUser(int16_t offset) {
 10576              		.loc 1 2898 0
 10577              		.cfi_startproc
 10578 0000 80B5     		push	{r7, lr}
 10579              		.cfi_def_cfa_offset 8
 10580              		.cfi_offset 7, -8
 10581              		.cfi_offset 14, -4
 10582 0002 82B0     		sub	sp, sp, #8
 10583              		.cfi_def_cfa_offset 16
 10584 0004 00AF     		add	r7, sp, #0
 10585              		.cfi_def_cfa_register 7
 10586 0006 021C     		mov	r2, r0
 10587 0008 BB1D     		add	r3, r7, #6
 10588 000a 1A80     		strh	r2, [r3]
2899:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 10589              		.loc 1 2899 0
 10590 000c 054B     		ldr	r3, .L835
 10591 000e 1A78     		ldrb	r2, [r3]
 10592 0010 BB1D     		add	r3, r7, #6
 10593 0012 1B88     		ldrh	r3, [r3]
 10594 0014 101C     		mov	r0, r2
 10595 0016 1321     		mov	r1, #19
 10596 0018 1A1C     		mov	r2, r3
 10597 001a FFF7FEFF 		bl	I2CWriteWord
2900:.\mpu6050.c   **** }
 10598              		.loc 1 2900 0
 10599 001e BD46     		mov	sp, r7
 10600 0020 02B0     		add	sp, sp, #8
 10601              		@ sp needed
 10602 0022 80BD     		pop	{r7, pc}
 10603              	.L836:
 10604              		.align	2
 10605              	.L835:
 10606 0024 00000000 		.word	devAddr
 10607              		.cfi_endproc
 10608              	.LFE230:
 10609              		.size	MPU6050_setXGyroOffsetUser, .-MPU6050_setXGyroOffsetUser
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 238


 10610              		.section	.text.MPU6050_getYGyroOffsetUser,"ax",%progbits
 10611              		.align	2
 10612              		.global	MPU6050_getYGyroOffsetUser
 10613              		.code	16
 10614              		.thumb_func
 10615              		.type	MPU6050_getYGyroOffsetUser, %function
 10616              	MPU6050_getYGyroOffsetUser:
 10617              	.LFB231:
2901:.\mpu6050.c   **** 
2902:.\mpu6050.c   **** // YG_OFFS_USR* register
2903:.\mpu6050.c   **** 
2904:.\mpu6050.c   **** int16_t MPU6050_getYGyroOffsetUser() {
 10618              		.loc 1 2904 0
 10619              		.cfi_startproc
 10620 0000 80B5     		push	{r7, lr}
 10621              		.cfi_def_cfa_offset 8
 10622              		.cfi_offset 7, -8
 10623              		.cfi_offset 14, -4
 10624 0002 00AF     		add	r7, sp, #0
 10625              		.cfi_def_cfa_register 7
2905:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
 10626              		.loc 1 2905 0
 10627 0004 094B     		ldr	r3, .L839
 10628 0006 1A78     		ldrb	r2, [r3]
 10629 0008 094B     		ldr	r3, .L839+4
 10630 000a 101C     		mov	r0, r2
 10631 000c 1521     		mov	r1, #21
 10632 000e 0222     		mov	r2, #2
 10633 0010 FFF7FEFF 		bl	I2CReadBytes
2906:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10634              		.loc 1 2906 0
 10635 0014 064B     		ldr	r3, .L839+4
 10636 0016 1B78     		ldrb	r3, [r3]
 10637 0018 1B02     		lsl	r3, r3, #8
 10638 001a 9AB2     		uxth	r2, r3
 10639 001c 044B     		ldr	r3, .L839+4
 10640 001e 5B78     		ldrb	r3, [r3, #1]
 10641 0020 1343     		orr	r3, r2
 10642 0022 9BB2     		uxth	r3, r3
 10643 0024 1BB2     		sxth	r3, r3
2907:.\mpu6050.c   **** }
 10644              		.loc 1 2907 0
 10645 0026 181C     		mov	r0, r3
 10646 0028 BD46     		mov	sp, r7
 10647              		@ sp needed
 10648 002a 80BD     		pop	{r7, pc}
 10649              	.L840:
 10650              		.align	2
 10651              	.L839:
 10652 002c 00000000 		.word	devAddr
 10653 0030 00000000 		.word	buffer
 10654              		.cfi_endproc
 10655              	.LFE231:
 10656              		.size	MPU6050_getYGyroOffsetUser, .-MPU6050_getYGyroOffsetUser
 10657              		.section	.text.MPU6050_setYGyroOffsetUser,"ax",%progbits
 10658              		.align	2
 10659              		.global	MPU6050_setYGyroOffsetUser
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 239


 10660              		.code	16
 10661              		.thumb_func
 10662              		.type	MPU6050_setYGyroOffsetUser, %function
 10663              	MPU6050_setYGyroOffsetUser:
 10664              	.LFB232:
2908:.\mpu6050.c   **** void MPU6050_setYGyroOffsetUser(int16_t offset) {
 10665              		.loc 1 2908 0
 10666              		.cfi_startproc
 10667 0000 80B5     		push	{r7, lr}
 10668              		.cfi_def_cfa_offset 8
 10669              		.cfi_offset 7, -8
 10670              		.cfi_offset 14, -4
 10671 0002 82B0     		sub	sp, sp, #8
 10672              		.cfi_def_cfa_offset 16
 10673 0004 00AF     		add	r7, sp, #0
 10674              		.cfi_def_cfa_register 7
 10675 0006 021C     		mov	r2, r0
 10676 0008 BB1D     		add	r3, r7, #6
 10677 000a 1A80     		strh	r2, [r3]
2909:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 10678              		.loc 1 2909 0
 10679 000c 054B     		ldr	r3, .L842
 10680 000e 1A78     		ldrb	r2, [r3]
 10681 0010 BB1D     		add	r3, r7, #6
 10682 0012 1B88     		ldrh	r3, [r3]
 10683 0014 101C     		mov	r0, r2
 10684 0016 1521     		mov	r1, #21
 10685 0018 1A1C     		mov	r2, r3
 10686 001a FFF7FEFF 		bl	I2CWriteWord
2910:.\mpu6050.c   **** }
 10687              		.loc 1 2910 0
 10688 001e BD46     		mov	sp, r7
 10689 0020 02B0     		add	sp, sp, #8
 10690              		@ sp needed
 10691 0022 80BD     		pop	{r7, pc}
 10692              	.L843:
 10693              		.align	2
 10694              	.L842:
 10695 0024 00000000 		.word	devAddr
 10696              		.cfi_endproc
 10697              	.LFE232:
 10698              		.size	MPU6050_setYGyroOffsetUser, .-MPU6050_setYGyroOffsetUser
 10699              		.section	.text.MPU6050_getZGyroOffsetUser,"ax",%progbits
 10700              		.align	2
 10701              		.global	MPU6050_getZGyroOffsetUser
 10702              		.code	16
 10703              		.thumb_func
 10704              		.type	MPU6050_getZGyroOffsetUser, %function
 10705              	MPU6050_getZGyroOffsetUser:
 10706              	.LFB233:
2911:.\mpu6050.c   **** 
2912:.\mpu6050.c   **** // ZG_OFFS_USR* register
2913:.\mpu6050.c   **** 
2914:.\mpu6050.c   **** int16_t MPU6050_getZGyroOffsetUser() {
 10707              		.loc 1 2914 0
 10708              		.cfi_startproc
 10709 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 240


 10710              		.cfi_def_cfa_offset 8
 10711              		.cfi_offset 7, -8
 10712              		.cfi_offset 14, -4
 10713 0002 00AF     		add	r7, sp, #0
 10714              		.cfi_def_cfa_register 7
2915:.\mpu6050.c   ****     I2CReadBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
 10715              		.loc 1 2915 0
 10716 0004 094B     		ldr	r3, .L846
 10717 0006 1A78     		ldrb	r2, [r3]
 10718 0008 094B     		ldr	r3, .L846+4
 10719 000a 101C     		mov	r0, r2
 10720 000c 1721     		mov	r1, #23
 10721 000e 0222     		mov	r2, #2
 10722 0010 FFF7FEFF 		bl	I2CReadBytes
2916:.\mpu6050.c   ****     return (((int16_t)buffer[0]) << 8) | buffer[1];
 10723              		.loc 1 2916 0
 10724 0014 064B     		ldr	r3, .L846+4
 10725 0016 1B78     		ldrb	r3, [r3]
 10726 0018 1B02     		lsl	r3, r3, #8
 10727 001a 9AB2     		uxth	r2, r3
 10728 001c 044B     		ldr	r3, .L846+4
 10729 001e 5B78     		ldrb	r3, [r3, #1]
 10730 0020 1343     		orr	r3, r2
 10731 0022 9BB2     		uxth	r3, r3
 10732 0024 1BB2     		sxth	r3, r3
2917:.\mpu6050.c   **** }
 10733              		.loc 1 2917 0
 10734 0026 181C     		mov	r0, r3
 10735 0028 BD46     		mov	sp, r7
 10736              		@ sp needed
 10737 002a 80BD     		pop	{r7, pc}
 10738              	.L847:
 10739              		.align	2
 10740              	.L846:
 10741 002c 00000000 		.word	devAddr
 10742 0030 00000000 		.word	buffer
 10743              		.cfi_endproc
 10744              	.LFE233:
 10745              		.size	MPU6050_getZGyroOffsetUser, .-MPU6050_getZGyroOffsetUser
 10746              		.section	.text.MPU6050_setZGyroOffsetUser,"ax",%progbits
 10747              		.align	2
 10748              		.global	MPU6050_setZGyroOffsetUser
 10749              		.code	16
 10750              		.thumb_func
 10751              		.type	MPU6050_setZGyroOffsetUser, %function
 10752              	MPU6050_setZGyroOffsetUser:
 10753              	.LFB234:
2918:.\mpu6050.c   **** void MPU6050_setZGyroOffsetUser(int16_t offset) {
 10754              		.loc 1 2918 0
 10755              		.cfi_startproc
 10756 0000 80B5     		push	{r7, lr}
 10757              		.cfi_def_cfa_offset 8
 10758              		.cfi_offset 7, -8
 10759              		.cfi_offset 14, -4
 10760 0002 82B0     		sub	sp, sp, #8
 10761              		.cfi_def_cfa_offset 16
 10762 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 241


 10763              		.cfi_def_cfa_register 7
 10764 0006 021C     		mov	r2, r0
 10765 0008 BB1D     		add	r3, r7, #6
 10766 000a 1A80     		strh	r2, [r3]
2919:.\mpu6050.c   ****     I2CWriteWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 10767              		.loc 1 2919 0
 10768 000c 054B     		ldr	r3, .L849
 10769 000e 1A78     		ldrb	r2, [r3]
 10770 0010 BB1D     		add	r3, r7, #6
 10771 0012 1B88     		ldrh	r3, [r3]
 10772 0014 101C     		mov	r0, r2
 10773 0016 1721     		mov	r1, #23
 10774 0018 1A1C     		mov	r2, r3
 10775 001a FFF7FEFF 		bl	I2CWriteWord
2920:.\mpu6050.c   **** }
 10776              		.loc 1 2920 0
 10777 001e BD46     		mov	sp, r7
 10778 0020 02B0     		add	sp, sp, #8
 10779              		@ sp needed
 10780 0022 80BD     		pop	{r7, pc}
 10781              	.L850:
 10782              		.align	2
 10783              	.L849:
 10784 0024 00000000 		.word	devAddr
 10785              		.cfi_endproc
 10786              	.LFE234:
 10787              		.size	MPU6050_setZGyroOffsetUser, .-MPU6050_setZGyroOffsetUser
 10788              		.section	.text.MPU6050_getIntPLLReadyEnabled,"ax",%progbits
 10789              		.align	2
 10790              		.global	MPU6050_getIntPLLReadyEnabled
 10791              		.code	16
 10792              		.thumb_func
 10793              		.type	MPU6050_getIntPLLReadyEnabled, %function
 10794              	MPU6050_getIntPLLReadyEnabled:
 10795              	.LFB235:
2921:.\mpu6050.c   **** 
2922:.\mpu6050.c   **** // INT_ENABLE register (DMP functions)
2923:.\mpu6050.c   **** 
2924:.\mpu6050.c   **** bool MPU6050_getIntPLLReadyEnabled() {
 10796              		.loc 1 2924 0
 10797              		.cfi_startproc
 10798 0000 80B5     		push	{r7, lr}
 10799              		.cfi_def_cfa_offset 8
 10800              		.cfi_offset 7, -8
 10801              		.cfi_offset 14, -4
 10802 0002 00AF     		add	r7, sp, #0
 10803              		.cfi_def_cfa_register 7
2925:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, buffer);
 10804              		.loc 1 2925 0
 10805 0004 074B     		ldr	r3, .L853
 10806 0006 1A78     		ldrb	r2, [r3]
 10807 0008 074B     		ldr	r3, .L853+4
 10808 000a 101C     		mov	r0, r2
 10809 000c 3821     		mov	r1, #56
 10810 000e 0222     		mov	r2, #2
 10811 0010 FFF7FEFF 		bl	I2CReadBit
2926:.\mpu6050.c   ****     return buffer[0];
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 242


 10812              		.loc 1 2926 0
 10813 0014 044B     		ldr	r3, .L853+4
 10814 0016 1B78     		ldrb	r3, [r3]
 10815 0018 5A1E     		sub	r2, r3, #1
 10816 001a 9341     		sbc	r3, r3, r2
 10817 001c DBB2     		uxtb	r3, r3
2927:.\mpu6050.c   **** }
 10818              		.loc 1 2927 0
 10819 001e 181C     		mov	r0, r3
 10820 0020 BD46     		mov	sp, r7
 10821              		@ sp needed
 10822 0022 80BD     		pop	{r7, pc}
 10823              	.L854:
 10824              		.align	2
 10825              	.L853:
 10826 0024 00000000 		.word	devAddr
 10827 0028 00000000 		.word	buffer
 10828              		.cfi_endproc
 10829              	.LFE235:
 10830              		.size	MPU6050_getIntPLLReadyEnabled, .-MPU6050_getIntPLLReadyEnabled
 10831              		.section	.text.MPU6050_setIntPLLReadyEnabled,"ax",%progbits
 10832              		.align	2
 10833              		.global	MPU6050_setIntPLLReadyEnabled
 10834              		.code	16
 10835              		.thumb_func
 10836              		.type	MPU6050_setIntPLLReadyEnabled, %function
 10837              	MPU6050_setIntPLLReadyEnabled:
 10838              	.LFB236:
2928:.\mpu6050.c   **** void MPU6050_setIntPLLReadyEnabled(bool enabled) {
 10839              		.loc 1 2928 0
 10840              		.cfi_startproc
 10841 0000 80B5     		push	{r7, lr}
 10842              		.cfi_def_cfa_offset 8
 10843              		.cfi_offset 7, -8
 10844              		.cfi_offset 14, -4
 10845 0002 82B0     		sub	sp, sp, #8
 10846              		.cfi_def_cfa_offset 16
 10847 0004 00AF     		add	r7, sp, #0
 10848              		.cfi_def_cfa_register 7
 10849 0006 021C     		mov	r2, r0
 10850 0008 FB1D     		add	r3, r7, #7
 10851 000a 1A70     		strb	r2, [r3]
2929:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, enabled);
 10852              		.loc 1 2929 0
 10853 000c 054B     		ldr	r3, .L856
 10854 000e 1A78     		ldrb	r2, [r3]
 10855 0010 FB1D     		add	r3, r7, #7
 10856 0012 1B78     		ldrb	r3, [r3]
 10857 0014 101C     		mov	r0, r2
 10858 0016 3821     		mov	r1, #56
 10859 0018 0222     		mov	r2, #2
 10860 001a FFF7FEFF 		bl	I2CWriteBit
2930:.\mpu6050.c   **** }
 10861              		.loc 1 2930 0
 10862 001e BD46     		mov	sp, r7
 10863 0020 02B0     		add	sp, sp, #8
 10864              		@ sp needed
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 243


 10865 0022 80BD     		pop	{r7, pc}
 10866              	.L857:
 10867              		.align	2
 10868              	.L856:
 10869 0024 00000000 		.word	devAddr
 10870              		.cfi_endproc
 10871              	.LFE236:
 10872              		.size	MPU6050_setIntPLLReadyEnabled, .-MPU6050_setIntPLLReadyEnabled
 10873              		.section	.text.MPU6050_getIntDMPEnabled,"ax",%progbits
 10874              		.align	2
 10875              		.global	MPU6050_getIntDMPEnabled
 10876              		.code	16
 10877              		.thumb_func
 10878              		.type	MPU6050_getIntDMPEnabled, %function
 10879              	MPU6050_getIntDMPEnabled:
 10880              	.LFB237:
2931:.\mpu6050.c   **** bool MPU6050_getIntDMPEnabled() {
 10881              		.loc 1 2931 0
 10882              		.cfi_startproc
 10883 0000 80B5     		push	{r7, lr}
 10884              		.cfi_def_cfa_offset 8
 10885              		.cfi_offset 7, -8
 10886              		.cfi_offset 14, -4
 10887 0002 00AF     		add	r7, sp, #0
 10888              		.cfi_def_cfa_register 7
2932:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DMP_INT_BIT, buffer);
 10889              		.loc 1 2932 0
 10890 0004 074B     		ldr	r3, .L860
 10891 0006 1A78     		ldrb	r2, [r3]
 10892 0008 074B     		ldr	r3, .L860+4
 10893 000a 101C     		mov	r0, r2
 10894 000c 3821     		mov	r1, #56
 10895 000e 0122     		mov	r2, #1
 10896 0010 FFF7FEFF 		bl	I2CReadBit
2933:.\mpu6050.c   ****     return buffer[0];
 10897              		.loc 1 2933 0
 10898 0014 044B     		ldr	r3, .L860+4
 10899 0016 1B78     		ldrb	r3, [r3]
 10900 0018 5A1E     		sub	r2, r3, #1
 10901 001a 9341     		sbc	r3, r3, r2
 10902 001c DBB2     		uxtb	r3, r3
2934:.\mpu6050.c   **** }
 10903              		.loc 1 2934 0
 10904 001e 181C     		mov	r0, r3
 10905 0020 BD46     		mov	sp, r7
 10906              		@ sp needed
 10907 0022 80BD     		pop	{r7, pc}
 10908              	.L861:
 10909              		.align	2
 10910              	.L860:
 10911 0024 00000000 		.word	devAddr
 10912 0028 00000000 		.word	buffer
 10913              		.cfi_endproc
 10914              	.LFE237:
 10915              		.size	MPU6050_getIntDMPEnabled, .-MPU6050_getIntDMPEnabled
 10916              		.section	.text.MPU6050_setIntDMPEnabled,"ax",%progbits
 10917              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 244


 10918              		.global	MPU6050_setIntDMPEnabled
 10919              		.code	16
 10920              		.thumb_func
 10921              		.type	MPU6050_setIntDMPEnabled, %function
 10922              	MPU6050_setIntDMPEnabled:
 10923              	.LFB238:
2935:.\mpu6050.c   **** void MPU6050_setIntDMPEnabled(bool enabled) {
 10924              		.loc 1 2935 0
 10925              		.cfi_startproc
 10926 0000 80B5     		push	{r7, lr}
 10927              		.cfi_def_cfa_offset 8
 10928              		.cfi_offset 7, -8
 10929              		.cfi_offset 14, -4
 10930 0002 82B0     		sub	sp, sp, #8
 10931              		.cfi_def_cfa_offset 16
 10932 0004 00AF     		add	r7, sp, #0
 10933              		.cfi_def_cfa_register 7
 10934 0006 021C     		mov	r2, r0
 10935 0008 FB1D     		add	r3, r7, #7
 10936 000a 1A70     		strb	r2, [r3]
2936:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DMP_INT_BIT, enabled);
 10937              		.loc 1 2936 0
 10938 000c 054B     		ldr	r3, .L863
 10939 000e 1A78     		ldrb	r2, [r3]
 10940 0010 FB1D     		add	r3, r7, #7
 10941 0012 1B78     		ldrb	r3, [r3]
 10942 0014 101C     		mov	r0, r2
 10943 0016 3821     		mov	r1, #56
 10944 0018 0122     		mov	r2, #1
 10945 001a FFF7FEFF 		bl	I2CWriteBit
2937:.\mpu6050.c   **** }
 10946              		.loc 1 2937 0
 10947 001e BD46     		mov	sp, r7
 10948 0020 02B0     		add	sp, sp, #8
 10949              		@ sp needed
 10950 0022 80BD     		pop	{r7, pc}
 10951              	.L864:
 10952              		.align	2
 10953              	.L863:
 10954 0024 00000000 		.word	devAddr
 10955              		.cfi_endproc
 10956              	.LFE238:
 10957              		.size	MPU6050_setIntDMPEnabled, .-MPU6050_setIntDMPEnabled
 10958              		.section	.text.MPU6050_getDMPInt5Status,"ax",%progbits
 10959              		.align	2
 10960              		.global	MPU6050_getDMPInt5Status
 10961              		.code	16
 10962              		.thumb_func
 10963              		.type	MPU6050_getDMPInt5Status, %function
 10964              	MPU6050_getDMPInt5Status:
 10965              	.LFB239:
2938:.\mpu6050.c   **** 
2939:.\mpu6050.c   **** // DMP_INT_STATUS
2940:.\mpu6050.c   **** 
2941:.\mpu6050.c   **** bool MPU6050_getDMPInt5Status() {
 10966              		.loc 1 2941 0
 10967              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 245


 10968 0000 80B5     		push	{r7, lr}
 10969              		.cfi_def_cfa_offset 8
 10970              		.cfi_offset 7, -8
 10971              		.cfi_offset 14, -4
 10972 0002 00AF     		add	r7, sp, #0
 10973              		.cfi_def_cfa_register 7
2942:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_5_BIT, buffer);
 10974              		.loc 1 2942 0
 10975 0004 074B     		ldr	r3, .L867
 10976 0006 1A78     		ldrb	r2, [r3]
 10977 0008 074B     		ldr	r3, .L867+4
 10978 000a 101C     		mov	r0, r2
 10979 000c 3921     		mov	r1, #57
 10980 000e 0522     		mov	r2, #5
 10981 0010 FFF7FEFF 		bl	I2CReadBit
2943:.\mpu6050.c   ****     return buffer[0];
 10982              		.loc 1 2943 0
 10983 0014 044B     		ldr	r3, .L867+4
 10984 0016 1B78     		ldrb	r3, [r3]
 10985 0018 5A1E     		sub	r2, r3, #1
 10986 001a 9341     		sbc	r3, r3, r2
 10987 001c DBB2     		uxtb	r3, r3
2944:.\mpu6050.c   **** }
 10988              		.loc 1 2944 0
 10989 001e 181C     		mov	r0, r3
 10990 0020 BD46     		mov	sp, r7
 10991              		@ sp needed
 10992 0022 80BD     		pop	{r7, pc}
 10993              	.L868:
 10994              		.align	2
 10995              	.L867:
 10996 0024 00000000 		.word	devAddr
 10997 0028 00000000 		.word	buffer
 10998              		.cfi_endproc
 10999              	.LFE239:
 11000              		.size	MPU6050_getDMPInt5Status, .-MPU6050_getDMPInt5Status
 11001              		.section	.text.MPU6050_getDMPInt4Status,"ax",%progbits
 11002              		.align	2
 11003              		.global	MPU6050_getDMPInt4Status
 11004              		.code	16
 11005              		.thumb_func
 11006              		.type	MPU6050_getDMPInt4Status, %function
 11007              	MPU6050_getDMPInt4Status:
 11008              	.LFB240:
2945:.\mpu6050.c   **** bool MPU6050_getDMPInt4Status() {
 11009              		.loc 1 2945 0
 11010              		.cfi_startproc
 11011 0000 80B5     		push	{r7, lr}
 11012              		.cfi_def_cfa_offset 8
 11013              		.cfi_offset 7, -8
 11014              		.cfi_offset 14, -4
 11015 0002 00AF     		add	r7, sp, #0
 11016              		.cfi_def_cfa_register 7
2946:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_4_BIT, buffer);
 11017              		.loc 1 2946 0
 11018 0004 074B     		ldr	r3, .L871
 11019 0006 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 246


 11020 0008 074B     		ldr	r3, .L871+4
 11021 000a 101C     		mov	r0, r2
 11022 000c 3921     		mov	r1, #57
 11023 000e 0422     		mov	r2, #4
 11024 0010 FFF7FEFF 		bl	I2CReadBit
2947:.\mpu6050.c   ****     return buffer[0];
 11025              		.loc 1 2947 0
 11026 0014 044B     		ldr	r3, .L871+4
 11027 0016 1B78     		ldrb	r3, [r3]
 11028 0018 5A1E     		sub	r2, r3, #1
 11029 001a 9341     		sbc	r3, r3, r2
 11030 001c DBB2     		uxtb	r3, r3
2948:.\mpu6050.c   **** }
 11031              		.loc 1 2948 0
 11032 001e 181C     		mov	r0, r3
 11033 0020 BD46     		mov	sp, r7
 11034              		@ sp needed
 11035 0022 80BD     		pop	{r7, pc}
 11036              	.L872:
 11037              		.align	2
 11038              	.L871:
 11039 0024 00000000 		.word	devAddr
 11040 0028 00000000 		.word	buffer
 11041              		.cfi_endproc
 11042              	.LFE240:
 11043              		.size	MPU6050_getDMPInt4Status, .-MPU6050_getDMPInt4Status
 11044              		.section	.text.MPU6050_getDMPInt3Status,"ax",%progbits
 11045              		.align	2
 11046              		.global	MPU6050_getDMPInt3Status
 11047              		.code	16
 11048              		.thumb_func
 11049              		.type	MPU6050_getDMPInt3Status, %function
 11050              	MPU6050_getDMPInt3Status:
 11051              	.LFB241:
2949:.\mpu6050.c   **** bool MPU6050_getDMPInt3Status() {
 11052              		.loc 1 2949 0
 11053              		.cfi_startproc
 11054 0000 80B5     		push	{r7, lr}
 11055              		.cfi_def_cfa_offset 8
 11056              		.cfi_offset 7, -8
 11057              		.cfi_offset 14, -4
 11058 0002 00AF     		add	r7, sp, #0
 11059              		.cfi_def_cfa_register 7
2950:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_3_BIT, buffer);
 11060              		.loc 1 2950 0
 11061 0004 074B     		ldr	r3, .L875
 11062 0006 1A78     		ldrb	r2, [r3]
 11063 0008 074B     		ldr	r3, .L875+4
 11064 000a 101C     		mov	r0, r2
 11065 000c 3921     		mov	r1, #57
 11066 000e 0322     		mov	r2, #3
 11067 0010 FFF7FEFF 		bl	I2CReadBit
2951:.\mpu6050.c   ****     return buffer[0];
 11068              		.loc 1 2951 0
 11069 0014 044B     		ldr	r3, .L875+4
 11070 0016 1B78     		ldrb	r3, [r3]
 11071 0018 5A1E     		sub	r2, r3, #1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 247


 11072 001a 9341     		sbc	r3, r3, r2
 11073 001c DBB2     		uxtb	r3, r3
2952:.\mpu6050.c   **** }
 11074              		.loc 1 2952 0
 11075 001e 181C     		mov	r0, r3
 11076 0020 BD46     		mov	sp, r7
 11077              		@ sp needed
 11078 0022 80BD     		pop	{r7, pc}
 11079              	.L876:
 11080              		.align	2
 11081              	.L875:
 11082 0024 00000000 		.word	devAddr
 11083 0028 00000000 		.word	buffer
 11084              		.cfi_endproc
 11085              	.LFE241:
 11086              		.size	MPU6050_getDMPInt3Status, .-MPU6050_getDMPInt3Status
 11087              		.section	.text.MPU6050_getDMPInt2Status,"ax",%progbits
 11088              		.align	2
 11089              		.global	MPU6050_getDMPInt2Status
 11090              		.code	16
 11091              		.thumb_func
 11092              		.type	MPU6050_getDMPInt2Status, %function
 11093              	MPU6050_getDMPInt2Status:
 11094              	.LFB242:
2953:.\mpu6050.c   **** bool MPU6050_getDMPInt2Status() {
 11095              		.loc 1 2953 0
 11096              		.cfi_startproc
 11097 0000 80B5     		push	{r7, lr}
 11098              		.cfi_def_cfa_offset 8
 11099              		.cfi_offset 7, -8
 11100              		.cfi_offset 14, -4
 11101 0002 00AF     		add	r7, sp, #0
 11102              		.cfi_def_cfa_register 7
2954:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_2_BIT, buffer);
 11103              		.loc 1 2954 0
 11104 0004 074B     		ldr	r3, .L879
 11105 0006 1A78     		ldrb	r2, [r3]
 11106 0008 074B     		ldr	r3, .L879+4
 11107 000a 101C     		mov	r0, r2
 11108 000c 3921     		mov	r1, #57
 11109 000e 0222     		mov	r2, #2
 11110 0010 FFF7FEFF 		bl	I2CReadBit
2955:.\mpu6050.c   ****     return buffer[0];
 11111              		.loc 1 2955 0
 11112 0014 044B     		ldr	r3, .L879+4
 11113 0016 1B78     		ldrb	r3, [r3]
 11114 0018 5A1E     		sub	r2, r3, #1
 11115 001a 9341     		sbc	r3, r3, r2
 11116 001c DBB2     		uxtb	r3, r3
2956:.\mpu6050.c   **** }
 11117              		.loc 1 2956 0
 11118 001e 181C     		mov	r0, r3
 11119 0020 BD46     		mov	sp, r7
 11120              		@ sp needed
 11121 0022 80BD     		pop	{r7, pc}
 11122              	.L880:
 11123              		.align	2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 248


 11124              	.L879:
 11125 0024 00000000 		.word	devAddr
 11126 0028 00000000 		.word	buffer
 11127              		.cfi_endproc
 11128              	.LFE242:
 11129              		.size	MPU6050_getDMPInt2Status, .-MPU6050_getDMPInt2Status
 11130              		.section	.text.MPU6050_getDMPInt1Status,"ax",%progbits
 11131              		.align	2
 11132              		.global	MPU6050_getDMPInt1Status
 11133              		.code	16
 11134              		.thumb_func
 11135              		.type	MPU6050_getDMPInt1Status, %function
 11136              	MPU6050_getDMPInt1Status:
 11137              	.LFB243:
2957:.\mpu6050.c   **** bool MPU6050_getDMPInt1Status() {
 11138              		.loc 1 2957 0
 11139              		.cfi_startproc
 11140 0000 80B5     		push	{r7, lr}
 11141              		.cfi_def_cfa_offset 8
 11142              		.cfi_offset 7, -8
 11143              		.cfi_offset 14, -4
 11144 0002 00AF     		add	r7, sp, #0
 11145              		.cfi_def_cfa_register 7
2958:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_1_BIT, buffer);
 11146              		.loc 1 2958 0
 11147 0004 074B     		ldr	r3, .L883
 11148 0006 1A78     		ldrb	r2, [r3]
 11149 0008 074B     		ldr	r3, .L883+4
 11150 000a 101C     		mov	r0, r2
 11151 000c 3921     		mov	r1, #57
 11152 000e 0122     		mov	r2, #1
 11153 0010 FFF7FEFF 		bl	I2CReadBit
2959:.\mpu6050.c   ****     return buffer[0];
 11154              		.loc 1 2959 0
 11155 0014 044B     		ldr	r3, .L883+4
 11156 0016 1B78     		ldrb	r3, [r3]
 11157 0018 5A1E     		sub	r2, r3, #1
 11158 001a 9341     		sbc	r3, r3, r2
 11159 001c DBB2     		uxtb	r3, r3
2960:.\mpu6050.c   **** }
 11160              		.loc 1 2960 0
 11161 001e 181C     		mov	r0, r3
 11162 0020 BD46     		mov	sp, r7
 11163              		@ sp needed
 11164 0022 80BD     		pop	{r7, pc}
 11165              	.L884:
 11166              		.align	2
 11167              	.L883:
 11168 0024 00000000 		.word	devAddr
 11169 0028 00000000 		.word	buffer
 11170              		.cfi_endproc
 11171              	.LFE243:
 11172              		.size	MPU6050_getDMPInt1Status, .-MPU6050_getDMPInt1Status
 11173              		.section	.text.MPU6050_getDMPInt0Status,"ax",%progbits
 11174              		.align	2
 11175              		.global	MPU6050_getDMPInt0Status
 11176              		.code	16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 249


 11177              		.thumb_func
 11178              		.type	MPU6050_getDMPInt0Status, %function
 11179              	MPU6050_getDMPInt0Status:
 11180              	.LFB244:
2961:.\mpu6050.c   **** bool MPU6050_getDMPInt0Status() {
 11181              		.loc 1 2961 0
 11182              		.cfi_startproc
 11183 0000 80B5     		push	{r7, lr}
 11184              		.cfi_def_cfa_offset 8
 11185              		.cfi_offset 7, -8
 11186              		.cfi_offset 14, -4
 11187 0002 00AF     		add	r7, sp, #0
 11188              		.cfi_def_cfa_register 7
2962:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_0_BIT, buffer);
 11189              		.loc 1 2962 0
 11190 0004 074B     		ldr	r3, .L887
 11191 0006 1A78     		ldrb	r2, [r3]
 11192 0008 074B     		ldr	r3, .L887+4
 11193 000a 101C     		mov	r0, r2
 11194 000c 3921     		mov	r1, #57
 11195 000e 0022     		mov	r2, #0
 11196 0010 FFF7FEFF 		bl	I2CReadBit
2963:.\mpu6050.c   ****     return buffer[0];
 11197              		.loc 1 2963 0
 11198 0014 044B     		ldr	r3, .L887+4
 11199 0016 1B78     		ldrb	r3, [r3]
 11200 0018 5A1E     		sub	r2, r3, #1
 11201 001a 9341     		sbc	r3, r3, r2
 11202 001c DBB2     		uxtb	r3, r3
2964:.\mpu6050.c   **** }
 11203              		.loc 1 2964 0
 11204 001e 181C     		mov	r0, r3
 11205 0020 BD46     		mov	sp, r7
 11206              		@ sp needed
 11207 0022 80BD     		pop	{r7, pc}
 11208              	.L888:
 11209              		.align	2
 11210              	.L887:
 11211 0024 00000000 		.word	devAddr
 11212 0028 00000000 		.word	buffer
 11213              		.cfi_endproc
 11214              	.LFE244:
 11215              		.size	MPU6050_getDMPInt0Status, .-MPU6050_getDMPInt0Status
 11216              		.section	.text.MPU6050_getIntPLLReadyStatus,"ax",%progbits
 11217              		.align	2
 11218              		.global	MPU6050_getIntPLLReadyStatus
 11219              		.code	16
 11220              		.thumb_func
 11221              		.type	MPU6050_getIntPLLReadyStatus, %function
 11222              	MPU6050_getIntPLLReadyStatus:
 11223              	.LFB245:
2965:.\mpu6050.c   **** 
2966:.\mpu6050.c   **** // INT_STATUS register (DMP functions)
2967:.\mpu6050.c   **** 
2968:.\mpu6050.c   **** bool MPU6050_getIntPLLReadyStatus() {
 11224              		.loc 1 2968 0
 11225              		.cfi_startproc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 250


 11226 0000 80B5     		push	{r7, lr}
 11227              		.cfi_def_cfa_offset 8
 11228              		.cfi_offset 7, -8
 11229              		.cfi_offset 14, -4
 11230 0002 00AF     		add	r7, sp, #0
 11231              		.cfi_def_cfa_register 7
2969:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, buffer);
 11232              		.loc 1 2969 0
 11233 0004 074B     		ldr	r3, .L891
 11234 0006 1A78     		ldrb	r2, [r3]
 11235 0008 074B     		ldr	r3, .L891+4
 11236 000a 101C     		mov	r0, r2
 11237 000c 3A21     		mov	r1, #58
 11238 000e 0222     		mov	r2, #2
 11239 0010 FFF7FEFF 		bl	I2CReadBit
2970:.\mpu6050.c   ****     return buffer[0];
 11240              		.loc 1 2970 0
 11241 0014 044B     		ldr	r3, .L891+4
 11242 0016 1B78     		ldrb	r3, [r3]
 11243 0018 5A1E     		sub	r2, r3, #1
 11244 001a 9341     		sbc	r3, r3, r2
 11245 001c DBB2     		uxtb	r3, r3
2971:.\mpu6050.c   **** }
 11246              		.loc 1 2971 0
 11247 001e 181C     		mov	r0, r3
 11248 0020 BD46     		mov	sp, r7
 11249              		@ sp needed
 11250 0022 80BD     		pop	{r7, pc}
 11251              	.L892:
 11252              		.align	2
 11253              	.L891:
 11254 0024 00000000 		.word	devAddr
 11255 0028 00000000 		.word	buffer
 11256              		.cfi_endproc
 11257              	.LFE245:
 11258              		.size	MPU6050_getIntPLLReadyStatus, .-MPU6050_getIntPLLReadyStatus
 11259              		.section	.text.MPU6050_getIntDMPStatus,"ax",%progbits
 11260              		.align	2
 11261              		.global	MPU6050_getIntDMPStatus
 11262              		.code	16
 11263              		.thumb_func
 11264              		.type	MPU6050_getIntDMPStatus, %function
 11265              	MPU6050_getIntDMPStatus:
 11266              	.LFB246:
2972:.\mpu6050.c   **** bool MPU6050_getIntDMPStatus() {
 11267              		.loc 1 2972 0
 11268              		.cfi_startproc
 11269 0000 80B5     		push	{r7, lr}
 11270              		.cfi_def_cfa_offset 8
 11271              		.cfi_offset 7, -8
 11272              		.cfi_offset 14, -4
 11273 0002 00AF     		add	r7, sp, #0
 11274              		.cfi_def_cfa_register 7
2973:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DMP_INT_BIT, buffer);
 11275              		.loc 1 2973 0
 11276 0004 074B     		ldr	r3, .L895
 11277 0006 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 251


 11278 0008 074B     		ldr	r3, .L895+4
 11279 000a 101C     		mov	r0, r2
 11280 000c 3A21     		mov	r1, #58
 11281 000e 0122     		mov	r2, #1
 11282 0010 FFF7FEFF 		bl	I2CReadBit
2974:.\mpu6050.c   ****     return buffer[0];
 11283              		.loc 1 2974 0
 11284 0014 044B     		ldr	r3, .L895+4
 11285 0016 1B78     		ldrb	r3, [r3]
 11286 0018 5A1E     		sub	r2, r3, #1
 11287 001a 9341     		sbc	r3, r3, r2
 11288 001c DBB2     		uxtb	r3, r3
2975:.\mpu6050.c   **** }
 11289              		.loc 1 2975 0
 11290 001e 181C     		mov	r0, r3
 11291 0020 BD46     		mov	sp, r7
 11292              		@ sp needed
 11293 0022 80BD     		pop	{r7, pc}
 11294              	.L896:
 11295              		.align	2
 11296              	.L895:
 11297 0024 00000000 		.word	devAddr
 11298 0028 00000000 		.word	buffer
 11299              		.cfi_endproc
 11300              	.LFE246:
 11301              		.size	MPU6050_getIntDMPStatus, .-MPU6050_getIntDMPStatus
 11302              		.section	.text.MPU6050_getDMPEnabled,"ax",%progbits
 11303              		.align	2
 11304              		.global	MPU6050_getDMPEnabled
 11305              		.code	16
 11306              		.thumb_func
 11307              		.type	MPU6050_getDMPEnabled, %function
 11308              	MPU6050_getDMPEnabled:
 11309              	.LFB247:
2976:.\mpu6050.c   **** 
2977:.\mpu6050.c   **** // USER_CTRL register (DMP functions)
2978:.\mpu6050.c   **** 
2979:.\mpu6050.c   **** bool MPU6050_getDMPEnabled() {
 11310              		.loc 1 2979 0
 11311              		.cfi_startproc
 11312 0000 80B5     		push	{r7, lr}
 11313              		.cfi_def_cfa_offset 8
 11314              		.cfi_offset 7, -8
 11315              		.cfi_offset 14, -4
 11316 0002 00AF     		add	r7, sp, #0
 11317              		.cfi_def_cfa_register 7
2980:.\mpu6050.c   ****     I2CReadBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
 11318              		.loc 1 2980 0
 11319 0004 074B     		ldr	r3, .L899
 11320 0006 1A78     		ldrb	r2, [r3]
 11321 0008 074B     		ldr	r3, .L899+4
 11322 000a 101C     		mov	r0, r2
 11323 000c 6A21     		mov	r1, #106
 11324 000e 0722     		mov	r2, #7
 11325 0010 FFF7FEFF 		bl	I2CReadBit
2981:.\mpu6050.c   ****     return buffer[0];
 11326              		.loc 1 2981 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 252


 11327 0014 044B     		ldr	r3, .L899+4
 11328 0016 1B78     		ldrb	r3, [r3]
 11329 0018 5A1E     		sub	r2, r3, #1
 11330 001a 9341     		sbc	r3, r3, r2
 11331 001c DBB2     		uxtb	r3, r3
2982:.\mpu6050.c   **** }
 11332              		.loc 1 2982 0
 11333 001e 181C     		mov	r0, r3
 11334 0020 BD46     		mov	sp, r7
 11335              		@ sp needed
 11336 0022 80BD     		pop	{r7, pc}
 11337              	.L900:
 11338              		.align	2
 11339              	.L899:
 11340 0024 00000000 		.word	devAddr
 11341 0028 00000000 		.word	buffer
 11342              		.cfi_endproc
 11343              	.LFE247:
 11344              		.size	MPU6050_getDMPEnabled, .-MPU6050_getDMPEnabled
 11345              		.section	.text.MPU6050_setDMPEnabled,"ax",%progbits
 11346              		.align	2
 11347              		.global	MPU6050_setDMPEnabled
 11348              		.code	16
 11349              		.thumb_func
 11350              		.type	MPU6050_setDMPEnabled, %function
 11351              	MPU6050_setDMPEnabled:
 11352              	.LFB248:
2983:.\mpu6050.c   **** void MPU6050_setDMPEnabled(bool enabled) {
 11353              		.loc 1 2983 0
 11354              		.cfi_startproc
 11355 0000 80B5     		push	{r7, lr}
 11356              		.cfi_def_cfa_offset 8
 11357              		.cfi_offset 7, -8
 11358              		.cfi_offset 14, -4
 11359 0002 82B0     		sub	sp, sp, #8
 11360              		.cfi_def_cfa_offset 16
 11361 0004 00AF     		add	r7, sp, #0
 11362              		.cfi_def_cfa_register 7
 11363 0006 021C     		mov	r2, r0
 11364 0008 FB1D     		add	r3, r7, #7
 11365 000a 1A70     		strb	r2, [r3]
2984:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 11366              		.loc 1 2984 0
 11367 000c 054B     		ldr	r3, .L902
 11368 000e 1A78     		ldrb	r2, [r3]
 11369 0010 FB1D     		add	r3, r7, #7
 11370 0012 1B78     		ldrb	r3, [r3]
 11371 0014 101C     		mov	r0, r2
 11372 0016 6A21     		mov	r1, #106
 11373 0018 0722     		mov	r2, #7
 11374 001a FFF7FEFF 		bl	I2CWriteBit
2985:.\mpu6050.c   **** }
 11375              		.loc 1 2985 0
 11376 001e BD46     		mov	sp, r7
 11377 0020 02B0     		add	sp, sp, #8
 11378              		@ sp needed
 11379 0022 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 253


 11380              	.L903:
 11381              		.align	2
 11382              	.L902:
 11383 0024 00000000 		.word	devAddr
 11384              		.cfi_endproc
 11385              	.LFE248:
 11386              		.size	MPU6050_setDMPEnabled, .-MPU6050_setDMPEnabled
 11387              		.section	.text.MPU6050_resetDMP,"ax",%progbits
 11388              		.align	2
 11389              		.global	MPU6050_resetDMP
 11390              		.code	16
 11391              		.thumb_func
 11392              		.type	MPU6050_resetDMP, %function
 11393              	MPU6050_resetDMP:
 11394              	.LFB249:
2986:.\mpu6050.c   **** void MPU6050_resetDMP() {
 11395              		.loc 1 2986 0
 11396              		.cfi_startproc
 11397 0000 80B5     		push	{r7, lr}
 11398              		.cfi_def_cfa_offset 8
 11399              		.cfi_offset 7, -8
 11400              		.cfi_offset 14, -4
 11401 0002 00AF     		add	r7, sp, #0
 11402              		.cfi_def_cfa_register 7
2987:.\mpu6050.c   ****     I2CWriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 11403              		.loc 1 2987 0
 11404 0004 044B     		ldr	r3, .L905
 11405 0006 1B78     		ldrb	r3, [r3]
 11406 0008 181C     		mov	r0, r3
 11407 000a 6A21     		mov	r1, #106
 11408 000c 0322     		mov	r2, #3
 11409 000e 0123     		mov	r3, #1
 11410 0010 FFF7FEFF 		bl	I2CWriteBit
2988:.\mpu6050.c   **** }
 11411              		.loc 1 2988 0
 11412 0014 BD46     		mov	sp, r7
 11413              		@ sp needed
 11414 0016 80BD     		pop	{r7, pc}
 11415              	.L906:
 11416              		.align	2
 11417              	.L905:
 11418 0018 00000000 		.word	devAddr
 11419              		.cfi_endproc
 11420              	.LFE249:
 11421              		.size	MPU6050_resetDMP, .-MPU6050_resetDMP
 11422              		.section	.text.MPU6050_setMemoryBank,"ax",%progbits
 11423              		.align	2
 11424              		.global	MPU6050_setMemoryBank
 11425              		.code	16
 11426              		.thumb_func
 11427              		.type	MPU6050_setMemoryBank, %function
 11428              	MPU6050_setMemoryBank:
 11429              	.LFB250:
2989:.\mpu6050.c   **** 
2990:.\mpu6050.c   **** // BANK_SEL register
2991:.\mpu6050.c   **** 
2992:.\mpu6050.c   **** void MPU6050_setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 254


 11430              		.loc 1 2992 0
 11431              		.cfi_startproc
 11432 0000 80B5     		push	{r7, lr}
 11433              		.cfi_def_cfa_offset 8
 11434              		.cfi_offset 7, -8
 11435              		.cfi_offset 14, -4
 11436 0002 82B0     		sub	sp, sp, #8
 11437              		.cfi_def_cfa_offset 16
 11438 0004 00AF     		add	r7, sp, #0
 11439              		.cfi_def_cfa_register 7
 11440 0006 FB1D     		add	r3, r7, #7
 11441 0008 1870     		strb	r0, [r3]
 11442 000a BB1D     		add	r3, r7, #6
 11443 000c 1970     		strb	r1, [r3]
 11444 000e 7B1D     		add	r3, r7, #5
 11445 0010 1A70     		strb	r2, [r3]
2993:.\mpu6050.c   ****     bank &= 0x1F;
 11446              		.loc 1 2993 0
 11447 0012 FB1D     		add	r3, r7, #7
 11448 0014 FA1D     		add	r2, r7, #7
 11449 0016 1178     		ldrb	r1, [r2]
 11450 0018 1F22     		mov	r2, #31
 11451 001a 0A40     		and	r2, r1
 11452 001c 1A70     		strb	r2, [r3]
2994:.\mpu6050.c   ****     if (userBank) bank |= 0x20;
 11453              		.loc 1 2994 0
 11454 001e 7B1D     		add	r3, r7, #5
 11455 0020 1B78     		ldrb	r3, [r3]
 11456 0022 002B     		cmp	r3, #0
 11457 0024 05D0     		beq	.L908
 11458              		.loc 1 2994 0 is_stmt 0 discriminator 1
 11459 0026 FB1D     		add	r3, r7, #7
 11460 0028 FA1D     		add	r2, r7, #7
 11461 002a 1278     		ldrb	r2, [r2]
 11462 002c 2021     		mov	r1, #32
 11463 002e 0A43     		orr	r2, r1
 11464 0030 1A70     		strb	r2, [r3]
 11465              	.L908:
2995:.\mpu6050.c   ****     if (prefetchEnabled) bank |= 0x40;
 11466              		.loc 1 2995 0 is_stmt 1
 11467 0032 BB1D     		add	r3, r7, #6
 11468 0034 1B78     		ldrb	r3, [r3]
 11469 0036 002B     		cmp	r3, #0
 11470 0038 05D0     		beq	.L909
 11471              		.loc 1 2995 0 is_stmt 0 discriminator 1
 11472 003a FB1D     		add	r3, r7, #7
 11473 003c FA1D     		add	r2, r7, #7
 11474 003e 1278     		ldrb	r2, [r2]
 11475 0040 4021     		mov	r1, #64
 11476 0042 0A43     		orr	r2, r1
 11477 0044 1A70     		strb	r2, [r3]
 11478              	.L909:
2996:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 11479              		.loc 1 2996 0 is_stmt 1
 11480 0046 064B     		ldr	r3, .L910
 11481 0048 1A78     		ldrb	r2, [r3]
 11482 004a FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 255


 11483 004c 1B78     		ldrb	r3, [r3]
 11484 004e 101C     		mov	r0, r2
 11485 0050 6D21     		mov	r1, #109
 11486 0052 1A1C     		mov	r2, r3
 11487 0054 FFF7FEFF 		bl	I2CWriteByte
2997:.\mpu6050.c   **** }
 11488              		.loc 1 2997 0
 11489 0058 BD46     		mov	sp, r7
 11490 005a 02B0     		add	sp, sp, #8
 11491              		@ sp needed
 11492 005c 80BD     		pop	{r7, pc}
 11493              	.L911:
 11494 005e C046     		.align	2
 11495              	.L910:
 11496 0060 00000000 		.word	devAddr
 11497              		.cfi_endproc
 11498              	.LFE250:
 11499              		.size	MPU6050_setMemoryBank, .-MPU6050_setMemoryBank
 11500              		.section	.text.MPU6050_setMemoryStartAddress,"ax",%progbits
 11501              		.align	2
 11502              		.global	MPU6050_setMemoryStartAddress
 11503              		.code	16
 11504              		.thumb_func
 11505              		.type	MPU6050_setMemoryStartAddress, %function
 11506              	MPU6050_setMemoryStartAddress:
 11507              	.LFB251:
2998:.\mpu6050.c   **** 
2999:.\mpu6050.c   **** // MEM_START_ADDR register
3000:.\mpu6050.c   **** 
3001:.\mpu6050.c   **** void MPU6050_setMemoryStartAddress(uint8_t address) {
 11508              		.loc 1 3001 0
 11509              		.cfi_startproc
 11510 0000 80B5     		push	{r7, lr}
 11511              		.cfi_def_cfa_offset 8
 11512              		.cfi_offset 7, -8
 11513              		.cfi_offset 14, -4
 11514 0002 82B0     		sub	sp, sp, #8
 11515              		.cfi_def_cfa_offset 16
 11516 0004 00AF     		add	r7, sp, #0
 11517              		.cfi_def_cfa_register 7
 11518 0006 021C     		mov	r2, r0
 11519 0008 FB1D     		add	r3, r7, #7
 11520 000a 1A70     		strb	r2, [r3]
3002:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 11521              		.loc 1 3002 0
 11522 000c 054B     		ldr	r3, .L913
 11523 000e 1A78     		ldrb	r2, [r3]
 11524 0010 FB1D     		add	r3, r7, #7
 11525 0012 1B78     		ldrb	r3, [r3]
 11526 0014 101C     		mov	r0, r2
 11527 0016 6E21     		mov	r1, #110
 11528 0018 1A1C     		mov	r2, r3
 11529 001a FFF7FEFF 		bl	I2CWriteByte
3003:.\mpu6050.c   **** }
 11530              		.loc 1 3003 0
 11531 001e BD46     		mov	sp, r7
 11532 0020 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 256


 11533              		@ sp needed
 11534 0022 80BD     		pop	{r7, pc}
 11535              	.L914:
 11536              		.align	2
 11537              	.L913:
 11538 0024 00000000 		.word	devAddr
 11539              		.cfi_endproc
 11540              	.LFE251:
 11541              		.size	MPU6050_setMemoryStartAddress, .-MPU6050_setMemoryStartAddress
 11542              		.section	.text.MPU6050_readMemoryByte,"ax",%progbits
 11543              		.align	2
 11544              		.global	MPU6050_readMemoryByte
 11545              		.code	16
 11546              		.thumb_func
 11547              		.type	MPU6050_readMemoryByte, %function
 11548              	MPU6050_readMemoryByte:
 11549              	.LFB252:
3004:.\mpu6050.c   **** 
3005:.\mpu6050.c   **** // MEM_R_W register
3006:.\mpu6050.c   **** 
3007:.\mpu6050.c   **** uint8_t MPU6050_readMemoryByte() {
 11550              		.loc 1 3007 0
 11551              		.cfi_startproc
 11552 0000 80B5     		push	{r7, lr}
 11553              		.cfi_def_cfa_offset 8
 11554              		.cfi_offset 7, -8
 11555              		.cfi_offset 14, -4
 11556 0002 00AF     		add	r7, sp, #0
 11557              		.cfi_def_cfa_register 7
3008:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_MEM_R_W, buffer);
 11558              		.loc 1 3008 0
 11559 0004 064B     		ldr	r3, .L917
 11560 0006 1A78     		ldrb	r2, [r3]
 11561 0008 064B     		ldr	r3, .L917+4
 11562 000a 101C     		mov	r0, r2
 11563 000c 6F21     		mov	r1, #111
 11564 000e 1A1C     		mov	r2, r3
 11565 0010 FFF7FEFF 		bl	I2CReadByte
3009:.\mpu6050.c   ****     return buffer[0];
 11566              		.loc 1 3009 0
 11567 0014 034B     		ldr	r3, .L917+4
 11568 0016 1B78     		ldrb	r3, [r3]
3010:.\mpu6050.c   **** }
 11569              		.loc 1 3010 0
 11570 0018 181C     		mov	r0, r3
 11571 001a BD46     		mov	sp, r7
 11572              		@ sp needed
 11573 001c 80BD     		pop	{r7, pc}
 11574              	.L918:
 11575 001e C046     		.align	2
 11576              	.L917:
 11577 0020 00000000 		.word	devAddr
 11578 0024 00000000 		.word	buffer
 11579              		.cfi_endproc
 11580              	.LFE252:
 11581              		.size	MPU6050_readMemoryByte, .-MPU6050_readMemoryByte
 11582              		.section	.text.MPU6050_writeMemoryByte,"ax",%progbits
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 257


 11583              		.align	2
 11584              		.global	MPU6050_writeMemoryByte
 11585              		.code	16
 11586              		.thumb_func
 11587              		.type	MPU6050_writeMemoryByte, %function
 11588              	MPU6050_writeMemoryByte:
 11589              	.LFB253:
3011:.\mpu6050.c   **** void MPU6050_writeMemoryByte(uint8_t data) {
 11590              		.loc 1 3011 0
 11591              		.cfi_startproc
 11592 0000 80B5     		push	{r7, lr}
 11593              		.cfi_def_cfa_offset 8
 11594              		.cfi_offset 7, -8
 11595              		.cfi_offset 14, -4
 11596 0002 82B0     		sub	sp, sp, #8
 11597              		.cfi_def_cfa_offset 16
 11598 0004 00AF     		add	r7, sp, #0
 11599              		.cfi_def_cfa_register 7
 11600 0006 021C     		mov	r2, r0
 11601 0008 FB1D     		add	r3, r7, #7
 11602 000a 1A70     		strb	r2, [r3]
3012:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_MEM_R_W, data);
 11603              		.loc 1 3012 0
 11604 000c 054B     		ldr	r3, .L920
 11605 000e 1A78     		ldrb	r2, [r3]
 11606 0010 FB1D     		add	r3, r7, #7
 11607 0012 1B78     		ldrb	r3, [r3]
 11608 0014 101C     		mov	r0, r2
 11609 0016 6F21     		mov	r1, #111
 11610 0018 1A1C     		mov	r2, r3
 11611 001a FFF7FEFF 		bl	I2CWriteByte
3013:.\mpu6050.c   **** }
 11612              		.loc 1 3013 0
 11613 001e BD46     		mov	sp, r7
 11614 0020 02B0     		add	sp, sp, #8
 11615              		@ sp needed
 11616 0022 80BD     		pop	{r7, pc}
 11617              	.L921:
 11618              		.align	2
 11619              	.L920:
 11620 0024 00000000 		.word	devAddr
 11621              		.cfi_endproc
 11622              	.LFE253:
 11623              		.size	MPU6050_writeMemoryByte, .-MPU6050_writeMemoryByte
 11624              		.section	.text.MPU6050_readMemoryBlock,"ax",%progbits
 11625              		.align	2
 11626              		.global	MPU6050_readMemoryBlock
 11627              		.code	16
 11628              		.thumb_func
 11629              		.type	MPU6050_readMemoryBlock, %function
 11630              	MPU6050_readMemoryBlock:
 11631              	.LFB254:
3014:.\mpu6050.c   **** void MPU6050_readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 11632              		.loc 1 3014 0
 11633              		.cfi_startproc
 11634 0000 80B5     		push	{r7, lr}
 11635              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 258


 11636              		.cfi_offset 7, -8
 11637              		.cfi_offset 14, -4
 11638 0002 84B0     		sub	sp, sp, #16
 11639              		.cfi_def_cfa_offset 24
 11640 0004 00AF     		add	r7, sp, #0
 11641              		.cfi_def_cfa_register 7
 11642 0006 7860     		str	r0, [r7, #4]
 11643 0008 081C     		mov	r0, r1
 11644 000a 111C     		mov	r1, r2
 11645 000c 1A1C     		mov	r2, r3
 11646 000e BB1C     		add	r3, r7, #2
 11647 0010 1880     		strh	r0, [r3]
 11648 0012 7B1C     		add	r3, r7, #1
 11649 0014 1970     		strb	r1, [r3]
 11650 0016 3B1C     		mov	r3, r7
 11651 0018 1A70     		strb	r2, [r3]
3015:.\mpu6050.c   ****     MPU6050_setMemoryBank(bank, false, false);
 11652              		.loc 1 3015 0
 11653 001a 7B1C     		add	r3, r7, #1
 11654 001c 1B78     		ldrb	r3, [r3]
 11655 001e 181C     		mov	r0, r3
 11656 0020 0021     		mov	r1, #0
 11657 0022 0022     		mov	r2, #0
 11658 0024 FFF7FEFF 		bl	MPU6050_setMemoryBank
3016:.\mpu6050.c   ****     MPU6050_setMemoryStartAddress(address);
 11659              		.loc 1 3016 0
 11660 0028 3B1C     		mov	r3, r7
 11661 002a 1B78     		ldrb	r3, [r3]
 11662 002c 181C     		mov	r0, r3
 11663 002e FFF7FEFF 		bl	MPU6050_setMemoryStartAddress
3017:.\mpu6050.c   ****     uint8_t chunkSize;
3018:.\mpu6050.c   **** 	uint16_t i = 0;
 11664              		.loc 1 3018 0
 11665 0032 3B1C     		mov	r3, r7
 11666 0034 0C33     		add	r3, r3, #12
 11667 0036 0022     		mov	r2, #0
 11668 0038 1A80     		strh	r2, [r3]
3019:.\mpu6050.c   ****     while ( i < dataSize) {
 11669              		.loc 1 3019 0
 11670 003a 6AE0     		b	.L923
 11671              	.L927:
3020:.\mpu6050.c   ****         // determine correct chunk size according to bank position and data size
3021:.\mpu6050.c   ****         chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 11672              		.loc 1 3021 0
 11673 003c 3B1C     		mov	r3, r7
 11674 003e 0F33     		add	r3, r3, #15
 11675 0040 1022     		mov	r2, #16
 11676 0042 1A70     		strb	r2, [r3]
3022:.\mpu6050.c   **** 
3023:.\mpu6050.c   ****         // make sure we don't go past the data size
3024:.\mpu6050.c   ****         if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 11677              		.loc 1 3024 0
 11678 0044 3B1C     		mov	r3, r7
 11679 0046 0C33     		add	r3, r3, #12
 11680 0048 1A88     		ldrh	r2, [r3]
 11681 004a 3B1C     		mov	r3, r7
 11682 004c 0F33     		add	r3, r3, #15
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 259


 11683 004e 1B78     		ldrb	r3, [r3]
 11684 0050 D218     		add	r2, r2, r3
 11685 0052 BB1C     		add	r3, r7, #2
 11686 0054 1B88     		ldrh	r3, [r3]
 11687 0056 9A42     		cmp	r2, r3
 11688 0058 0ADD     		ble	.L924
 11689              		.loc 1 3024 0 is_stmt 0 discriminator 1
 11690 005a BB1C     		add	r3, r7, #2
 11691 005c 1B88     		ldrh	r3, [r3]
 11692 005e D9B2     		uxtb	r1, r3
 11693 0060 3B1C     		mov	r3, r7
 11694 0062 0C33     		add	r3, r3, #12
 11695 0064 1B88     		ldrh	r3, [r3]
 11696 0066 DAB2     		uxtb	r2, r3
 11697 0068 3B1C     		mov	r3, r7
 11698 006a 0F33     		add	r3, r3, #15
 11699 006c 8A1A     		sub	r2, r1, r2
 11700 006e 1A70     		strb	r2, [r3]
 11701              	.L924:
3025:.\mpu6050.c   **** 
3026:.\mpu6050.c   ****         // make sure this chunk doesn't go past the bank boundary (256 bytes)
3027:.\mpu6050.c   ****         if (chunkSize > 256 - address) chunkSize = 256 - address;
 11702              		.loc 1 3027 0 is_stmt 1
 11703 0070 3B1C     		mov	r3, r7
 11704 0072 0F33     		add	r3, r3, #15
 11705 0074 1A78     		ldrb	r2, [r3]
 11706 0076 3B1C     		mov	r3, r7
 11707 0078 1B78     		ldrb	r3, [r3]
 11708 007a 8021     		mov	r1, #128
 11709 007c 4900     		lsl	r1, r1, #1
 11710 007e CB1A     		sub	r3, r1, r3
 11711 0080 9A42     		cmp	r2, r3
 11712 0082 05DD     		ble	.L925
 11713              		.loc 1 3027 0 is_stmt 0 discriminator 1
 11714 0084 3B1C     		mov	r3, r7
 11715 0086 0F33     		add	r3, r3, #15
 11716 0088 3A1C     		mov	r2, r7
 11717 008a 1278     		ldrb	r2, [r2]
 11718 008c 5242     		neg	r2, r2
 11719 008e 1A70     		strb	r2, [r3]
 11720              	.L925:
3028:.\mpu6050.c   **** 
3029:.\mpu6050.c   ****         // read the chunk of data as specified
3030:.\mpu6050.c   ****         I2CReadBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 11721              		.loc 1 3030 0 is_stmt 1
 11722 0090 254B     		ldr	r3, .L928
 11723 0092 1978     		ldrb	r1, [r3]
 11724 0094 3B1C     		mov	r3, r7
 11725 0096 0C33     		add	r3, r3, #12
 11726 0098 1B88     		ldrh	r3, [r3]
 11727 009a 7A68     		ldr	r2, [r7, #4]
 11728 009c D318     		add	r3, r2, r3
 11729 009e 3A1C     		mov	r2, r7
 11730 00a0 0F32     		add	r2, r2, #15
 11731 00a2 1278     		ldrb	r2, [r2]
 11732 00a4 081C     		mov	r0, r1
 11733 00a6 6F21     		mov	r1, #111
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 260


 11734 00a8 FFF7FEFF 		bl	I2CReadBytes
3031:.\mpu6050.c   ****         
3032:.\mpu6050.c   ****         // increase byte index by [chunkSize]
3033:.\mpu6050.c   ****         i += chunkSize;
 11735              		.loc 1 3033 0
 11736 00ac 3B1C     		mov	r3, r7
 11737 00ae 0F33     		add	r3, r3, #15
 11738 00b0 1B78     		ldrb	r3, [r3]
 11739 00b2 99B2     		uxth	r1, r3
 11740 00b4 3B1C     		mov	r3, r7
 11741 00b6 0C33     		add	r3, r3, #12
 11742 00b8 3A1C     		mov	r2, r7
 11743 00ba 0C32     		add	r2, r2, #12
 11744 00bc 1288     		ldrh	r2, [r2]
 11745 00be 8A18     		add	r2, r1, r2
 11746 00c0 1A80     		strh	r2, [r3]
3034:.\mpu6050.c   **** 
3035:.\mpu6050.c   ****         // uint8_t automatically wraps to 0 at 256
3036:.\mpu6050.c   ****         address += chunkSize;
 11747              		.loc 1 3036 0
 11748 00c2 3B1C     		mov	r3, r7
 11749 00c4 391C     		mov	r1, r7
 11750 00c6 3A1C     		mov	r2, r7
 11751 00c8 0F32     		add	r2, r2, #15
 11752 00ca 0978     		ldrb	r1, [r1]
 11753 00cc 1278     		ldrb	r2, [r2]
 11754 00ce 8A18     		add	r2, r1, r2
 11755 00d0 1A70     		strb	r2, [r3]
 11756 00d2 7B1C     		add	r3, r7, #1
 11757 00d4 7A1C     		add	r2, r7, #1
 11758 00d6 1278     		ldrb	r2, [r2]
 11759 00d8 1A70     		strb	r2, [r3]
3037:.\mpu6050.c   **** 
3038:.\mpu6050.c   ****         // if we aren't done, update bank (if necessary) and address
3039:.\mpu6050.c   ****         if (i < dataSize) {
 11760              		.loc 1 3039 0
 11761 00da 3A1C     		mov	r2, r7
 11762 00dc 0C32     		add	r2, r2, #12
 11763 00de BB1C     		add	r3, r7, #2
 11764 00e0 1288     		ldrh	r2, [r2]
 11765 00e2 1B88     		ldrh	r3, [r3]
 11766 00e4 9A42     		cmp	r2, r3
 11767 00e6 14D2     		bcs	.L923
3040:.\mpu6050.c   ****             if (address == 0) bank++;
 11768              		.loc 1 3040 0
 11769 00e8 3B1C     		mov	r3, r7
 11770 00ea 1B78     		ldrb	r3, [r3]
 11771 00ec 002B     		cmp	r3, #0
 11772 00ee 04D1     		bne	.L926
 11773              		.loc 1 3040 0 is_stmt 0 discriminator 1
 11774 00f0 7B1C     		add	r3, r7, #1
 11775 00f2 1A78     		ldrb	r2, [r3]
 11776 00f4 7B1C     		add	r3, r7, #1
 11777 00f6 0132     		add	r2, r2, #1
 11778 00f8 1A70     		strb	r2, [r3]
 11779              	.L926:
3041:.\mpu6050.c   ****             MPU6050_setMemoryBank(bank, false, false);
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 261


 11780              		.loc 1 3041 0 is_stmt 1
 11781 00fa 7B1C     		add	r3, r7, #1
 11782 00fc 1B78     		ldrb	r3, [r3]
 11783 00fe 181C     		mov	r0, r3
 11784 0100 0021     		mov	r1, #0
 11785 0102 0022     		mov	r2, #0
 11786 0104 FFF7FEFF 		bl	MPU6050_setMemoryBank
3042:.\mpu6050.c   ****             MPU6050_setMemoryStartAddress(address);
 11787              		.loc 1 3042 0
 11788 0108 3B1C     		mov	r3, r7
 11789 010a 1B78     		ldrb	r3, [r3]
 11790 010c 181C     		mov	r0, r3
 11791 010e FFF7FEFF 		bl	MPU6050_setMemoryStartAddress
 11792              	.L923:
3019:.\mpu6050.c   ****     while ( i < dataSize) {
 11793              		.loc 1 3019 0 discriminator 1
 11794 0112 3A1C     		mov	r2, r7
 11795 0114 0C32     		add	r2, r2, #12
 11796 0116 BB1C     		add	r3, r7, #2
 11797 0118 1288     		ldrh	r2, [r2]
 11798 011a 1B88     		ldrh	r3, [r3]
 11799 011c 9A42     		cmp	r2, r3
 11800 011e 8DD3     		bcc	.L927
3043:.\mpu6050.c   ****         }
3044:.\mpu6050.c   ****     }
3045:.\mpu6050.c   **** }
 11801              		.loc 1 3045 0
 11802 0120 BD46     		mov	sp, r7
 11803 0122 04B0     		add	sp, sp, #16
 11804              		@ sp needed
 11805 0124 80BD     		pop	{r7, pc}
 11806              	.L929:
 11807 0126 C046     		.align	2
 11808              	.L928:
 11809 0128 00000000 		.word	devAddr
 11810              		.cfi_endproc
 11811              	.LFE254:
 11812              		.size	MPU6050_readMemoryBlock, .-MPU6050_readMemoryBlock
 11813              		.section	.text.MPU6050_getDMPConfig1,"ax",%progbits
 11814              		.align	2
 11815              		.global	MPU6050_getDMPConfig1
 11816              		.code	16
 11817              		.thumb_func
 11818              		.type	MPU6050_getDMPConfig1, %function
 11819              	MPU6050_getDMPConfig1:
 11820              	.LFB255:
3046:.\mpu6050.c   **** #if !(I2CDEV_IMPLEMENTATION == I2CDEV_MSP430)
3047:.\mpu6050.c   **** bool MPU6050_writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address
3048:.\mpu6050.c   ****     setMemoryBank(bank);
3049:.\mpu6050.c   ****     setMemoryStartAddress(address);
3050:.\mpu6050.c   ****     uint8_t chunkSize;
3051:.\mpu6050.c   ****     uint8_t *verifyBuffer;
3052:.\mpu6050.c   ****     uint8_t *progBuffer;
3053:.\mpu6050.c   ****     uint16_t i;
3054:.\mpu6050.c   ****     uint8_t j;
3055:.\mpu6050.c   ****     if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
3056:.\mpu6050.c   ****     if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 262


3057:.\mpu6050.c   ****     for (i = 0; i < dataSize;) {
3058:.\mpu6050.c   ****         // determine correct chunk size according to bank position and data size
3059:.\mpu6050.c   ****         chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
3060:.\mpu6050.c   **** 
3061:.\mpu6050.c   ****         // make sure we don't go past the data size
3062:.\mpu6050.c   ****         if (i + chunkSize > dataSize) chunkSize = dataSize - i;
3063:.\mpu6050.c   **** 
3064:.\mpu6050.c   ****         // make sure this chunk doesn't go past the bank boundary (256 bytes)
3065:.\mpu6050.c   ****         if (chunkSize > 256 - address) chunkSize = 256 - address;
3066:.\mpu6050.c   ****         
3067:.\mpu6050.c   ****         if (useProgMem) {
3068:.\mpu6050.c   ****             // write the chunk of data as specified
3069:.\mpu6050.c   ****             for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
3070:.\mpu6050.c   ****         } else {
3071:.\mpu6050.c   ****             // write the chunk of data as specified
3072:.\mpu6050.c   ****             progBuffer = (uint8_t *)data + i;
3073:.\mpu6050.c   ****         }
3074:.\mpu6050.c   **** 
3075:.\mpu6050.c   ****         I2CWriteBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
3076:.\mpu6050.c   **** 
3077:.\mpu6050.c   ****         // verify data if needed
3078:.\mpu6050.c   ****         if (verify && verifyBuffer) {
3079:.\mpu6050.c   ****             setMemoryBank(bank);
3080:.\mpu6050.c   ****             setMemoryStartAddress(address);
3081:.\mpu6050.c   ****             I2CReadBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
3082:.\mpu6050.c   ****             if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
3083:.\mpu6050.c   ****                 /*Serial.print("Block write verification error, bank ");
3084:.\mpu6050.c   ****                 Serial.print(bank, DEC);
3085:.\mpu6050.c   ****                 Serial.print(", address ");
3086:.\mpu6050.c   ****                 Serial.print(address, DEC);
3087:.\mpu6050.c   ****                 Serial.print("!\nExpected:");
3088:.\mpu6050.c   ****                 for (j = 0; j < chunkSize; j++) {
3089:.\mpu6050.c   ****                     Serial.print(" 0x");
3090:.\mpu6050.c   ****                     if (progBuffer[j] < 16) Serial.print("0");
3091:.\mpu6050.c   ****                     Serial.print(progBuffer[j], HEX);
3092:.\mpu6050.c   ****                 }
3093:.\mpu6050.c   ****                 Serial.print("\nReceived:");
3094:.\mpu6050.c   ****                 for (uint8_t j = 0; j < chunkSize; j++) {
3095:.\mpu6050.c   ****                     Serial.print(" 0x");
3096:.\mpu6050.c   ****                     if (verifyBuffer[i + j] < 16) Serial.print("0");
3097:.\mpu6050.c   ****                     Serial.print(verifyBuffer[i + j], HEX);
3098:.\mpu6050.c   ****                 }
3099:.\mpu6050.c   ****                 Serial.print("\n");*/
3100:.\mpu6050.c   ****                 free(verifyBuffer);
3101:.\mpu6050.c   ****                 if (useProgMem) free(progBuffer);
3102:.\mpu6050.c   ****                 return false; // uh oh.
3103:.\mpu6050.c   ****             }
3104:.\mpu6050.c   ****         }
3105:.\mpu6050.c   **** 
3106:.\mpu6050.c   ****         // increase byte index by [chunkSize]
3107:.\mpu6050.c   ****         i += chunkSize;
3108:.\mpu6050.c   **** 
3109:.\mpu6050.c   ****         // uint8_t automatically wraps to 0 at 256
3110:.\mpu6050.c   ****         address += chunkSize;
3111:.\mpu6050.c   **** 
3112:.\mpu6050.c   ****         // if we aren't done, update bank (if necessary) and address
3113:.\mpu6050.c   ****         if (i < dataSize) {
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 263


3114:.\mpu6050.c   ****             if (address == 0) bank++;
3115:.\mpu6050.c   ****             setMemoryBank(bank);
3116:.\mpu6050.c   ****             setMemoryStartAddress(address);
3117:.\mpu6050.c   ****         }
3118:.\mpu6050.c   ****     }
3119:.\mpu6050.c   ****     if (verify) free(verifyBuffer);
3120:.\mpu6050.c   ****     if (useProgMem) free(progBuffer);
3121:.\mpu6050.c   ****     return true;
3122:.\mpu6050.c   **** }
3123:.\mpu6050.c   **** bool MPU6050_writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t add
3124:.\mpu6050.c   ****     return writeMemoryBlock(data, dataSize, bank, address, verify, true);
3125:.\mpu6050.c   **** }
3126:.\mpu6050.c   **** bool MPU6050_writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
3127:.\mpu6050.c   ****     uint8_t *progBuffer, success, special;
3128:.\mpu6050.c   ****     uint16_t i, j;
3129:.\mpu6050.c   ****     if (useProgMem) {
3130:.\mpu6050.c   ****         progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
3131:.\mpu6050.c   ****     }
3132:.\mpu6050.c   **** 
3133:.\mpu6050.c   ****     // config set data is a long string of blocks with the following structure:
3134:.\mpu6050.c   ****     // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
3135:.\mpu6050.c   ****     uint8_t bank, offset, length;
3136:.\mpu6050.c   ****     for (i = 0; i < dataSize;) {
3137:.\mpu6050.c   ****         if (useProgMem) {
3138:.\mpu6050.c   ****             bank = pgm_read_byte(data + i++);
3139:.\mpu6050.c   ****             offset = pgm_read_byte(data + i++);
3140:.\mpu6050.c   ****             length = pgm_read_byte(data + i++);
3141:.\mpu6050.c   ****         } else {
3142:.\mpu6050.c   ****             bank = data[i++];
3143:.\mpu6050.c   ****             offset = data[i++];
3144:.\mpu6050.c   ****             length = data[i++];
3145:.\mpu6050.c   ****         }
3146:.\mpu6050.c   **** 
3147:.\mpu6050.c   ****         // write data or perform special action
3148:.\mpu6050.c   ****         if (length > 0) {
3149:.\mpu6050.c   ****             // regular block of data to write
3150:.\mpu6050.c   ****             /*Serial.print("Writing config block to bank ");
3151:.\mpu6050.c   ****             Serial.print(bank);
3152:.\mpu6050.c   ****             Serial.print(", offset ");
3153:.\mpu6050.c   ****             Serial.print(offset);
3154:.\mpu6050.c   ****             Serial.print(", length=");
3155:.\mpu6050.c   ****             Serial.println(length);*/
3156:.\mpu6050.c   ****             if (useProgMem) {
3157:.\mpu6050.c   ****                 if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length
3158:.\mpu6050.c   ****                 for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
3159:.\mpu6050.c   ****             } else {
3160:.\mpu6050.c   ****                 progBuffer = (uint8_t *)data + i;
3161:.\mpu6050.c   ****             }
3162:.\mpu6050.c   ****             success = writeMemoryBlock(progBuffer, length, bank, offset, true);
3163:.\mpu6050.c   ****             i += length;
3164:.\mpu6050.c   ****         } else {
3165:.\mpu6050.c   ****             // special instruction
3166:.\mpu6050.c   ****             // NOTE: this kind of behavior (what and when to do certain things)
3167:.\mpu6050.c   ****             // is totally undocumented. This code is in here based on observed
3168:.\mpu6050.c   ****             // behavior only, and exactly why (or even whether) it has to be here
3169:.\mpu6050.c   ****             // is anybody's guess for now.
3170:.\mpu6050.c   ****             if (useProgMem) {
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 264


3171:.\mpu6050.c   ****                 special = pgm_read_byte(data + i++);
3172:.\mpu6050.c   ****             } else {
3173:.\mpu6050.c   ****                 special = data[i++];
3174:.\mpu6050.c   ****             }
3175:.\mpu6050.c   ****             /*Serial.print("Special command code ");
3176:.\mpu6050.c   ****             Serial.print(special, HEX);
3177:.\mpu6050.c   ****             Serial.println(" found...");*/
3178:.\mpu6050.c   ****             if (special == 0x01) {
3179:.\mpu6050.c   ****                 // enable DMP-related interrupts
3180:.\mpu6050.c   ****                 
3181:.\mpu6050.c   ****                 //setIntZeroMotionEnabled(true);
3182:.\mpu6050.c   ****                 //setIntFIFOBufferOverflowEnabled(true);
3183:.\mpu6050.c   ****                 //setIntDMPEnabled(true);
3184:.\mpu6050.c   ****                 I2CWriteByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
3185:.\mpu6050.c   **** 
3186:.\mpu6050.c   ****                 success = true;
3187:.\mpu6050.c   ****             } else {
3188:.\mpu6050.c   ****                 // unknown special command
3189:.\mpu6050.c   ****                 success = false;
3190:.\mpu6050.c   ****             }
3191:.\mpu6050.c   ****         }
3192:.\mpu6050.c   ****         
3193:.\mpu6050.c   ****         if (!success) {
3194:.\mpu6050.c   ****             if (useProgMem) free(progBuffer);
3195:.\mpu6050.c   ****             return false; // uh oh
3196:.\mpu6050.c   ****         }
3197:.\mpu6050.c   ****     }
3198:.\mpu6050.c   ****     if (useProgMem) free(progBuffer);
3199:.\mpu6050.c   ****     return true;
3200:.\mpu6050.c   **** }
3201:.\mpu6050.c   **** 
3202:.\mpu6050.c   **** bool MPU6050_writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
3203:.\mpu6050.c   ****     return writeDMPConfigurationSet(data, dataSize, true);
3204:.\mpu6050.c   **** }
3205:.\mpu6050.c   **** #endif
3206:.\mpu6050.c   **** // DMP_CFG_1 register
3207:.\mpu6050.c   **** 
3208:.\mpu6050.c   **** uint8_t MPU6050_getDMPConfig1() {
 11821              		.loc 1 3208 0
 11822              		.cfi_startproc
 11823 0000 80B5     		push	{r7, lr}
 11824              		.cfi_def_cfa_offset 8
 11825              		.cfi_offset 7, -8
 11826              		.cfi_offset 14, -4
 11827 0002 00AF     		add	r7, sp, #0
 11828              		.cfi_def_cfa_register 7
3209:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
 11829              		.loc 1 3209 0
 11830 0004 064B     		ldr	r3, .L932
 11831 0006 1A78     		ldrb	r2, [r3]
 11832 0008 064B     		ldr	r3, .L932+4
 11833 000a 101C     		mov	r0, r2
 11834 000c 7021     		mov	r1, #112
 11835 000e 1A1C     		mov	r2, r3
 11836 0010 FFF7FEFF 		bl	I2CReadByte
3210:.\mpu6050.c   ****     return buffer[0];
 11837              		.loc 1 3210 0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 265


 11838 0014 034B     		ldr	r3, .L932+4
 11839 0016 1B78     		ldrb	r3, [r3]
3211:.\mpu6050.c   **** }
 11840              		.loc 1 3211 0
 11841 0018 181C     		mov	r0, r3
 11842 001a BD46     		mov	sp, r7
 11843              		@ sp needed
 11844 001c 80BD     		pop	{r7, pc}
 11845              	.L933:
 11846 001e C046     		.align	2
 11847              	.L932:
 11848 0020 00000000 		.word	devAddr
 11849 0024 00000000 		.word	buffer
 11850              		.cfi_endproc
 11851              	.LFE255:
 11852              		.size	MPU6050_getDMPConfig1, .-MPU6050_getDMPConfig1
 11853              		.section	.text.MPU6050_setDMPConfig1,"ax",%progbits
 11854              		.align	2
 11855              		.global	MPU6050_setDMPConfig1
 11856              		.code	16
 11857              		.thumb_func
 11858              		.type	MPU6050_setDMPConfig1, %function
 11859              	MPU6050_setDMPConfig1:
 11860              	.LFB256:
3212:.\mpu6050.c   **** void MPU6050_setDMPConfig1(uint8_t config) {
 11861              		.loc 1 3212 0
 11862              		.cfi_startproc
 11863 0000 80B5     		push	{r7, lr}
 11864              		.cfi_def_cfa_offset 8
 11865              		.cfi_offset 7, -8
 11866              		.cfi_offset 14, -4
 11867 0002 82B0     		sub	sp, sp, #8
 11868              		.cfi_def_cfa_offset 16
 11869 0004 00AF     		add	r7, sp, #0
 11870              		.cfi_def_cfa_register 7
 11871 0006 021C     		mov	r2, r0
 11872 0008 FB1D     		add	r3, r7, #7
 11873 000a 1A70     		strb	r2, [r3]
3213:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 11874              		.loc 1 3213 0
 11875 000c 054B     		ldr	r3, .L935
 11876 000e 1A78     		ldrb	r2, [r3]
 11877 0010 FB1D     		add	r3, r7, #7
 11878 0012 1B78     		ldrb	r3, [r3]
 11879 0014 101C     		mov	r0, r2
 11880 0016 7021     		mov	r1, #112
 11881 0018 1A1C     		mov	r2, r3
 11882 001a FFF7FEFF 		bl	I2CWriteByte
3214:.\mpu6050.c   **** }
 11883              		.loc 1 3214 0
 11884 001e BD46     		mov	sp, r7
 11885 0020 02B0     		add	sp, sp, #8
 11886              		@ sp needed
 11887 0022 80BD     		pop	{r7, pc}
 11888              	.L936:
 11889              		.align	2
 11890              	.L935:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 266


 11891 0024 00000000 		.word	devAddr
 11892              		.cfi_endproc
 11893              	.LFE256:
 11894              		.size	MPU6050_setDMPConfig1, .-MPU6050_setDMPConfig1
 11895              		.section	.text.MPU6050_getDMPConfig2,"ax",%progbits
 11896              		.align	2
 11897              		.global	MPU6050_getDMPConfig2
 11898              		.code	16
 11899              		.thumb_func
 11900              		.type	MPU6050_getDMPConfig2, %function
 11901              	MPU6050_getDMPConfig2:
 11902              	.LFB257:
3215:.\mpu6050.c   **** 
3216:.\mpu6050.c   **** // DMP_CFG_2 register
3217:.\mpu6050.c   **** 
3218:.\mpu6050.c   **** uint8_t MPU6050_getDMPConfig2() {
 11903              		.loc 1 3218 0
 11904              		.cfi_startproc
 11905 0000 80B5     		push	{r7, lr}
 11906              		.cfi_def_cfa_offset 8
 11907              		.cfi_offset 7, -8
 11908              		.cfi_offset 14, -4
 11909 0002 00AF     		add	r7, sp, #0
 11910              		.cfi_def_cfa_register 7
3219:.\mpu6050.c   ****     I2CReadByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
 11911              		.loc 1 3219 0
 11912 0004 064B     		ldr	r3, .L939
 11913 0006 1A78     		ldrb	r2, [r3]
 11914 0008 064B     		ldr	r3, .L939+4
 11915 000a 101C     		mov	r0, r2
 11916 000c 7121     		mov	r1, #113
 11917 000e 1A1C     		mov	r2, r3
 11918 0010 FFF7FEFF 		bl	I2CReadByte
3220:.\mpu6050.c   ****     return buffer[0];
 11919              		.loc 1 3220 0
 11920 0014 034B     		ldr	r3, .L939+4
 11921 0016 1B78     		ldrb	r3, [r3]
3221:.\mpu6050.c   **** }
 11922              		.loc 1 3221 0
 11923 0018 181C     		mov	r0, r3
 11924 001a BD46     		mov	sp, r7
 11925              		@ sp needed
 11926 001c 80BD     		pop	{r7, pc}
 11927              	.L940:
 11928 001e C046     		.align	2
 11929              	.L939:
 11930 0020 00000000 		.word	devAddr
 11931 0024 00000000 		.word	buffer
 11932              		.cfi_endproc
 11933              	.LFE257:
 11934              		.size	MPU6050_getDMPConfig2, .-MPU6050_getDMPConfig2
 11935              		.section	.text.MPU6050_setDMPConfig2,"ax",%progbits
 11936              		.align	2
 11937              		.global	MPU6050_setDMPConfig2
 11938              		.code	16
 11939              		.thumb_func
 11940              		.type	MPU6050_setDMPConfig2, %function
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 267


 11941              	MPU6050_setDMPConfig2:
 11942              	.LFB258:
3222:.\mpu6050.c   **** void MPU6050_setDMPConfig2(uint8_t config) {
 11943              		.loc 1 3222 0
 11944              		.cfi_startproc
 11945 0000 80B5     		push	{r7, lr}
 11946              		.cfi_def_cfa_offset 8
 11947              		.cfi_offset 7, -8
 11948              		.cfi_offset 14, -4
 11949 0002 82B0     		sub	sp, sp, #8
 11950              		.cfi_def_cfa_offset 16
 11951 0004 00AF     		add	r7, sp, #0
 11952              		.cfi_def_cfa_register 7
 11953 0006 021C     		mov	r2, r0
 11954 0008 FB1D     		add	r3, r7, #7
 11955 000a 1A70     		strb	r2, [r3]
3223:.\mpu6050.c   ****     I2CWriteByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 11956              		.loc 1 3223 0
 11957 000c 054B     		ldr	r3, .L942
 11958 000e 1A78     		ldrb	r2, [r3]
 11959 0010 FB1D     		add	r3, r7, #7
 11960 0012 1B78     		ldrb	r3, [r3]
 11961 0014 101C     		mov	r0, r2
 11962 0016 7121     		mov	r1, #113
 11963 0018 1A1C     		mov	r2, r3
 11964 001a FFF7FEFF 		bl	I2CWriteByte
3224:.\mpu6050.c   **** }
 11965              		.loc 1 3224 0
 11966 001e BD46     		mov	sp, r7
 11967 0020 02B0     		add	sp, sp, #8
 11968              		@ sp needed
 11969 0022 80BD     		pop	{r7, pc}
 11970              	.L943:
 11971              		.align	2
 11972              	.L942:
 11973 0024 00000000 		.word	devAddr
 11974              		.cfi_endproc
 11975              	.LFE258:
 11976              		.size	MPU6050_setDMPConfig2, .-MPU6050_setDMPConfig2
 11977              		.section	.text.MPU6050_setup_compass,"ax",%progbits
 11978              		.align	2
 11979              		.global	MPU6050_setup_compass
 11980              		.code	16
 11981              		.thumb_func
 11982              		.type	MPU6050_setup_compass, %function
 11983              	MPU6050_setup_compass:
 11984              	.LFB259:
3225:.\mpu6050.c   **** 
3226:.\mpu6050.c   **** 
3227:.\mpu6050.c   **** #define BIT_I2C_READ 0x80
3228:.\mpu6050.c   **** #define AKM_REG_ST1         (0x02)
3229:.\mpu6050.c   **** #define AKM_REG_HXL			(0x03)
3230:.\mpu6050.c   **** #define BIT_SLAVE_EN        (0x80)
3231:.\mpu6050.c   **** #define AKM_REG_CNTL        (0x0A)
3232:.\mpu6050.c   **** #define SUPPORTS_AK89xx_HIGH_SENS   (0x00)
3233:.\mpu6050.c   **** #define AKM_SINGLE_MEASUREMENT  (0x01 | SUPPORTS_AK89xx_HIGH_SENS)
3234:.\mpu6050.c   **** #define BIT_I2C_MST_VDDIO   (0x80)
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 268


3235:.\mpu6050.c   **** /** Setup Magnetometer to write to external sensor data registers
3236:.\mpu6050.c   ****  * based on motion_driver-2.0 sample code in inv_mpu.c
3237:.\mpu6050.c   ****  */
3238:.\mpu6050.c   **** void MPU6050_setup_compass() {
 11985              		.loc 1 3238 0
 11986              		.cfi_startproc
 11987 0000 80B5     		push	{r7, lr}
 11988              		.cfi_def_cfa_offset 8
 11989              		.cfi_offset 7, -8
 11990              		.cfi_offset 14, -4
 11991 0002 00AF     		add	r7, sp, #0
 11992              		.cfi_def_cfa_register 7
3239:.\mpu6050.c   **** //todo make more general and use MPU6050 methods and defines
3240:.\mpu6050.c   **** 	MPU6050_setI2CBypassEnabled(false);
 11993              		.loc 1 3240 0
 11994 0004 0020     		mov	r0, #0
 11995 0006 FFF7FEFF 		bl	MPU6050_setI2CBypassEnabled
3241:.\mpu6050.c   **** 	//    mpu.setWaitForExternalSensorEnabled(true);
3242:.\mpu6050.c   **** 	//    mpu.setSlaveAddress(0,MPU6050_ADDRESS_COMPASS);
3243:.\mpu6050.c   **** 	//    mpu.setSlaveAddress(1,MPU6050_ADDRESS_COMPASS);
3244:.\mpu6050.c   **** 
3245:.\mpu6050.c   ****     /* Set up master mode, master clock, and ES bit. */
3246:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_MST_CTRL, 0x40);
 11996              		.loc 1 3246 0
 11997 000a 6820     		mov	r0, #104
 11998 000c 2421     		mov	r1, #36
 11999 000e 4022     		mov	r2, #64
 12000 0010 FFF7FEFF 		bl	I2CWriteByte
3247:.\mpu6050.c   ****     /* Slave 0 reads from AKM data registers. */
3248:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV0_ADDR, BIT_I2C_READ | MPU6050_ADDRESS_
 12001              		.loc 1 3248 0
 12002 0014 6820     		mov	r0, #104
 12003 0016 2521     		mov	r1, #37
 12004 0018 8C22     		mov	r2, #140
 12005 001a FFF7FEFF 		bl	I2CWriteByte
3249:.\mpu6050.c   ****     /* Compass reads start at this register, the first data register. */
3250:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV0_REG, AKM_REG_HXL);
 12006              		.loc 1 3250 0
 12007 001e 6820     		mov	r0, #104
 12008 0020 2621     		mov	r1, #38
 12009 0022 0322     		mov	r2, #3
 12010 0024 FFF7FEFF 		bl	I2CWriteByte
3251:.\mpu6050.c   ****     /* Enable slave 0, 6-byte reads. */
3252:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV0_CTRL, BIT_SLAVE_EN | 6);
 12011              		.loc 1 3252 0
 12012 0028 6820     		mov	r0, #104
 12013 002a 2721     		mov	r1, #39
 12014 002c 8622     		mov	r2, #134
 12015 002e FFF7FEFF 		bl	I2CWriteByte
3253:.\mpu6050.c   ****     /* Slave 1 changes AKM measurement mode. */
3254:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_ADDR, MPU6050_ADDRESS_COMPASS);
 12016              		.loc 1 3254 0
 12017 0032 6820     		mov	r0, #104
 12018 0034 2821     		mov	r1, #40
 12019 0036 0C22     		mov	r2, #12
 12020 0038 FFF7FEFF 		bl	I2CWriteByte
3255:.\mpu6050.c   ****     /* AKM measurement mode register. */
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 269


3256:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_REG, AKM_REG_CNTL);
 12021              		.loc 1 3256 0
 12022 003c 6820     		mov	r0, #104
 12023 003e 2921     		mov	r1, #41
 12024 0040 0A22     		mov	r2, #10
 12025 0042 FFF7FEFF 		bl	I2CWriteByte
3257:.\mpu6050.c   ****     /* Enable slave 1, 1-byte writes. */
3258:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_CTRL, BIT_SLAVE_EN | 1);
 12026              		.loc 1 3258 0
 12027 0046 6820     		mov	r0, #104
 12028 0048 2A21     		mov	r1, #42
 12029 004a 8122     		mov	r2, #129
 12030 004c FFF7FEFF 		bl	I2CWriteByte
3259:.\mpu6050.c   ****     /* Set slave 1 data. */
3260:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_SLV1_DO,AKM_SINGLE_MEASUREMENT);
 12031              		.loc 1 3260 0
 12032 0050 6820     		mov	r0, #104
 12033 0052 6421     		mov	r1, #100
 12034 0054 0122     		mov	r2, #1
 12035 0056 FFF7FEFF 		bl	I2CWriteByte
3261:.\mpu6050.c   ****     /* Trigger slave 0 and slave 1 actions at each sample. */
3262:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_I2C_MST_DELAY_CTRL, 0x03);
 12036              		.loc 1 3262 0
 12037 005a 6820     		mov	r0, #104
 12038 005c 6721     		mov	r1, #103
 12039 005e 0322     		mov	r2, #3
 12040 0060 FFF7FEFF 		bl	I2CWriteByte
3263:.\mpu6050.c   **** #ifdef MPU9150
3264:.\mpu6050.c   ****     /* For the MPU9150, the auxiliary I2C bus needs to be set to VDD. */
3265:.\mpu6050.c   ****     I2CWriteByte(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_YG_OFFS_TC, BIT_I2C_MST_VDDIO);
3266:.\mpu6050.c   **** #endif
3267:.\mpu6050.c   ****     //enable I2C Master Mode
3268:.\mpu6050.c   ****     MPU6050_setI2CMasterModeEnabled(true);
 12041              		.loc 1 3268 0
 12042 0064 0120     		mov	r0, #1
 12043 0066 FFF7FEFF 		bl	MPU6050_setI2CMasterModeEnabled
3269:.\mpu6050.c   **** }
 12044              		.loc 1 3269 0
 12045 006a BD46     		mov	sp, r7
 12046              		@ sp needed
 12047 006c 80BD     		pop	{r7, pc}
 12048              		.cfi_endproc
 12049              	.LFE259:
 12050              		.size	MPU6050_setup_compass, .-MPU6050_setup_compass
 12051 006e C046     		.text
 12052              	.Letext0:
 12053              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.2\\psoc creator\\import\\gnu\\arm\\4.8.
 12054              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.2\\psoc creator\\import\\gnu\\arm\\4.8.
 12055              		.file 4 ".\\mpu6050.h"
 12056              		.section	.debug_info,"",%progbits
 12057              	.Ldebug_info0:
 12058 0000 A6210000 		.4byte	0x21a6
 12059 0004 0400     		.2byte	0x4
 12060 0006 00000000 		.4byte	.Ldebug_abbrev0
 12061 000a 04       		.byte	0x4
 12062 000b 01       		.uleb128 0x1
 12063 000c DA110000 		.4byte	.LASF312
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 270


 12064 0010 01       		.byte	0x1
 12065 0011 2C130000 		.4byte	.LASF313
 12066 0015 4E060000 		.4byte	.LASF314
 12067 0019 00000000 		.4byte	.Ldebug_ranges0+0
 12068 001d 00000000 		.4byte	0
 12069 0021 00000000 		.4byte	.Ldebug_line0
 12070 0025 02       		.uleb128 0x2
 12071 0026 85030000 		.4byte	.LASF0
 12072 002a 02       		.byte	0x2
 12073 002b 1B       		.byte	0x1b
 12074 002c 30000000 		.4byte	0x30
 12075 0030 03       		.uleb128 0x3
 12076 0031 01       		.byte	0x1
 12077 0032 06       		.byte	0x6
 12078 0033 75040000 		.4byte	.LASF2
 12079 0037 02       		.uleb128 0x2
 12080 0038 4D010000 		.4byte	.LASF1
 12081 003c 02       		.byte	0x2
 12082 003d 1C       		.byte	0x1c
 12083 003e 42000000 		.4byte	0x42
 12084 0042 03       		.uleb128 0x3
 12085 0043 01       		.byte	0x1
 12086 0044 08       		.byte	0x8
 12087 0045 B0130000 		.4byte	.LASF3
 12088 0049 02       		.uleb128 0x2
 12089 004a 54090000 		.4byte	.LASF4
 12090 004e 02       		.byte	0x2
 12091 004f 25       		.byte	0x25
 12092 0050 54000000 		.4byte	0x54
 12093 0054 03       		.uleb128 0x3
 12094 0055 02       		.byte	0x2
 12095 0056 05       		.byte	0x5
 12096 0057 2F140000 		.4byte	.LASF5
 12097 005b 02       		.uleb128 0x2
 12098 005c FD160000 		.4byte	.LASF6
 12099 0060 02       		.byte	0x2
 12100 0061 26       		.byte	0x26
 12101 0062 66000000 		.4byte	0x66
 12102 0066 03       		.uleb128 0x3
 12103 0067 02       		.byte	0x2
 12104 0068 07       		.byte	0x7
 12105 0069 250C0000 		.4byte	.LASF7
 12106 006d 03       		.uleb128 0x3
 12107 006e 04       		.byte	0x4
 12108 006f 05       		.byte	0x5
 12109 0070 CA050000 		.4byte	.LASF8
 12110 0074 02       		.uleb128 0x2
 12111 0075 D7080000 		.4byte	.LASF9
 12112 0079 02       		.byte	0x2
 12113 007a 38       		.byte	0x38
 12114 007b 7F000000 		.4byte	0x7f
 12115 007f 03       		.uleb128 0x3
 12116 0080 04       		.byte	0x4
 12117 0081 07       		.byte	0x7
 12118 0082 240B0000 		.4byte	.LASF10
 12119 0086 03       		.uleb128 0x3
 12120 0087 08       		.byte	0x8
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 271


 12121 0088 05       		.byte	0x5
 12122 0089 67040000 		.4byte	.LASF11
 12123 008d 03       		.uleb128 0x3
 12124 008e 08       		.byte	0x8
 12125 008f 07       		.byte	0x7
 12126 0090 9B020000 		.4byte	.LASF12
 12127 0094 04       		.uleb128 0x4
 12128 0095 04       		.byte	0x4
 12129 0096 05       		.byte	0x5
 12130 0097 696E7400 		.ascii	"int\000"
 12131 009b 03       		.uleb128 0x3
 12132 009c 04       		.byte	0x4
 12133 009d 07       		.byte	0x7
 12134 009e 550A0000 		.4byte	.LASF13
 12135 00a2 02       		.uleb128 0x2
 12136 00a3 E0180000 		.4byte	.LASF14
 12137 00a7 03       		.byte	0x3
 12138 00a8 29       		.byte	0x29
 12139 00a9 25000000 		.4byte	0x25
 12140 00ad 02       		.uleb128 0x2
 12141 00ae 0E1B0000 		.4byte	.LASF15
 12142 00b2 03       		.byte	0x3
 12143 00b3 2A       		.byte	0x2a
 12144 00b4 37000000 		.4byte	0x37
 12145 00b8 02       		.uleb128 0x2
 12146 00b9 40040000 		.4byte	.LASF16
 12147 00bd 03       		.byte	0x3
 12148 00be 35       		.byte	0x35
 12149 00bf 49000000 		.4byte	0x49
 12150 00c3 02       		.uleb128 0x2
 12151 00c4 2D070000 		.4byte	.LASF17
 12152 00c8 03       		.byte	0x3
 12153 00c9 36       		.byte	0x36
 12154 00ca 5B000000 		.4byte	0x5b
 12155 00ce 02       		.uleb128 0x2
 12156 00cf 09160000 		.4byte	.LASF18
 12157 00d3 03       		.byte	0x3
 12158 00d4 42       		.byte	0x42
 12159 00d5 74000000 		.4byte	0x74
 12160 00d9 05       		.uleb128 0x5
 12161 00da 46020000 		.4byte	.LASF19
 12162 00de 01       		.byte	0x1
 12163 00df 2D       		.byte	0x2d
 12164 00e0 00000000 		.4byte	.LFB0
 12165 00e4 14000000 		.4byte	.LFE0-.LFB0
 12166 00e8 01       		.uleb128 0x1
 12167 00e9 9C       		.byte	0x9c
 12168 00ea 06       		.uleb128 0x6
 12169 00eb DC1A0000 		.4byte	.LASF24
 12170 00ef 01       		.byte	0x1
 12171 00f0 37       		.byte	0x37
 12172 00f1 00000000 		.4byte	.LFB1
 12173 00f5 20000000 		.4byte	.LFE1-.LFB1
 12174 00f9 01       		.uleb128 0x1
 12175 00fa 9C       		.byte	0x9c
 12176 00fb 0E010000 		.4byte	0x10e
 12177 00ff 07       		.uleb128 0x7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 272


 12178 0100 CD0F0000 		.4byte	.LASF26
 12179 0104 01       		.byte	0x1
 12180 0105 37       		.byte	0x37
 12181 0106 AD000000 		.4byte	0xad
 12182 010a 02       		.uleb128 0x2
 12183 010b 91       		.byte	0x91
 12184 010c 77       		.sleb128 -9
 12185 010d 00       		.byte	0
 12186 010e 08       		.uleb128 0x8
 12187 010f 510C0000 		.4byte	.LASF20
 12188 0113 01       		.byte	0x1
 12189 0114 42       		.byte	0x42
 12190 0115 00000000 		.4byte	.LFB2
 12191 0119 20000000 		.4byte	.LFE2-.LFB2
 12192 011d 01       		.uleb128 0x1
 12193 011e 9C       		.byte	0x9c
 12194 011f 09       		.uleb128 0x9
 12195 0120 A2080000 		.4byte	.LASF22
 12196 0124 01       		.byte	0x1
 12197 0125 4D       		.byte	0x4d
 12198 0126 34010000 		.4byte	0x134
 12199 012a 00000000 		.4byte	.LFB3
 12200 012e 18000000 		.4byte	.LFE3-.LFB3
 12201 0132 01       		.uleb128 0x1
 12202 0133 9C       		.byte	0x9c
 12203 0134 03       		.uleb128 0x3
 12204 0135 01       		.byte	0x1
 12205 0136 02       		.byte	0x2
 12206 0137 AA130000 		.4byte	.LASF21
 12207 013b 09       		.uleb128 0x9
 12208 013c 44000000 		.4byte	.LASF23
 12209 0140 01       		.byte	0x1
 12210 0141 59       		.byte	0x59
 12211 0142 AD000000 		.4byte	0xad
 12212 0146 00000000 		.4byte	.LFB4
 12213 014a 28000000 		.4byte	.LFE4-.LFB4
 12214 014e 01       		.uleb128 0x1
 12215 014f 9C       		.byte	0x9c
 12216 0150 0A       		.uleb128 0xa
 12217 0151 69050000 		.4byte	.LASF25
 12218 0155 01       		.byte	0x1
 12219 0156 63       		.byte	0x63
 12220 0157 00000000 		.4byte	.LFB5
 12221 015b 28000000 		.4byte	.LFE5-.LFB5
 12222 015f 01       		.uleb128 0x1
 12223 0160 9C       		.byte	0x9c
 12224 0161 74010000 		.4byte	0x174
 12225 0165 07       		.uleb128 0x7
 12226 0166 020C0000 		.4byte	.LASF27
 12227 016a 01       		.byte	0x1
 12228 016b 63       		.byte	0x63
 12229 016c AD000000 		.4byte	0xad
 12230 0170 02       		.uleb128 0x2
 12231 0171 91       		.byte	0x91
 12232 0172 77       		.sleb128 -9
 12233 0173 00       		.byte	0
 12234 0174 09       		.uleb128 0x9
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 273


 12235 0175 49100000 		.4byte	.LASF28
 12236 0179 01       		.byte	0x1
 12237 017a 7E       		.byte	0x7e
 12238 017b AD000000 		.4byte	0xad
 12239 017f 00000000 		.4byte	.LFB6
 12240 0183 28000000 		.4byte	.LFE6-.LFB6
 12241 0187 01       		.uleb128 0x1
 12242 0188 9C       		.byte	0x9c
 12243 0189 0A       		.uleb128 0xa
 12244 018a 5D000000 		.4byte	.LASF29
 12245 018e 01       		.byte	0x1
 12246 018f 87       		.byte	0x87
 12247 0190 00000000 		.4byte	.LFB7
 12248 0194 28000000 		.4byte	.LFE7-.LFB7
 12249 0198 01       		.uleb128 0x1
 12250 0199 9C       		.byte	0x9c
 12251 019a AD010000 		.4byte	0x1ad
 12252 019e 07       		.uleb128 0x7
 12253 019f B5040000 		.4byte	.LASF30
 12254 01a3 01       		.byte	0x1
 12255 01a4 87       		.byte	0x87
 12256 01a5 AD000000 		.4byte	0xad
 12257 01a9 02       		.uleb128 0x2
 12258 01aa 91       		.byte	0x91
 12259 01ab 77       		.sleb128 -9
 12260 01ac 00       		.byte	0
 12261 01ad 09       		.uleb128 0x9
 12262 01ae 991A0000 		.4byte	.LASF31
 12263 01b2 01       		.byte	0x1
 12264 01b3 A8       		.byte	0xa8
 12265 01b4 AD000000 		.4byte	0xad
 12266 01b8 00000000 		.4byte	.LFB8
 12267 01bc 2C000000 		.4byte	.LFE8-.LFB8
 12268 01c0 01       		.uleb128 0x1
 12269 01c1 9C       		.byte	0x9c
 12270 01c2 0A       		.uleb128 0xa
 12271 01c3 D6060000 		.4byte	.LASF32
 12272 01c7 01       		.byte	0x1
 12273 01c8 B1       		.byte	0xb1
 12274 01c9 00000000 		.4byte	.LFB9
 12275 01cd 2C000000 		.4byte	.LFE9-.LFB9
 12276 01d1 01       		.uleb128 0x1
 12277 01d2 9C       		.byte	0x9c
 12278 01d3 E6010000 		.4byte	0x1e6
 12279 01d7 07       		.uleb128 0x7
 12280 01d8 4B1B0000 		.4byte	.LASF33
 12281 01dc 01       		.byte	0x1
 12282 01dd B1       		.byte	0xb1
 12283 01de AD000000 		.4byte	0xad
 12284 01e2 02       		.uleb128 0x2
 12285 01e3 91       		.byte	0x91
 12286 01e4 77       		.sleb128 -9
 12287 01e5 00       		.byte	0
 12288 01e6 09       		.uleb128 0x9
 12289 01e7 F81B0000 		.4byte	.LASF34
 12290 01eb 01       		.byte	0x1
 12291 01ec D0       		.byte	0xd0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 274


 12292 01ed AD000000 		.4byte	0xad
 12293 01f1 00000000 		.4byte	.LFB10
 12294 01f5 2C000000 		.4byte	.LFE10-.LFB10
 12295 01f9 01       		.uleb128 0x1
 12296 01fa 9C       		.byte	0x9c
 12297 01fb 0A       		.uleb128 0xa
 12298 01fc 880F0000 		.4byte	.LASF35
 12299 0200 01       		.byte	0x1
 12300 0201 DC       		.byte	0xdc
 12301 0202 00000000 		.4byte	.LFB11
 12302 0206 2C000000 		.4byte	.LFE11-.LFB11
 12303 020a 01       		.uleb128 0x1
 12304 020b 9C       		.byte	0x9c
 12305 020c 1F020000 		.4byte	0x21f
 12306 0210 07       		.uleb128 0x7
 12307 0211 A5160000 		.4byte	.LASF36
 12308 0215 01       		.byte	0x1
 12309 0216 DC       		.byte	0xdc
 12310 0217 AD000000 		.4byte	0xad
 12311 021b 02       		.uleb128 0x2
 12312 021c 91       		.byte	0x91
 12313 021d 77       		.sleb128 -9
 12314 021e 00       		.byte	0
 12315 021f 09       		.uleb128 0x9
 12316 0220 461D0000 		.4byte	.LASF37
 12317 0224 01       		.byte	0x1
 12318 0225 F3       		.byte	0xf3
 12319 0226 AD000000 		.4byte	0xad
 12320 022a 00000000 		.4byte	.LFB12
 12321 022e 2C000000 		.4byte	.LFE12-.LFB12
 12322 0232 01       		.uleb128 0x1
 12323 0233 9C       		.byte	0x9c
 12324 0234 0A       		.uleb128 0xa
 12325 0235 0B140000 		.4byte	.LASF38
 12326 0239 01       		.byte	0x1
 12327 023a FF       		.byte	0xff
 12328 023b 00000000 		.4byte	.LFB13
 12329 023f 2C000000 		.4byte	.LFE13-.LFB13
 12330 0243 01       		.uleb128 0x1
 12331 0244 9C       		.byte	0x9c
 12332 0245 58020000 		.4byte	0x258
 12333 0249 07       		.uleb128 0x7
 12334 024a 6D110000 		.4byte	.LASF39
 12335 024e 01       		.byte	0x1
 12336 024f FF       		.byte	0xff
 12337 0250 AD000000 		.4byte	0xad
 12338 0254 02       		.uleb128 0x2
 12339 0255 91       		.byte	0x91
 12340 0256 77       		.sleb128 -9
 12341 0257 00       		.byte	0
 12342 0258 0B       		.uleb128 0xb
 12343 0259 AB100000 		.4byte	.LASF40
 12344 025d 01       		.byte	0x1
 12345 025e 0901     		.2byte	0x109
 12346 0260 34010000 		.4byte	0x134
 12347 0264 00000000 		.4byte	.LFB14
 12348 0268 2C000000 		.4byte	.LFE14-.LFB14
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 275


 12349 026c 01       		.uleb128 0x1
 12350 026d 9C       		.byte	0x9c
 12351 026e 0C       		.uleb128 0xc
 12352 026f AE140000 		.4byte	.LASF41
 12353 0273 01       		.byte	0x1
 12354 0274 1101     		.2byte	0x111
 12355 0276 00000000 		.4byte	.LFB15
 12356 027a 28000000 		.4byte	.LFE15-.LFB15
 12357 027e 01       		.uleb128 0x1
 12358 027f 9C       		.byte	0x9c
 12359 0280 94020000 		.4byte	0x294
 12360 0284 0D       		.uleb128 0xd
 12361 0285 43160000 		.4byte	.LASF42
 12362 0289 01       		.byte	0x1
 12363 028a 1101     		.2byte	0x111
 12364 028c 34010000 		.4byte	0x134
 12365 0290 02       		.uleb128 0x2
 12366 0291 91       		.byte	0x91
 12367 0292 77       		.sleb128 -9
 12368 0293 00       		.byte	0
 12369 0294 0B       		.uleb128 0xb
 12370 0295 11150000 		.4byte	.LASF43
 12371 0299 01       		.byte	0x1
 12372 029a 1801     		.2byte	0x118
 12373 029c 34010000 		.4byte	0x134
 12374 02a0 00000000 		.4byte	.LFB16
 12375 02a4 2C000000 		.4byte	.LFE16-.LFB16
 12376 02a8 01       		.uleb128 0x1
 12377 02a9 9C       		.byte	0x9c
 12378 02aa 0C       		.uleb128 0xc
 12379 02ab 83180000 		.4byte	.LASF44
 12380 02af 01       		.byte	0x1
 12381 02b0 2001     		.2byte	0x120
 12382 02b2 00000000 		.4byte	.LFB17
 12383 02b6 28000000 		.4byte	.LFE17-.LFB17
 12384 02ba 01       		.uleb128 0x1
 12385 02bb 9C       		.byte	0x9c
 12386 02bc D0020000 		.4byte	0x2d0
 12387 02c0 0D       		.uleb128 0xd
 12388 02c1 43160000 		.4byte	.LASF42
 12389 02c5 01       		.byte	0x1
 12390 02c6 2001     		.2byte	0x120
 12391 02c8 34010000 		.4byte	0x134
 12392 02cc 02       		.uleb128 0x2
 12393 02cd 91       		.byte	0x91
 12394 02ce 77       		.sleb128 -9
 12395 02cf 00       		.byte	0
 12396 02d0 0B       		.uleb128 0xb
 12397 02d1 1A190000 		.4byte	.LASF45
 12398 02d5 01       		.byte	0x1
 12399 02d6 2701     		.2byte	0x127
 12400 02d8 34010000 		.4byte	0x134
 12401 02dc 00000000 		.4byte	.LFB18
 12402 02e0 2C000000 		.4byte	.LFE18-.LFB18
 12403 02e4 01       		.uleb128 0x1
 12404 02e5 9C       		.byte	0x9c
 12405 02e6 0C       		.uleb128 0xc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 276


 12406 02e7 DC1D0000 		.4byte	.LASF46
 12407 02eb 01       		.byte	0x1
 12408 02ec 2F01     		.2byte	0x12f
 12409 02ee 00000000 		.4byte	.LFB19
 12410 02f2 28000000 		.4byte	.LFE19-.LFB19
 12411 02f6 01       		.uleb128 0x1
 12412 02f7 9C       		.byte	0x9c
 12413 02f8 0C030000 		.4byte	0x30c
 12414 02fc 0D       		.uleb128 0xd
 12415 02fd 43160000 		.4byte	.LASF42
 12416 0301 01       		.byte	0x1
 12417 0302 2F01     		.2byte	0x12f
 12418 0304 34010000 		.4byte	0x134
 12419 0308 02       		.uleb128 0x2
 12420 0309 91       		.byte	0x91
 12421 030a 77       		.sleb128 -9
 12422 030b 00       		.byte	0
 12423 030c 0B       		.uleb128 0xb
 12424 030d 8B130000 		.4byte	.LASF47
 12425 0311 01       		.byte	0x1
 12426 0312 4301     		.2byte	0x143
 12427 0314 AD000000 		.4byte	0xad
 12428 0318 00000000 		.4byte	.LFB20
 12429 031c 2C000000 		.4byte	.LFE20-.LFB20
 12430 0320 01       		.uleb128 0x1
 12431 0321 9C       		.byte	0x9c
 12432 0322 0C       		.uleb128 0xc
 12433 0323 F3060000 		.4byte	.LASF48
 12434 0327 01       		.byte	0x1
 12435 0328 4B01     		.2byte	0x14b
 12436 032a 00000000 		.4byte	.LFB21
 12437 032e 2C000000 		.4byte	.LFE21-.LFB21
 12438 0332 01       		.uleb128 0x1
 12439 0333 9C       		.byte	0x9c
 12440 0334 48030000 		.4byte	0x348
 12441 0338 0D       		.uleb128 0xd
 12442 0339 6D110000 		.4byte	.LASF39
 12443 033d 01       		.byte	0x1
 12444 033e 4B01     		.2byte	0x14b
 12445 0340 AD000000 		.4byte	0xad
 12446 0344 02       		.uleb128 0x2
 12447 0345 91       		.byte	0x91
 12448 0346 77       		.sleb128 -9
 12449 0347 00       		.byte	0
 12450 0348 0B       		.uleb128 0xb
 12451 0349 AE190000 		.4byte	.LASF49
 12452 034d 01       		.byte	0x1
 12453 034e 7101     		.2byte	0x171
 12454 0350 AD000000 		.4byte	0xad
 12455 0354 00000000 		.4byte	.LFB22
 12456 0358 2C000000 		.4byte	.LFE22-.LFB22
 12457 035c 01       		.uleb128 0x1
 12458 035d 9C       		.byte	0x9c
 12459 035e 0C       		.uleb128 0xc
 12460 035f 350E0000 		.4byte	.LASF50
 12461 0363 01       		.byte	0x1
 12462 0364 7B01     		.2byte	0x17b
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 277


 12463 0366 00000000 		.4byte	.LFB23
 12464 036a 2C000000 		.4byte	.LFE23-.LFB23
 12465 036e 01       		.uleb128 0x1
 12466 036f 9C       		.byte	0x9c
 12467 0370 84030000 		.4byte	0x384
 12468 0374 0D       		.uleb128 0xd
 12469 0375 63110000 		.4byte	.LASF51
 12470 0379 01       		.byte	0x1
 12471 037a 7B01     		.2byte	0x17b
 12472 037c AD000000 		.4byte	0xad
 12473 0380 02       		.uleb128 0x2
 12474 0381 91       		.byte	0x91
 12475 0382 77       		.sleb128 -9
 12476 0383 00       		.byte	0
 12477 0384 0B       		.uleb128 0xb
 12478 0385 B61A0000 		.4byte	.LASF52
 12479 0389 01       		.byte	0x1
 12480 038a 9001     		.2byte	0x190
 12481 038c AD000000 		.4byte	0xad
 12482 0390 00000000 		.4byte	.LFB24
 12483 0394 28000000 		.4byte	.LFE24-.LFB24
 12484 0398 01       		.uleb128 0x1
 12485 0399 9C       		.byte	0x9c
 12486 039a 0C       		.uleb128 0xc
 12487 039b A30D0000 		.4byte	.LASF53
 12488 039f 01       		.byte	0x1
 12489 03a0 9901     		.2byte	0x199
 12490 03a2 00000000 		.4byte	.LFB25
 12491 03a6 28000000 		.4byte	.LFE25-.LFB25
 12492 03aa 01       		.uleb128 0x1
 12493 03ab 9C       		.byte	0x9c
 12494 03ac C0030000 		.4byte	0x3c0
 12495 03b0 0D       		.uleb128 0xd
 12496 03b1 81130000 		.4byte	.LASF54
 12497 03b5 01       		.byte	0x1
 12498 03b6 9901     		.2byte	0x199
 12499 03b8 AD000000 		.4byte	0xad
 12500 03bc 02       		.uleb128 0x2
 12501 03bd 91       		.byte	0x91
 12502 03be 77       		.sleb128 -9
 12503 03bf 00       		.byte	0
 12504 03c0 0B       		.uleb128 0xb
 12505 03c1 BB180000 		.4byte	.LASF55
 12506 03c5 01       		.byte	0x1
 12507 03c6 B001     		.2byte	0x1b0
 12508 03c8 AD000000 		.4byte	0xad
 12509 03cc 00000000 		.4byte	.LFB26
 12510 03d0 28000000 		.4byte	.LFE26-.LFB26
 12511 03d4 01       		.uleb128 0x1
 12512 03d5 9C       		.byte	0x9c
 12513 03d6 0C       		.uleb128 0xc
 12514 03d7 550B0000 		.4byte	.LASF56
 12515 03db 01       		.byte	0x1
 12516 03dc B901     		.2byte	0x1b9
 12517 03de 00000000 		.4byte	.LFB27
 12518 03e2 28000000 		.4byte	.LFE27-.LFB27
 12519 03e6 01       		.uleb128 0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 278


 12520 03e7 9C       		.byte	0x9c
 12521 03e8 FC030000 		.4byte	0x3fc
 12522 03ec 0D       		.uleb128 0xd
 12523 03ed 74090000 		.4byte	.LASF57
 12524 03f1 01       		.byte	0x1
 12525 03f2 B901     		.2byte	0x1b9
 12526 03f4 AD000000 		.4byte	0xad
 12527 03f8 02       		.uleb128 0x2
 12528 03f9 91       		.byte	0x91
 12529 03fa 77       		.sleb128 -9
 12530 03fb 00       		.byte	0
 12531 03fc 0B       		.uleb128 0xb
 12532 03fd 2B0D0000 		.4byte	.LASF58
 12533 0401 01       		.byte	0x1
 12534 0402 D201     		.2byte	0x1d2
 12535 0404 AD000000 		.4byte	0xad
 12536 0408 00000000 		.4byte	.LFB28
 12537 040c 28000000 		.4byte	.LFE28-.LFB28
 12538 0410 01       		.uleb128 0x1
 12539 0411 9C       		.byte	0x9c
 12540 0412 0C       		.uleb128 0xc
 12541 0413 F5040000 		.4byte	.LASF59
 12542 0417 01       		.byte	0x1
 12543 0418 DB01     		.2byte	0x1db
 12544 041a 00000000 		.4byte	.LFB29
 12545 041e 28000000 		.4byte	.LFE29-.LFB29
 12546 0422 01       		.uleb128 0x1
 12547 0423 9C       		.byte	0x9c
 12548 0424 38040000 		.4byte	0x438
 12549 0428 0D       		.uleb128 0xd
 12550 0429 81130000 		.4byte	.LASF54
 12551 042d 01       		.byte	0x1
 12552 042e DB01     		.2byte	0x1db
 12553 0430 AD000000 		.4byte	0xad
 12554 0434 02       		.uleb128 0x2
 12555 0435 91       		.byte	0x91
 12556 0436 77       		.sleb128 -9
 12557 0437 00       		.byte	0
 12558 0438 0B       		.uleb128 0xb
 12559 0439 5A1E0000 		.4byte	.LASF60
 12560 043d 01       		.byte	0x1
 12561 043e F001     		.2byte	0x1f0
 12562 0440 AD000000 		.4byte	0xad
 12563 0444 00000000 		.4byte	.LFB30
 12564 0448 28000000 		.4byte	.LFE30-.LFB30
 12565 044c 01       		.uleb128 0x1
 12566 044d 9C       		.byte	0x9c
 12567 044e 0C       		.uleb128 0xc
 12568 044f B3060000 		.4byte	.LASF61
 12569 0453 01       		.byte	0x1
 12570 0454 F901     		.2byte	0x1f9
 12571 0456 00000000 		.4byte	.LFB31
 12572 045a 28000000 		.4byte	.LFE31-.LFB31
 12573 045e 01       		.uleb128 0x1
 12574 045f 9C       		.byte	0x9c
 12575 0460 74040000 		.4byte	0x474
 12576 0464 0D       		.uleb128 0xd
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 279


 12577 0465 74090000 		.4byte	.LASF57
 12578 0469 01       		.byte	0x1
 12579 046a F901     		.2byte	0x1f9
 12580 046c AD000000 		.4byte	0xad
 12581 0470 02       		.uleb128 0x2
 12582 0471 91       		.byte	0x91
 12583 0472 77       		.sleb128 -9
 12584 0473 00       		.byte	0
 12585 0474 0B       		.uleb128 0xb
 12586 0475 51140000 		.4byte	.LASF62
 12587 0479 01       		.byte	0x1
 12588 047a 1802     		.2byte	0x218
 12589 047c AD000000 		.4byte	0xad
 12590 0480 00000000 		.4byte	.LFB32
 12591 0484 28000000 		.4byte	.LFE32-.LFB32
 12592 0488 01       		.uleb128 0x1
 12593 0489 9C       		.byte	0x9c
 12594 048a 0C       		.uleb128 0xc
 12595 048b 7D090000 		.4byte	.LASF63
 12596 048f 01       		.byte	0x1
 12597 0490 2102     		.2byte	0x221
 12598 0492 00000000 		.4byte	.LFB33
 12599 0496 28000000 		.4byte	.LFE33-.LFB33
 12600 049a 01       		.uleb128 0x1
 12601 049b 9C       		.byte	0x9c
 12602 049c B0040000 		.4byte	0x4b0
 12603 04a0 0D       		.uleb128 0xd
 12604 04a1 81130000 		.4byte	.LASF54
 12605 04a5 01       		.byte	0x1
 12606 04a6 2102     		.2byte	0x221
 12607 04a8 AD000000 		.4byte	0xad
 12608 04ac 02       		.uleb128 0x2
 12609 04ad 91       		.byte	0x91
 12610 04ae 77       		.sleb128 -9
 12611 04af 00       		.byte	0
 12612 04b0 0B       		.uleb128 0xb
 12613 04b1 9A120000 		.4byte	.LASF64
 12614 04b5 01       		.byte	0x1
 12615 04b6 3702     		.2byte	0x237
 12616 04b8 AD000000 		.4byte	0xad
 12617 04bc 00000000 		.4byte	.LFB34
 12618 04c0 28000000 		.4byte	.LFE34-.LFB34
 12619 04c4 01       		.uleb128 0x1
 12620 04c5 9C       		.byte	0x9c
 12621 04c6 0C       		.uleb128 0xc
 12622 04c7 561C0000 		.4byte	.LASF65
 12623 04cb 01       		.byte	0x1
 12624 04cc 4002     		.2byte	0x240
 12625 04ce 00000000 		.4byte	.LFB35
 12626 04d2 28000000 		.4byte	.LFE35-.LFB35
 12627 04d6 01       		.uleb128 0x1
 12628 04d7 9C       		.byte	0x9c
 12629 04d8 EC040000 		.4byte	0x4ec
 12630 04dc 0D       		.uleb128 0xd
 12631 04dd 74090000 		.4byte	.LASF57
 12632 04e1 01       		.byte	0x1
 12633 04e2 4002     		.2byte	0x240
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 280


 12634 04e4 AD000000 		.4byte	0xad
 12635 04e8 02       		.uleb128 0x2
 12636 04e9 91       		.byte	0x91
 12637 04ea 77       		.sleb128 -9
 12638 04eb 00       		.byte	0
 12639 04ec 0B       		.uleb128 0xb
 12640 04ed B2020000 		.4byte	.LASF66
 12641 04f1 01       		.byte	0x1
 12642 04f2 4C02     		.2byte	0x24c
 12643 04f4 34010000 		.4byte	0x134
 12644 04f8 00000000 		.4byte	.LFB36
 12645 04fc 2C000000 		.4byte	.LFE36-.LFB36
 12646 0500 01       		.uleb128 0x1
 12647 0501 9C       		.byte	0x9c
 12648 0502 0C       		.uleb128 0xc
 12649 0503 1C180000 		.4byte	.LASF67
 12650 0507 01       		.byte	0x1
 12651 0508 5502     		.2byte	0x255
 12652 050a 00000000 		.4byte	.LFB37
 12653 050e 28000000 		.4byte	.LFE37-.LFB37
 12654 0512 01       		.uleb128 0x1
 12655 0513 9C       		.byte	0x9c
 12656 0514 28050000 		.4byte	0x528
 12657 0518 0D       		.uleb128 0xd
 12658 0519 43160000 		.4byte	.LASF42
 12659 051d 01       		.byte	0x1
 12660 051e 5502     		.2byte	0x255
 12661 0520 34010000 		.4byte	0x134
 12662 0524 02       		.uleb128 0x2
 12663 0525 91       		.byte	0x91
 12664 0526 77       		.sleb128 -9
 12665 0527 00       		.byte	0
 12666 0528 0B       		.uleb128 0xb
 12667 0529 4B160000 		.4byte	.LASF68
 12668 052d 01       		.byte	0x1
 12669 052e 5E02     		.2byte	0x25e
 12670 0530 34010000 		.4byte	0x134
 12671 0534 00000000 		.4byte	.LFB38
 12672 0538 2C000000 		.4byte	.LFE38-.LFB38
 12673 053c 01       		.uleb128 0x1
 12674 053d 9C       		.byte	0x9c
 12675 053e 0C       		.uleb128 0xc
 12676 053f 7E120000 		.4byte	.LASF69
 12677 0543 01       		.byte	0x1
 12678 0544 6702     		.2byte	0x267
 12679 0546 00000000 		.4byte	.LFB39
 12680 054a 28000000 		.4byte	.LFE39-.LFB39
 12681 054e 01       		.uleb128 0x1
 12682 054f 9C       		.byte	0x9c
 12683 0550 64050000 		.4byte	0x564
 12684 0554 0D       		.uleb128 0xd
 12685 0555 43160000 		.4byte	.LASF42
 12686 0559 01       		.byte	0x1
 12687 055a 6702     		.2byte	0x267
 12688 055c 34010000 		.4byte	0x134
 12689 0560 02       		.uleb128 0x2
 12690 0561 91       		.byte	0x91
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 281


 12691 0562 77       		.sleb128 -9
 12692 0563 00       		.byte	0
 12693 0564 0B       		.uleb128 0xb
 12694 0565 7A0B0000 		.4byte	.LASF70
 12695 0569 01       		.byte	0x1
 12696 056a 7002     		.2byte	0x270
 12697 056c 34010000 		.4byte	0x134
 12698 0570 00000000 		.4byte	.LFB40
 12699 0574 2C000000 		.4byte	.LFE40-.LFB40
 12700 0578 01       		.uleb128 0x1
 12701 0579 9C       		.byte	0x9c
 12702 057a 0C       		.uleb128 0xc
 12703 057b 08020000 		.4byte	.LASF71
 12704 057f 01       		.byte	0x1
 12705 0580 7902     		.2byte	0x279
 12706 0582 00000000 		.4byte	.LFB41
 12707 0586 28000000 		.4byte	.LFE41-.LFB41
 12708 058a 01       		.uleb128 0x1
 12709 058b 9C       		.byte	0x9c
 12710 058c A0050000 		.4byte	0x5a0
 12711 0590 0D       		.uleb128 0xd
 12712 0591 43160000 		.4byte	.LASF42
 12713 0595 01       		.byte	0x1
 12714 0596 7902     		.2byte	0x279
 12715 0598 34010000 		.4byte	0x134
 12716 059c 02       		.uleb128 0x2
 12717 059d 91       		.byte	0x91
 12718 059e 77       		.sleb128 -9
 12719 059f 00       		.byte	0
 12720 05a0 0B       		.uleb128 0xb
 12721 05a1 0C040000 		.4byte	.LASF72
 12722 05a5 01       		.byte	0x1
 12723 05a6 8202     		.2byte	0x282
 12724 05a8 34010000 		.4byte	0x134
 12725 05ac 00000000 		.4byte	.LFB42
 12726 05b0 2C000000 		.4byte	.LFE42-.LFB42
 12727 05b4 01       		.uleb128 0x1
 12728 05b5 9C       		.byte	0x9c
 12729 05b6 0C       		.uleb128 0xc
 12730 05b7 9A050000 		.4byte	.LASF73
 12731 05bb 01       		.byte	0x1
 12732 05bc 8B02     		.2byte	0x28b
 12733 05be 00000000 		.4byte	.LFB43
 12734 05c2 28000000 		.4byte	.LFE43-.LFB43
 12735 05c6 01       		.uleb128 0x1
 12736 05c7 9C       		.byte	0x9c
 12737 05c8 DC050000 		.4byte	0x5dc
 12738 05cc 0D       		.uleb128 0xd
 12739 05cd 43160000 		.4byte	.LASF42
 12740 05d1 01       		.byte	0x1
 12741 05d2 8B02     		.2byte	0x28b
 12742 05d4 34010000 		.4byte	0x134
 12743 05d8 02       		.uleb128 0x2
 12744 05d9 91       		.byte	0x91
 12745 05da 77       		.sleb128 -9
 12746 05db 00       		.byte	0
 12747 05dc 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 282


 12748 05dd 1F0A0000 		.4byte	.LASF74
 12749 05e1 01       		.byte	0x1
 12750 05e2 9502     		.2byte	0x295
 12751 05e4 34010000 		.4byte	0x134
 12752 05e8 00000000 		.4byte	.LFB44
 12753 05ec 2C000000 		.4byte	.LFE44-.LFB44
 12754 05f0 01       		.uleb128 0x1
 12755 05f1 9C       		.byte	0x9c
 12756 05f2 0C       		.uleb128 0xc
 12757 05f3 83000000 		.4byte	.LASF75
 12758 05f7 01       		.byte	0x1
 12759 05f8 9E02     		.2byte	0x29e
 12760 05fa 00000000 		.4byte	.LFB45
 12761 05fe 28000000 		.4byte	.LFE45-.LFB45
 12762 0602 01       		.uleb128 0x1
 12763 0603 9C       		.byte	0x9c
 12764 0604 18060000 		.4byte	0x618
 12765 0608 0D       		.uleb128 0xd
 12766 0609 43160000 		.4byte	.LASF42
 12767 060d 01       		.byte	0x1
 12768 060e 9E02     		.2byte	0x29e
 12769 0610 34010000 		.4byte	0x134
 12770 0614 02       		.uleb128 0x2
 12771 0615 91       		.byte	0x91
 12772 0616 77       		.sleb128 -9
 12773 0617 00       		.byte	0
 12774 0618 0B       		.uleb128 0xb
 12775 0619 D6030000 		.4byte	.LASF76
 12776 061d 01       		.byte	0x1
 12777 061e A702     		.2byte	0x2a7
 12778 0620 34010000 		.4byte	0x134
 12779 0624 00000000 		.4byte	.LFB46
 12780 0628 2C000000 		.4byte	.LFE46-.LFB46
 12781 062c 01       		.uleb128 0x1
 12782 062d 9C       		.byte	0x9c
 12783 062e 0C       		.uleb128 0xc
 12784 062f D8040000 		.4byte	.LASF77
 12785 0633 01       		.byte	0x1
 12786 0634 B002     		.2byte	0x2b0
 12787 0636 00000000 		.4byte	.LFB47
 12788 063a 28000000 		.4byte	.LFE47-.LFB47
 12789 063e 01       		.uleb128 0x1
 12790 063f 9C       		.byte	0x9c
 12791 0640 54060000 		.4byte	0x654
 12792 0644 0D       		.uleb128 0xd
 12793 0645 43160000 		.4byte	.LASF42
 12794 0649 01       		.byte	0x1
 12795 064a B002     		.2byte	0x2b0
 12796 064c 34010000 		.4byte	0x134
 12797 0650 02       		.uleb128 0x2
 12798 0651 91       		.byte	0x91
 12799 0652 77       		.sleb128 -9
 12800 0653 00       		.byte	0
 12801 0654 0B       		.uleb128 0xb
 12802 0655 36070000 		.4byte	.LASF78
 12803 0659 01       		.byte	0x1
 12804 065a B902     		.2byte	0x2b9
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 283


 12805 065c 34010000 		.4byte	0x134
 12806 0660 00000000 		.4byte	.LFB48
 12807 0664 2C000000 		.4byte	.LFE48-.LFB48
 12808 0668 01       		.uleb128 0x1
 12809 0669 9C       		.byte	0x9c
 12810 066a 0C       		.uleb128 0xc
 12811 066b 8E170000 		.4byte	.LASF79
 12812 066f 01       		.byte	0x1
 12813 0670 C202     		.2byte	0x2c2
 12814 0672 00000000 		.4byte	.LFB49
 12815 0676 28000000 		.4byte	.LFE49-.LFB49
 12816 067a 01       		.uleb128 0x1
 12817 067b 9C       		.byte	0x9c
 12818 067c 90060000 		.4byte	0x690
 12819 0680 0D       		.uleb128 0xd
 12820 0681 43160000 		.4byte	.LASF42
 12821 0685 01       		.byte	0x1
 12822 0686 C202     		.2byte	0x2c2
 12823 0688 34010000 		.4byte	0x134
 12824 068c 02       		.uleb128 0x2
 12825 068d 91       		.byte	0x91
 12826 068e 77       		.sleb128 -9
 12827 068f 00       		.byte	0
 12828 0690 0B       		.uleb128 0xb
 12829 0691 640C0000 		.4byte	.LASF80
 12830 0695 01       		.byte	0x1
 12831 0696 CB02     		.2byte	0x2cb
 12832 0698 34010000 		.4byte	0x134
 12833 069c 00000000 		.4byte	.LFB50
 12834 06a0 2C000000 		.4byte	.LFE50-.LFB50
 12835 06a4 01       		.uleb128 0x1
 12836 06a5 9C       		.byte	0x9c
 12837 06a6 0C       		.uleb128 0xc
 12838 06a7 EC150000 		.4byte	.LASF81
 12839 06ab 01       		.byte	0x1
 12840 06ac D402     		.2byte	0x2d4
 12841 06ae 00000000 		.4byte	.LFB51
 12842 06b2 28000000 		.4byte	.LFE51-.LFB51
 12843 06b6 01       		.uleb128 0x1
 12844 06b7 9C       		.byte	0x9c
 12845 06b8 CC060000 		.4byte	0x6cc
 12846 06bc 0D       		.uleb128 0xd
 12847 06bd 43160000 		.4byte	.LASF42
 12848 06c1 01       		.byte	0x1
 12849 06c2 D402     		.2byte	0x2d4
 12850 06c4 34010000 		.4byte	0x134
 12851 06c8 02       		.uleb128 0x2
 12852 06c9 91       		.byte	0x91
 12853 06ca 77       		.sleb128 -9
 12854 06cb 00       		.byte	0
 12855 06cc 0B       		.uleb128 0xb
 12856 06cd C2190000 		.4byte	.LASF82
 12857 06d1 01       		.byte	0x1
 12858 06d2 E902     		.2byte	0x2e9
 12859 06d4 34010000 		.4byte	0x134
 12860 06d8 00000000 		.4byte	.LFB52
 12861 06dc 2C000000 		.4byte	.LFE52-.LFB52
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 284


 12862 06e0 01       		.uleb128 0x1
 12863 06e1 9C       		.byte	0x9c
 12864 06e2 0C       		.uleb128 0xc
 12865 06e3 B8030000 		.4byte	.LASF83
 12866 06e7 01       		.byte	0x1
 12867 06e8 F202     		.2byte	0x2f2
 12868 06ea 00000000 		.4byte	.LFB53
 12869 06ee 28000000 		.4byte	.LFE53-.LFB53
 12870 06f2 01       		.uleb128 0x1
 12871 06f3 9C       		.byte	0x9c
 12872 06f4 08070000 		.4byte	0x708
 12873 06f8 0D       		.uleb128 0xd
 12874 06f9 43160000 		.4byte	.LASF42
 12875 06fd 01       		.byte	0x1
 12876 06fe F202     		.2byte	0x2f2
 12877 0700 34010000 		.4byte	0x134
 12878 0704 02       		.uleb128 0x2
 12879 0705 91       		.byte	0x91
 12880 0706 77       		.sleb128 -9
 12881 0707 00       		.byte	0
 12882 0708 0B       		.uleb128 0xb
 12883 0709 73020000 		.4byte	.LASF84
 12884 070d 01       		.byte	0x1
 12885 070e 0003     		.2byte	0x300
 12886 0710 34010000 		.4byte	0x134
 12887 0714 00000000 		.4byte	.LFB54
 12888 0718 2C000000 		.4byte	.LFE54-.LFB54
 12889 071c 01       		.uleb128 0x1
 12890 071d 9C       		.byte	0x9c
 12891 071e 0C       		.uleb128 0xc
 12892 071f E60C0000 		.4byte	.LASF85
 12893 0723 01       		.byte	0x1
 12894 0724 0903     		.2byte	0x309
 12895 0726 00000000 		.4byte	.LFB55
 12896 072a 28000000 		.4byte	.LFE55-.LFB55
 12897 072e 01       		.uleb128 0x1
 12898 072f 9C       		.byte	0x9c
 12899 0730 44070000 		.4byte	0x744
 12900 0734 0D       		.uleb128 0xd
 12901 0735 43160000 		.4byte	.LASF42
 12902 0739 01       		.byte	0x1
 12903 073a 0903     		.2byte	0x309
 12904 073c 34010000 		.4byte	0x134
 12905 0740 02       		.uleb128 0x2
 12906 0741 91       		.byte	0x91
 12907 0742 77       		.sleb128 -9
 12908 0743 00       		.byte	0
 12909 0744 0B       		.uleb128 0xb
 12910 0745 370F0000 		.4byte	.LASF86
 12911 0749 01       		.byte	0x1
 12912 074a 1203     		.2byte	0x312
 12913 074c 34010000 		.4byte	0x134
 12914 0750 00000000 		.4byte	.LFB56
 12915 0754 2C000000 		.4byte	.LFE56-.LFB56
 12916 0758 01       		.uleb128 0x1
 12917 0759 9C       		.byte	0x9c
 12918 075a 0C       		.uleb128 0xc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 285


 12919 075b EE0F0000 		.4byte	.LASF87
 12920 075f 01       		.byte	0x1
 12921 0760 1B03     		.2byte	0x31b
 12922 0762 00000000 		.4byte	.LFB57
 12923 0766 28000000 		.4byte	.LFE57-.LFB57
 12924 076a 01       		.uleb128 0x1
 12925 076b 9C       		.byte	0x9c
 12926 076c 80070000 		.4byte	0x780
 12927 0770 0D       		.uleb128 0xd
 12928 0771 43160000 		.4byte	.LASF42
 12929 0775 01       		.byte	0x1
 12930 0776 1B03     		.2byte	0x31b
 12931 0778 34010000 		.4byte	0x134
 12932 077c 02       		.uleb128 0x2
 12933 077d 91       		.byte	0x91
 12934 077e 77       		.sleb128 -9
 12935 077f 00       		.byte	0
 12936 0780 0B       		.uleb128 0xb
 12937 0781 F61D0000 		.4byte	.LASF88
 12938 0785 01       		.byte	0x1
 12939 0786 2803     		.2byte	0x328
 12940 0788 34010000 		.4byte	0x134
 12941 078c 00000000 		.4byte	.LFB58
 12942 0790 2C000000 		.4byte	.LFE58-.LFB58
 12943 0794 01       		.uleb128 0x1
 12944 0795 9C       		.byte	0x9c
 12945 0796 0C       		.uleb128 0xc
 12946 0797 56130000 		.4byte	.LASF89
 12947 079b 01       		.byte	0x1
 12948 079c 3103     		.2byte	0x331
 12949 079e 00000000 		.4byte	.LFB59
 12950 07a2 28000000 		.4byte	.LFE59-.LFB59
 12951 07a6 01       		.uleb128 0x1
 12952 07a7 9C       		.byte	0x9c
 12953 07a8 BC070000 		.4byte	0x7bc
 12954 07ac 0D       		.uleb128 0xd
 12955 07ad 43160000 		.4byte	.LASF42
 12956 07b1 01       		.byte	0x1
 12957 07b2 3103     		.2byte	0x331
 12958 07b4 34010000 		.4byte	0x134
 12959 07b8 02       		.uleb128 0x2
 12960 07b9 91       		.byte	0x91
 12961 07ba 77       		.sleb128 -9
 12962 07bb 00       		.byte	0
 12963 07bc 0B       		.uleb128 0xb
 12964 07bd 2D100000 		.4byte	.LASF90
 12965 07c1 01       		.byte	0x1
 12966 07c2 5103     		.2byte	0x351
 12967 07c4 AD000000 		.4byte	0xad
 12968 07c8 00000000 		.4byte	.LFB60
 12969 07cc 2C000000 		.4byte	.LFE60-.LFB60
 12970 07d0 01       		.uleb128 0x1
 12971 07d1 9C       		.byte	0x9c
 12972 07d2 0C       		.uleb128 0xc
 12973 07d3 A7070000 		.4byte	.LASF91
 12974 07d7 01       		.byte	0x1
 12975 07d8 5903     		.2byte	0x359
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 286


 12976 07da 00000000 		.4byte	.LFB61
 12977 07de 2C000000 		.4byte	.LFE61-.LFB61
 12978 07e2 01       		.uleb128 0x1
 12979 07e3 9C       		.byte	0x9c
 12980 07e4 F8070000 		.4byte	0x7f8
 12981 07e8 0D       		.uleb128 0xd
 12982 07e9 231C0000 		.4byte	.LASF92
 12983 07ed 01       		.byte	0x1
 12984 07ee 5903     		.2byte	0x359
 12985 07f0 AD000000 		.4byte	0xad
 12986 07f4 02       		.uleb128 0x2
 12987 07f5 91       		.byte	0x91
 12988 07f6 77       		.sleb128 -9
 12989 07f7 00       		.byte	0
 12990 07f8 0E       		.uleb128 0xe
 12991 07f9 2C000000 		.4byte	.LASF94
 12992 07fd 01       		.byte	0x1
 12993 07fe 8803     		.2byte	0x388
 12994 0800 AD000000 		.4byte	0xad
 12995 0804 00000000 		.4byte	.LFB62
 12996 0808 4C000000 		.4byte	.LFE62-.LFB62
 12997 080c 01       		.uleb128 0x1
 12998 080d 9C       		.byte	0x9c
 12999 080e 22080000 		.4byte	0x822
 13000 0812 0F       		.uleb128 0xf
 13001 0813 6E756D00 		.ascii	"num\000"
 13002 0817 01       		.byte	0x1
 13003 0818 8803     		.2byte	0x388
 13004 081a AD000000 		.4byte	0xad
 13005 081e 02       		.uleb128 0x2
 13006 081f 91       		.byte	0x91
 13007 0820 77       		.sleb128 -9
 13008 0821 00       		.byte	0
 13009 0822 0C       		.uleb128 0xc
 13010 0823 82050000 		.4byte	.LASF93
 13011 0827 01       		.byte	0x1
 13012 0828 9303     		.2byte	0x393
 13013 082a 00000000 		.4byte	.LFB63
 13014 082e 48000000 		.4byte	.LFE63-.LFB63
 13015 0832 01       		.uleb128 0x1
 13016 0833 9C       		.byte	0x9c
 13017 0834 57080000 		.4byte	0x857
 13018 0838 0F       		.uleb128 0xf
 13019 0839 6E756D00 		.ascii	"num\000"
 13020 083d 01       		.byte	0x1
 13021 083e 9303     		.2byte	0x393
 13022 0840 AD000000 		.4byte	0xad
 13023 0844 02       		.uleb128 0x2
 13024 0845 91       		.byte	0x91
 13025 0846 77       		.sleb128 -9
 13026 0847 0D       		.uleb128 0xd
 13027 0848 CD0F0000 		.4byte	.LASF26
 13028 084c 01       		.byte	0x1
 13029 084d 9303     		.2byte	0x393
 13030 084f AD000000 		.4byte	0xad
 13031 0853 02       		.uleb128 0x2
 13032 0854 91       		.byte	0x91
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 287


 13033 0855 76       		.sleb128 -10
 13034 0856 00       		.byte	0
 13035 0857 0E       		.uleb128 0xe
 13036 0858 37180000 		.4byte	.LASF95
 13037 085c 01       		.byte	0x1
 13038 085d A203     		.2byte	0x3a2
 13039 085f AD000000 		.4byte	0xad
 13040 0863 00000000 		.4byte	.LFB64
 13041 0867 4C000000 		.4byte	.LFE64-.LFB64
 13042 086b 01       		.uleb128 0x1
 13043 086c 9C       		.byte	0x9c
 13044 086d 81080000 		.4byte	0x881
 13045 0871 0F       		.uleb128 0xf
 13046 0872 6E756D00 		.ascii	"num\000"
 13047 0876 01       		.byte	0x1
 13048 0877 A203     		.2byte	0x3a2
 13049 0879 AD000000 		.4byte	0xad
 13050 087d 02       		.uleb128 0x2
 13051 087e 91       		.byte	0x91
 13052 087f 77       		.sleb128 -9
 13053 0880 00       		.byte	0
 13054 0881 0C       		.uleb128 0xc
 13055 0882 981D0000 		.4byte	.LASF96
 13056 0886 01       		.byte	0x1
 13057 0887 AD03     		.2byte	0x3ad
 13058 0889 00000000 		.4byte	.LFB65
 13059 088d 48000000 		.4byte	.LFE65-.LFB65
 13060 0891 01       		.uleb128 0x1
 13061 0892 9C       		.byte	0x9c
 13062 0893 B6080000 		.4byte	0x8b6
 13063 0897 0F       		.uleb128 0xf
 13064 0898 6E756D00 		.ascii	"num\000"
 13065 089c 01       		.byte	0x1
 13066 089d AD03     		.2byte	0x3ad
 13067 089f AD000000 		.4byte	0xad
 13068 08a3 02       		.uleb128 0x2
 13069 08a4 91       		.byte	0x91
 13070 08a5 77       		.sleb128 -9
 13071 08a6 0F       		.uleb128 0xf
 13072 08a7 72656700 		.ascii	"reg\000"
 13073 08ab 01       		.byte	0x1
 13074 08ac AD03     		.2byte	0x3ad
 13075 08ae AD000000 		.4byte	0xad
 13076 08b2 02       		.uleb128 0x2
 13077 08b3 91       		.byte	0x91
 13078 08b4 76       		.sleb128 -10
 13079 08b5 00       		.byte	0
 13080 08b6 0E       		.uleb128 0xe
 13081 08b7 291C0000 		.4byte	.LASF97
 13082 08bb 01       		.byte	0x1
 13083 08bc B803     		.2byte	0x3b8
 13084 08be 34010000 		.4byte	0x134
 13085 08c2 00000000 		.4byte	.LFB66
 13086 08c6 54000000 		.4byte	.LFE66-.LFB66
 13087 08ca 01       		.uleb128 0x1
 13088 08cb 9C       		.byte	0x9c
 13089 08cc E0080000 		.4byte	0x8e0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 288


 13090 08d0 0F       		.uleb128 0xf
 13091 08d1 6E756D00 		.ascii	"num\000"
 13092 08d5 01       		.byte	0x1
 13093 08d6 B803     		.2byte	0x3b8
 13094 08d8 AD000000 		.4byte	0xad
 13095 08dc 02       		.uleb128 0x2
 13096 08dd 91       		.byte	0x91
 13097 08de 77       		.sleb128 -9
 13098 08df 00       		.byte	0
 13099 08e0 0C       		.uleb128 0xc
 13100 08e1 CE0C0000 		.4byte	.LASF98
 13101 08e5 01       		.byte	0x1
 13102 08e6 C303     		.2byte	0x3c3
 13103 08e8 00000000 		.4byte	.LFB67
 13104 08ec 48000000 		.4byte	.LFE67-.LFB67
 13105 08f0 01       		.uleb128 0x1
 13106 08f1 9C       		.byte	0x9c
 13107 08f2 15090000 		.4byte	0x915
 13108 08f6 0F       		.uleb128 0xf
 13109 08f7 6E756D00 		.ascii	"num\000"
 13110 08fb 01       		.byte	0x1
 13111 08fc C303     		.2byte	0x3c3
 13112 08fe AD000000 		.4byte	0xad
 13113 0902 02       		.uleb128 0x2
 13114 0903 91       		.byte	0x91
 13115 0904 77       		.sleb128 -9
 13116 0905 0D       		.uleb128 0xd
 13117 0906 43160000 		.4byte	.LASF42
 13118 090a 01       		.byte	0x1
 13119 090b C303     		.2byte	0x3c3
 13120 090d 34010000 		.4byte	0x134
 13121 0911 02       		.uleb128 0x2
 13122 0912 91       		.byte	0x91
 13123 0913 76       		.sleb128 -10
 13124 0914 00       		.byte	0
 13125 0915 0E       		.uleb128 0xe
 13126 0916 0C030000 		.4byte	.LASF99
 13127 091a 01       		.byte	0x1
 13128 091b D203     		.2byte	0x3d2
 13129 091d 34010000 		.4byte	0x134
 13130 0921 00000000 		.4byte	.LFB68
 13131 0925 54000000 		.4byte	.LFE68-.LFB68
 13132 0929 01       		.uleb128 0x1
 13133 092a 9C       		.byte	0x9c
 13134 092b 3F090000 		.4byte	0x93f
 13135 092f 0F       		.uleb128 0xf
 13136 0930 6E756D00 		.ascii	"num\000"
 13137 0934 01       		.byte	0x1
 13138 0935 D203     		.2byte	0x3d2
 13139 0937 AD000000 		.4byte	0xad
 13140 093b 02       		.uleb128 0x2
 13141 093c 91       		.byte	0x91
 13142 093d 77       		.sleb128 -9
 13143 093e 00       		.byte	0
 13144 093f 0C       		.uleb128 0xc
 13145 0940 A5090000 		.4byte	.LASF100
 13146 0944 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 289


 13147 0945 DD03     		.2byte	0x3dd
 13148 0947 00000000 		.4byte	.LFB69
 13149 094b 48000000 		.4byte	.LFE69-.LFB69
 13150 094f 01       		.uleb128 0x1
 13151 0950 9C       		.byte	0x9c
 13152 0951 74090000 		.4byte	0x974
 13153 0955 0F       		.uleb128 0xf
 13154 0956 6E756D00 		.ascii	"num\000"
 13155 095a 01       		.byte	0x1
 13156 095b DD03     		.2byte	0x3dd
 13157 095d AD000000 		.4byte	0xad
 13158 0961 02       		.uleb128 0x2
 13159 0962 91       		.byte	0x91
 13160 0963 77       		.sleb128 -9
 13161 0964 0D       		.uleb128 0xd
 13162 0965 43160000 		.4byte	.LASF42
 13163 0969 01       		.byte	0x1
 13164 096a DD03     		.2byte	0x3dd
 13165 096c 34010000 		.4byte	0x134
 13166 0970 02       		.uleb128 0x2
 13167 0971 91       		.byte	0x91
 13168 0972 76       		.sleb128 -10
 13169 0973 00       		.byte	0
 13170 0974 0E       		.uleb128 0xe
 13171 0975 C50A0000 		.4byte	.LASF101
 13172 0979 01       		.byte	0x1
 13173 097a EB03     		.2byte	0x3eb
 13174 097c 34010000 		.4byte	0x134
 13175 0980 00000000 		.4byte	.LFB70
 13176 0984 54000000 		.4byte	.LFE70-.LFB70
 13177 0988 01       		.uleb128 0x1
 13178 0989 9C       		.byte	0x9c
 13179 098a 9E090000 		.4byte	0x99e
 13180 098e 0F       		.uleb128 0xf
 13181 098f 6E756D00 		.ascii	"num\000"
 13182 0993 01       		.byte	0x1
 13183 0994 EB03     		.2byte	0x3eb
 13184 0996 AD000000 		.4byte	0xad
 13185 099a 02       		.uleb128 0x2
 13186 099b 91       		.byte	0x91
 13187 099c 77       		.sleb128 -9
 13188 099d 00       		.byte	0
 13189 099e 0C       		.uleb128 0xc
 13190 099f 25170000 		.4byte	.LASF102
 13191 09a3 01       		.byte	0x1
 13192 09a4 F603     		.2byte	0x3f6
 13193 09a6 00000000 		.4byte	.LFB71
 13194 09aa 48000000 		.4byte	.LFE71-.LFB71
 13195 09ae 01       		.uleb128 0x1
 13196 09af 9C       		.byte	0x9c
 13197 09b0 D3090000 		.4byte	0x9d3
 13198 09b4 0F       		.uleb128 0xf
 13199 09b5 6E756D00 		.ascii	"num\000"
 13200 09b9 01       		.byte	0x1
 13201 09ba F603     		.2byte	0x3f6
 13202 09bc AD000000 		.4byte	0xad
 13203 09c0 02       		.uleb128 0x2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 290


 13204 09c1 91       		.byte	0x91
 13205 09c2 77       		.sleb128 -9
 13206 09c3 0D       		.uleb128 0xd
 13207 09c4 A5160000 		.4byte	.LASF36
 13208 09c8 01       		.byte	0x1
 13209 09c9 F603     		.2byte	0x3f6
 13210 09cb 34010000 		.4byte	0x134
 13211 09cf 02       		.uleb128 0x2
 13212 09d0 91       		.byte	0x91
 13213 09d1 76       		.sleb128 -10
 13214 09d2 00       		.byte	0
 13215 09d3 0E       		.uleb128 0xe
 13216 09d4 6F0D0000 		.4byte	.LASF103
 13217 09d8 01       		.byte	0x1
 13218 09d9 0504     		.2byte	0x405
 13219 09db 34010000 		.4byte	0x134
 13220 09df 00000000 		.4byte	.LFB72
 13221 09e3 54000000 		.4byte	.LFE72-.LFB72
 13222 09e7 01       		.uleb128 0x1
 13223 09e8 9C       		.byte	0x9c
 13224 09e9 FD090000 		.4byte	0x9fd
 13225 09ed 0F       		.uleb128 0xf
 13226 09ee 6E756D00 		.ascii	"num\000"
 13227 09f2 01       		.byte	0x1
 13228 09f3 0504     		.2byte	0x405
 13229 09f5 AD000000 		.4byte	0xad
 13230 09f9 02       		.uleb128 0x2
 13231 09fa 91       		.byte	0x91
 13232 09fb 77       		.sleb128 -9
 13233 09fc 00       		.byte	0
 13234 09fd 0C       		.uleb128 0xc
 13235 09fe 5A150000 		.4byte	.LASF104
 13236 0a02 01       		.byte	0x1
 13237 0a03 1004     		.2byte	0x410
 13238 0a05 00000000 		.4byte	.LFB73
 13239 0a09 48000000 		.4byte	.LFE73-.LFB73
 13240 0a0d 01       		.uleb128 0x1
 13241 0a0e 9C       		.byte	0x9c
 13242 0a0f 320A0000 		.4byte	0xa32
 13243 0a13 0F       		.uleb128 0xf
 13244 0a14 6E756D00 		.ascii	"num\000"
 13245 0a18 01       		.byte	0x1
 13246 0a19 1004     		.2byte	0x410
 13247 0a1b AD000000 		.4byte	0xad
 13248 0a1f 02       		.uleb128 0x2
 13249 0a20 91       		.byte	0x91
 13250 0a21 77       		.sleb128 -9
 13251 0a22 0D       		.uleb128 0xd
 13252 0a23 43160000 		.4byte	.LASF42
 13253 0a27 01       		.byte	0x1
 13254 0a28 1004     		.2byte	0x410
 13255 0a2a 34010000 		.4byte	0x134
 13256 0a2e 02       		.uleb128 0x2
 13257 0a2f 91       		.byte	0x91
 13258 0a30 76       		.sleb128 -10
 13259 0a31 00       		.byte	0
 13260 0a32 0E       		.uleb128 0xe
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 291


 13261 0a33 88010000 		.4byte	.LASF105
 13262 0a37 01       		.byte	0x1
 13263 0a38 1B04     		.2byte	0x41b
 13264 0a3a AD000000 		.4byte	0xad
 13265 0a3e 00000000 		.4byte	.LFB74
 13266 0a42 50000000 		.4byte	.LFE74-.LFB74
 13267 0a46 01       		.uleb128 0x1
 13268 0a47 9C       		.byte	0x9c
 13269 0a48 5C0A0000 		.4byte	0xa5c
 13270 0a4c 0F       		.uleb128 0xf
 13271 0a4d 6E756D00 		.ascii	"num\000"
 13272 0a51 01       		.byte	0x1
 13273 0a52 1B04     		.2byte	0x41b
 13274 0a54 AD000000 		.4byte	0xad
 13275 0a58 02       		.uleb128 0x2
 13276 0a59 91       		.byte	0x91
 13277 0a5a 77       		.sleb128 -9
 13278 0a5b 00       		.byte	0
 13279 0a5c 0C       		.uleb128 0xc
 13280 0a5d A41B0000 		.4byte	.LASF106
 13281 0a61 01       		.byte	0x1
 13282 0a62 2604     		.2byte	0x426
 13283 0a64 00000000 		.4byte	.LFB75
 13284 0a68 4C000000 		.4byte	.LFE75-.LFB75
 13285 0a6c 01       		.uleb128 0x1
 13286 0a6d 9C       		.byte	0x9c
 13287 0a6e 910A0000 		.4byte	0xa91
 13288 0a72 0F       		.uleb128 0xf
 13289 0a73 6E756D00 		.ascii	"num\000"
 13290 0a77 01       		.byte	0x1
 13291 0a78 2604     		.2byte	0x426
 13292 0a7a AD000000 		.4byte	0xad
 13293 0a7e 02       		.uleb128 0x2
 13294 0a7f 91       		.byte	0x91
 13295 0a80 77       		.sleb128 -9
 13296 0a81 0D       		.uleb128 0xd
 13297 0a82 84160000 		.4byte	.LASF107
 13298 0a86 01       		.byte	0x1
 13299 0a87 2604     		.2byte	0x426
 13300 0a89 AD000000 		.4byte	0xad
 13301 0a8d 02       		.uleb128 0x2
 13302 0a8e 91       		.byte	0x91
 13303 0a8f 76       		.sleb128 -10
 13304 0a90 00       		.byte	0
 13305 0a91 0B       		.uleb128 0xb
 13306 0a92 2B150000 		.4byte	.LASF108
 13307 0a96 01       		.byte	0x1
 13308 0a97 3604     		.2byte	0x436
 13309 0a99 AD000000 		.4byte	0xad
 13310 0a9d 00000000 		.4byte	.LFB76
 13311 0aa1 28000000 		.4byte	.LFE76-.LFB76
 13312 0aa5 01       		.uleb128 0x1
 13313 0aa6 9C       		.byte	0x9c
 13314 0aa7 0C       		.uleb128 0xc
 13315 0aa8 4C1A0000 		.4byte	.LASF109
 13316 0aac 01       		.byte	0x1
 13317 0aad 3F04     		.2byte	0x43f
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 292


 13318 0aaf 00000000 		.4byte	.LFB77
 13319 0ab3 28000000 		.4byte	.LFE77-.LFB77
 13320 0ab7 01       		.uleb128 0x1
 13321 0ab8 9C       		.byte	0x9c
 13322 0ab9 CD0A0000 		.4byte	0xacd
 13323 0abd 0D       		.uleb128 0xd
 13324 0abe CD0F0000 		.4byte	.LASF26
 13325 0ac2 01       		.byte	0x1
 13326 0ac3 3F04     		.2byte	0x43f
 13327 0ac5 AD000000 		.4byte	0xad
 13328 0ac9 02       		.uleb128 0x2
 13329 0aca 91       		.byte	0x91
 13330 0acb 77       		.sleb128 -9
 13331 0acc 00       		.byte	0
 13332 0acd 0B       		.uleb128 0xb
 13333 0ace 3B0A0000 		.4byte	.LASF110
 13334 0ad2 01       		.byte	0x1
 13335 0ad3 4904     		.2byte	0x449
 13336 0ad5 AD000000 		.4byte	0xad
 13337 0ad9 00000000 		.4byte	.LFB78
 13338 0add 28000000 		.4byte	.LFE78-.LFB78
 13339 0ae1 01       		.uleb128 0x1
 13340 0ae2 9C       		.byte	0x9c
 13341 0ae3 0C       		.uleb128 0xc
 13342 0ae4 8B160000 		.4byte	.LASF111
 13343 0ae8 01       		.byte	0x1
 13344 0ae9 5204     		.2byte	0x452
 13345 0aeb 00000000 		.4byte	.LFB79
 13346 0aef 28000000 		.4byte	.LFE79-.LFB79
 13347 0af3 01       		.uleb128 0x1
 13348 0af4 9C       		.byte	0x9c
 13349 0af5 090B0000 		.4byte	0xb09
 13350 0af9 0F       		.uleb128 0xf
 13351 0afa 72656700 		.ascii	"reg\000"
 13352 0afe 01       		.byte	0x1
 13353 0aff 5204     		.2byte	0x452
 13354 0b01 AD000000 		.4byte	0xad
 13355 0b05 02       		.uleb128 0x2
 13356 0b06 91       		.byte	0x91
 13357 0b07 77       		.sleb128 -9
 13358 0b08 00       		.byte	0
 13359 0b09 0C       		.uleb128 0xc
 13360 0b0a 620A0000 		.4byte	.LASF112
 13361 0b0e 01       		.byte	0x1
 13362 0b0f 5B04     		.2byte	0x45b
 13363 0b11 00000000 		.4byte	.LFB80
 13364 0b15 28000000 		.4byte	.LFE80-.LFB80
 13365 0b19 01       		.uleb128 0x1
 13366 0b1a 9C       		.byte	0x9c
 13367 0b1b 2F0B0000 		.4byte	0xb2f
 13368 0b1f 0D       		.uleb128 0xd
 13369 0b20 080C0000 		.4byte	.LASF113
 13370 0b24 01       		.byte	0x1
 13371 0b25 5B04     		.2byte	0x45b
 13372 0b27 AD000000 		.4byte	0xad
 13373 0b2b 02       		.uleb128 0x2
 13374 0b2c 91       		.byte	0x91
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 293


 13375 0b2d 77       		.sleb128 -9
 13376 0b2e 00       		.byte	0
 13377 0b2f 0B       		.uleb128 0xb
 13378 0b30 38130000 		.4byte	.LASF114
 13379 0b34 01       		.byte	0x1
 13380 0b35 6404     		.2byte	0x464
 13381 0b37 34010000 		.4byte	0x134
 13382 0b3b 00000000 		.4byte	.LFB81
 13383 0b3f 2C000000 		.4byte	.LFE81-.LFB81
 13384 0b43 01       		.uleb128 0x1
 13385 0b44 9C       		.byte	0x9c
 13386 0b45 0C       		.uleb128 0xc
 13387 0b46 C0170000 		.4byte	.LASF115
 13388 0b4a 01       		.byte	0x1
 13389 0b4b 6D04     		.2byte	0x46d
 13390 0b4d 00000000 		.4byte	.LFB82
 13391 0b51 28000000 		.4byte	.LFE82-.LFB82
 13392 0b55 01       		.uleb128 0x1
 13393 0b56 9C       		.byte	0x9c
 13394 0b57 6B0B0000 		.4byte	0xb6b
 13395 0b5b 0D       		.uleb128 0xd
 13396 0b5c 43160000 		.4byte	.LASF42
 13397 0b60 01       		.byte	0x1
 13398 0b61 6D04     		.2byte	0x46d
 13399 0b63 34010000 		.4byte	0x134
 13400 0b67 02       		.uleb128 0x2
 13401 0b68 91       		.byte	0x91
 13402 0b69 77       		.sleb128 -9
 13403 0b6a 00       		.byte	0
 13404 0b6b 0B       		.uleb128 0xb
 13405 0b6c 24020000 		.4byte	.LASF116
 13406 0b70 01       		.byte	0x1
 13407 0b71 7904     		.2byte	0x479
 13408 0b73 34010000 		.4byte	0x134
 13409 0b77 00000000 		.4byte	.LFB83
 13410 0b7b 2C000000 		.4byte	.LFE83-.LFB83
 13411 0b7f 01       		.uleb128 0x1
 13412 0b80 9C       		.byte	0x9c
 13413 0b81 0C       		.uleb128 0xc
 13414 0b82 E2070000 		.4byte	.LASF117
 13415 0b86 01       		.byte	0x1
 13416 0b87 8204     		.2byte	0x482
 13417 0b89 00000000 		.4byte	.LFB84
 13418 0b8d 28000000 		.4byte	.LFE84-.LFB84
 13419 0b91 01       		.uleb128 0x1
 13420 0b92 9C       		.byte	0x9c
 13421 0b93 A70B0000 		.4byte	0xba7
 13422 0b97 0D       		.uleb128 0xd
 13423 0b98 43160000 		.4byte	.LASF42
 13424 0b9c 01       		.byte	0x1
 13425 0b9d 8204     		.2byte	0x482
 13426 0b9f 34010000 		.4byte	0x134
 13427 0ba3 02       		.uleb128 0x2
 13428 0ba4 91       		.byte	0x91
 13429 0ba5 77       		.sleb128 -9
 13430 0ba6 00       		.byte	0
 13431 0ba7 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 294


 13432 0ba8 59100000 		.4byte	.LASF118
 13433 0bac 01       		.byte	0x1
 13434 0bad 8E04     		.2byte	0x48e
 13435 0baf 34010000 		.4byte	0x134
 13436 0bb3 00000000 		.4byte	.LFB85
 13437 0bb7 2C000000 		.4byte	.LFE85-.LFB85
 13438 0bbb 01       		.uleb128 0x1
 13439 0bbc 9C       		.byte	0x9c
 13440 0bbd 0C       		.uleb128 0xc
 13441 0bbe 61080000 		.4byte	.LASF119
 13442 0bc2 01       		.byte	0x1
 13443 0bc3 9704     		.2byte	0x497
 13444 0bc5 00000000 		.4byte	.LFB86
 13445 0bc9 28000000 		.4byte	.LFE86-.LFB86
 13446 0bcd 01       		.uleb128 0x1
 13447 0bce 9C       		.byte	0x9c
 13448 0bcf E30B0000 		.4byte	0xbe3
 13449 0bd3 0D       		.uleb128 0xd
 13450 0bd4 A5160000 		.4byte	.LASF36
 13451 0bd8 01       		.byte	0x1
 13452 0bd9 9704     		.2byte	0x497
 13453 0bdb 34010000 		.4byte	0x134
 13454 0bdf 02       		.uleb128 0x2
 13455 0be0 91       		.byte	0x91
 13456 0be1 77       		.sleb128 -9
 13457 0be2 00       		.byte	0
 13458 0be3 0B       		.uleb128 0xb
 13459 0be4 0E0D0000 		.4byte	.LASF120
 13460 0be8 01       		.byte	0x1
 13461 0be9 A904     		.2byte	0x4a9
 13462 0beb AD000000 		.4byte	0xad
 13463 0bef 00000000 		.4byte	.LFB87
 13464 0bf3 2C000000 		.4byte	.LFE87-.LFB87
 13465 0bf7 01       		.uleb128 0x1
 13466 0bf8 9C       		.byte	0x9c
 13467 0bf9 0C       		.uleb128 0xc
 13468 0bfa 490E0000 		.4byte	.LASF121
 13469 0bfe 01       		.byte	0x1
 13470 0bff B204     		.2byte	0x4b2
 13471 0c01 00000000 		.4byte	.LFB88
 13472 0c05 2C000000 		.4byte	.LFE88-.LFB88
 13473 0c09 01       		.uleb128 0x1
 13474 0c0a 9C       		.byte	0x9c
 13475 0c0b 1F0C0000 		.4byte	0xc1f
 13476 0c0f 0D       		.uleb128 0xd
 13477 0c10 29140000 		.4byte	.LASF122
 13478 0c14 01       		.byte	0x1
 13479 0c15 B204     		.2byte	0x4b2
 13480 0c17 AD000000 		.4byte	0xad
 13481 0c1b 02       		.uleb128 0x2
 13482 0c1c 91       		.byte	0x91
 13483 0c1d 77       		.sleb128 -9
 13484 0c1e 00       		.byte	0
 13485 0c1f 0B       		.uleb128 0xb
 13486 0c20 F31A0000 		.4byte	.LASF123
 13487 0c24 01       		.byte	0x1
 13488 0c25 BB04     		.2byte	0x4bb
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 295


 13489 0c27 AD000000 		.4byte	0xad
 13490 0c2b 00000000 		.4byte	.LFB89
 13491 0c2f 28000000 		.4byte	.LFE89-.LFB89
 13492 0c33 01       		.uleb128 0x1
 13493 0c34 9C       		.byte	0x9c
 13494 0c35 0B       		.uleb128 0xb
 13495 0c36 F20E0000 		.4byte	.LASF124
 13496 0c3a 01       		.byte	0x1
 13497 0c3b CB04     		.2byte	0x4cb
 13498 0c3d 34010000 		.4byte	0x134
 13499 0c41 00000000 		.4byte	.LFB90
 13500 0c45 2C000000 		.4byte	.LFE90-.LFB90
 13501 0c49 01       		.uleb128 0x1
 13502 0c4a 9C       		.byte	0x9c
 13503 0c4b 0B       		.uleb128 0xb
 13504 0c4c 0E000000 		.4byte	.LASF125
 13505 0c50 01       		.byte	0x1
 13506 0c51 D704     		.2byte	0x4d7
 13507 0c53 34010000 		.4byte	0x134
 13508 0c57 00000000 		.4byte	.LFB91
 13509 0c5b 2C000000 		.4byte	.LFE91-.LFB91
 13510 0c5f 01       		.uleb128 0x1
 13511 0c60 9C       		.byte	0x9c
 13512 0c61 0B       		.uleb128 0xb
 13513 0c62 12160000 		.4byte	.LASF126
 13514 0c66 01       		.byte	0x1
 13515 0c67 E204     		.2byte	0x4e2
 13516 0c69 34010000 		.4byte	0x134
 13517 0c6d 00000000 		.4byte	.LFB92
 13518 0c71 2C000000 		.4byte	.LFE92-.LFB92
 13519 0c75 01       		.uleb128 0x1
 13520 0c76 9C       		.byte	0x9c
 13521 0c77 0B       		.uleb128 0xb
 13522 0c78 6D000000 		.4byte	.LASF127
 13523 0c7c 01       		.byte	0x1
 13524 0c7d ED04     		.2byte	0x4ed
 13525 0c7f 34010000 		.4byte	0x134
 13526 0c83 00000000 		.4byte	.LFB93
 13527 0c87 2C000000 		.4byte	.LFE93-.LFB93
 13528 0c8b 01       		.uleb128 0x1
 13529 0c8c 9C       		.byte	0x9c
 13530 0c8d 0B       		.uleb128 0xb
 13531 0c8e B80C0000 		.4byte	.LASF128
 13532 0c92 01       		.byte	0x1
 13533 0c93 F804     		.2byte	0x4f8
 13534 0c95 34010000 		.4byte	0x134
 13535 0c99 00000000 		.4byte	.LFB94
 13536 0c9d 2C000000 		.4byte	.LFE94-.LFB94
 13537 0ca1 01       		.uleb128 0x1
 13538 0ca2 9C       		.byte	0x9c
 13539 0ca3 0B       		.uleb128 0xb
 13540 0ca4 2D160000 		.4byte	.LASF129
 13541 0ca8 01       		.byte	0x1
 13542 0ca9 0305     		.2byte	0x503
 13543 0cab 34010000 		.4byte	0x134
 13544 0caf 00000000 		.4byte	.LFB95
 13545 0cb3 2C000000 		.4byte	.LFE95-.LFB95
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 296


 13546 0cb7 01       		.uleb128 0x1
 13547 0cb8 9C       		.byte	0x9c
 13548 0cb9 0B       		.uleb128 0xb
 13549 0cba 81040000 		.4byte	.LASF130
 13550 0cbe 01       		.byte	0x1
 13551 0cbf 0E05     		.2byte	0x50e
 13552 0cc1 34010000 		.4byte	0x134
 13553 0cc5 00000000 		.4byte	.LFB96
 13554 0cc9 2C000000 		.4byte	.LFE96-.LFB96
 13555 0ccd 01       		.uleb128 0x1
 13556 0cce 9C       		.byte	0x9c
 13557 0ccf 0B       		.uleb128 0xb
 13558 0cd0 831A0000 		.4byte	.LASF131
 13559 0cd4 01       		.byte	0x1
 13560 0cd5 1905     		.2byte	0x519
 13561 0cd7 34010000 		.4byte	0x134
 13562 0cdb 00000000 		.4byte	.LFB97
 13563 0cdf 2C000000 		.4byte	.LFE97-.LFB97
 13564 0ce3 01       		.uleb128 0x1
 13565 0ce4 9C       		.byte	0x9c
 13566 0ce5 0B       		.uleb128 0xb
 13567 0ce6 E2080000 		.4byte	.LASF132
 13568 0cea 01       		.byte	0x1
 13569 0ceb 2605     		.2byte	0x526
 13570 0ced 34010000 		.4byte	0x134
 13571 0cf1 00000000 		.4byte	.LFB98
 13572 0cf5 2C000000 		.4byte	.LFE98-.LFB98
 13573 0cf9 01       		.uleb128 0x1
 13574 0cfa 9C       		.byte	0x9c
 13575 0cfb 0C       		.uleb128 0xc
 13576 0cfc A1110000 		.4byte	.LASF133
 13577 0d00 01       		.byte	0x1
 13578 0d01 3005     		.2byte	0x530
 13579 0d03 00000000 		.4byte	.LFB99
 13580 0d07 28000000 		.4byte	.LFE99-.LFB99
 13581 0d0b 01       		.uleb128 0x1
 13582 0d0c 9C       		.byte	0x9c
 13583 0d0d 210D0000 		.4byte	0xd21
 13584 0d11 0D       		.uleb128 0xd
 13585 0d12 A5160000 		.4byte	.LASF36
 13586 0d16 01       		.byte	0x1
 13587 0d17 3005     		.2byte	0x530
 13588 0d19 34010000 		.4byte	0x134
 13589 0d1d 02       		.uleb128 0x2
 13590 0d1e 91       		.byte	0x91
 13591 0d1f 77       		.sleb128 -9
 13592 0d20 00       		.byte	0
 13593 0d21 0B       		.uleb128 0xb
 13594 0d22 7D1E0000 		.4byte	.LASF134
 13595 0d26 01       		.byte	0x1
 13596 0d27 3905     		.2byte	0x539
 13597 0d29 34010000 		.4byte	0x134
 13598 0d2d 00000000 		.4byte	.LFB100
 13599 0d31 2C000000 		.4byte	.LFE100-.LFB100
 13600 0d35 01       		.uleb128 0x1
 13601 0d36 9C       		.byte	0x9c
 13602 0d37 0C       		.uleb128 0xc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 297


 13603 0d38 211E0000 		.4byte	.LASF135
 13604 0d3c 01       		.byte	0x1
 13605 0d3d 4305     		.2byte	0x543
 13606 0d3f 00000000 		.4byte	.LFB101
 13607 0d43 28000000 		.4byte	.LFE101-.LFB101
 13608 0d47 01       		.uleb128 0x1
 13609 0d48 9C       		.byte	0x9c
 13610 0d49 5D0D0000 		.4byte	0xd5d
 13611 0d4d 0D       		.uleb128 0xd
 13612 0d4e 00000000 		.4byte	.LASF136
 13613 0d52 01       		.byte	0x1
 13614 0d53 4305     		.2byte	0x543
 13615 0d55 34010000 		.4byte	0x134
 13616 0d59 02       		.uleb128 0x2
 13617 0d5a 91       		.byte	0x91
 13618 0d5b 77       		.sleb128 -9
 13619 0d5c 00       		.byte	0
 13620 0d5d 0B       		.uleb128 0xb
 13621 0d5e BF1B0000 		.4byte	.LASF137
 13622 0d62 01       		.byte	0x1
 13623 0d63 4C05     		.2byte	0x54c
 13624 0d65 34010000 		.4byte	0x134
 13625 0d69 00000000 		.4byte	.LFB102
 13626 0d6d 2C000000 		.4byte	.LFE102-.LFB102
 13627 0d71 01       		.uleb128 0x1
 13628 0d72 9C       		.byte	0x9c
 13629 0d73 0C       		.uleb128 0xc
 13630 0d74 00190000 		.4byte	.LASF138
 13631 0d78 01       		.byte	0x1
 13632 0d79 5605     		.2byte	0x556
 13633 0d7b 00000000 		.4byte	.LFB103
 13634 0d7f 28000000 		.4byte	.LFE103-.LFB103
 13635 0d83 01       		.uleb128 0x1
 13636 0d84 9C       		.byte	0x9c
 13637 0d85 990D0000 		.4byte	0xd99
 13638 0d89 0D       		.uleb128 0xd
 13639 0d8a 26000000 		.4byte	.LASF139
 13640 0d8e 01       		.byte	0x1
 13641 0d8f 5605     		.2byte	0x556
 13642 0d91 34010000 		.4byte	0x134
 13643 0d95 02       		.uleb128 0x2
 13644 0d96 91       		.byte	0x91
 13645 0d97 77       		.sleb128 -9
 13646 0d98 00       		.byte	0
 13647 0d99 0B       		.uleb128 0xb
 13648 0d9a E2090000 		.4byte	.LASF140
 13649 0d9e 01       		.byte	0x1
 13650 0d9f 5F05     		.2byte	0x55f
 13651 0da1 34010000 		.4byte	0x134
 13652 0da5 00000000 		.4byte	.LFB104
 13653 0da9 2C000000 		.4byte	.LFE104-.LFB104
 13654 0dad 01       		.uleb128 0x1
 13655 0dae 9C       		.byte	0x9c
 13656 0daf 0C       		.uleb128 0xc
 13657 0db0 161B0000 		.4byte	.LASF141
 13658 0db4 01       		.byte	0x1
 13659 0db5 6905     		.2byte	0x569
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 298


 13660 0db7 00000000 		.4byte	.LFB105
 13661 0dbb 28000000 		.4byte	.LFE105-.LFB105
 13662 0dbf 01       		.uleb128 0x1
 13663 0dc0 9C       		.byte	0x9c
 13664 0dc1 D50D0000 		.4byte	0xdd5
 13665 0dc5 0D       		.uleb128 0xd
 13666 0dc6 AD150000 		.4byte	.LASF142
 13667 0dca 01       		.byte	0x1
 13668 0dcb 6905     		.2byte	0x569
 13669 0dcd 34010000 		.4byte	0x134
 13670 0dd1 02       		.uleb128 0x2
 13671 0dd2 91       		.byte	0x91
 13672 0dd3 77       		.sleb128 -9
 13673 0dd4 00       		.byte	0
 13674 0dd5 0B       		.uleb128 0xb
 13675 0dd6 AA160000 		.4byte	.LASF143
 13676 0dda 01       		.byte	0x1
 13677 0ddb 7205     		.2byte	0x572
 13678 0ddd 34010000 		.4byte	0x134
 13679 0de1 00000000 		.4byte	.LFB106
 13680 0de5 2C000000 		.4byte	.LFE106-.LFB106
 13681 0de9 01       		.uleb128 0x1
 13682 0dea 9C       		.byte	0x9c
 13683 0deb 0C       		.uleb128 0xc
 13684 0dec 360B0000 		.4byte	.LASF144
 13685 0df0 01       		.byte	0x1
 13686 0df1 7C05     		.2byte	0x57c
 13687 0df3 00000000 		.4byte	.LFB107
 13688 0df7 28000000 		.4byte	.LFE107-.LFB107
 13689 0dfb 01       		.uleb128 0x1
 13690 0dfc 9C       		.byte	0x9c
 13691 0dfd 110E0000 		.4byte	0xe11
 13692 0e01 0D       		.uleb128 0xd
 13693 0e02 020C0000 		.4byte	.LASF27
 13694 0e06 01       		.byte	0x1
 13695 0e07 7C05     		.2byte	0x57c
 13696 0e09 34010000 		.4byte	0x134
 13697 0e0d 02       		.uleb128 0x2
 13698 0e0e 91       		.byte	0x91
 13699 0e0f 77       		.sleb128 -9
 13700 0e10 00       		.byte	0
 13701 0e11 0B       		.uleb128 0xb
 13702 0e12 2D050000 		.4byte	.LASF145
 13703 0e16 01       		.byte	0x1
 13704 0e17 8505     		.2byte	0x585
 13705 0e19 34010000 		.4byte	0x134
 13706 0e1d 00000000 		.4byte	.LFB108
 13707 0e21 2C000000 		.4byte	.LFE108-.LFB108
 13708 0e25 01       		.uleb128 0x1
 13709 0e26 9C       		.byte	0x9c
 13710 0e27 0C       		.uleb128 0xc
 13711 0e28 40080000 		.4byte	.LASF146
 13712 0e2c 01       		.byte	0x1
 13713 0e2d 8F05     		.2byte	0x58f
 13714 0e2f 00000000 		.4byte	.LFB109
 13715 0e33 28000000 		.4byte	.LFE109-.LFB109
 13716 0e37 01       		.uleb128 0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 299


 13717 0e38 9C       		.byte	0x9c
 13718 0e39 4D0E0000 		.4byte	0xe4d
 13719 0e3d 0D       		.uleb128 0xd
 13720 0e3e 43160000 		.4byte	.LASF42
 13721 0e42 01       		.byte	0x1
 13722 0e43 8F05     		.2byte	0x58f
 13723 0e45 34010000 		.4byte	0x134
 13724 0e49 02       		.uleb128 0x2
 13725 0e4a 91       		.byte	0x91
 13726 0e4b 77       		.sleb128 -9
 13727 0e4c 00       		.byte	0
 13728 0e4d 0B       		.uleb128 0xb
 13729 0e4e EE0D0000 		.4byte	.LASF147
 13730 0e52 01       		.byte	0x1
 13731 0e53 9D05     		.2byte	0x59d
 13732 0e55 34010000 		.4byte	0x134
 13733 0e59 00000000 		.4byte	.LFB110
 13734 0e5d 2C000000 		.4byte	.LFE110-.LFB110
 13735 0e61 01       		.uleb128 0x1
 13736 0e62 9C       		.byte	0x9c
 13737 0e63 0C       		.uleb128 0xc
 13738 0e64 F9190000 		.4byte	.LASF148
 13739 0e68 01       		.byte	0x1
 13740 0e69 AC05     		.2byte	0x5ac
 13741 0e6b 00000000 		.4byte	.LFB111
 13742 0e6f 28000000 		.4byte	.LFE111-.LFB111
 13743 0e73 01       		.uleb128 0x1
 13744 0e74 9C       		.byte	0x9c
 13745 0e75 890E0000 		.4byte	0xe89
 13746 0e79 0D       		.uleb128 0xd
 13747 0e7a 43160000 		.4byte	.LASF42
 13748 0e7e 01       		.byte	0x1
 13749 0e7f AC05     		.2byte	0x5ac
 13750 0e81 34010000 		.4byte	0x134
 13751 0e85 02       		.uleb128 0x2
 13752 0e86 91       		.byte	0x91
 13753 0e87 77       		.sleb128 -9
 13754 0e88 00       		.byte	0
 13755 0e89 0B       		.uleb128 0xb
 13756 0e8a 870A0000 		.4byte	.LASF149
 13757 0e8e 01       		.byte	0x1
 13758 0e8f B805     		.2byte	0x5b8
 13759 0e91 34010000 		.4byte	0x134
 13760 0e95 00000000 		.4byte	.LFB112
 13761 0e99 2C000000 		.4byte	.LFE112-.LFB112
 13762 0e9d 01       		.uleb128 0x1
 13763 0e9e 9C       		.byte	0x9c
 13764 0e9f 0C       		.uleb128 0xc
 13765 0ea0 651A0000 		.4byte	.LASF150
 13766 0ea4 01       		.byte	0x1
 13767 0ea5 C505     		.2byte	0x5c5
 13768 0ea7 00000000 		.4byte	.LFB113
 13769 0eab 28000000 		.4byte	.LFE113-.LFB113
 13770 0eaf 01       		.uleb128 0x1
 13771 0eb0 9C       		.byte	0x9c
 13772 0eb1 C50E0000 		.4byte	0xec5
 13773 0eb5 0D       		.uleb128 0xd
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 300


 13774 0eb6 43160000 		.4byte	.LASF42
 13775 0eba 01       		.byte	0x1
 13776 0ebb C505     		.2byte	0x5c5
 13777 0ebd 34010000 		.4byte	0x134
 13778 0ec1 02       		.uleb128 0x2
 13779 0ec2 91       		.byte	0x91
 13780 0ec3 77       		.sleb128 -9
 13781 0ec4 00       		.byte	0
 13782 0ec5 0B       		.uleb128 0xb
 13783 0ec6 79140000 		.4byte	.LASF151
 13784 0eca 01       		.byte	0x1
 13785 0ecb D205     		.2byte	0x5d2
 13786 0ecd AD000000 		.4byte	0xad
 13787 0ed1 00000000 		.4byte	.LFB114
 13788 0ed5 28000000 		.4byte	.LFE114-.LFB114
 13789 0ed9 01       		.uleb128 0x1
 13790 0eda 9C       		.byte	0x9c
 13791 0edb 0C       		.uleb128 0xc
 13792 0edc 50180000 		.4byte	.LASF152
 13793 0ee0 01       		.byte	0x1
 13794 0ee1 DE05     		.2byte	0x5de
 13795 0ee3 00000000 		.4byte	.LFB115
 13796 0ee7 28000000 		.4byte	.LFE115-.LFB115
 13797 0eeb 01       		.uleb128 0x1
 13798 0eec 9C       		.byte	0x9c
 13799 0eed 010F0000 		.4byte	0xf01
 13800 0ef1 0D       		.uleb128 0xd
 13801 0ef2 43160000 		.4byte	.LASF42
 13802 0ef6 01       		.byte	0x1
 13803 0ef7 DE05     		.2byte	0x5de
 13804 0ef9 AD000000 		.4byte	0xad
 13805 0efd 02       		.uleb128 0x2
 13806 0efe 91       		.byte	0x91
 13807 0eff 77       		.sleb128 -9
 13808 0f00 00       		.byte	0
 13809 0f01 0B       		.uleb128 0xb
 13810 0f02 30110000 		.4byte	.LASF153
 13811 0f06 01       		.byte	0x1
 13812 0f07 E705     		.2byte	0x5e7
 13813 0f09 34010000 		.4byte	0x134
 13814 0f0d 00000000 		.4byte	.LFB116
 13815 0f11 2C000000 		.4byte	.LFE116-.LFB116
 13816 0f15 01       		.uleb128 0x1
 13817 0f16 9C       		.byte	0x9c
 13818 0f17 0C       		.uleb128 0xc
 13819 0f18 22080000 		.4byte	.LASF154
 13820 0f1c 01       		.byte	0x1
 13821 0f1d F105     		.2byte	0x5f1
 13822 0f1f 00000000 		.4byte	.LFB117
 13823 0f23 28000000 		.4byte	.LFE117-.LFB117
 13824 0f27 01       		.uleb128 0x1
 13825 0f28 9C       		.byte	0x9c
 13826 0f29 3D0F0000 		.4byte	0xf3d
 13827 0f2d 0D       		.uleb128 0xd
 13828 0f2e 43160000 		.4byte	.LASF42
 13829 0f32 01       		.byte	0x1
 13830 0f33 F105     		.2byte	0x5f1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 301


 13831 0f35 34010000 		.4byte	0x134
 13832 0f39 02       		.uleb128 0x2
 13833 0f3a 91       		.byte	0x91
 13834 0f3b 77       		.sleb128 -9
 13835 0f3c 00       		.byte	0
 13836 0f3d 0B       		.uleb128 0xb
 13837 0f3e 501B0000 		.4byte	.LASF155
 13838 0f42 01       		.byte	0x1
 13839 0f43 FA05     		.2byte	0x5fa
 13840 0f45 34010000 		.4byte	0x134
 13841 0f49 00000000 		.4byte	.LFB118
 13842 0f4d 2C000000 		.4byte	.LFE118-.LFB118
 13843 0f51 01       		.uleb128 0x1
 13844 0f52 9C       		.byte	0x9c
 13845 0f53 0C       		.uleb128 0xc
 13846 0f54 74100000 		.4byte	.LASF156
 13847 0f58 01       		.byte	0x1
 13848 0f59 0406     		.2byte	0x604
 13849 0f5b 00000000 		.4byte	.LFB119
 13850 0f5f 28000000 		.4byte	.LFE119-.LFB119
 13851 0f63 01       		.uleb128 0x1
 13852 0f64 9C       		.byte	0x9c
 13853 0f65 790F0000 		.4byte	0xf79
 13854 0f69 0D       		.uleb128 0xd
 13855 0f6a 43160000 		.4byte	.LASF42
 13856 0f6e 01       		.byte	0x1
 13857 0f6f 0406     		.2byte	0x604
 13858 0f71 34010000 		.4byte	0x134
 13859 0f75 02       		.uleb128 0x2
 13860 0f76 91       		.byte	0x91
 13861 0f77 77       		.sleb128 -9
 13862 0f78 00       		.byte	0
 13863 0f79 0B       		.uleb128 0xb
 13864 0f7a BA110000 		.4byte	.LASF157
 13865 0f7e 01       		.byte	0x1
 13866 0f7f 0D06     		.2byte	0x60d
 13867 0f81 34010000 		.4byte	0x134
 13868 0f85 00000000 		.4byte	.LFB120
 13869 0f89 2C000000 		.4byte	.LFE120-.LFB120
 13870 0f8d 01       		.uleb128 0x1
 13871 0f8e 9C       		.byte	0x9c
 13872 0f8f 0C       		.uleb128 0xc
 13873 0f90 65030000 		.4byte	.LASF158
 13874 0f94 01       		.byte	0x1
 13875 0f95 1706     		.2byte	0x617
 13876 0f97 00000000 		.4byte	.LFB121
 13877 0f9b 28000000 		.4byte	.LFE121-.LFB121
 13878 0f9f 01       		.uleb128 0x1
 13879 0fa0 9C       		.byte	0x9c
 13880 0fa1 B50F0000 		.4byte	0xfb5
 13881 0fa5 0D       		.uleb128 0xd
 13882 0fa6 43160000 		.4byte	.LASF42
 13883 0faa 01       		.byte	0x1
 13884 0fab 1706     		.2byte	0x617
 13885 0fad 34010000 		.4byte	0x134
 13886 0fb1 02       		.uleb128 0x2
 13887 0fb2 91       		.byte	0x91
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 302


 13888 0fb3 77       		.sleb128 -9
 13889 0fb4 00       		.byte	0
 13890 0fb5 0B       		.uleb128 0xb
 13891 0fb6 56120000 		.4byte	.LASF159
 13892 0fba 01       		.byte	0x1
 13893 0fbb 2006     		.2byte	0x620
 13894 0fbd 34010000 		.4byte	0x134
 13895 0fc1 00000000 		.4byte	.LFB122
 13896 0fc5 2C000000 		.4byte	.LFE122-.LFB122
 13897 0fc9 01       		.uleb128 0x1
 13898 0fca 9C       		.byte	0x9c
 13899 0fcb 0C       		.uleb128 0xc
 13900 0fcc 0F0F0000 		.4byte	.LASF160
 13901 0fd0 01       		.byte	0x1
 13902 0fd1 2A06     		.2byte	0x62a
 13903 0fd3 00000000 		.4byte	.LFB123
 13904 0fd7 28000000 		.4byte	.LFE123-.LFB123
 13905 0fdb 01       		.uleb128 0x1
 13906 0fdc 9C       		.byte	0x9c
 13907 0fdd F10F0000 		.4byte	0xff1
 13908 0fe1 0D       		.uleb128 0xd
 13909 0fe2 43160000 		.4byte	.LASF42
 13910 0fe6 01       		.byte	0x1
 13911 0fe7 2A06     		.2byte	0x62a
 13912 0fe9 34010000 		.4byte	0x134
 13913 0fed 02       		.uleb128 0x2
 13914 0fee 91       		.byte	0x91
 13915 0fef 77       		.sleb128 -9
 13916 0ff0 00       		.byte	0
 13917 0ff1 0B       		.uleb128 0xb
 13918 0ff2 E6050000 		.4byte	.LASF161
 13919 0ff6 01       		.byte	0x1
 13920 0ff7 3406     		.2byte	0x634
 13921 0ff9 34010000 		.4byte	0x134
 13922 0ffd 00000000 		.4byte	.LFB124
 13923 1001 2C000000 		.4byte	.LFE124-.LFB124
 13924 1005 01       		.uleb128 0x1
 13925 1006 9C       		.byte	0x9c
 13926 1007 0C       		.uleb128 0xc
 13927 1008 57170000 		.4byte	.LASF162
 13928 100c 01       		.byte	0x1
 13929 100d 3E06     		.2byte	0x63e
 13930 100f 00000000 		.4byte	.LFB125
 13931 1013 28000000 		.4byte	.LFE125-.LFB125
 13932 1017 01       		.uleb128 0x1
 13933 1018 9C       		.byte	0x9c
 13934 1019 2D100000 		.4byte	0x102d
 13935 101d 0D       		.uleb128 0xd
 13936 101e 43160000 		.4byte	.LASF42
 13937 1022 01       		.byte	0x1
 13938 1023 3E06     		.2byte	0x63e
 13939 1025 34010000 		.4byte	0x134
 13940 1029 02       		.uleb128 0x2
 13941 102a 91       		.byte	0x91
 13942 102b 77       		.sleb128 -9
 13943 102c 00       		.byte	0
 13944 102d 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 303


 13945 102e CD020000 		.4byte	.LASF163
 13946 1032 01       		.byte	0x1
 13947 1033 4806     		.2byte	0x648
 13948 1035 34010000 		.4byte	0x134
 13949 1039 00000000 		.4byte	.LFB126
 13950 103d 2C000000 		.4byte	.LFE126-.LFB126
 13951 1041 01       		.uleb128 0x1
 13952 1042 9C       		.byte	0x9c
 13953 1043 0C       		.uleb128 0xc
 13954 1044 8F140000 		.4byte	.LASF164
 13955 1048 01       		.byte	0x1
 13956 1049 5206     		.2byte	0x652
 13957 104b 00000000 		.4byte	.LFB127
 13958 104f 28000000 		.4byte	.LFE127-.LFB127
 13959 1053 01       		.uleb128 0x1
 13960 1054 9C       		.byte	0x9c
 13961 1055 69100000 		.4byte	0x1069
 13962 1059 0D       		.uleb128 0xd
 13963 105a 43160000 		.4byte	.LASF42
 13964 105e 01       		.byte	0x1
 13965 105f 5206     		.2byte	0x652
 13966 1061 34010000 		.4byte	0x134
 13967 1065 02       		.uleb128 0x2
 13968 1066 91       		.byte	0x91
 13969 1067 77       		.sleb128 -9
 13970 1068 00       		.byte	0
 13971 1069 0B       		.uleb128 0xb
 13972 106a 411C0000 		.4byte	.LASF165
 13973 106e 01       		.byte	0x1
 13974 106f 5F06     		.2byte	0x65f
 13975 1071 AD000000 		.4byte	0xad
 13976 1075 00000000 		.4byte	.LFB128
 13977 1079 28000000 		.4byte	.LFE128-.LFB128
 13978 107d 01       		.uleb128 0x1
 13979 107e 9C       		.byte	0x9c
 13980 107f 0B       		.uleb128 0xb
 13981 1080 D9130000 		.4byte	.LASF166
 13982 1084 01       		.byte	0x1
 13983 1085 6A06     		.2byte	0x66a
 13984 1087 34010000 		.4byte	0x134
 13985 108b 00000000 		.4byte	.LFB129
 13986 108f 2C000000 		.4byte	.LFE129-.LFB129
 13987 1093 01       		.uleb128 0x1
 13988 1094 9C       		.byte	0x9c
 13989 1095 0B       		.uleb128 0xb
 13990 1096 34190000 		.4byte	.LASF167
 13991 109a 01       		.byte	0x1
 13992 109b 7506     		.2byte	0x675
 13993 109d 34010000 		.4byte	0x134
 13994 10a1 00000000 		.4byte	.LFB130
 13995 10a5 2C000000 		.4byte	.LFE130-.LFB130
 13996 10a9 01       		.uleb128 0x1
 13997 10aa 9C       		.byte	0x9c
 13998 10ab 0B       		.uleb128 0xb
 13999 10ac 851B0000 		.4byte	.LASF168
 14000 10b0 01       		.byte	0x1
 14001 10b1 8006     		.2byte	0x680
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 304


 14002 10b3 34010000 		.4byte	0x134
 14003 10b7 00000000 		.4byte	.LFB131
 14004 10bb 2C000000 		.4byte	.LFE131-.LFB131
 14005 10bf 01       		.uleb128 0x1
 14006 10c0 9C       		.byte	0x9c
 14007 10c1 0B       		.uleb128 0xb
 14008 10c2 73110000 		.4byte	.LASF169
 14009 10c6 01       		.byte	0x1
 14010 10c7 8B06     		.2byte	0x68b
 14011 10c9 34010000 		.4byte	0x134
 14012 10cd 00000000 		.4byte	.LFB132
 14013 10d1 2C000000 		.4byte	.LFE132-.LFB132
 14014 10d5 01       		.uleb128 0x1
 14015 10d6 9C       		.byte	0x9c
 14016 10d7 0B       		.uleb128 0xb
 14017 10d8 9D180000 		.4byte	.LASF170
 14018 10dc 01       		.byte	0x1
 14019 10dd 9706     		.2byte	0x697
 14020 10df 34010000 		.4byte	0x134
 14021 10e3 00000000 		.4byte	.LFB133
 14022 10e7 2C000000 		.4byte	.LFE133-.LFB133
 14023 10eb 01       		.uleb128 0x1
 14024 10ec 9C       		.byte	0x9c
 14025 10ed 0B       		.uleb128 0xb
 14026 10ee B9080000 		.4byte	.LASF171
 14027 10f2 01       		.byte	0x1
 14028 10f3 A206     		.2byte	0x6a2
 14029 10f5 34010000 		.4byte	0x134
 14030 10f9 00000000 		.4byte	.LFB134
 14031 10fd 2C000000 		.4byte	.LFE134-.LFB134
 14032 1101 01       		.uleb128 0x1
 14033 1102 9C       		.byte	0x9c
 14034 1103 0C       		.uleb128 0xc
 14035 1104 D3050000 		.4byte	.LASF172
 14036 1108 01       		.byte	0x1
 14037 1109 B906     		.2byte	0x6b9
 14038 110b 00000000 		.4byte	.LFB135
 14039 110f D8000000 		.4byte	.LFE135-.LFB135
 14040 1113 01       		.uleb128 0x1
 14041 1114 9C       		.byte	0x9c
 14042 1115 98110000 		.4byte	0x1198
 14043 1119 0F       		.uleb128 0xf
 14044 111a 617800   		.ascii	"ax\000"
 14045 111d 01       		.byte	0x1
 14046 111e B906     		.2byte	0x6b9
 14047 1120 98110000 		.4byte	0x1198
 14048 1124 02       		.uleb128 0x2
 14049 1125 91       		.byte	0x91
 14050 1126 74       		.sleb128 -12
 14051 1127 0F       		.uleb128 0xf
 14052 1128 617900   		.ascii	"ay\000"
 14053 112b 01       		.byte	0x1
 14054 112c B906     		.2byte	0x6b9
 14055 112e 98110000 		.4byte	0x1198
 14056 1132 02       		.uleb128 0x2
 14057 1133 91       		.byte	0x91
 14058 1134 70       		.sleb128 -16
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 305


 14059 1135 0F       		.uleb128 0xf
 14060 1136 617A00   		.ascii	"az\000"
 14061 1139 01       		.byte	0x1
 14062 113a B906     		.2byte	0x6b9
 14063 113c 98110000 		.4byte	0x1198
 14064 1140 02       		.uleb128 0x2
 14065 1141 91       		.byte	0x91
 14066 1142 6C       		.sleb128 -20
 14067 1143 0F       		.uleb128 0xf
 14068 1144 677800   		.ascii	"gx\000"
 14069 1147 01       		.byte	0x1
 14070 1148 B906     		.2byte	0x6b9
 14071 114a 98110000 		.4byte	0x1198
 14072 114e 02       		.uleb128 0x2
 14073 114f 91       		.byte	0x91
 14074 1150 68       		.sleb128 -24
 14075 1151 0F       		.uleb128 0xf
 14076 1152 677900   		.ascii	"gy\000"
 14077 1155 01       		.byte	0x1
 14078 1156 B906     		.2byte	0x6b9
 14079 1158 98110000 		.4byte	0x1198
 14080 115c 02       		.uleb128 0x2
 14081 115d 91       		.byte	0x91
 14082 115e 00       		.sleb128 0
 14083 115f 0F       		.uleb128 0xf
 14084 1160 677A00   		.ascii	"gz\000"
 14085 1163 01       		.byte	0x1
 14086 1164 B906     		.2byte	0x6b9
 14087 1166 98110000 		.4byte	0x1198
 14088 116a 02       		.uleb128 0x2
 14089 116b 91       		.byte	0x91
 14090 116c 04       		.sleb128 4
 14091 116d 0F       		.uleb128 0xf
 14092 116e 6D7800   		.ascii	"mx\000"
 14093 1171 01       		.byte	0x1
 14094 1172 B906     		.2byte	0x6b9
 14095 1174 98110000 		.4byte	0x1198
 14096 1178 02       		.uleb128 0x2
 14097 1179 91       		.byte	0x91
 14098 117a 08       		.sleb128 8
 14099 117b 0F       		.uleb128 0xf
 14100 117c 6D7900   		.ascii	"my\000"
 14101 117f 01       		.byte	0x1
 14102 1180 B906     		.2byte	0x6b9
 14103 1182 98110000 		.4byte	0x1198
 14104 1186 02       		.uleb128 0x2
 14105 1187 91       		.byte	0x91
 14106 1188 0C       		.sleb128 12
 14107 1189 0F       		.uleb128 0xf
 14108 118a 6D7A00   		.ascii	"mz\000"
 14109 118d 01       		.byte	0x1
 14110 118e B906     		.2byte	0x6b9
 14111 1190 98110000 		.4byte	0x1198
 14112 1194 02       		.uleb128 0x2
 14113 1195 91       		.byte	0x91
 14114 1196 10       		.sleb128 16
 14115 1197 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 306


 14116 1198 10       		.uleb128 0x10
 14117 1199 04       		.byte	0x4
 14118 119a B8000000 		.4byte	0xb8
 14119 119e 0C       		.uleb128 0xc
 14120 119f 1C1D0000 		.4byte	.LASF173
 14121 11a3 01       		.byte	0x1
 14122 11a4 DC06     		.2byte	0x6dc
 14123 11a6 00000000 		.4byte	.LFB136
 14124 11aa EC000000 		.4byte	.LFE136-.LFB136
 14125 11ae 01       		.uleb128 0x1
 14126 11af 9C       		.byte	0x9c
 14127 11b0 40120000 		.4byte	0x1240
 14128 11b4 0F       		.uleb128 0xf
 14129 11b5 617800   		.ascii	"ax\000"
 14130 11b8 01       		.byte	0x1
 14131 11b9 DC06     		.2byte	0x6dc
 14132 11bb 98110000 		.4byte	0x1198
 14133 11bf 02       		.uleb128 0x2
 14134 11c0 91       		.byte	0x91
 14135 11c1 74       		.sleb128 -12
 14136 11c2 0F       		.uleb128 0xf
 14137 11c3 617900   		.ascii	"ay\000"
 14138 11c6 01       		.byte	0x1
 14139 11c7 DC06     		.2byte	0x6dc
 14140 11c9 98110000 		.4byte	0x1198
 14141 11cd 02       		.uleb128 0x2
 14142 11ce 91       		.byte	0x91
 14143 11cf 70       		.sleb128 -16
 14144 11d0 0F       		.uleb128 0xf
 14145 11d1 617A00   		.ascii	"az\000"
 14146 11d4 01       		.byte	0x1
 14147 11d5 DC06     		.2byte	0x6dc
 14148 11d7 98110000 		.4byte	0x1198
 14149 11db 02       		.uleb128 0x2
 14150 11dc 91       		.byte	0x91
 14151 11dd 6C       		.sleb128 -20
 14152 11de 0F       		.uleb128 0xf
 14153 11df 677800   		.ascii	"gx\000"
 14154 11e2 01       		.byte	0x1
 14155 11e3 DC06     		.2byte	0x6dc
 14156 11e5 98110000 		.4byte	0x1198
 14157 11e9 02       		.uleb128 0x2
 14158 11ea 91       		.byte	0x91
 14159 11eb 68       		.sleb128 -24
 14160 11ec 0F       		.uleb128 0xf
 14161 11ed 677900   		.ascii	"gy\000"
 14162 11f0 01       		.byte	0x1
 14163 11f1 DC06     		.2byte	0x6dc
 14164 11f3 98110000 		.4byte	0x1198
 14165 11f7 02       		.uleb128 0x2
 14166 11f8 91       		.byte	0x91
 14167 11f9 00       		.sleb128 0
 14168 11fa 0F       		.uleb128 0xf
 14169 11fb 677A00   		.ascii	"gz\000"
 14170 11fe 01       		.byte	0x1
 14171 11ff DC06     		.2byte	0x6dc
 14172 1201 98110000 		.4byte	0x1198
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 307


 14173 1205 02       		.uleb128 0x2
 14174 1206 91       		.byte	0x91
 14175 1207 04       		.sleb128 4
 14176 1208 0F       		.uleb128 0xf
 14177 1209 6D7800   		.ascii	"mx\000"
 14178 120c 01       		.byte	0x1
 14179 120d DC06     		.2byte	0x6dc
 14180 120f 98110000 		.4byte	0x1198
 14181 1213 02       		.uleb128 0x2
 14182 1214 91       		.byte	0x91
 14183 1215 08       		.sleb128 8
 14184 1216 0F       		.uleb128 0xf
 14185 1217 6D7900   		.ascii	"my\000"
 14186 121a 01       		.byte	0x1
 14187 121b DC06     		.2byte	0x6dc
 14188 121d 98110000 		.4byte	0x1198
 14189 1221 02       		.uleb128 0x2
 14190 1222 91       		.byte	0x91
 14191 1223 0C       		.sleb128 12
 14192 1224 0F       		.uleb128 0xf
 14193 1225 6D7A00   		.ascii	"mz\000"
 14194 1228 01       		.byte	0x1
 14195 1229 DC06     		.2byte	0x6dc
 14196 122b 98110000 		.4byte	0x1198
 14197 122f 02       		.uleb128 0x2
 14198 1230 91       		.byte	0x91
 14199 1231 10       		.sleb128 16
 14200 1232 0F       		.uleb128 0xf
 14201 1233 7400     		.ascii	"t\000"
 14202 1235 01       		.byte	0x1
 14203 1236 DC06     		.2byte	0x6dc
 14204 1238 98110000 		.4byte	0x1198
 14205 123c 02       		.uleb128 0x2
 14206 123d 91       		.byte	0x91
 14207 123e 14       		.sleb128 20
 14208 123f 00       		.byte	0
 14209 1240 0C       		.uleb128 0xc
 14210 1241 D9150000 		.4byte	.LASF174
 14211 1245 01       		.byte	0x1
 14212 1246 F906     		.2byte	0x6f9
 14213 1248 00000000 		.4byte	.LFB137
 14214 124c A4000000 		.4byte	.LFE137-.LFB137
 14215 1250 01       		.uleb128 0x1
 14216 1251 9C       		.byte	0x9c
 14217 1252 AB120000 		.4byte	0x12ab
 14218 1256 0F       		.uleb128 0xf
 14219 1257 617800   		.ascii	"ax\000"
 14220 125a 01       		.byte	0x1
 14221 125b F906     		.2byte	0x6f9
 14222 125d 98110000 		.4byte	0x1198
 14223 1261 02       		.uleb128 0x2
 14224 1262 91       		.byte	0x91
 14225 1263 74       		.sleb128 -12
 14226 1264 0F       		.uleb128 0xf
 14227 1265 617900   		.ascii	"ay\000"
 14228 1268 01       		.byte	0x1
 14229 1269 F906     		.2byte	0x6f9
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 308


 14230 126b 98110000 		.4byte	0x1198
 14231 126f 02       		.uleb128 0x2
 14232 1270 91       		.byte	0x91
 14233 1271 70       		.sleb128 -16
 14234 1272 0F       		.uleb128 0xf
 14235 1273 617A00   		.ascii	"az\000"
 14236 1276 01       		.byte	0x1
 14237 1277 F906     		.2byte	0x6f9
 14238 1279 98110000 		.4byte	0x1198
 14239 127d 02       		.uleb128 0x2
 14240 127e 91       		.byte	0x91
 14241 127f 6C       		.sleb128 -20
 14242 1280 0F       		.uleb128 0xf
 14243 1281 677800   		.ascii	"gx\000"
 14244 1284 01       		.byte	0x1
 14245 1285 F906     		.2byte	0x6f9
 14246 1287 98110000 		.4byte	0x1198
 14247 128b 02       		.uleb128 0x2
 14248 128c 91       		.byte	0x91
 14249 128d 68       		.sleb128 -24
 14250 128e 0F       		.uleb128 0xf
 14251 128f 677900   		.ascii	"gy\000"
 14252 1292 01       		.byte	0x1
 14253 1293 F906     		.2byte	0x6f9
 14254 1295 98110000 		.4byte	0x1198
 14255 1299 02       		.uleb128 0x2
 14256 129a 91       		.byte	0x91
 14257 129b 00       		.sleb128 0
 14258 129c 0F       		.uleb128 0xf
 14259 129d 677A00   		.ascii	"gz\000"
 14260 12a0 01       		.byte	0x1
 14261 12a1 F906     		.2byte	0x6f9
 14262 12a3 98110000 		.4byte	0x1198
 14263 12a7 02       		.uleb128 0x2
 14264 12a8 91       		.byte	0x91
 14265 12a9 04       		.sleb128 4
 14266 12aa 00       		.byte	0
 14267 12ab 0C       		.uleb128 0xc
 14268 12ac 08180000 		.4byte	.LASF175
 14269 12b0 01       		.byte	0x1
 14270 12b1 1207     		.2byte	0x712
 14271 12b3 00000000 		.4byte	.LFB138
 14272 12b7 B8000000 		.4byte	.LFE138-.LFB138
 14273 12bb 01       		.uleb128 0x1
 14274 12bc 9C       		.byte	0x9c
 14275 12bd 23130000 		.4byte	0x1323
 14276 12c1 0F       		.uleb128 0xf
 14277 12c2 617800   		.ascii	"ax\000"
 14278 12c5 01       		.byte	0x1
 14279 12c6 1207     		.2byte	0x712
 14280 12c8 98110000 		.4byte	0x1198
 14281 12cc 02       		.uleb128 0x2
 14282 12cd 91       		.byte	0x91
 14283 12ce 74       		.sleb128 -12
 14284 12cf 0F       		.uleb128 0xf
 14285 12d0 617900   		.ascii	"ay\000"
 14286 12d3 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 309


 14287 12d4 1207     		.2byte	0x712
 14288 12d6 98110000 		.4byte	0x1198
 14289 12da 02       		.uleb128 0x2
 14290 12db 91       		.byte	0x91
 14291 12dc 70       		.sleb128 -16
 14292 12dd 0F       		.uleb128 0xf
 14293 12de 617A00   		.ascii	"az\000"
 14294 12e1 01       		.byte	0x1
 14295 12e2 1207     		.2byte	0x712
 14296 12e4 98110000 		.4byte	0x1198
 14297 12e8 02       		.uleb128 0x2
 14298 12e9 91       		.byte	0x91
 14299 12ea 6C       		.sleb128 -20
 14300 12eb 0F       		.uleb128 0xf
 14301 12ec 677800   		.ascii	"gx\000"
 14302 12ef 01       		.byte	0x1
 14303 12f0 1207     		.2byte	0x712
 14304 12f2 98110000 		.4byte	0x1198
 14305 12f6 02       		.uleb128 0x2
 14306 12f7 91       		.byte	0x91
 14307 12f8 68       		.sleb128 -24
 14308 12f9 0F       		.uleb128 0xf
 14309 12fa 677900   		.ascii	"gy\000"
 14310 12fd 01       		.byte	0x1
 14311 12fe 1207     		.2byte	0x712
 14312 1300 98110000 		.4byte	0x1198
 14313 1304 02       		.uleb128 0x2
 14314 1305 91       		.byte	0x91
 14315 1306 00       		.sleb128 0
 14316 1307 0F       		.uleb128 0xf
 14317 1308 677A00   		.ascii	"gz\000"
 14318 130b 01       		.byte	0x1
 14319 130c 1207     		.2byte	0x712
 14320 130e 98110000 		.4byte	0x1198
 14321 1312 02       		.uleb128 0x2
 14322 1313 91       		.byte	0x91
 14323 1314 04       		.sleb128 4
 14324 1315 0F       		.uleb128 0xf
 14325 1316 7400     		.ascii	"t\000"
 14326 1318 01       		.byte	0x1
 14327 1319 1207     		.2byte	0x712
 14328 131b 98110000 		.4byte	0x1198
 14329 131f 02       		.uleb128 0x2
 14330 1320 91       		.byte	0x91
 14331 1321 08       		.sleb128 8
 14332 1322 00       		.byte	0
 14333 1323 0C       		.uleb128 0xc
 14334 1324 E6000000 		.4byte	.LASF176
 14335 1328 01       		.byte	0x1
 14336 1329 4107     		.2byte	0x741
 14337 132b 00000000 		.4byte	.LFB139
 14338 132f 68000000 		.4byte	.LFE139-.LFB139
 14339 1333 01       		.uleb128 0x1
 14340 1334 9C       		.byte	0x9c
 14341 1335 61130000 		.4byte	0x1361
 14342 1339 0F       		.uleb128 0xf
 14343 133a 7800     		.ascii	"x\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 310


 14344 133c 01       		.byte	0x1
 14345 133d 4107     		.2byte	0x741
 14346 133f 98110000 		.4byte	0x1198
 14347 1343 02       		.uleb128 0x2
 14348 1344 91       		.byte	0x91
 14349 1345 74       		.sleb128 -12
 14350 1346 0F       		.uleb128 0xf
 14351 1347 7900     		.ascii	"y\000"
 14352 1349 01       		.byte	0x1
 14353 134a 4107     		.2byte	0x741
 14354 134c 98110000 		.4byte	0x1198
 14355 1350 02       		.uleb128 0x2
 14356 1351 91       		.byte	0x91
 14357 1352 70       		.sleb128 -16
 14358 1353 0F       		.uleb128 0xf
 14359 1354 7A00     		.ascii	"z\000"
 14360 1356 01       		.byte	0x1
 14361 1357 4107     		.2byte	0x741
 14362 1359 98110000 		.4byte	0x1198
 14363 135d 02       		.uleb128 0x2
 14364 135e 91       		.byte	0x91
 14365 135f 6C       		.sleb128 -20
 14366 1360 00       		.byte	0
 14367 1361 0B       		.uleb128 0xb
 14368 1362 05060000 		.4byte	.LASF177
 14369 1366 01       		.byte	0x1
 14370 1367 4C07     		.2byte	0x74c
 14371 1369 B8000000 		.4byte	0xb8
 14372 136d 00000000 		.4byte	.LFB140
 14373 1371 34000000 		.4byte	.LFE140-.LFB140
 14374 1375 01       		.uleb128 0x1
 14375 1376 9C       		.byte	0x9c
 14376 1377 0B       		.uleb128 0xb
 14377 1378 35060000 		.4byte	.LASF178
 14378 137c 01       		.byte	0x1
 14379 137d 5507     		.2byte	0x755
 14380 137f B8000000 		.4byte	0xb8
 14381 1383 00000000 		.4byte	.LFB141
 14382 1387 34000000 		.4byte	.LFE141-.LFB141
 14383 138b 01       		.uleb128 0x1
 14384 138c 9C       		.byte	0x9c
 14385 138d 0B       		.uleb128 0xb
 14386 138e 6C1B0000 		.4byte	.LASF179
 14387 1392 01       		.byte	0x1
 14388 1393 5E07     		.2byte	0x75e
 14389 1395 B8000000 		.4byte	0xb8
 14390 1399 00000000 		.4byte	.LFB142
 14391 139d 34000000 		.4byte	.LFE142-.LFB142
 14392 13a1 01       		.uleb128 0x1
 14393 13a2 9C       		.byte	0x9c
 14394 13a3 0B       		.uleb128 0xb
 14395 13a4 CB090000 		.4byte	.LASF180
 14396 13a8 01       		.byte	0x1
 14397 13a9 6907     		.2byte	0x769
 14398 13ab B8000000 		.4byte	0xb8
 14399 13af 00000000 		.4byte	.LFB143
 14400 13b3 34000000 		.4byte	.LFE143-.LFB143
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 311


 14401 13b7 01       		.uleb128 0x1
 14402 13b8 9C       		.byte	0x9c
 14403 13b9 0C       		.uleb128 0xc
 14404 13ba 19050000 		.4byte	.LASF181
 14405 13be 01       		.byte	0x1
 14406 13bf 9007     		.2byte	0x790
 14407 13c1 00000000 		.4byte	.LFB144
 14408 13c5 68000000 		.4byte	.LFE144-.LFB144
 14409 13c9 01       		.uleb128 0x1
 14410 13ca 9C       		.byte	0x9c
 14411 13cb F7130000 		.4byte	0x13f7
 14412 13cf 0F       		.uleb128 0xf
 14413 13d0 7800     		.ascii	"x\000"
 14414 13d2 01       		.byte	0x1
 14415 13d3 9007     		.2byte	0x790
 14416 13d5 98110000 		.4byte	0x1198
 14417 13d9 02       		.uleb128 0x2
 14418 13da 91       		.byte	0x91
 14419 13db 74       		.sleb128 -12
 14420 13dc 0F       		.uleb128 0xf
 14421 13dd 7900     		.ascii	"y\000"
 14422 13df 01       		.byte	0x1
 14423 13e0 9007     		.2byte	0x790
 14424 13e2 98110000 		.4byte	0x1198
 14425 13e6 02       		.uleb128 0x2
 14426 13e7 91       		.byte	0x91
 14427 13e8 70       		.sleb128 -16
 14428 13e9 0F       		.uleb128 0xf
 14429 13ea 7A00     		.ascii	"z\000"
 14430 13ec 01       		.byte	0x1
 14431 13ed 9007     		.2byte	0x790
 14432 13ef 98110000 		.4byte	0x1198
 14433 13f3 02       		.uleb128 0x2
 14434 13f4 91       		.byte	0x91
 14435 13f5 6C       		.sleb128 -20
 14436 13f6 00       		.byte	0
 14437 13f7 0B       		.uleb128 0xb
 14438 13f8 53070000 		.4byte	.LASF182
 14439 13fc 01       		.byte	0x1
 14440 13fd 9B07     		.2byte	0x79b
 14441 13ff B8000000 		.4byte	0xb8
 14442 1403 00000000 		.4byte	.LFB145
 14443 1407 34000000 		.4byte	.LFE145-.LFB145
 14444 140b 01       		.uleb128 0x1
 14445 140c 9C       		.byte	0x9c
 14446 140d 0B       		.uleb128 0xb
 14447 140e 68070000 		.4byte	.LASF183
 14448 1412 01       		.byte	0x1
 14449 1413 A407     		.2byte	0x7a4
 14450 1415 B8000000 		.4byte	0xb8
 14451 1419 00000000 		.4byte	.LFB146
 14452 141d 34000000 		.4byte	.LFE146-.LFB146
 14453 1421 01       		.uleb128 0x1
 14454 1422 9C       		.byte	0x9c
 14455 1423 0B       		.uleb128 0xb
 14456 1424 7D070000 		.4byte	.LASF184
 14457 1428 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 312


 14458 1429 AD07     		.2byte	0x7ad
 14459 142b B8000000 		.4byte	0xb8
 14460 142f 00000000 		.4byte	.LFB147
 14461 1433 34000000 		.4byte	.LFE147-.LFB147
 14462 1437 01       		.uleb128 0x1
 14463 1438 9C       		.byte	0x9c
 14464 1439 0E       		.uleb128 0xe
 14465 143a 151A0000 		.4byte	.LASF185
 14466 143e 01       		.byte	0x1
 14467 143f FE07     		.2byte	0x7fe
 14468 1441 AD000000 		.4byte	0xad
 14469 1445 00000000 		.4byte	.LFB148
 14470 1449 34000000 		.4byte	.LFE148-.LFB148
 14471 144d 01       		.uleb128 0x1
 14472 144e 9C       		.byte	0x9c
 14473 144f 63140000 		.4byte	0x1463
 14474 1453 0D       		.uleb128 0xd
 14475 1454 7E0A0000 		.4byte	.LASF186
 14476 1458 01       		.byte	0x1
 14477 1459 FE07     		.2byte	0x7fe
 14478 145b 94000000 		.4byte	0x94
 14479 145f 02       		.uleb128 0x2
 14480 1460 91       		.byte	0x91
 14481 1461 74       		.sleb128 -12
 14482 1462 00       		.byte	0
 14483 1463 0E       		.uleb128 0xe
 14484 1464 47030000 		.4byte	.LASF187
 14485 1468 01       		.byte	0x1
 14486 1469 0708     		.2byte	0x807
 14487 146b C3000000 		.4byte	0xc3
 14488 146f 00000000 		.4byte	.LFB149
 14489 1473 44000000 		.4byte	.LFE149-.LFB149
 14490 1477 01       		.uleb128 0x1
 14491 1478 9C       		.byte	0x9c
 14492 1479 8D140000 		.4byte	0x148d
 14493 147d 0D       		.uleb128 0xd
 14494 147e 7E0A0000 		.4byte	.LASF186
 14495 1482 01       		.byte	0x1
 14496 1483 0708     		.2byte	0x807
 14497 1485 94000000 		.4byte	0x94
 14498 1489 02       		.uleb128 0x2
 14499 148a 91       		.byte	0x91
 14500 148b 74       		.sleb128 -12
 14501 148c 00       		.byte	0
 14502 148d 0E       		.uleb128 0xe
 14503 148e D91B0000 		.4byte	.LASF188
 14504 1492 01       		.byte	0x1
 14505 1493 1008     		.2byte	0x810
 14506 1495 CE000000 		.4byte	0xce
 14507 1499 00000000 		.4byte	.LFB150
 14508 149d 4C000000 		.4byte	.LFE150-.LFB150
 14509 14a1 01       		.uleb128 0x1
 14510 14a2 9C       		.byte	0x9c
 14511 14a3 B7140000 		.4byte	0x14b7
 14512 14a7 0D       		.uleb128 0xd
 14513 14a8 7E0A0000 		.4byte	.LASF186
 14514 14ac 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 313


 14515 14ad 1008     		.2byte	0x810
 14516 14af 94000000 		.4byte	0x94
 14517 14b3 02       		.uleb128 0x2
 14518 14b4 91       		.byte	0x91
 14519 14b5 74       		.sleb128 -12
 14520 14b6 00       		.byte	0
 14521 14b7 0B       		.uleb128 0xb
 14522 14b8 29030000 		.4byte	.LASF189
 14523 14bc 01       		.byte	0x1
 14524 14bd 1C08     		.2byte	0x81c
 14525 14bf 34010000 		.4byte	0x134
 14526 14c3 00000000 		.4byte	.LFB151
 14527 14c7 2C000000 		.4byte	.LFE151-.LFB151
 14528 14cb 01       		.uleb128 0x1
 14529 14cc 9C       		.byte	0x9c
 14530 14cd 0B       		.uleb128 0xb
 14531 14ce 010A0000 		.4byte	.LASF190
 14532 14d2 01       		.byte	0x1
 14533 14d3 2508     		.2byte	0x825
 14534 14d5 34010000 		.4byte	0x134
 14535 14d9 00000000 		.4byte	.LFB152
 14536 14dd 2C000000 		.4byte	.LFE152-.LFB152
 14537 14e1 01       		.uleb128 0x1
 14538 14e2 9C       		.byte	0x9c
 14539 14e3 0B       		.uleb128 0xb
 14540 14e4 04080000 		.4byte	.LASF191
 14541 14e8 01       		.byte	0x1
 14542 14e9 2E08     		.2byte	0x82e
 14543 14eb 34010000 		.4byte	0x134
 14544 14ef 00000000 		.4byte	.LFB153
 14545 14f3 2C000000 		.4byte	.LFE153-.LFB153
 14546 14f7 01       		.uleb128 0x1
 14547 14f8 9C       		.byte	0x9c
 14548 14f9 0B       		.uleb128 0xb
 14549 14fa 97040000 		.4byte	.LASF192
 14550 14fe 01       		.byte	0x1
 14551 14ff 3708     		.2byte	0x837
 14552 1501 34010000 		.4byte	0x134
 14553 1505 00000000 		.4byte	.LFB154
 14554 1509 2C000000 		.4byte	.LFE154-.LFB154
 14555 150d 01       		.uleb128 0x1
 14556 150e 9C       		.byte	0x9c
 14557 150f 0B       		.uleb128 0xb
 14558 1510 8F150000 		.4byte	.LASF193
 14559 1514 01       		.byte	0x1
 14560 1515 4008     		.2byte	0x840
 14561 1517 34010000 		.4byte	0x134
 14562 151b 00000000 		.4byte	.LFB155
 14563 151f 2C000000 		.4byte	.LFE155-.LFB155
 14564 1523 01       		.uleb128 0x1
 14565 1524 9C       		.byte	0x9c
 14566 1525 0B       		.uleb128 0xb
 14567 1526 B1010000 		.4byte	.LASF194
 14568 152a 01       		.byte	0x1
 14569 152b 4908     		.2byte	0x849
 14570 152d 34010000 		.4byte	0x134
 14571 1531 00000000 		.4byte	.LFB156
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 314


 14572 1535 2C000000 		.4byte	.LFE156-.LFB156
 14573 1539 01       		.uleb128 0x1
 14574 153a 9C       		.byte	0x9c
 14575 153b 0B       		.uleb128 0xb
 14576 153c BA040000 		.4byte	.LASF195
 14577 1540 01       		.byte	0x1
 14578 1541 5208     		.2byte	0x852
 14579 1543 34010000 		.4byte	0x134
 14580 1547 00000000 		.4byte	.LFB157
 14581 154b 2C000000 		.4byte	.LFE157-.LFB157
 14582 154f 01       		.uleb128 0x1
 14583 1550 9C       		.byte	0x9c
 14584 1551 0C       		.uleb128 0xc
 14585 1552 BE130000 		.4byte	.LASF196
 14586 1556 01       		.byte	0x1
 14587 1557 6108     		.2byte	0x861
 14588 1559 00000000 		.4byte	.LFB158
 14589 155d 40000000 		.4byte	.LFE158-.LFB158
 14590 1561 01       		.uleb128 0x1
 14591 1562 9C       		.byte	0x9c
 14592 1563 86150000 		.4byte	0x1586
 14593 1567 0F       		.uleb128 0xf
 14594 1568 6E756D00 		.ascii	"num\000"
 14595 156c 01       		.byte	0x1
 14596 156d 6108     		.2byte	0x861
 14597 156f AD000000 		.4byte	0xad
 14598 1573 02       		.uleb128 0x2
 14599 1574 91       		.byte	0x91
 14600 1575 77       		.sleb128 -9
 14601 1576 0D       		.uleb128 0xd
 14602 1577 080C0000 		.4byte	.LASF113
 14603 157b 01       		.byte	0x1
 14604 157c 6108     		.2byte	0x861
 14605 157e AD000000 		.4byte	0xad
 14606 1582 02       		.uleb128 0x2
 14607 1583 91       		.byte	0x91
 14608 1584 76       		.sleb128 -10
 14609 1585 00       		.byte	0
 14610 1586 0B       		.uleb128 0xb
 14611 1587 B3150000 		.4byte	.LASF197
 14612 158b 01       		.byte	0x1
 14613 158c 7008     		.2byte	0x870
 14614 158e 34010000 		.4byte	0x134
 14615 1592 00000000 		.4byte	.LFB159
 14616 1596 2C000000 		.4byte	.LFE159-.LFB159
 14617 159a 01       		.uleb128 0x1
 14618 159b 9C       		.byte	0x9c
 14619 159c 0C       		.uleb128 0xc
 14620 159d 7C080000 		.4byte	.LASF198
 14621 15a1 01       		.byte	0x1
 14622 15a2 7A08     		.2byte	0x87a
 14623 15a4 00000000 		.4byte	.LFB160
 14624 15a8 28000000 		.4byte	.LFE160-.LFB160
 14625 15ac 01       		.uleb128 0x1
 14626 15ad 9C       		.byte	0x9c
 14627 15ae C2150000 		.4byte	0x15c2
 14628 15b2 0D       		.uleb128 0xd
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 315


 14629 15b3 43160000 		.4byte	.LASF42
 14630 15b7 01       		.byte	0x1
 14631 15b8 7A08     		.2byte	0x87a
 14632 15ba 34010000 		.4byte	0x134
 14633 15be 02       		.uleb128 0x2
 14634 15bf 91       		.byte	0x91
 14635 15c0 77       		.sleb128 -9
 14636 15c1 00       		.byte	0
 14637 15c2 0E       		.uleb128 0xe
 14638 15c3 D50E0000 		.4byte	.LASF199
 14639 15c7 01       		.byte	0x1
 14640 15c8 8F08     		.2byte	0x88f
 14641 15ca 34010000 		.4byte	0x134
 14642 15ce 00000000 		.4byte	.LFB161
 14643 15d2 44000000 		.4byte	.LFE161-.LFB161
 14644 15d6 01       		.uleb128 0x1
 14645 15d7 9C       		.byte	0x9c
 14646 15d8 EC150000 		.4byte	0x15ec
 14647 15dc 0F       		.uleb128 0xf
 14648 15dd 6E756D00 		.ascii	"num\000"
 14649 15e1 01       		.byte	0x1
 14650 15e2 8F08     		.2byte	0x88f
 14651 15e4 AD000000 		.4byte	0xad
 14652 15e8 02       		.uleb128 0x2
 14653 15e9 91       		.byte	0x91
 14654 15ea 77       		.sleb128 -9
 14655 15eb 00       		.byte	0
 14656 15ec 0C       		.uleb128 0xc
 14657 15ed 6B0F0000 		.4byte	.LASF200
 14658 15f1 01       		.byte	0x1
 14659 15f2 9B08     		.2byte	0x89b
 14660 15f4 00000000 		.4byte	.LFB162
 14661 15f8 30000000 		.4byte	.LFE162-.LFB162
 14662 15fc 01       		.uleb128 0x1
 14663 15fd 9C       		.byte	0x9c
 14664 15fe 21160000 		.4byte	0x1621
 14665 1602 0F       		.uleb128 0xf
 14666 1603 6E756D00 		.ascii	"num\000"
 14667 1607 01       		.byte	0x1
 14668 1608 9B08     		.2byte	0x89b
 14669 160a AD000000 		.4byte	0xad
 14670 160e 02       		.uleb128 0x2
 14671 160f 91       		.byte	0x91
 14672 1610 77       		.sleb128 -9
 14673 1611 0D       		.uleb128 0xd
 14674 1612 43160000 		.4byte	.LASF42
 14675 1616 01       		.byte	0x1
 14676 1617 9B08     		.2byte	0x89b
 14677 1619 34010000 		.4byte	0x134
 14678 161d 02       		.uleb128 0x2
 14679 161e 91       		.byte	0x91
 14680 161f 76       		.sleb128 -10
 14681 1620 00       		.byte	0
 14682 1621 11       		.uleb128 0x11
 14683 1622 1B090000 		.4byte	.LASF201
 14684 1626 01       		.byte	0x1
 14685 1627 A708     		.2byte	0x8a7
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 316


 14686 1629 00000000 		.4byte	.LFB163
 14687 162d 1C000000 		.4byte	.LFE163-.LFB163
 14688 1631 01       		.uleb128 0x1
 14689 1632 9C       		.byte	0x9c
 14690 1633 11       		.uleb128 0x11
 14691 1634 3B1E0000 		.4byte	.LASF202
 14692 1638 01       		.byte	0x1
 14693 1639 B008     		.2byte	0x8b0
 14694 163b 00000000 		.4byte	.LFB164
 14695 163f 1C000000 		.4byte	.LFE164-.LFB164
 14696 1643 01       		.uleb128 0x1
 14697 1644 9C       		.byte	0x9c
 14698 1645 11       		.uleb128 0x11
 14699 1646 E61C0000 		.4byte	.LASF203
 14700 164a 01       		.byte	0x1
 14701 164b B908     		.2byte	0x8b9
 14702 164d 00000000 		.4byte	.LFB165
 14703 1651 1C000000 		.4byte	.LFE165-.LFB165
 14704 1655 01       		.uleb128 0x1
 14705 1656 9C       		.byte	0x9c
 14706 1657 0B       		.uleb128 0xb
 14707 1658 941C0000 		.4byte	.LASF204
 14708 165c 01       		.byte	0x1
 14709 165d CD08     		.2byte	0x8cd
 14710 165f AD000000 		.4byte	0xad
 14711 1663 00000000 		.4byte	.LFB166
 14712 1667 2C000000 		.4byte	.LFE166-.LFB166
 14713 166b 01       		.uleb128 0x1
 14714 166c 9C       		.byte	0x9c
 14715 166d 0C       		.uleb128 0xc
 14716 166e C90D0000 		.4byte	.LASF205
 14717 1672 01       		.byte	0x1
 14718 1673 D708     		.2byte	0x8d7
 14719 1675 00000000 		.4byte	.LFB167
 14720 1679 2C000000 		.4byte	.LFE167-.LFB167
 14721 167d 01       		.uleb128 0x1
 14722 167e 9C       		.byte	0x9c
 14723 167f 93160000 		.4byte	0x1693
 14724 1683 0D       		.uleb128 0xd
 14725 1684 29140000 		.4byte	.LASF122
 14726 1688 01       		.byte	0x1
 14727 1689 D708     		.2byte	0x8d7
 14728 168b AD000000 		.4byte	0xad
 14729 168f 02       		.uleb128 0x2
 14730 1690 91       		.byte	0x91
 14731 1691 77       		.sleb128 -9
 14732 1692 00       		.byte	0
 14733 1693 0B       		.uleb128 0xb
 14734 1694 B91C0000 		.4byte	.LASF206
 14735 1698 01       		.byte	0x1
 14736 1699 F408     		.2byte	0x8f4
 14737 169b AD000000 		.4byte	0xad
 14738 169f 00000000 		.4byte	.LFB168
 14739 16a3 2C000000 		.4byte	.LFE168-.LFB168
 14740 16a7 01       		.uleb128 0x1
 14741 16a8 9C       		.byte	0x9c
 14742 16a9 0C       		.uleb128 0xc
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 317


 14743 16aa DF0A0000 		.4byte	.LASF207
 14744 16ae 01       		.byte	0x1
 14745 16af FE08     		.2byte	0x8fe
 14746 16b1 00000000 		.4byte	.LFB169
 14747 16b5 2C000000 		.4byte	.LFE169-.LFB169
 14748 16b9 01       		.uleb128 0x1
 14749 16ba 9C       		.byte	0x9c
 14750 16bb CF160000 		.4byte	0x16cf
 14751 16bf 0D       		.uleb128 0xd
 14752 16c0 AE0B0000 		.4byte	.LASF208
 14753 16c4 01       		.byte	0x1
 14754 16c5 FE08     		.2byte	0x8fe
 14755 16c7 AD000000 		.4byte	0xad
 14756 16cb 02       		.uleb128 0x2
 14757 16cc 91       		.byte	0x91
 14758 16cd 77       		.sleb128 -9
 14759 16ce 00       		.byte	0
 14760 16cf 0B       		.uleb128 0xb
 14761 16d0 0A0E0000 		.4byte	.LASF209
 14762 16d4 01       		.byte	0x1
 14763 16d5 1809     		.2byte	0x918
 14764 16d7 AD000000 		.4byte	0xad
 14765 16db 00000000 		.4byte	.LFB170
 14766 16df 2C000000 		.4byte	.LFE170-.LFB170
 14767 16e3 01       		.uleb128 0x1
 14768 16e4 9C       		.byte	0x9c
 14769 16e5 0C       		.uleb128 0xc
 14770 16e6 B80B0000 		.4byte	.LASF210
 14771 16ea 01       		.byte	0x1
 14772 16eb 2209     		.2byte	0x922
 14773 16ed 00000000 		.4byte	.LFB171
 14774 16f1 2C000000 		.4byte	.LFE171-.LFB171
 14775 16f5 01       		.uleb128 0x1
 14776 16f6 9C       		.byte	0x9c
 14777 16f7 0B170000 		.4byte	0x170b
 14778 16fb 0D       		.uleb128 0xd
 14779 16fc AE0B0000 		.4byte	.LASF208
 14780 1700 01       		.byte	0x1
 14781 1701 2209     		.2byte	0x922
 14782 1703 AD000000 		.4byte	0xad
 14783 1707 02       		.uleb128 0x2
 14784 1708 91       		.byte	0x91
 14785 1709 77       		.sleb128 -9
 14786 170a 00       		.byte	0
 14787 170b 0B       		.uleb128 0xb
 14788 170c 1E060000 		.4byte	.LASF211
 14789 1710 01       		.byte	0x1
 14790 1711 3009     		.2byte	0x930
 14791 1713 34010000 		.4byte	0x134
 14792 1717 00000000 		.4byte	.LFB172
 14793 171b 2C000000 		.4byte	.LFE172-.LFB172
 14794 171f 01       		.uleb128 0x1
 14795 1720 9C       		.byte	0x9c
 14796 1721 0C       		.uleb128 0xc
 14797 1722 E4100000 		.4byte	.LASF212
 14798 1726 01       		.byte	0x1
 14799 1727 3A09     		.2byte	0x93a
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 318


 14800 1729 00000000 		.4byte	.LFB173
 14801 172d 28000000 		.4byte	.LFE173-.LFB173
 14802 1731 01       		.uleb128 0x1
 14803 1732 9C       		.byte	0x9c
 14804 1733 47170000 		.4byte	0x1747
 14805 1737 0D       		.uleb128 0xd
 14806 1738 43160000 		.4byte	.LASF42
 14807 173c 01       		.byte	0x1
 14808 173d 3A09     		.2byte	0x93a
 14809 173f 34010000 		.4byte	0x134
 14810 1743 02       		.uleb128 0x2
 14811 1744 91       		.byte	0x91
 14812 1745 77       		.sleb128 -9
 14813 1746 00       		.byte	0
 14814 1747 0B       		.uleb128 0xb
 14815 1748 EC020000 		.4byte	.LASF213
 14816 174c 01       		.byte	0x1
 14817 174d 4809     		.2byte	0x948
 14818 174f 34010000 		.4byte	0x134
 14819 1753 00000000 		.4byte	.LFB174
 14820 1757 2C000000 		.4byte	.LFE174-.LFB174
 14821 175b 01       		.uleb128 0x1
 14822 175c 9C       		.byte	0x9c
 14823 175d 0C       		.uleb128 0xc
 14824 175e 16010000 		.4byte	.LASF214
 14825 1762 01       		.byte	0x1
 14826 1763 5209     		.2byte	0x952
 14827 1765 00000000 		.4byte	.LFB175
 14828 1769 28000000 		.4byte	.LFE175-.LFB175
 14829 176d 01       		.uleb128 0x1
 14830 176e 9C       		.byte	0x9c
 14831 176f 83170000 		.4byte	0x1783
 14832 1773 0D       		.uleb128 0xd
 14833 1774 43160000 		.4byte	.LASF42
 14834 1778 01       		.byte	0x1
 14835 1779 5209     		.2byte	0x952
 14836 177b 34010000 		.4byte	0x134
 14837 177f 02       		.uleb128 0x2
 14838 1780 91       		.byte	0x91
 14839 1781 77       		.sleb128 -9
 14840 1782 00       		.byte	0
 14841 1783 0C       		.uleb128 0xc
 14842 1784 F3030000 		.4byte	.LASF215
 14843 1788 01       		.byte	0x1
 14844 1789 5909     		.2byte	0x959
 14845 178b 00000000 		.4byte	.LFB176
 14846 178f 28000000 		.4byte	.LFE176-.LFB176
 14847 1793 01       		.uleb128 0x1
 14848 1794 9C       		.byte	0x9c
 14849 1795 A9170000 		.4byte	0x17a9
 14850 1799 0D       		.uleb128 0xd
 14851 179a 43160000 		.4byte	.LASF42
 14852 179e 01       		.byte	0x1
 14853 179f 5909     		.2byte	0x959
 14854 17a1 34010000 		.4byte	0x134
 14855 17a5 02       		.uleb128 0x2
 14856 17a6 91       		.byte	0x91
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 319


 14857 17a7 77       		.sleb128 -9
 14858 17a8 00       		.byte	0
 14859 17a9 11       		.uleb128 0x11
 14860 17aa 971E0000 		.4byte	.LASF216
 14861 17ae 01       		.byte	0x1
 14862 17af 6209     		.2byte	0x962
 14863 17b1 00000000 		.4byte	.LFB177
 14864 17b5 1C000000 		.4byte	.LFE177-.LFB177
 14865 17b9 01       		.uleb128 0x1
 14866 17ba 9C       		.byte	0x9c
 14867 17bb 11       		.uleb128 0x11
 14868 17bc 3D090000 		.4byte	.LASF217
 14869 17c0 01       		.byte	0x1
 14870 17c1 6B09     		.2byte	0x96b
 14871 17c3 00000000 		.4byte	.LFB178
 14872 17c7 1C000000 		.4byte	.LFE178-.LFB178
 14873 17cb 01       		.uleb128 0x1
 14874 17cc 9C       		.byte	0x9c
 14875 17cd 11       		.uleb128 0x11
 14876 17ce 73010000 		.4byte	.LASF218
 14877 17d2 01       		.byte	0x1
 14878 17d3 7A09     		.2byte	0x97a
 14879 17d5 00000000 		.4byte	.LFB179
 14880 17d9 1C000000 		.4byte	.LFE179-.LFB179
 14881 17dd 01       		.uleb128 0x1
 14882 17de 9C       		.byte	0x9c
 14883 17df 11       		.uleb128 0x11
 14884 17e0 A3010000 		.4byte	.LASF219
 14885 17e4 01       		.byte	0x1
 14886 17e5 8509     		.2byte	0x985
 14887 17e7 00000000 		.4byte	.LFB180
 14888 17eb 1C000000 		.4byte	.LFE180-.LFB180
 14889 17ef 01       		.uleb128 0x1
 14890 17f0 9C       		.byte	0x9c
 14891 17f1 0B       		.uleb128 0xb
 14892 17f2 0D0C0000 		.4byte	.LASF220
 14893 17f6 01       		.byte	0x1
 14894 17f7 9409     		.2byte	0x994
 14895 17f9 34010000 		.4byte	0x134
 14896 17fd 00000000 		.4byte	.LFB181
 14897 1801 2C000000 		.4byte	.LFE181-.LFB181
 14898 1805 01       		.uleb128 0x1
 14899 1806 9C       		.byte	0x9c
 14900 1807 0C       		.uleb128 0xc
 14901 1808 96190000 		.4byte	.LASF221
 14902 180c 01       		.byte	0x1
 14903 180d 9E09     		.2byte	0x99e
 14904 180f 00000000 		.4byte	.LFB182
 14905 1813 28000000 		.4byte	.LFE182-.LFB182
 14906 1817 01       		.uleb128 0x1
 14907 1818 9C       		.byte	0x9c
 14908 1819 2D180000 		.4byte	0x182d
 14909 181d 0D       		.uleb128 0xd
 14910 181e 43160000 		.4byte	.LASF42
 14911 1822 01       		.byte	0x1
 14912 1823 9E09     		.2byte	0x99e
 14913 1825 34010000 		.4byte	0x134
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 320


 14914 1829 02       		.uleb128 0x2
 14915 182a 91       		.byte	0x91
 14916 182b 77       		.sleb128 -9
 14917 182c 00       		.byte	0
 14918 182d 0B       		.uleb128 0xb
 14919 182e 57010000 		.4byte	.LASF222
 14920 1832 01       		.byte	0x1
 14921 1833 A909     		.2byte	0x9a9
 14922 1835 34010000 		.4byte	0x134
 14923 1839 00000000 		.4byte	.LFB183
 14924 183d 2C000000 		.4byte	.LFE183-.LFB183
 14925 1841 01       		.uleb128 0x1
 14926 1842 9C       		.byte	0x9c
 14927 1843 0C       		.uleb128 0xc
 14928 1844 4F190000 		.4byte	.LASF223
 14929 1848 01       		.byte	0x1
 14930 1849 B309     		.2byte	0x9b3
 14931 184b 00000000 		.4byte	.LFB184
 14932 184f 28000000 		.4byte	.LFE184-.LFB184
 14933 1853 01       		.uleb128 0x1
 14934 1854 9C       		.byte	0x9c
 14935 1855 69180000 		.4byte	0x1869
 14936 1859 0D       		.uleb128 0xd
 14937 185a 43160000 		.4byte	.LASF42
 14938 185e 01       		.byte	0x1
 14939 185f B309     		.2byte	0x9b3
 14940 1861 34010000 		.4byte	0x134
 14941 1865 02       		.uleb128 0x2
 14942 1866 91       		.byte	0x91
 14943 1867 77       		.sleb128 -9
 14944 1868 00       		.byte	0
 14945 1869 0B       		.uleb128 0xb
 14946 186a C9000000 		.4byte	.LASF224
 14947 186e 01       		.byte	0x1
 14948 186f C109     		.2byte	0x9c1
 14949 1871 34010000 		.4byte	0x134
 14950 1875 00000000 		.4byte	.LFB185
 14951 1879 2C000000 		.4byte	.LFE185-.LFB185
 14952 187d 01       		.uleb128 0x1
 14953 187e 9C       		.byte	0x9c
 14954 187f 0C       		.uleb128 0xc
 14955 1880 08170000 		.4byte	.LASF225
 14956 1884 01       		.byte	0x1
 14957 1885 CF09     		.2byte	0x9cf
 14958 1887 00000000 		.4byte	.LFB186
 14959 188b 30000000 		.4byte	.LFE186-.LFB186
 14960 188f 01       		.uleb128 0x1
 14961 1890 9C       		.byte	0x9c
 14962 1891 A5180000 		.4byte	0x18a5
 14963 1895 0D       		.uleb128 0xd
 14964 1896 43160000 		.4byte	.LASF42
 14965 189a 01       		.byte	0x1
 14966 189b CF09     		.2byte	0x9cf
 14967 189d 34010000 		.4byte	0x134
 14968 18a1 02       		.uleb128 0x2
 14969 18a2 91       		.byte	0x91
 14970 18a3 77       		.sleb128 -9
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 321


 14971 18a4 00       		.byte	0
 14972 18a5 0B       		.uleb128 0xb
 14973 18a6 8E030000 		.4byte	.LASF226
 14974 18aa 01       		.byte	0x1
 14975 18ab D909     		.2byte	0x9d9
 14976 18ad AD000000 		.4byte	0xad
 14977 18b1 00000000 		.4byte	.LFB187
 14978 18b5 2C000000 		.4byte	.LFE187-.LFB187
 14979 18b9 01       		.uleb128 0x1
 14980 18ba 9C       		.byte	0x9c
 14981 18bb 0C       		.uleb128 0xc
 14982 18bc 7D1C0000 		.4byte	.LASF227
 14983 18c0 01       		.byte	0x1
 14984 18c1 FB09     		.2byte	0x9fb
 14985 18c3 00000000 		.4byte	.LFB188
 14986 18c7 2C000000 		.4byte	.LFE188-.LFB188
 14987 18cb 01       		.uleb128 0x1
 14988 18cc 9C       		.byte	0x9c
 14989 18cd E1180000 		.4byte	0x18e1
 14990 18d1 0D       		.uleb128 0xd
 14991 18d2 540F0000 		.4byte	.LASF228
 14992 18d6 01       		.byte	0x1
 14993 18d7 FB09     		.2byte	0x9fb
 14994 18d9 AD000000 		.4byte	0xad
 14995 18dd 02       		.uleb128 0x2
 14996 18de 91       		.byte	0x91
 14997 18df 77       		.sleb128 -9
 14998 18e0 00       		.byte	0
 14999 18e1 0B       		.uleb128 0xb
 15000 18e2 E0190000 		.4byte	.LASF229
 15001 18e6 01       		.byte	0x1
 15002 18e7 180A     		.2byte	0xa18
 15003 18e9 AD000000 		.4byte	0xad
 15004 18ed 00000000 		.4byte	.LFB189
 15005 18f1 2C000000 		.4byte	.LFE189-.LFB189
 15006 18f5 01       		.uleb128 0x1
 15007 18f6 9C       		.byte	0x9c
 15008 18f7 0C       		.uleb128 0xc
 15009 18f8 B0000000 		.4byte	.LASF230
 15010 18fc 01       		.byte	0x1
 15011 18fd 200A     		.2byte	0xa20
 15012 18ff 00000000 		.4byte	.LFB190
 15013 1903 2C000000 		.4byte	.LFE190-.LFB190
 15014 1907 01       		.uleb128 0x1
 15015 1908 9C       		.byte	0x9c
 15016 1909 1D190000 		.4byte	0x191d
 15017 190d 0D       		.uleb128 0xd
 15018 190e AE030000 		.4byte	.LASF231
 15019 1912 01       		.byte	0x1
 15020 1913 200A     		.2byte	0xa20
 15021 1915 AD000000 		.4byte	0xad
 15022 1919 02       		.uleb128 0x2
 15023 191a 91       		.byte	0x91
 15024 191b 77       		.sleb128 -9
 15025 191c 00       		.byte	0
 15026 191d 0B       		.uleb128 0xb
 15027 191e F6120000 		.4byte	.LASF232
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 322


 15028 1922 01       		.byte	0x1
 15029 1923 2A0A     		.2byte	0xa2a
 15030 1925 34010000 		.4byte	0x134
 15031 1929 00000000 		.4byte	.LFB191
 15032 192d 2C000000 		.4byte	.LFE191-.LFB191
 15033 1931 01       		.uleb128 0x1
 15034 1932 9C       		.byte	0x9c
 15035 1933 0C       		.uleb128 0xc
 15036 1934 4F0D0000 		.4byte	.LASF233
 15037 1938 01       		.byte	0x1
 15038 1939 340A     		.2byte	0xa34
 15039 193b 00000000 		.4byte	.LFB192
 15040 193f 28000000 		.4byte	.LFE192-.LFB192
 15041 1943 01       		.uleb128 0x1
 15042 1944 9C       		.byte	0x9c
 15043 1945 59190000 		.4byte	0x1959
 15044 1949 0D       		.uleb128 0xd
 15045 194a 43160000 		.4byte	.LASF42
 15046 194e 01       		.byte	0x1
 15047 194f 340A     		.2byte	0xa34
 15048 1951 34010000 		.4byte	0x134
 15049 1955 02       		.uleb128 0x2
 15050 1956 91       		.byte	0x91
 15051 1957 77       		.sleb128 -9
 15052 1958 00       		.byte	0
 15053 1959 0B       		.uleb128 0xb
 15054 195a FB080000 		.4byte	.LASF234
 15055 195e 01       		.byte	0x1
 15056 195f 3D0A     		.2byte	0xa3d
 15057 1961 34010000 		.4byte	0x134
 15058 1965 00000000 		.4byte	.LFB193
 15059 1969 2C000000 		.4byte	.LFE193-.LFB193
 15060 196d 01       		.uleb128 0x1
 15061 196e 9C       		.byte	0x9c
 15062 196f 0C       		.uleb128 0xc
 15063 1970 53020000 		.4byte	.LASF235
 15064 1974 01       		.byte	0x1
 15065 1975 470A     		.2byte	0xa47
 15066 1977 00000000 		.4byte	.LFB194
 15067 197b 28000000 		.4byte	.LFE194-.LFB194
 15068 197f 01       		.uleb128 0x1
 15069 1980 9C       		.byte	0x9c
 15070 1981 95190000 		.4byte	0x1995
 15071 1985 0D       		.uleb128 0xd
 15072 1986 43160000 		.4byte	.LASF42
 15073 198a 01       		.byte	0x1
 15074 198b 470A     		.2byte	0xa47
 15075 198d 34010000 		.4byte	0x134
 15076 1991 02       		.uleb128 0x2
 15077 1992 91       		.byte	0x91
 15078 1993 77       		.sleb128 -9
 15079 1994 00       		.byte	0
 15080 1995 0B       		.uleb128 0xb
 15081 1996 10110000 		.4byte	.LASF236
 15082 199a 01       		.byte	0x1
 15083 199b 500A     		.2byte	0xa50
 15084 199d 34010000 		.4byte	0x134
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 323


 15085 19a1 00000000 		.4byte	.LFB195
 15086 19a5 2C000000 		.4byte	.LFE195-.LFB195
 15087 19a9 01       		.uleb128 0x1
 15088 19aa 9C       		.byte	0x9c
 15089 19ab 0C       		.uleb128 0xc
 15090 19ac 980C0000 		.4byte	.LASF237
 15091 19b0 01       		.byte	0x1
 15092 19b1 5A0A     		.2byte	0xa5a
 15093 19b3 00000000 		.4byte	.LFB196
 15094 19b7 28000000 		.4byte	.LFE196-.LFB196
 15095 19bb 01       		.uleb128 0x1
 15096 19bc 9C       		.byte	0x9c
 15097 19bd D1190000 		.4byte	0x19d1
 15098 19c1 0D       		.uleb128 0xd
 15099 19c2 43160000 		.4byte	.LASF42
 15100 19c6 01       		.byte	0x1
 15101 19c7 5A0A     		.2byte	0xa5a
 15102 19c9 34010000 		.4byte	0x134
 15103 19cd 02       		.uleb128 0x2
 15104 19ce 91       		.byte	0x91
 15105 19cf 77       		.sleb128 -9
 15106 19d0 00       		.byte	0
 15107 19d1 0B       		.uleb128 0xb
 15108 19d2 C5100000 		.4byte	.LASF238
 15109 19d6 01       		.byte	0x1
 15110 19d7 630A     		.2byte	0xa63
 15111 19d9 34010000 		.4byte	0x134
 15112 19dd 00000000 		.4byte	.LFB197
 15113 19e1 2C000000 		.4byte	.LFE197-.LFB197
 15114 19e5 01       		.uleb128 0x1
 15115 19e6 9C       		.byte	0x9c
 15116 19e7 0C       		.uleb128 0xc
 15117 19e8 48040000 		.4byte	.LASF239
 15118 19ec 01       		.byte	0x1
 15119 19ed 6D0A     		.2byte	0xa6d
 15120 19ef 00000000 		.4byte	.LFB198
 15121 19f3 28000000 		.4byte	.LFE198-.LFB198
 15122 19f7 01       		.uleb128 0x1
 15123 19f8 9C       		.byte	0x9c
 15124 19f9 0D1A0000 		.4byte	0x1a0d
 15125 19fd 0D       		.uleb128 0xd
 15126 19fe 43160000 		.4byte	.LASF42
 15127 1a02 01       		.byte	0x1
 15128 1a03 6D0A     		.2byte	0xa6d
 15129 1a05 34010000 		.4byte	0x134
 15130 1a09 02       		.uleb128 0x2
 15131 1a0a 91       		.byte	0x91
 15132 1a0b 77       		.sleb128 -9
 15133 1a0c 00       		.byte	0
 15134 1a0d 0B       		.uleb128 0xb
 15135 1a0e 840E0000 		.4byte	.LASF240
 15136 1a12 01       		.byte	0x1
 15137 1a13 760A     		.2byte	0xa76
 15138 1a15 34010000 		.4byte	0x134
 15139 1a19 00000000 		.4byte	.LFB199
 15140 1a1d 2C000000 		.4byte	.LFE199-.LFB199
 15141 1a21 01       		.uleb128 0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 324


 15142 1a22 9C       		.byte	0x9c
 15143 1a23 0C       		.uleb128 0xc
 15144 1a24 C3070000 		.4byte	.LASF241
 15145 1a28 01       		.byte	0x1
 15146 1a29 800A     		.2byte	0xa80
 15147 1a2b 00000000 		.4byte	.LFB200
 15148 1a2f 28000000 		.4byte	.LFE200-.LFB200
 15149 1a33 01       		.uleb128 0x1
 15150 1a34 9C       		.byte	0x9c
 15151 1a35 491A0000 		.4byte	0x1a49
 15152 1a39 0D       		.uleb128 0xd
 15153 1a3a 43160000 		.4byte	.LASF42
 15154 1a3e 01       		.byte	0x1
 15155 1a3f 800A     		.2byte	0xa80
 15156 1a41 34010000 		.4byte	0x134
 15157 1a45 02       		.uleb128 0x2
 15158 1a46 91       		.byte	0x91
 15159 1a47 77       		.sleb128 -9
 15160 1a48 00       		.byte	0
 15161 1a49 0B       		.uleb128 0xb
 15162 1a4a E30B0000 		.4byte	.LASF242
 15163 1a4e 01       		.byte	0x1
 15164 1a4f 890A     		.2byte	0xa89
 15165 1a51 34010000 		.4byte	0x134
 15166 1a55 00000000 		.4byte	.LFB201
 15167 1a59 2C000000 		.4byte	.LFE201-.LFB201
 15168 1a5d 01       		.uleb128 0x1
 15169 1a5e 9C       		.byte	0x9c
 15170 1a5f 0C       		.uleb128 0xc
 15171 1a60 C1120000 		.4byte	.LASF243
 15172 1a64 01       		.byte	0x1
 15173 1a65 930A     		.2byte	0xa93
 15174 1a67 00000000 		.4byte	.LFB202
 15175 1a6b 28000000 		.4byte	.LFE202-.LFB202
 15176 1a6f 01       		.uleb128 0x1
 15177 1a70 9C       		.byte	0x9c
 15178 1a71 851A0000 		.4byte	0x1a85
 15179 1a75 0D       		.uleb128 0xd
 15180 1a76 43160000 		.4byte	.LASF42
 15181 1a7a 01       		.byte	0x1
 15182 1a7b 930A     		.2byte	0xa93
 15183 1a7d 34010000 		.4byte	0x134
 15184 1a81 02       		.uleb128 0x2
 15185 1a82 91       		.byte	0x91
 15186 1a83 77       		.sleb128 -9
 15187 1a84 00       		.byte	0
 15188 1a85 0B       		.uleb128 0xb
 15189 1a86 F6130000 		.4byte	.LASF244
 15190 1a8a 01       		.byte	0x1
 15191 1a8b A00A     		.2byte	0xaa0
 15192 1a8d C3000000 		.4byte	0xc3
 15193 1a91 00000000 		.4byte	.LFB203
 15194 1a95 34000000 		.4byte	.LFE203-.LFB203
 15195 1a99 01       		.uleb128 0x1
 15196 1a9a 9C       		.byte	0x9c
 15197 1a9b 0B       		.uleb128 0xb
 15198 1a9c 70160000 		.4byte	.LASF245
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 325


 15199 1aa0 01       		.byte	0x1
 15200 1aa1 C00A     		.2byte	0xac0
 15201 1aa3 AD000000 		.4byte	0xad
 15202 1aa7 00000000 		.4byte	.LFB204
 15203 1aab 28000000 		.4byte	.LFE204-.LFB204
 15204 1aaf 01       		.uleb128 0x1
 15205 1ab0 9C       		.byte	0x9c
 15206 1ab1 0C       		.uleb128 0xc
 15207 1ab2 7A150000 		.4byte	.LASF246
 15208 1ab6 01       		.byte	0x1
 15209 1ab7 C40A     		.2byte	0xac4
 15210 1ab9 00000000 		.4byte	.LFB205
 15211 1abd 2C000000 		.4byte	.LFE205-.LFB205
 15212 1ac1 01       		.uleb128 0x1
 15213 1ac2 9C       		.byte	0x9c
 15214 1ac3 E61A0000 		.4byte	0x1ae6
 15215 1ac7 0D       		.uleb128 0xd
 15216 1ac8 080C0000 		.4byte	.LASF113
 15217 1acc 01       		.byte	0x1
 15218 1acd C40A     		.2byte	0xac4
 15219 1acf E61A0000 		.4byte	0x1ae6
 15220 1ad3 02       		.uleb128 0x2
 15221 1ad4 91       		.byte	0x91
 15222 1ad5 74       		.sleb128 -12
 15223 1ad6 0D       		.uleb128 0xd
 15224 1ad7 84160000 		.4byte	.LASF107
 15225 1adb 01       		.byte	0x1
 15226 1adc C40A     		.2byte	0xac4
 15227 1ade AD000000 		.4byte	0xad
 15228 1ae2 02       		.uleb128 0x2
 15229 1ae3 91       		.byte	0x91
 15230 1ae4 73       		.sleb128 -13
 15231 1ae5 00       		.byte	0
 15232 1ae6 10       		.uleb128 0x10
 15233 1ae7 04       		.byte	0x4
 15234 1ae8 AD000000 		.4byte	0xad
 15235 1aec 0C       		.uleb128 0xc
 15236 1aed 82190000 		.4byte	.LASF247
 15237 1af1 01       		.byte	0x1
 15238 1af2 CB0A     		.2byte	0xacb
 15239 1af4 00000000 		.4byte	.LFB206
 15240 1af8 28000000 		.4byte	.LFE206-.LFB206
 15241 1afc 01       		.uleb128 0x1
 15242 1afd 9C       		.byte	0x9c
 15243 1afe 121B0000 		.4byte	0x1b12
 15244 1b02 0D       		.uleb128 0xd
 15245 1b03 080C0000 		.4byte	.LASF113
 15246 1b07 01       		.byte	0x1
 15247 1b08 CB0A     		.2byte	0xacb
 15248 1b0a AD000000 		.4byte	0xad
 15249 1b0e 02       		.uleb128 0x2
 15250 1b0f 91       		.byte	0x91
 15251 1b10 77       		.sleb128 -9
 15252 1b11 00       		.byte	0
 15253 1b12 0B       		.uleb128 0xb
 15254 1b13 8F0D0000 		.4byte	.LASF248
 15255 1b17 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 326


 15256 1b18 D80A     		.2byte	0xad8
 15257 1b1a AD000000 		.4byte	0xad
 15258 1b1e 00000000 		.4byte	.LFB207
 15259 1b22 2C000000 		.4byte	.LFE207-.LFB207
 15260 1b26 01       		.uleb128 0x1
 15261 1b27 9C       		.byte	0x9c
 15262 1b28 0C       		.uleb128 0xc
 15263 1b29 B6050000 		.4byte	.LASF249
 15264 1b2d 01       		.byte	0x1
 15265 1b2e E50A     		.2byte	0xae5
 15266 1b30 00000000 		.4byte	.LFB208
 15267 1b34 2C000000 		.4byte	.LFE208-.LFB208
 15268 1b38 01       		.uleb128 0x1
 15269 1b39 9C       		.byte	0x9c
 15270 1b3a 4D1B0000 		.4byte	0x1b4d
 15271 1b3e 0F       		.uleb128 0xf
 15272 1b3f 696400   		.ascii	"id\000"
 15273 1b42 01       		.byte	0x1
 15274 1b43 E50A     		.2byte	0xae5
 15275 1b45 AD000000 		.4byte	0xad
 15276 1b49 02       		.uleb128 0x2
 15277 1b4a 91       		.byte	0x91
 15278 1b4b 77       		.sleb128 -9
 15279 1b4c 00       		.byte	0
 15280 1b4d 0B       		.uleb128 0xb
 15281 1b4e 0C0B0000 		.4byte	.LASF250
 15282 1b52 01       		.byte	0x1
 15283 1b53 ED0A     		.2byte	0xaed
 15284 1b55 AD000000 		.4byte	0xad
 15285 1b59 00000000 		.4byte	.LFB209
 15286 1b5d 28000000 		.4byte	.LFE209-.LFB209
 15287 1b61 01       		.uleb128 0x1
 15288 1b62 9C       		.byte	0x9c
 15289 1b63 0C       		.uleb128 0xc
 15290 1b64 66180000 		.4byte	.LASF251
 15291 1b68 01       		.byte	0x1
 15292 1b69 F10A     		.2byte	0xaf1
 15293 1b6b 00000000 		.4byte	.LFB210
 15294 1b6f 28000000 		.4byte	.LFE210-.LFB210
 15295 1b73 01       		.uleb128 0x1
 15296 1b74 9C       		.byte	0x9c
 15297 1b75 891B0000 		.4byte	0x1b89
 15298 1b79 0D       		.uleb128 0xd
 15299 1b7a 43160000 		.4byte	.LASF42
 15300 1b7e 01       		.byte	0x1
 15301 1b7f F10A     		.2byte	0xaf1
 15302 1b81 34010000 		.4byte	0x134
 15303 1b85 02       		.uleb128 0x2
 15304 1b86 91       		.byte	0x91
 15305 1b87 77       		.sleb128 -9
 15306 1b88 00       		.byte	0
 15307 1b89 0B       		.uleb128 0xb
 15308 1b8a F1170000 		.4byte	.LASF252
 15309 1b8e 01       		.byte	0x1
 15310 1b8f F40A     		.2byte	0xaf4
 15311 1b91 A2000000 		.4byte	0xa2
 15312 1b95 00000000 		.4byte	.LFB211
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 327


 15313 1b99 30000000 		.4byte	.LFE211-.LFB211
 15314 1b9d 01       		.uleb128 0x1
 15315 1b9e 9C       		.byte	0x9c
 15316 1b9f 0C       		.uleb128 0xc
 15317 1ba0 6B190000 		.4byte	.LASF253
 15318 1ba4 01       		.byte	0x1
 15319 1ba5 F80A     		.2byte	0xaf8
 15320 1ba7 00000000 		.4byte	.LFB212
 15321 1bab 2C000000 		.4byte	.LFE212-.LFB212
 15322 1baf 01       		.uleb128 0x1
 15323 1bb0 9C       		.byte	0x9c
 15324 1bb1 C51B0000 		.4byte	0x1bc5
 15325 1bb5 0D       		.uleb128 0xd
 15326 1bb6 36090000 		.4byte	.LASF254
 15327 1bba 01       		.byte	0x1
 15328 1bbb F80A     		.2byte	0xaf8
 15329 1bbd A2000000 		.4byte	0xa2
 15330 1bc1 02       		.uleb128 0x2
 15331 1bc2 91       		.byte	0x91
 15332 1bc3 77       		.sleb128 -9
 15333 1bc4 00       		.byte	0
 15334 1bc5 0B       		.uleb128 0xb
 15335 1bc6 36010000 		.4byte	.LASF255
 15336 1bca 01       		.byte	0x1
 15337 1bcb FE0A     		.2byte	0xafe
 15338 1bcd A2000000 		.4byte	0xa2
 15339 1bd1 00000000 		.4byte	.LFB213
 15340 1bd5 30000000 		.4byte	.LFE213-.LFB213
 15341 1bd9 01       		.uleb128 0x1
 15342 1bda 9C       		.byte	0x9c
 15343 1bdb 0C       		.uleb128 0xc
 15344 1bdc 810C0000 		.4byte	.LASF256
 15345 1be0 01       		.byte	0x1
 15346 1be1 020B     		.2byte	0xb02
 15347 1be3 00000000 		.4byte	.LFB214
 15348 1be7 2C000000 		.4byte	.LFE214-.LFB214
 15349 1beb 01       		.uleb128 0x1
 15350 1bec 9C       		.byte	0x9c
 15351 1bed 011C0000 		.4byte	0x1c01
 15352 1bf1 0D       		.uleb128 0xd
 15353 1bf2 36090000 		.4byte	.LASF254
 15354 1bf6 01       		.byte	0x1
 15355 1bf7 020B     		.2byte	0xb02
 15356 1bf9 A2000000 		.4byte	0xa2
 15357 1bfd 02       		.uleb128 0x2
 15358 1bfe 91       		.byte	0x91
 15359 1bff 77       		.sleb128 -9
 15360 1c00 00       		.byte	0
 15361 1c01 0B       		.uleb128 0xb
 15362 1c02 0C1C0000 		.4byte	.LASF257
 15363 1c06 01       		.byte	0x1
 15364 1c07 080B     		.2byte	0xb08
 15365 1c09 A2000000 		.4byte	0xa2
 15366 1c0d 00000000 		.4byte	.LFB215
 15367 1c11 30000000 		.4byte	.LFE215-.LFB215
 15368 1c15 01       		.uleb128 0x1
 15369 1c16 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 328


 15370 1c17 0C       		.uleb128 0xc
 15371 1c18 811D0000 		.4byte	.LASF258
 15372 1c1c 01       		.byte	0x1
 15373 1c1d 0C0B     		.2byte	0xb0c
 15374 1c1f 00000000 		.4byte	.LFB216
 15375 1c23 2C000000 		.4byte	.LFE216-.LFB216
 15376 1c27 01       		.uleb128 0x1
 15377 1c28 9C       		.byte	0x9c
 15378 1c29 3D1C0000 		.4byte	0x1c3d
 15379 1c2d 0D       		.uleb128 0xd
 15380 1c2e 36090000 		.4byte	.LASF254
 15381 1c32 01       		.byte	0x1
 15382 1c33 0C0B     		.2byte	0xb0c
 15383 1c35 A2000000 		.4byte	0xa2
 15384 1c39 02       		.uleb128 0x2
 15385 1c3a 91       		.byte	0x91
 15386 1c3b 77       		.sleb128 -9
 15387 1c3c 00       		.byte	0
 15388 1c3d 0B       		.uleb128 0xb
 15389 1c3e B11D0000 		.4byte	.LASF259
 15390 1c42 01       		.byte	0x1
 15391 1c43 120B     		.2byte	0xb12
 15392 1c45 A2000000 		.4byte	0xa2
 15393 1c49 00000000 		.4byte	.LFB217
 15394 1c4d 2C000000 		.4byte	.LFE217-.LFB217
 15395 1c51 01       		.uleb128 0x1
 15396 1c52 9C       		.byte	0x9c
 15397 1c53 0C       		.uleb128 0xc
 15398 1c54 4E110000 		.4byte	.LASF260
 15399 1c58 01       		.byte	0x1
 15400 1c59 160B     		.2byte	0xb16
 15401 1c5b 00000000 		.4byte	.LFB218
 15402 1c5f 28000000 		.4byte	.LFE218-.LFB218
 15403 1c63 01       		.uleb128 0x1
 15404 1c64 9C       		.byte	0x9c
 15405 1c65 791C0000 		.4byte	0x1c79
 15406 1c69 0D       		.uleb128 0xd
 15407 1c6a 51130000 		.4byte	.LASF261
 15408 1c6e 01       		.byte	0x1
 15409 1c6f 160B     		.2byte	0xb16
 15410 1c71 A2000000 		.4byte	0xa2
 15411 1c75 02       		.uleb128 0x2
 15412 1c76 91       		.byte	0x91
 15413 1c77 77       		.sleb128 -9
 15414 1c78 00       		.byte	0
 15415 1c79 0B       		.uleb128 0xb
 15416 1c7a FB100000 		.4byte	.LASF262
 15417 1c7e 01       		.byte	0x1
 15418 1c7f 1C0B     		.2byte	0xb1c
 15419 1c81 A2000000 		.4byte	0xa2
 15420 1c85 00000000 		.4byte	.LFB219
 15421 1c89 2C000000 		.4byte	.LFE219-.LFB219
 15422 1c8d 01       		.uleb128 0x1
 15423 1c8e 9C       		.byte	0x9c
 15424 1c8f 0C       		.uleb128 0xc
 15425 1c90 C8140000 		.4byte	.LASF263
 15426 1c94 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 329


 15427 1c95 200B     		.2byte	0xb20
 15428 1c97 00000000 		.4byte	.LFB220
 15429 1c9b 28000000 		.4byte	.LFE220-.LFB220
 15430 1c9f 01       		.uleb128 0x1
 15431 1ca0 9C       		.byte	0x9c
 15432 1ca1 B51C0000 		.4byte	0x1cb5
 15433 1ca5 0D       		.uleb128 0xd
 15434 1ca6 51130000 		.4byte	.LASF261
 15435 1caa 01       		.byte	0x1
 15436 1cab 200B     		.2byte	0xb20
 15437 1cad A2000000 		.4byte	0xa2
 15438 1cb1 02       		.uleb128 0x2
 15439 1cb2 91       		.byte	0x91
 15440 1cb3 77       		.sleb128 -9
 15441 1cb4 00       		.byte	0
 15442 1cb5 0B       		.uleb128 0xb
 15443 1cb6 92070000 		.4byte	.LASF264
 15444 1cba 01       		.byte	0x1
 15445 1cbb 260B     		.2byte	0xb26
 15446 1cbd A2000000 		.4byte	0xa2
 15447 1cc1 00000000 		.4byte	.LFB221
 15448 1cc5 2C000000 		.4byte	.LFE221-.LFB221
 15449 1cc9 01       		.uleb128 0x1
 15450 1cca 9C       		.byte	0x9c
 15451 1ccb 0C       		.uleb128 0xc
 15452 1ccc AB170000 		.4byte	.LASF265
 15453 1cd0 01       		.byte	0x1
 15454 1cd1 2A0B     		.2byte	0xb2a
 15455 1cd3 00000000 		.4byte	.LFB222
 15456 1cd7 28000000 		.4byte	.LFE222-.LFB222
 15457 1cdb 01       		.uleb128 0x1
 15458 1cdc 9C       		.byte	0x9c
 15459 1cdd F11C0000 		.4byte	0x1cf1
 15460 1ce1 0D       		.uleb128 0xd
 15461 1ce2 51130000 		.4byte	.LASF261
 15462 1ce6 01       		.byte	0x1
 15463 1ce7 2A0B     		.2byte	0xb2a
 15464 1ce9 A2000000 		.4byte	0xa2
 15465 1ced 02       		.uleb128 0x2
 15466 1cee 91       		.byte	0x91
 15467 1cef 77       		.sleb128 -9
 15468 1cf0 00       		.byte	0
 15469 1cf1 0B       		.uleb128 0xb
 15470 1cf2 3F170000 		.4byte	.LASF266
 15471 1cf6 01       		.byte	0x1
 15472 1cf7 300B     		.2byte	0xb30
 15473 1cf9 B8000000 		.4byte	0xb8
 15474 1cfd 00000000 		.4byte	.LFB223
 15475 1d01 34000000 		.4byte	.LFE223-.LFB223
 15476 1d05 01       		.uleb128 0x1
 15477 1d06 9C       		.byte	0x9c
 15478 1d07 0C       		.uleb128 0xc
 15479 1d08 D9170000 		.4byte	.LASF267
 15480 1d0c 01       		.byte	0x1
 15481 1d0d 340B     		.2byte	0xb34
 15482 1d0f 00000000 		.4byte	.LFB224
 15483 1d13 28000000 		.4byte	.LFE224-.LFB224
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 330


 15484 1d17 01       		.uleb128 0x1
 15485 1d18 9C       		.byte	0x9c
 15486 1d19 2D1D0000 		.4byte	0x1d2d
 15487 1d1d 0D       		.uleb128 0xd
 15488 1d1e 36090000 		.4byte	.LASF254
 15489 1d22 01       		.byte	0x1
 15490 1d23 340B     		.2byte	0xb34
 15491 1d25 B8000000 		.4byte	0xb8
 15492 1d29 02       		.uleb128 0x2
 15493 1d2a 91       		.byte	0x91
 15494 1d2b 76       		.sleb128 -10
 15495 1d2c 00       		.byte	0
 15496 1d2d 0B       		.uleb128 0xb
 15497 1d2e FE000000 		.4byte	.LASF268
 15498 1d32 01       		.byte	0x1
 15499 1d33 3A0B     		.2byte	0xb3a
 15500 1d35 B8000000 		.4byte	0xb8
 15501 1d39 00000000 		.4byte	.LFB225
 15502 1d3d 34000000 		.4byte	.LFE225-.LFB225
 15503 1d41 01       		.uleb128 0x1
 15504 1d42 9C       		.byte	0x9c
 15505 1d43 0C       		.uleb128 0xc
 15506 1d44 39140000 		.4byte	.LASF269
 15507 1d48 01       		.byte	0x1
 15508 1d49 3E0B     		.2byte	0xb3e
 15509 1d4b 00000000 		.4byte	.LFB226
 15510 1d4f 28000000 		.4byte	.LFE226-.LFB226
 15511 1d53 01       		.uleb128 0x1
 15512 1d54 9C       		.byte	0x9c
 15513 1d55 691D0000 		.4byte	0x1d69
 15514 1d59 0D       		.uleb128 0xd
 15515 1d5a 36090000 		.4byte	.LASF254
 15516 1d5e 01       		.byte	0x1
 15517 1d5f 3E0B     		.2byte	0xb3e
 15518 1d61 B8000000 		.4byte	0xb8
 15519 1d65 02       		.uleb128 0x2
 15520 1d66 91       		.byte	0x91
 15521 1d67 76       		.sleb128 -10
 15522 1d68 00       		.byte	0
 15523 1d69 0B       		.uleb128 0xb
 15524 1d6a 9C0F0000 		.4byte	.LASF270
 15525 1d6e 01       		.byte	0x1
 15526 1d6f 440B     		.2byte	0xb44
 15527 1d71 B8000000 		.4byte	0xb8
 15528 1d75 00000000 		.4byte	.LFB227
 15529 1d79 34000000 		.4byte	.LFE227-.LFB227
 15530 1d7d 01       		.uleb128 0x1
 15531 1d7e 9C       		.byte	0x9c
 15532 1d7f 0C       		.uleb128 0xc
 15533 1d80 15100000 		.4byte	.LASF271
 15534 1d84 01       		.byte	0x1
 15535 1d85 480B     		.2byte	0xb48
 15536 1d87 00000000 		.4byte	.LFB228
 15537 1d8b 28000000 		.4byte	.LFE228-.LFB228
 15538 1d8f 01       		.uleb128 0x1
 15539 1d90 9C       		.byte	0x9c
 15540 1d91 A51D0000 		.4byte	0x1da5
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 331


 15541 1d95 0D       		.uleb128 0xd
 15542 1d96 36090000 		.4byte	.LASF254
 15543 1d9a 01       		.byte	0x1
 15544 1d9b 480B     		.2byte	0xb48
 15545 1d9d B8000000 		.4byte	0xb8
 15546 1da1 02       		.uleb128 0x2
 15547 1da2 91       		.byte	0x91
 15548 1da3 76       		.sleb128 -10
 15549 1da4 00       		.byte	0
 15550 1da5 0B       		.uleb128 0xb
 15551 1da6 4E050000 		.4byte	.LASF272
 15552 1daa 01       		.byte	0x1
 15553 1dab 4E0B     		.2byte	0xb4e
 15554 1dad B8000000 		.4byte	0xb8
 15555 1db1 00000000 		.4byte	.LFB229
 15556 1db5 34000000 		.4byte	.LFE229-.LFB229
 15557 1db9 01       		.uleb128 0x1
 15558 1dba 9C       		.byte	0x9c
 15559 1dbb 0C       		.uleb128 0xc
 15560 1dbc 90100000 		.4byte	.LASF273
 15561 1dc0 01       		.byte	0x1
 15562 1dc1 520B     		.2byte	0xb52
 15563 1dc3 00000000 		.4byte	.LFB230
 15564 1dc7 28000000 		.4byte	.LFE230-.LFB230
 15565 1dcb 01       		.uleb128 0x1
 15566 1dcc 9C       		.byte	0x9c
 15567 1dcd E11D0000 		.4byte	0x1de1
 15568 1dd1 0D       		.uleb128 0xd
 15569 1dd2 36090000 		.4byte	.LASF254
 15570 1dd6 01       		.byte	0x1
 15571 1dd7 520B     		.2byte	0xb52
 15572 1dd9 B8000000 		.4byte	0xb8
 15573 1ddd 02       		.uleb128 0x2
 15574 1dde 91       		.byte	0x91
 15575 1ddf 76       		.sleb128 -10
 15576 1de0 00       		.byte	0
 15577 1de1 0B       		.uleb128 0xb
 15578 1de2 12070000 		.4byte	.LASF274
 15579 1de6 01       		.byte	0x1
 15580 1de7 580B     		.2byte	0xb58
 15581 1de9 B8000000 		.4byte	0xb8
 15582 1ded 00000000 		.4byte	.LFB231
 15583 1df1 34000000 		.4byte	.LFE231-.LFB231
 15584 1df5 01       		.uleb128 0x1
 15585 1df6 9C       		.byte	0x9c
 15586 1df7 0C       		.uleb128 0xc
 15587 1df8 F6140000 		.4byte	.LASF275
 15588 1dfc 01       		.byte	0x1
 15589 1dfd 5C0B     		.2byte	0xb5c
 15590 1dff 00000000 		.4byte	.LFB232
 15591 1e03 28000000 		.4byte	.LFE232-.LFB232
 15592 1e07 01       		.uleb128 0x1
 15593 1e08 9C       		.byte	0x9c
 15594 1e09 1D1E0000 		.4byte	0x1e1d
 15595 1e0d 0D       		.uleb128 0xd
 15596 1e0e 36090000 		.4byte	.LASF254
 15597 1e12 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 332


 15598 1e13 5C0B     		.2byte	0xb5c
 15599 1e15 B8000000 		.4byte	0xb8
 15600 1e19 02       		.uleb128 0x2
 15601 1e1a 91       		.byte	0x91
 15602 1e1b 76       		.sleb128 -10
 15603 1e1c 00       		.byte	0
 15604 1e1d 0B       		.uleb128 0xb
 15605 1e1e BA0E0000 		.4byte	.LASF276
 15606 1e22 01       		.byte	0x1
 15607 1e23 620B     		.2byte	0xb62
 15608 1e25 B8000000 		.4byte	0xb8
 15609 1e29 00000000 		.4byte	.LFB233
 15610 1e2d 34000000 		.4byte	.LFE233-.LFB233
 15611 1e31 01       		.uleb128 0x1
 15612 1e32 9C       		.byte	0x9c
 15613 1e33 0C       		.uleb128 0xc
 15614 1e34 CF010000 		.4byte	.LASF277
 15615 1e38 01       		.byte	0x1
 15616 1e39 660B     		.2byte	0xb66
 15617 1e3b 00000000 		.4byte	.LFB234
 15618 1e3f 28000000 		.4byte	.LFE234-.LFB234
 15619 1e43 01       		.uleb128 0x1
 15620 1e44 9C       		.byte	0x9c
 15621 1e45 591E0000 		.4byte	0x1e59
 15622 1e49 0D       		.uleb128 0xd
 15623 1e4a 36090000 		.4byte	.LASF254
 15624 1e4e 01       		.byte	0x1
 15625 1e4f 660B     		.2byte	0xb66
 15626 1e51 B8000000 		.4byte	0xb8
 15627 1e55 02       		.uleb128 0x2
 15628 1e56 91       		.byte	0x91
 15629 1e57 76       		.sleb128 -10
 15630 1e58 00       		.byte	0
 15631 1e59 0B       		.uleb128 0xb
 15632 1e5a EA010000 		.4byte	.LASF278
 15633 1e5e 01       		.byte	0x1
 15634 1e5f 6C0B     		.2byte	0xb6c
 15635 1e61 34010000 		.4byte	0x134
 15636 1e65 00000000 		.4byte	.LFB235
 15637 1e69 2C000000 		.4byte	.LFE235-.LFB235
 15638 1e6d 01       		.uleb128 0x1
 15639 1e6e 9C       		.byte	0x9c
 15640 1e6f 0C       		.uleb128 0xc
 15641 1e70 DF160000 		.4byte	.LASF279
 15642 1e74 01       		.byte	0x1
 15643 1e75 700B     		.2byte	0xb70
 15644 1e77 00000000 		.4byte	.LFB236
 15645 1e7b 28000000 		.4byte	.LFE236-.LFB236
 15646 1e7f 01       		.uleb128 0x1
 15647 1e80 9C       		.byte	0x9c
 15648 1e81 951E0000 		.4byte	0x1e95
 15649 1e85 0D       		.uleb128 0xd
 15650 1e86 43160000 		.4byte	.LASF42
 15651 1e8a 01       		.byte	0x1
 15652 1e8b 700B     		.2byte	0xb70
 15653 1e8d 34010000 		.4byte	0x134
 15654 1e91 02       		.uleb128 0x2
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 333


 15655 1e92 91       		.byte	0x91
 15656 1e93 77       		.sleb128 -9
 15657 1e94 00       		.byte	0
 15658 1e95 0B       		.uleb128 0xb
 15659 1e96 DD140000 		.4byte	.LASF280
 15660 1e9a 01       		.byte	0x1
 15661 1e9b 730B     		.2byte	0xb73
 15662 1e9d 34010000 		.4byte	0x134
 15663 1ea1 00000000 		.4byte	.LFB237
 15664 1ea5 2C000000 		.4byte	.LFE237-.LFB237
 15665 1ea9 01       		.uleb128 0x1
 15666 1eaa 9C       		.byte	0x9c
 15667 1eab 0C       		.uleb128 0xc
 15668 1eac A50A0000 		.4byte	.LASF281
 15669 1eb0 01       		.byte	0x1
 15670 1eb1 770B     		.2byte	0xb77
 15671 1eb3 00000000 		.4byte	.LFB238
 15672 1eb7 28000000 		.4byte	.LFE238-.LFB238
 15673 1ebb 01       		.uleb128 0x1
 15674 1ebc 9C       		.byte	0x9c
 15675 1ebd D11E0000 		.4byte	0x1ed1
 15676 1ec1 0D       		.uleb128 0xd
 15677 1ec2 43160000 		.4byte	.LASF42
 15678 1ec6 01       		.byte	0x1
 15679 1ec7 770B     		.2byte	0xb77
 15680 1ec9 34010000 		.4byte	0x134
 15681 1ecd 02       		.uleb128 0x2
 15682 1ece 91       		.byte	0x91
 15683 1ecf 77       		.sleb128 -9
 15684 1ed0 00       		.byte	0
 15685 1ed1 0B       		.uleb128 0xb
 15686 1ed2 380C0000 		.4byte	.LASF282
 15687 1ed6 01       		.byte	0x1
 15688 1ed7 7D0B     		.2byte	0xb7d
 15689 1ed9 34010000 		.4byte	0x134
 15690 1edd 00000000 		.4byte	.LFB239
 15691 1ee1 2C000000 		.4byte	.LFE239-.LFB239
 15692 1ee5 01       		.uleb128 0x1
 15693 1ee6 9C       		.byte	0x9c
 15694 1ee7 0B       		.uleb128 0xb
 15695 1ee8 331A0000 		.4byte	.LASF283
 15696 1eec 01       		.byte	0x1
 15697 1eed 810B     		.2byte	0xb81
 15698 1eef 34010000 		.4byte	0x134
 15699 1ef3 00000000 		.4byte	.LFB240
 15700 1ef7 2C000000 		.4byte	.LFE240-.LFB240
 15701 1efb 01       		.uleb128 0x1
 15702 1efc 9C       		.byte	0x9c
 15703 1efd 0B       		.uleb128 0xb
 15704 1efe D50F0000 		.4byte	.LASF284
 15705 1f02 01       		.byte	0x1
 15706 1f03 850B     		.2byte	0xb85
 15707 1f05 34010000 		.4byte	0x134
 15708 1f09 00000000 		.4byte	.LFB241
 15709 1f0d 2C000000 		.4byte	.LFE241-.LFB241
 15710 1f11 01       		.uleb128 0x1
 15711 1f12 9C       		.byte	0x9c
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 334


 15712 1f13 0B       		.uleb128 0xb
 15713 1f14 E7180000 		.4byte	.LASF285
 15714 1f18 01       		.byte	0x1
 15715 1f19 890B     		.2byte	0xb89
 15716 1f1b 34010000 		.4byte	0x134
 15717 1f1f 00000000 		.4byte	.LFB242
 15718 1f23 2C000000 		.4byte	.LFE242-.LFB242
 15719 1f27 01       		.uleb128 0x1
 15720 1f28 9C       		.byte	0x9c
 15721 1f29 0B       		.uleb128 0xb
 15722 1f2a 031D0000 		.4byte	.LASF286
 15723 1f2e 01       		.byte	0x1
 15724 1f2f 8D0B     		.2byte	0xb8d
 15725 1f31 34010000 		.4byte	0x134
 15726 1f35 00000000 		.4byte	.LFB243
 15727 1f39 2C000000 		.4byte	.LFE243-.LFB243
 15728 1f3d 01       		.uleb128 0x1
 15729 1f3e 9C       		.byte	0x9c
 15730 1f3f 0B       		.uleb128 0xb
 15731 1f40 B40F0000 		.4byte	.LASF287
 15732 1f44 01       		.byte	0x1
 15733 1f45 910B     		.2byte	0xb91
 15734 1f47 34010000 		.4byte	0x134
 15735 1f4b 00000000 		.4byte	.LFB244
 15736 1f4f 2C000000 		.4byte	.LFE244-.LFB244
 15737 1f53 01       		.uleb128 0x1
 15738 1f54 9C       		.byte	0x9c
 15739 1f55 0B       		.uleb128 0xb
 15740 1f56 641D0000 		.4byte	.LASF288
 15741 1f5a 01       		.byte	0x1
 15742 1f5b 980B     		.2byte	0xb98
 15743 1f5d 34010000 		.4byte	0x134
 15744 1f61 00000000 		.4byte	.LFB245
 15745 1f65 2C000000 		.4byte	.LFE245-.LFB245
 15746 1f69 01       		.uleb128 0x1
 15747 1f6a 9C       		.byte	0x9c
 15748 1f6b 0B       		.uleb128 0xb
 15749 1f6c 28040000 		.4byte	.LASF289
 15750 1f70 01       		.byte	0x1
 15751 1f71 9C0B     		.2byte	0xb9c
 15752 1f73 34010000 		.4byte	0x134
 15753 1f77 00000000 		.4byte	.LFB246
 15754 1f7b 2C000000 		.4byte	.LFE246-.LFB246
 15755 1f7f 01       		.uleb128 0x1
 15756 1f80 9C       		.byte	0x9c
 15757 1f81 0B       		.uleb128 0xb
 15758 1f82 44150000 		.4byte	.LASF290
 15759 1f86 01       		.byte	0x1
 15760 1f87 A30B     		.2byte	0xba3
 15761 1f89 34010000 		.4byte	0x134
 15762 1f8d 00000000 		.4byte	.LFB247
 15763 1f91 2C000000 		.4byte	.LFE247-.LFB247
 15764 1f95 01       		.uleb128 0x1
 15765 1f96 9C       		.byte	0x9c
 15766 1f97 0C       		.uleb128 0xc
 15767 1f98 301D0000 		.4byte	.LASF291
 15768 1f9c 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 335


 15769 1f9d A70B     		.2byte	0xba7
 15770 1f9f 00000000 		.4byte	.LFB248
 15771 1fa3 28000000 		.4byte	.LFE248-.LFB248
 15772 1fa7 01       		.uleb128 0x1
 15773 1fa8 9C       		.byte	0x9c
 15774 1fa9 BD1F0000 		.4byte	0x1fbd
 15775 1fad 0D       		.uleb128 0xd
 15776 1fae 43160000 		.4byte	.LASF42
 15777 1fb2 01       		.byte	0x1
 15778 1fb3 A70B     		.2byte	0xba7
 15779 1fb5 34010000 		.4byte	0x134
 15780 1fb9 02       		.uleb128 0x2
 15781 1fba 91       		.byte	0x91
 15782 1fbb 77       		.sleb128 -9
 15783 1fbc 00       		.byte	0
 15784 1fbd 11       		.uleb128 0x11
 15785 1fbe 9F000000 		.4byte	.LASF292
 15786 1fc2 01       		.byte	0x1
 15787 1fc3 AA0B     		.2byte	0xbaa
 15788 1fc5 00000000 		.4byte	.LFB249
 15789 1fc9 1C000000 		.4byte	.LFE249-.LFB249
 15790 1fcd 01       		.uleb128 0x1
 15791 1fce 9C       		.byte	0x9c
 15792 1fcf 0C       		.uleb128 0xc
 15793 1fd0 351B0000 		.4byte	.LASF293
 15794 1fd4 01       		.byte	0x1
 15795 1fd5 B00B     		.2byte	0xbb0
 15796 1fd7 00000000 		.4byte	.LFB250
 15797 1fdb 64000000 		.4byte	.LFE250-.LFB250
 15798 1fdf 01       		.uleb128 0x1
 15799 1fe0 9C       		.byte	0x9c
 15800 1fe1 13200000 		.4byte	0x2013
 15801 1fe5 0D       		.uleb128 0xd
 15802 1fe6 7E180000 		.4byte	.LASF294
 15803 1fea 01       		.byte	0x1
 15804 1feb B00B     		.2byte	0xbb0
 15805 1fed AD000000 		.4byte	0xad
 15806 1ff1 02       		.uleb128 0x2
 15807 1ff2 91       		.byte	0x91
 15808 1ff3 77       		.sleb128 -9
 15809 1ff4 0D       		.uleb128 0xd
 15810 1ff5 5B0F0000 		.4byte	.LASF295
 15811 1ff9 01       		.byte	0x1
 15812 1ffa B00B     		.2byte	0xbb0
 15813 1ffc 34010000 		.4byte	0x134
 15814 2000 02       		.uleb128 0x2
 15815 2001 91       		.byte	0x91
 15816 2002 76       		.sleb128 -10
 15817 2003 0D       		.uleb128 0xd
 15818 2004 A5030000 		.4byte	.LASF296
 15819 2008 01       		.byte	0x1
 15820 2009 B00B     		.2byte	0xbb0
 15821 200b 34010000 		.4byte	0x134
 15822 200f 02       		.uleb128 0x2
 15823 2010 91       		.byte	0x91
 15824 2011 75       		.sleb128 -11
 15825 2012 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 336


 15826 2013 0C       		.uleb128 0xc
 15827 2014 660E0000 		.4byte	.LASF297
 15828 2018 01       		.byte	0x1
 15829 2019 B90B     		.2byte	0xbb9
 15830 201b 00000000 		.4byte	.LFB251
 15831 201f 28000000 		.4byte	.LFE251-.LFB251
 15832 2023 01       		.uleb128 0x1
 15833 2024 9C       		.byte	0x9c
 15834 2025 39200000 		.4byte	0x2039
 15835 2029 0D       		.uleb128 0xd
 15836 202a CD0F0000 		.4byte	.LASF26
 15837 202e 01       		.byte	0x1
 15838 202f B90B     		.2byte	0xbb9
 15839 2031 AD000000 		.4byte	0xad
 15840 2035 02       		.uleb128 0x2
 15841 2036 91       		.byte	0x91
 15842 2037 77       		.sleb128 -9
 15843 2038 00       		.byte	0
 15844 2039 0B       		.uleb128 0xb
 15845 203a A30E0000 		.4byte	.LASF298
 15846 203e 01       		.byte	0x1
 15847 203f BF0B     		.2byte	0xbbf
 15848 2041 AD000000 		.4byte	0xad
 15849 2045 00000000 		.4byte	.LFB252
 15850 2049 28000000 		.4byte	.LFE252-.LFB252
 15851 204d 01       		.uleb128 0x1
 15852 204e 9C       		.byte	0x9c
 15853 204f 0C       		.uleb128 0xc
 15854 2050 76170000 		.4byte	.LASF299
 15855 2054 01       		.byte	0x1
 15856 2055 C30B     		.2byte	0xbc3
 15857 2057 00000000 		.4byte	.LFB253
 15858 205b 28000000 		.4byte	.LFE253-.LFB253
 15859 205f 01       		.uleb128 0x1
 15860 2060 9C       		.byte	0x9c
 15861 2061 75200000 		.4byte	0x2075
 15862 2065 0D       		.uleb128 0xd
 15863 2066 080C0000 		.4byte	.LASF113
 15864 206a 01       		.byte	0x1
 15865 206b C30B     		.2byte	0xbc3
 15866 206d AD000000 		.4byte	0xad
 15867 2071 02       		.uleb128 0x2
 15868 2072 91       		.byte	0x91
 15869 2073 77       		.sleb128 -9
 15870 2074 00       		.byte	0
 15871 2075 0C       		.uleb128 0xc
 15872 2076 960B0000 		.4byte	.LASF300
 15873 207a 01       		.byte	0x1
 15874 207b C60B     		.2byte	0xbc6
 15875 207d 00000000 		.4byte	.LFB254
 15876 2081 2C010000 		.4byte	.LFE254-.LFB254
 15877 2085 01       		.uleb128 0x1
 15878 2086 9C       		.byte	0x9c
 15879 2087 E4200000 		.4byte	0x20e4
 15880 208b 0D       		.uleb128 0xd
 15881 208c 080C0000 		.4byte	.LASF113
 15882 2090 01       		.byte	0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 337


 15883 2091 C60B     		.2byte	0xbc6
 15884 2093 E61A0000 		.4byte	0x1ae6
 15885 2097 02       		.uleb128 0x2
 15886 2098 91       		.byte	0x91
 15887 2099 6C       		.sleb128 -20
 15888 209a 0D       		.uleb128 0xd
 15889 209b C2090000 		.4byte	.LASF301
 15890 209f 01       		.byte	0x1
 15891 20a0 C60B     		.2byte	0xbc6
 15892 20a2 C3000000 		.4byte	0xc3
 15893 20a6 02       		.uleb128 0x2
 15894 20a7 91       		.byte	0x91
 15895 20a8 6A       		.sleb128 -22
 15896 20a9 0D       		.uleb128 0xd
 15897 20aa 7E180000 		.4byte	.LASF294
 15898 20ae 01       		.byte	0x1
 15899 20af C60B     		.2byte	0xbc6
 15900 20b1 AD000000 		.4byte	0xad
 15901 20b5 02       		.uleb128 0x2
 15902 20b6 91       		.byte	0x91
 15903 20b7 69       		.sleb128 -23
 15904 20b8 0D       		.uleb128 0xd
 15905 20b9 CD0F0000 		.4byte	.LASF26
 15906 20bd 01       		.byte	0x1
 15907 20be C60B     		.2byte	0xbc6
 15908 20c0 AD000000 		.4byte	0xad
 15909 20c4 02       		.uleb128 0x2
 15910 20c5 91       		.byte	0x91
 15911 20c6 68       		.sleb128 -24
 15912 20c7 12       		.uleb128 0x12
 15913 20c8 0B100000 		.4byte	.LASF302
 15914 20cc 01       		.byte	0x1
 15915 20cd C90B     		.2byte	0xbc9
 15916 20cf AD000000 		.4byte	0xad
 15917 20d3 02       		.uleb128 0x2
 15918 20d4 91       		.byte	0x91
 15919 20d5 77       		.sleb128 -9
 15920 20d6 13       		.uleb128 0x13
 15921 20d7 6900     		.ascii	"i\000"
 15922 20d9 01       		.byte	0x1
 15923 20da CA0B     		.2byte	0xbca
 15924 20dc C3000000 		.4byte	0xc3
 15925 20e0 02       		.uleb128 0x2
 15926 20e1 91       		.byte	0x91
 15927 20e2 74       		.sleb128 -12
 15928 20e3 00       		.byte	0
 15929 20e4 0B       		.uleb128 0xb
 15930 20e5 E0120000 		.4byte	.LASF303
 15931 20e9 01       		.byte	0x1
 15932 20ea 880C     		.2byte	0xc88
 15933 20ec AD000000 		.4byte	0xad
 15934 20f0 00000000 		.4byte	.LFB255
 15935 20f4 28000000 		.4byte	.LFE255-.LFB255
 15936 20f8 01       		.uleb128 0x1
 15937 20f9 9C       		.byte	0x9c
 15938 20fa 0C       		.uleb128 0xc
 15939 20fb C61D0000 		.4byte	.LASF304
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 338


 15940 20ff 01       		.byte	0x1
 15941 2100 8C0C     		.2byte	0xc8c
 15942 2102 00000000 		.4byte	.LFB256
 15943 2106 28000000 		.4byte	.LFE256-.LFB256
 15944 210a 01       		.uleb128 0x1
 15945 210b 9C       		.byte	0x9c
 15946 210c 20210000 		.4byte	0x2120
 15947 2110 0D       		.uleb128 0xd
 15948 2111 BE0A0000 		.4byte	.LASF305
 15949 2115 01       		.byte	0x1
 15950 2116 8C0C     		.2byte	0xc8c
 15951 2118 AD000000 		.4byte	0xad
 15952 211c 02       		.uleb128 0x2
 15953 211d 91       		.byte	0x91
 15954 211e 77       		.sleb128 -9
 15955 211f 00       		.byte	0
 15956 2120 0B       		.uleb128 0xb
 15957 2121 16130000 		.4byte	.LASF306
 15958 2125 01       		.byte	0x1
 15959 2126 920C     		.2byte	0xc92
 15960 2128 AD000000 		.4byte	0xad
 15961 212c 00000000 		.4byte	.LFB257
 15962 2130 28000000 		.4byte	.LFE257-.LFB257
 15963 2134 01       		.uleb128 0x1
 15964 2135 9C       		.byte	0x9c
 15965 2136 0C       		.uleb128 0xc
 15966 2137 C9160000 		.4byte	.LASF307
 15967 213b 01       		.byte	0x1
 15968 213c 960C     		.2byte	0xc96
 15969 213e 00000000 		.4byte	.LFB258
 15970 2142 28000000 		.4byte	.LFE258-.LFB258
 15971 2146 01       		.uleb128 0x1
 15972 2147 9C       		.byte	0x9c
 15973 2148 5C210000 		.4byte	0x215c
 15974 214c 0D       		.uleb128 0xd
 15975 214d BE0A0000 		.4byte	.LASF305
 15976 2151 01       		.byte	0x1
 15977 2152 960C     		.2byte	0xc96
 15978 2154 AD000000 		.4byte	0xad
 15979 2158 02       		.uleb128 0x2
 15980 2159 91       		.byte	0x91
 15981 215a 77       		.sleb128 -9
 15982 215b 00       		.byte	0
 15983 215c 11       		.uleb128 0x11
 15984 215d 5E090000 		.4byte	.LASF308
 15985 2161 01       		.byte	0x1
 15986 2162 A60C     		.2byte	0xca6
 15987 2164 00000000 		.4byte	.LFB259
 15988 2168 6E000000 		.4byte	.LFE259-.LFB259
 15989 216c 01       		.uleb128 0x1
 15990 216d 9C       		.byte	0x9c
 15991 216e 14       		.uleb128 0x14
 15992 216f 06000000 		.4byte	.LASF310
 15993 2173 04       		.byte	0x4
 15994 2174 9101     		.2byte	0x191
 15995 2176 AD000000 		.4byte	0xad
 15996 217a 05       		.uleb128 0x5
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 339


 15997 217b 03       		.byte	0x3
 15998 217c 00000000 		.4byte	devAddr
 15999 2180 15       		.uleb128 0x15
 16000 2181 AD000000 		.4byte	0xad
 16001 2185 90210000 		.4byte	0x2190
 16002 2189 16       		.uleb128 0x16
 16003 218a 90210000 		.4byte	0x2190
 16004 218e 15       		.byte	0x15
 16005 218f 00       		.byte	0
 16006 2190 03       		.uleb128 0x3
 16007 2191 04       		.byte	0x4
 16008 2192 07       		.byte	0x7
 16009 2193 67160000 		.4byte	.LASF309
 16010 2197 14       		.uleb128 0x14
 16011 2198 9A110000 		.4byte	.LASF311
 16012 219c 04       		.byte	0x4
 16013 219d 9201     		.2byte	0x192
 16014 219f 80210000 		.4byte	0x2180
 16015 21a3 05       		.uleb128 0x5
 16016 21a4 03       		.byte	0x3
 16017 21a5 00000000 		.4byte	buffer
 16018 21a9 00       		.byte	0
 16019              		.section	.debug_abbrev,"",%progbits
 16020              	.Ldebug_abbrev0:
 16021 0000 01       		.uleb128 0x1
 16022 0001 11       		.uleb128 0x11
 16023 0002 01       		.byte	0x1
 16024 0003 25       		.uleb128 0x25
 16025 0004 0E       		.uleb128 0xe
 16026 0005 13       		.uleb128 0x13
 16027 0006 0B       		.uleb128 0xb
 16028 0007 03       		.uleb128 0x3
 16029 0008 0E       		.uleb128 0xe
 16030 0009 1B       		.uleb128 0x1b
 16031 000a 0E       		.uleb128 0xe
 16032 000b 55       		.uleb128 0x55
 16033 000c 17       		.uleb128 0x17
 16034 000d 11       		.uleb128 0x11
 16035 000e 01       		.uleb128 0x1
 16036 000f 10       		.uleb128 0x10
 16037 0010 17       		.uleb128 0x17
 16038 0011 00       		.byte	0
 16039 0012 00       		.byte	0
 16040 0013 02       		.uleb128 0x2
 16041 0014 16       		.uleb128 0x16
 16042 0015 00       		.byte	0
 16043 0016 03       		.uleb128 0x3
 16044 0017 0E       		.uleb128 0xe
 16045 0018 3A       		.uleb128 0x3a
 16046 0019 0B       		.uleb128 0xb
 16047 001a 3B       		.uleb128 0x3b
 16048 001b 0B       		.uleb128 0xb
 16049 001c 49       		.uleb128 0x49
 16050 001d 13       		.uleb128 0x13
 16051 001e 00       		.byte	0
 16052 001f 00       		.byte	0
 16053 0020 03       		.uleb128 0x3
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 340


 16054 0021 24       		.uleb128 0x24
 16055 0022 00       		.byte	0
 16056 0023 0B       		.uleb128 0xb
 16057 0024 0B       		.uleb128 0xb
 16058 0025 3E       		.uleb128 0x3e
 16059 0026 0B       		.uleb128 0xb
 16060 0027 03       		.uleb128 0x3
 16061 0028 0E       		.uleb128 0xe
 16062 0029 00       		.byte	0
 16063 002a 00       		.byte	0
 16064 002b 04       		.uleb128 0x4
 16065 002c 24       		.uleb128 0x24
 16066 002d 00       		.byte	0
 16067 002e 0B       		.uleb128 0xb
 16068 002f 0B       		.uleb128 0xb
 16069 0030 3E       		.uleb128 0x3e
 16070 0031 0B       		.uleb128 0xb
 16071 0032 03       		.uleb128 0x3
 16072 0033 08       		.uleb128 0x8
 16073 0034 00       		.byte	0
 16074 0035 00       		.byte	0
 16075 0036 05       		.uleb128 0x5
 16076 0037 2E       		.uleb128 0x2e
 16077 0038 00       		.byte	0
 16078 0039 3F       		.uleb128 0x3f
 16079 003a 19       		.uleb128 0x19
 16080 003b 03       		.uleb128 0x3
 16081 003c 0E       		.uleb128 0xe
 16082 003d 3A       		.uleb128 0x3a
 16083 003e 0B       		.uleb128 0xb
 16084 003f 3B       		.uleb128 0x3b
 16085 0040 0B       		.uleb128 0xb
 16086 0041 11       		.uleb128 0x11
 16087 0042 01       		.uleb128 0x1
 16088 0043 12       		.uleb128 0x12
 16089 0044 06       		.uleb128 0x6
 16090 0045 40       		.uleb128 0x40
 16091 0046 18       		.uleb128 0x18
 16092 0047 9742     		.uleb128 0x2117
 16093 0049 19       		.uleb128 0x19
 16094 004a 00       		.byte	0
 16095 004b 00       		.byte	0
 16096 004c 06       		.uleb128 0x6
 16097 004d 2E       		.uleb128 0x2e
 16098 004e 01       		.byte	0x1
 16099 004f 3F       		.uleb128 0x3f
 16100 0050 19       		.uleb128 0x19
 16101 0051 03       		.uleb128 0x3
 16102 0052 0E       		.uleb128 0xe
 16103 0053 3A       		.uleb128 0x3a
 16104 0054 0B       		.uleb128 0xb
 16105 0055 3B       		.uleb128 0x3b
 16106 0056 0B       		.uleb128 0xb
 16107 0057 27       		.uleb128 0x27
 16108 0058 19       		.uleb128 0x19
 16109 0059 11       		.uleb128 0x11
 16110 005a 01       		.uleb128 0x1
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 341


 16111 005b 12       		.uleb128 0x12
 16112 005c 06       		.uleb128 0x6
 16113 005d 40       		.uleb128 0x40
 16114 005e 18       		.uleb128 0x18
 16115 005f 9742     		.uleb128 0x2117
 16116 0061 19       		.uleb128 0x19
 16117 0062 01       		.uleb128 0x1
 16118 0063 13       		.uleb128 0x13
 16119 0064 00       		.byte	0
 16120 0065 00       		.byte	0
 16121 0066 07       		.uleb128 0x7
 16122 0067 05       		.uleb128 0x5
 16123 0068 00       		.byte	0
 16124 0069 03       		.uleb128 0x3
 16125 006a 0E       		.uleb128 0xe
 16126 006b 3A       		.uleb128 0x3a
 16127 006c 0B       		.uleb128 0xb
 16128 006d 3B       		.uleb128 0x3b
 16129 006e 0B       		.uleb128 0xb
 16130 006f 49       		.uleb128 0x49
 16131 0070 13       		.uleb128 0x13
 16132 0071 02       		.uleb128 0x2
 16133 0072 18       		.uleb128 0x18
 16134 0073 00       		.byte	0
 16135 0074 00       		.byte	0
 16136 0075 08       		.uleb128 0x8
 16137 0076 2E       		.uleb128 0x2e
 16138 0077 00       		.byte	0
 16139 0078 3F       		.uleb128 0x3f
 16140 0079 19       		.uleb128 0x19
 16141 007a 03       		.uleb128 0x3
 16142 007b 0E       		.uleb128 0xe
 16143 007c 3A       		.uleb128 0x3a
 16144 007d 0B       		.uleb128 0xb
 16145 007e 3B       		.uleb128 0x3b
 16146 007f 0B       		.uleb128 0xb
 16147 0080 11       		.uleb128 0x11
 16148 0081 01       		.uleb128 0x1
 16149 0082 12       		.uleb128 0x12
 16150 0083 06       		.uleb128 0x6
 16151 0084 40       		.uleb128 0x40
 16152 0085 18       		.uleb128 0x18
 16153 0086 9642     		.uleb128 0x2116
 16154 0088 19       		.uleb128 0x19
 16155 0089 00       		.byte	0
 16156 008a 00       		.byte	0
 16157 008b 09       		.uleb128 0x9
 16158 008c 2E       		.uleb128 0x2e
 16159 008d 00       		.byte	0
 16160 008e 3F       		.uleb128 0x3f
 16161 008f 19       		.uleb128 0x19
 16162 0090 03       		.uleb128 0x3
 16163 0091 0E       		.uleb128 0xe
 16164 0092 3A       		.uleb128 0x3a
 16165 0093 0B       		.uleb128 0xb
 16166 0094 3B       		.uleb128 0x3b
 16167 0095 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 342


 16168 0096 49       		.uleb128 0x49
 16169 0097 13       		.uleb128 0x13
 16170 0098 11       		.uleb128 0x11
 16171 0099 01       		.uleb128 0x1
 16172 009a 12       		.uleb128 0x12
 16173 009b 06       		.uleb128 0x6
 16174 009c 40       		.uleb128 0x40
 16175 009d 18       		.uleb128 0x18
 16176 009e 9642     		.uleb128 0x2116
 16177 00a0 19       		.uleb128 0x19
 16178 00a1 00       		.byte	0
 16179 00a2 00       		.byte	0
 16180 00a3 0A       		.uleb128 0xa
 16181 00a4 2E       		.uleb128 0x2e
 16182 00a5 01       		.byte	0x1
 16183 00a6 3F       		.uleb128 0x3f
 16184 00a7 19       		.uleb128 0x19
 16185 00a8 03       		.uleb128 0x3
 16186 00a9 0E       		.uleb128 0xe
 16187 00aa 3A       		.uleb128 0x3a
 16188 00ab 0B       		.uleb128 0xb
 16189 00ac 3B       		.uleb128 0x3b
 16190 00ad 0B       		.uleb128 0xb
 16191 00ae 27       		.uleb128 0x27
 16192 00af 19       		.uleb128 0x19
 16193 00b0 11       		.uleb128 0x11
 16194 00b1 01       		.uleb128 0x1
 16195 00b2 12       		.uleb128 0x12
 16196 00b3 06       		.uleb128 0x6
 16197 00b4 40       		.uleb128 0x40
 16198 00b5 18       		.uleb128 0x18
 16199 00b6 9642     		.uleb128 0x2116
 16200 00b8 19       		.uleb128 0x19
 16201 00b9 01       		.uleb128 0x1
 16202 00ba 13       		.uleb128 0x13
 16203 00bb 00       		.byte	0
 16204 00bc 00       		.byte	0
 16205 00bd 0B       		.uleb128 0xb
 16206 00be 2E       		.uleb128 0x2e
 16207 00bf 00       		.byte	0
 16208 00c0 3F       		.uleb128 0x3f
 16209 00c1 19       		.uleb128 0x19
 16210 00c2 03       		.uleb128 0x3
 16211 00c3 0E       		.uleb128 0xe
 16212 00c4 3A       		.uleb128 0x3a
 16213 00c5 0B       		.uleb128 0xb
 16214 00c6 3B       		.uleb128 0x3b
 16215 00c7 05       		.uleb128 0x5
 16216 00c8 49       		.uleb128 0x49
 16217 00c9 13       		.uleb128 0x13
 16218 00ca 11       		.uleb128 0x11
 16219 00cb 01       		.uleb128 0x1
 16220 00cc 12       		.uleb128 0x12
 16221 00cd 06       		.uleb128 0x6
 16222 00ce 40       		.uleb128 0x40
 16223 00cf 18       		.uleb128 0x18
 16224 00d0 9642     		.uleb128 0x2116
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 343


 16225 00d2 19       		.uleb128 0x19
 16226 00d3 00       		.byte	0
 16227 00d4 00       		.byte	0
 16228 00d5 0C       		.uleb128 0xc
 16229 00d6 2E       		.uleb128 0x2e
 16230 00d7 01       		.byte	0x1
 16231 00d8 3F       		.uleb128 0x3f
 16232 00d9 19       		.uleb128 0x19
 16233 00da 03       		.uleb128 0x3
 16234 00db 0E       		.uleb128 0xe
 16235 00dc 3A       		.uleb128 0x3a
 16236 00dd 0B       		.uleb128 0xb
 16237 00de 3B       		.uleb128 0x3b
 16238 00df 05       		.uleb128 0x5
 16239 00e0 27       		.uleb128 0x27
 16240 00e1 19       		.uleb128 0x19
 16241 00e2 11       		.uleb128 0x11
 16242 00e3 01       		.uleb128 0x1
 16243 00e4 12       		.uleb128 0x12
 16244 00e5 06       		.uleb128 0x6
 16245 00e6 40       		.uleb128 0x40
 16246 00e7 18       		.uleb128 0x18
 16247 00e8 9642     		.uleb128 0x2116
 16248 00ea 19       		.uleb128 0x19
 16249 00eb 01       		.uleb128 0x1
 16250 00ec 13       		.uleb128 0x13
 16251 00ed 00       		.byte	0
 16252 00ee 00       		.byte	0
 16253 00ef 0D       		.uleb128 0xd
 16254 00f0 05       		.uleb128 0x5
 16255 00f1 00       		.byte	0
 16256 00f2 03       		.uleb128 0x3
 16257 00f3 0E       		.uleb128 0xe
 16258 00f4 3A       		.uleb128 0x3a
 16259 00f5 0B       		.uleb128 0xb
 16260 00f6 3B       		.uleb128 0x3b
 16261 00f7 05       		.uleb128 0x5
 16262 00f8 49       		.uleb128 0x49
 16263 00f9 13       		.uleb128 0x13
 16264 00fa 02       		.uleb128 0x2
 16265 00fb 18       		.uleb128 0x18
 16266 00fc 00       		.byte	0
 16267 00fd 00       		.byte	0
 16268 00fe 0E       		.uleb128 0xe
 16269 00ff 2E       		.uleb128 0x2e
 16270 0100 01       		.byte	0x1
 16271 0101 3F       		.uleb128 0x3f
 16272 0102 19       		.uleb128 0x19
 16273 0103 03       		.uleb128 0x3
 16274 0104 0E       		.uleb128 0xe
 16275 0105 3A       		.uleb128 0x3a
 16276 0106 0B       		.uleb128 0xb
 16277 0107 3B       		.uleb128 0x3b
 16278 0108 05       		.uleb128 0x5
 16279 0109 27       		.uleb128 0x27
 16280 010a 19       		.uleb128 0x19
 16281 010b 49       		.uleb128 0x49
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 344


 16282 010c 13       		.uleb128 0x13
 16283 010d 11       		.uleb128 0x11
 16284 010e 01       		.uleb128 0x1
 16285 010f 12       		.uleb128 0x12
 16286 0110 06       		.uleb128 0x6
 16287 0111 40       		.uleb128 0x40
 16288 0112 18       		.uleb128 0x18
 16289 0113 9642     		.uleb128 0x2116
 16290 0115 19       		.uleb128 0x19
 16291 0116 01       		.uleb128 0x1
 16292 0117 13       		.uleb128 0x13
 16293 0118 00       		.byte	0
 16294 0119 00       		.byte	0
 16295 011a 0F       		.uleb128 0xf
 16296 011b 05       		.uleb128 0x5
 16297 011c 00       		.byte	0
 16298 011d 03       		.uleb128 0x3
 16299 011e 08       		.uleb128 0x8
 16300 011f 3A       		.uleb128 0x3a
 16301 0120 0B       		.uleb128 0xb
 16302 0121 3B       		.uleb128 0x3b
 16303 0122 05       		.uleb128 0x5
 16304 0123 49       		.uleb128 0x49
 16305 0124 13       		.uleb128 0x13
 16306 0125 02       		.uleb128 0x2
 16307 0126 18       		.uleb128 0x18
 16308 0127 00       		.byte	0
 16309 0128 00       		.byte	0
 16310 0129 10       		.uleb128 0x10
 16311 012a 0F       		.uleb128 0xf
 16312 012b 00       		.byte	0
 16313 012c 0B       		.uleb128 0xb
 16314 012d 0B       		.uleb128 0xb
 16315 012e 49       		.uleb128 0x49
 16316 012f 13       		.uleb128 0x13
 16317 0130 00       		.byte	0
 16318 0131 00       		.byte	0
 16319 0132 11       		.uleb128 0x11
 16320 0133 2E       		.uleb128 0x2e
 16321 0134 00       		.byte	0
 16322 0135 3F       		.uleb128 0x3f
 16323 0136 19       		.uleb128 0x19
 16324 0137 03       		.uleb128 0x3
 16325 0138 0E       		.uleb128 0xe
 16326 0139 3A       		.uleb128 0x3a
 16327 013a 0B       		.uleb128 0xb
 16328 013b 3B       		.uleb128 0x3b
 16329 013c 05       		.uleb128 0x5
 16330 013d 11       		.uleb128 0x11
 16331 013e 01       		.uleb128 0x1
 16332 013f 12       		.uleb128 0x12
 16333 0140 06       		.uleb128 0x6
 16334 0141 40       		.uleb128 0x40
 16335 0142 18       		.uleb128 0x18
 16336 0143 9642     		.uleb128 0x2116
 16337 0145 19       		.uleb128 0x19
 16338 0146 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 345


 16339 0147 00       		.byte	0
 16340 0148 12       		.uleb128 0x12
 16341 0149 34       		.uleb128 0x34
 16342 014a 00       		.byte	0
 16343 014b 03       		.uleb128 0x3
 16344 014c 0E       		.uleb128 0xe
 16345 014d 3A       		.uleb128 0x3a
 16346 014e 0B       		.uleb128 0xb
 16347 014f 3B       		.uleb128 0x3b
 16348 0150 05       		.uleb128 0x5
 16349 0151 49       		.uleb128 0x49
 16350 0152 13       		.uleb128 0x13
 16351 0153 02       		.uleb128 0x2
 16352 0154 18       		.uleb128 0x18
 16353 0155 00       		.byte	0
 16354 0156 00       		.byte	0
 16355 0157 13       		.uleb128 0x13
 16356 0158 34       		.uleb128 0x34
 16357 0159 00       		.byte	0
 16358 015a 03       		.uleb128 0x3
 16359 015b 08       		.uleb128 0x8
 16360 015c 3A       		.uleb128 0x3a
 16361 015d 0B       		.uleb128 0xb
 16362 015e 3B       		.uleb128 0x3b
 16363 015f 05       		.uleb128 0x5
 16364 0160 49       		.uleb128 0x49
 16365 0161 13       		.uleb128 0x13
 16366 0162 02       		.uleb128 0x2
 16367 0163 18       		.uleb128 0x18
 16368 0164 00       		.byte	0
 16369 0165 00       		.byte	0
 16370 0166 14       		.uleb128 0x14
 16371 0167 34       		.uleb128 0x34
 16372 0168 00       		.byte	0
 16373 0169 03       		.uleb128 0x3
 16374 016a 0E       		.uleb128 0xe
 16375 016b 3A       		.uleb128 0x3a
 16376 016c 0B       		.uleb128 0xb
 16377 016d 3B       		.uleb128 0x3b
 16378 016e 05       		.uleb128 0x5
 16379 016f 49       		.uleb128 0x49
 16380 0170 13       		.uleb128 0x13
 16381 0171 3F       		.uleb128 0x3f
 16382 0172 19       		.uleb128 0x19
 16383 0173 02       		.uleb128 0x2
 16384 0174 18       		.uleb128 0x18
 16385 0175 00       		.byte	0
 16386 0176 00       		.byte	0
 16387 0177 15       		.uleb128 0x15
 16388 0178 01       		.uleb128 0x1
 16389 0179 01       		.byte	0x1
 16390 017a 49       		.uleb128 0x49
 16391 017b 13       		.uleb128 0x13
 16392 017c 01       		.uleb128 0x1
 16393 017d 13       		.uleb128 0x13
 16394 017e 00       		.byte	0
 16395 017f 00       		.byte	0
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 346


 16396 0180 16       		.uleb128 0x16
 16397 0181 21       		.uleb128 0x21
 16398 0182 00       		.byte	0
 16399 0183 49       		.uleb128 0x49
 16400 0184 13       		.uleb128 0x13
 16401 0185 2F       		.uleb128 0x2f
 16402 0186 0B       		.uleb128 0xb
 16403 0187 00       		.byte	0
 16404 0188 00       		.byte	0
 16405 0189 00       		.byte	0
 16406              		.section	.debug_aranges,"",%progbits
 16407 0000 34080000 		.4byte	0x834
 16408 0004 0200     		.2byte	0x2
 16409 0006 00000000 		.4byte	.Ldebug_info0
 16410 000a 04       		.byte	0x4
 16411 000b 00       		.byte	0
 16412 000c 0000     		.2byte	0
 16413 000e 0000     		.2byte	0
 16414 0010 00000000 		.4byte	.LFB0
 16415 0014 14000000 		.4byte	.LFE0-.LFB0
 16416 0018 00000000 		.4byte	.LFB1
 16417 001c 20000000 		.4byte	.LFE1-.LFB1
 16418 0020 00000000 		.4byte	.LFB2
 16419 0024 20000000 		.4byte	.LFE2-.LFB2
 16420 0028 00000000 		.4byte	.LFB3
 16421 002c 18000000 		.4byte	.LFE3-.LFB3
 16422 0030 00000000 		.4byte	.LFB4
 16423 0034 28000000 		.4byte	.LFE4-.LFB4
 16424 0038 00000000 		.4byte	.LFB5
 16425 003c 28000000 		.4byte	.LFE5-.LFB5
 16426 0040 00000000 		.4byte	.LFB6
 16427 0044 28000000 		.4byte	.LFE6-.LFB6
 16428 0048 00000000 		.4byte	.LFB7
 16429 004c 28000000 		.4byte	.LFE7-.LFB7
 16430 0050 00000000 		.4byte	.LFB8
 16431 0054 2C000000 		.4byte	.LFE8-.LFB8
 16432 0058 00000000 		.4byte	.LFB9
 16433 005c 2C000000 		.4byte	.LFE9-.LFB9
 16434 0060 00000000 		.4byte	.LFB10
 16435 0064 2C000000 		.4byte	.LFE10-.LFB10
 16436 0068 00000000 		.4byte	.LFB11
 16437 006c 2C000000 		.4byte	.LFE11-.LFB11
 16438 0070 00000000 		.4byte	.LFB12
 16439 0074 2C000000 		.4byte	.LFE12-.LFB12
 16440 0078 00000000 		.4byte	.LFB13
 16441 007c 2C000000 		.4byte	.LFE13-.LFB13
 16442 0080 00000000 		.4byte	.LFB14
 16443 0084 2C000000 		.4byte	.LFE14-.LFB14
 16444 0088 00000000 		.4byte	.LFB15
 16445 008c 28000000 		.4byte	.LFE15-.LFB15
 16446 0090 00000000 		.4byte	.LFB16
 16447 0094 2C000000 		.4byte	.LFE16-.LFB16
 16448 0098 00000000 		.4byte	.LFB17
 16449 009c 28000000 		.4byte	.LFE17-.LFB17
 16450 00a0 00000000 		.4byte	.LFB18
 16451 00a4 2C000000 		.4byte	.LFE18-.LFB18
 16452 00a8 00000000 		.4byte	.LFB19
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 347


 16453 00ac 28000000 		.4byte	.LFE19-.LFB19
 16454 00b0 00000000 		.4byte	.LFB20
 16455 00b4 2C000000 		.4byte	.LFE20-.LFB20
 16456 00b8 00000000 		.4byte	.LFB21
 16457 00bc 2C000000 		.4byte	.LFE21-.LFB21
 16458 00c0 00000000 		.4byte	.LFB22
 16459 00c4 2C000000 		.4byte	.LFE22-.LFB22
 16460 00c8 00000000 		.4byte	.LFB23
 16461 00cc 2C000000 		.4byte	.LFE23-.LFB23
 16462 00d0 00000000 		.4byte	.LFB24
 16463 00d4 28000000 		.4byte	.LFE24-.LFB24
 16464 00d8 00000000 		.4byte	.LFB25
 16465 00dc 28000000 		.4byte	.LFE25-.LFB25
 16466 00e0 00000000 		.4byte	.LFB26
 16467 00e4 28000000 		.4byte	.LFE26-.LFB26
 16468 00e8 00000000 		.4byte	.LFB27
 16469 00ec 28000000 		.4byte	.LFE27-.LFB27
 16470 00f0 00000000 		.4byte	.LFB28
 16471 00f4 28000000 		.4byte	.LFE28-.LFB28
 16472 00f8 00000000 		.4byte	.LFB29
 16473 00fc 28000000 		.4byte	.LFE29-.LFB29
 16474 0100 00000000 		.4byte	.LFB30
 16475 0104 28000000 		.4byte	.LFE30-.LFB30
 16476 0108 00000000 		.4byte	.LFB31
 16477 010c 28000000 		.4byte	.LFE31-.LFB31
 16478 0110 00000000 		.4byte	.LFB32
 16479 0114 28000000 		.4byte	.LFE32-.LFB32
 16480 0118 00000000 		.4byte	.LFB33
 16481 011c 28000000 		.4byte	.LFE33-.LFB33
 16482 0120 00000000 		.4byte	.LFB34
 16483 0124 28000000 		.4byte	.LFE34-.LFB34
 16484 0128 00000000 		.4byte	.LFB35
 16485 012c 28000000 		.4byte	.LFE35-.LFB35
 16486 0130 00000000 		.4byte	.LFB36
 16487 0134 2C000000 		.4byte	.LFE36-.LFB36
 16488 0138 00000000 		.4byte	.LFB37
 16489 013c 28000000 		.4byte	.LFE37-.LFB37
 16490 0140 00000000 		.4byte	.LFB38
 16491 0144 2C000000 		.4byte	.LFE38-.LFB38
 16492 0148 00000000 		.4byte	.LFB39
 16493 014c 28000000 		.4byte	.LFE39-.LFB39
 16494 0150 00000000 		.4byte	.LFB40
 16495 0154 2C000000 		.4byte	.LFE40-.LFB40
 16496 0158 00000000 		.4byte	.LFB41
 16497 015c 28000000 		.4byte	.LFE41-.LFB41
 16498 0160 00000000 		.4byte	.LFB42
 16499 0164 2C000000 		.4byte	.LFE42-.LFB42
 16500 0168 00000000 		.4byte	.LFB43
 16501 016c 28000000 		.4byte	.LFE43-.LFB43
 16502 0170 00000000 		.4byte	.LFB44
 16503 0174 2C000000 		.4byte	.LFE44-.LFB44
 16504 0178 00000000 		.4byte	.LFB45
 16505 017c 28000000 		.4byte	.LFE45-.LFB45
 16506 0180 00000000 		.4byte	.LFB46
 16507 0184 2C000000 		.4byte	.LFE46-.LFB46
 16508 0188 00000000 		.4byte	.LFB47
 16509 018c 28000000 		.4byte	.LFE47-.LFB47
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 348


 16510 0190 00000000 		.4byte	.LFB48
 16511 0194 2C000000 		.4byte	.LFE48-.LFB48
 16512 0198 00000000 		.4byte	.LFB49
 16513 019c 28000000 		.4byte	.LFE49-.LFB49
 16514 01a0 00000000 		.4byte	.LFB50
 16515 01a4 2C000000 		.4byte	.LFE50-.LFB50
 16516 01a8 00000000 		.4byte	.LFB51
 16517 01ac 28000000 		.4byte	.LFE51-.LFB51
 16518 01b0 00000000 		.4byte	.LFB52
 16519 01b4 2C000000 		.4byte	.LFE52-.LFB52
 16520 01b8 00000000 		.4byte	.LFB53
 16521 01bc 28000000 		.4byte	.LFE53-.LFB53
 16522 01c0 00000000 		.4byte	.LFB54
 16523 01c4 2C000000 		.4byte	.LFE54-.LFB54
 16524 01c8 00000000 		.4byte	.LFB55
 16525 01cc 28000000 		.4byte	.LFE55-.LFB55
 16526 01d0 00000000 		.4byte	.LFB56
 16527 01d4 2C000000 		.4byte	.LFE56-.LFB56
 16528 01d8 00000000 		.4byte	.LFB57
 16529 01dc 28000000 		.4byte	.LFE57-.LFB57
 16530 01e0 00000000 		.4byte	.LFB58
 16531 01e4 2C000000 		.4byte	.LFE58-.LFB58
 16532 01e8 00000000 		.4byte	.LFB59
 16533 01ec 28000000 		.4byte	.LFE59-.LFB59
 16534 01f0 00000000 		.4byte	.LFB60
 16535 01f4 2C000000 		.4byte	.LFE60-.LFB60
 16536 01f8 00000000 		.4byte	.LFB61
 16537 01fc 2C000000 		.4byte	.LFE61-.LFB61
 16538 0200 00000000 		.4byte	.LFB62
 16539 0204 4C000000 		.4byte	.LFE62-.LFB62
 16540 0208 00000000 		.4byte	.LFB63
 16541 020c 48000000 		.4byte	.LFE63-.LFB63
 16542 0210 00000000 		.4byte	.LFB64
 16543 0214 4C000000 		.4byte	.LFE64-.LFB64
 16544 0218 00000000 		.4byte	.LFB65
 16545 021c 48000000 		.4byte	.LFE65-.LFB65
 16546 0220 00000000 		.4byte	.LFB66
 16547 0224 54000000 		.4byte	.LFE66-.LFB66
 16548 0228 00000000 		.4byte	.LFB67
 16549 022c 48000000 		.4byte	.LFE67-.LFB67
 16550 0230 00000000 		.4byte	.LFB68
 16551 0234 54000000 		.4byte	.LFE68-.LFB68
 16552 0238 00000000 		.4byte	.LFB69
 16553 023c 48000000 		.4byte	.LFE69-.LFB69
 16554 0240 00000000 		.4byte	.LFB70
 16555 0244 54000000 		.4byte	.LFE70-.LFB70
 16556 0248 00000000 		.4byte	.LFB71
 16557 024c 48000000 		.4byte	.LFE71-.LFB71
 16558 0250 00000000 		.4byte	.LFB72
 16559 0254 54000000 		.4byte	.LFE72-.LFB72
 16560 0258 00000000 		.4byte	.LFB73
 16561 025c 48000000 		.4byte	.LFE73-.LFB73
 16562 0260 00000000 		.4byte	.LFB74
 16563 0264 50000000 		.4byte	.LFE74-.LFB74
 16564 0268 00000000 		.4byte	.LFB75
 16565 026c 4C000000 		.4byte	.LFE75-.LFB75
 16566 0270 00000000 		.4byte	.LFB76
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 349


 16567 0274 28000000 		.4byte	.LFE76-.LFB76
 16568 0278 00000000 		.4byte	.LFB77
 16569 027c 28000000 		.4byte	.LFE77-.LFB77
 16570 0280 00000000 		.4byte	.LFB78
 16571 0284 28000000 		.4byte	.LFE78-.LFB78
 16572 0288 00000000 		.4byte	.LFB79
 16573 028c 28000000 		.4byte	.LFE79-.LFB79
 16574 0290 00000000 		.4byte	.LFB80
 16575 0294 28000000 		.4byte	.LFE80-.LFB80
 16576 0298 00000000 		.4byte	.LFB81
 16577 029c 2C000000 		.4byte	.LFE81-.LFB81
 16578 02a0 00000000 		.4byte	.LFB82
 16579 02a4 28000000 		.4byte	.LFE82-.LFB82
 16580 02a8 00000000 		.4byte	.LFB83
 16581 02ac 2C000000 		.4byte	.LFE83-.LFB83
 16582 02b0 00000000 		.4byte	.LFB84
 16583 02b4 28000000 		.4byte	.LFE84-.LFB84
 16584 02b8 00000000 		.4byte	.LFB85
 16585 02bc 2C000000 		.4byte	.LFE85-.LFB85
 16586 02c0 00000000 		.4byte	.LFB86
 16587 02c4 28000000 		.4byte	.LFE86-.LFB86
 16588 02c8 00000000 		.4byte	.LFB87
 16589 02cc 2C000000 		.4byte	.LFE87-.LFB87
 16590 02d0 00000000 		.4byte	.LFB88
 16591 02d4 2C000000 		.4byte	.LFE88-.LFB88
 16592 02d8 00000000 		.4byte	.LFB89
 16593 02dc 28000000 		.4byte	.LFE89-.LFB89
 16594 02e0 00000000 		.4byte	.LFB90
 16595 02e4 2C000000 		.4byte	.LFE90-.LFB90
 16596 02e8 00000000 		.4byte	.LFB91
 16597 02ec 2C000000 		.4byte	.LFE91-.LFB91
 16598 02f0 00000000 		.4byte	.LFB92
 16599 02f4 2C000000 		.4byte	.LFE92-.LFB92
 16600 02f8 00000000 		.4byte	.LFB93
 16601 02fc 2C000000 		.4byte	.LFE93-.LFB93
 16602 0300 00000000 		.4byte	.LFB94
 16603 0304 2C000000 		.4byte	.LFE94-.LFB94
 16604 0308 00000000 		.4byte	.LFB95
 16605 030c 2C000000 		.4byte	.LFE95-.LFB95
 16606 0310 00000000 		.4byte	.LFB96
 16607 0314 2C000000 		.4byte	.LFE96-.LFB96
 16608 0318 00000000 		.4byte	.LFB97
 16609 031c 2C000000 		.4byte	.LFE97-.LFB97
 16610 0320 00000000 		.4byte	.LFB98
 16611 0324 2C000000 		.4byte	.LFE98-.LFB98
 16612 0328 00000000 		.4byte	.LFB99
 16613 032c 28000000 		.4byte	.LFE99-.LFB99
 16614 0330 00000000 		.4byte	.LFB100
 16615 0334 2C000000 		.4byte	.LFE100-.LFB100
 16616 0338 00000000 		.4byte	.LFB101
 16617 033c 28000000 		.4byte	.LFE101-.LFB101
 16618 0340 00000000 		.4byte	.LFB102
 16619 0344 2C000000 		.4byte	.LFE102-.LFB102
 16620 0348 00000000 		.4byte	.LFB103
 16621 034c 28000000 		.4byte	.LFE103-.LFB103
 16622 0350 00000000 		.4byte	.LFB104
 16623 0354 2C000000 		.4byte	.LFE104-.LFB104
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 350


 16624 0358 00000000 		.4byte	.LFB105
 16625 035c 28000000 		.4byte	.LFE105-.LFB105
 16626 0360 00000000 		.4byte	.LFB106
 16627 0364 2C000000 		.4byte	.LFE106-.LFB106
 16628 0368 00000000 		.4byte	.LFB107
 16629 036c 28000000 		.4byte	.LFE107-.LFB107
 16630 0370 00000000 		.4byte	.LFB108
 16631 0374 2C000000 		.4byte	.LFE108-.LFB108
 16632 0378 00000000 		.4byte	.LFB109
 16633 037c 28000000 		.4byte	.LFE109-.LFB109
 16634 0380 00000000 		.4byte	.LFB110
 16635 0384 2C000000 		.4byte	.LFE110-.LFB110
 16636 0388 00000000 		.4byte	.LFB111
 16637 038c 28000000 		.4byte	.LFE111-.LFB111
 16638 0390 00000000 		.4byte	.LFB112
 16639 0394 2C000000 		.4byte	.LFE112-.LFB112
 16640 0398 00000000 		.4byte	.LFB113
 16641 039c 28000000 		.4byte	.LFE113-.LFB113
 16642 03a0 00000000 		.4byte	.LFB114
 16643 03a4 28000000 		.4byte	.LFE114-.LFB114
 16644 03a8 00000000 		.4byte	.LFB115
 16645 03ac 28000000 		.4byte	.LFE115-.LFB115
 16646 03b0 00000000 		.4byte	.LFB116
 16647 03b4 2C000000 		.4byte	.LFE116-.LFB116
 16648 03b8 00000000 		.4byte	.LFB117
 16649 03bc 28000000 		.4byte	.LFE117-.LFB117
 16650 03c0 00000000 		.4byte	.LFB118
 16651 03c4 2C000000 		.4byte	.LFE118-.LFB118
 16652 03c8 00000000 		.4byte	.LFB119
 16653 03cc 28000000 		.4byte	.LFE119-.LFB119
 16654 03d0 00000000 		.4byte	.LFB120
 16655 03d4 2C000000 		.4byte	.LFE120-.LFB120
 16656 03d8 00000000 		.4byte	.LFB121
 16657 03dc 28000000 		.4byte	.LFE121-.LFB121
 16658 03e0 00000000 		.4byte	.LFB122
 16659 03e4 2C000000 		.4byte	.LFE122-.LFB122
 16660 03e8 00000000 		.4byte	.LFB123
 16661 03ec 28000000 		.4byte	.LFE123-.LFB123
 16662 03f0 00000000 		.4byte	.LFB124
 16663 03f4 2C000000 		.4byte	.LFE124-.LFB124
 16664 03f8 00000000 		.4byte	.LFB125
 16665 03fc 28000000 		.4byte	.LFE125-.LFB125
 16666 0400 00000000 		.4byte	.LFB126
 16667 0404 2C000000 		.4byte	.LFE126-.LFB126
 16668 0408 00000000 		.4byte	.LFB127
 16669 040c 28000000 		.4byte	.LFE127-.LFB127
 16670 0410 00000000 		.4byte	.LFB128
 16671 0414 28000000 		.4byte	.LFE128-.LFB128
 16672 0418 00000000 		.4byte	.LFB129
 16673 041c 2C000000 		.4byte	.LFE129-.LFB129
 16674 0420 00000000 		.4byte	.LFB130
 16675 0424 2C000000 		.4byte	.LFE130-.LFB130
 16676 0428 00000000 		.4byte	.LFB131
 16677 042c 2C000000 		.4byte	.LFE131-.LFB131
 16678 0430 00000000 		.4byte	.LFB132
 16679 0434 2C000000 		.4byte	.LFE132-.LFB132
 16680 0438 00000000 		.4byte	.LFB133
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 351


 16681 043c 2C000000 		.4byte	.LFE133-.LFB133
 16682 0440 00000000 		.4byte	.LFB134
 16683 0444 2C000000 		.4byte	.LFE134-.LFB134
 16684 0448 00000000 		.4byte	.LFB135
 16685 044c D8000000 		.4byte	.LFE135-.LFB135
 16686 0450 00000000 		.4byte	.LFB136
 16687 0454 EC000000 		.4byte	.LFE136-.LFB136
 16688 0458 00000000 		.4byte	.LFB137
 16689 045c A4000000 		.4byte	.LFE137-.LFB137
 16690 0460 00000000 		.4byte	.LFB138
 16691 0464 B8000000 		.4byte	.LFE138-.LFB138
 16692 0468 00000000 		.4byte	.LFB139
 16693 046c 68000000 		.4byte	.LFE139-.LFB139
 16694 0470 00000000 		.4byte	.LFB140
 16695 0474 34000000 		.4byte	.LFE140-.LFB140
 16696 0478 00000000 		.4byte	.LFB141
 16697 047c 34000000 		.4byte	.LFE141-.LFB141
 16698 0480 00000000 		.4byte	.LFB142
 16699 0484 34000000 		.4byte	.LFE142-.LFB142
 16700 0488 00000000 		.4byte	.LFB143
 16701 048c 34000000 		.4byte	.LFE143-.LFB143
 16702 0490 00000000 		.4byte	.LFB144
 16703 0494 68000000 		.4byte	.LFE144-.LFB144
 16704 0498 00000000 		.4byte	.LFB145
 16705 049c 34000000 		.4byte	.LFE145-.LFB145
 16706 04a0 00000000 		.4byte	.LFB146
 16707 04a4 34000000 		.4byte	.LFE146-.LFB146
 16708 04a8 00000000 		.4byte	.LFB147
 16709 04ac 34000000 		.4byte	.LFE147-.LFB147
 16710 04b0 00000000 		.4byte	.LFB148
 16711 04b4 34000000 		.4byte	.LFE148-.LFB148
 16712 04b8 00000000 		.4byte	.LFB149
 16713 04bc 44000000 		.4byte	.LFE149-.LFB149
 16714 04c0 00000000 		.4byte	.LFB150
 16715 04c4 4C000000 		.4byte	.LFE150-.LFB150
 16716 04c8 00000000 		.4byte	.LFB151
 16717 04cc 2C000000 		.4byte	.LFE151-.LFB151
 16718 04d0 00000000 		.4byte	.LFB152
 16719 04d4 2C000000 		.4byte	.LFE152-.LFB152
 16720 04d8 00000000 		.4byte	.LFB153
 16721 04dc 2C000000 		.4byte	.LFE153-.LFB153
 16722 04e0 00000000 		.4byte	.LFB154
 16723 04e4 2C000000 		.4byte	.LFE154-.LFB154
 16724 04e8 00000000 		.4byte	.LFB155
 16725 04ec 2C000000 		.4byte	.LFE155-.LFB155
 16726 04f0 00000000 		.4byte	.LFB156
 16727 04f4 2C000000 		.4byte	.LFE156-.LFB156
 16728 04f8 00000000 		.4byte	.LFB157
 16729 04fc 2C000000 		.4byte	.LFE157-.LFB157
 16730 0500 00000000 		.4byte	.LFB158
 16731 0504 40000000 		.4byte	.LFE158-.LFB158
 16732 0508 00000000 		.4byte	.LFB159
 16733 050c 2C000000 		.4byte	.LFE159-.LFB159
 16734 0510 00000000 		.4byte	.LFB160
 16735 0514 28000000 		.4byte	.LFE160-.LFB160
 16736 0518 00000000 		.4byte	.LFB161
 16737 051c 44000000 		.4byte	.LFE161-.LFB161
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 352


 16738 0520 00000000 		.4byte	.LFB162
 16739 0524 30000000 		.4byte	.LFE162-.LFB162
 16740 0528 00000000 		.4byte	.LFB163
 16741 052c 1C000000 		.4byte	.LFE163-.LFB163
 16742 0530 00000000 		.4byte	.LFB164
 16743 0534 1C000000 		.4byte	.LFE164-.LFB164
 16744 0538 00000000 		.4byte	.LFB165
 16745 053c 1C000000 		.4byte	.LFE165-.LFB165
 16746 0540 00000000 		.4byte	.LFB166
 16747 0544 2C000000 		.4byte	.LFE166-.LFB166
 16748 0548 00000000 		.4byte	.LFB167
 16749 054c 2C000000 		.4byte	.LFE167-.LFB167
 16750 0550 00000000 		.4byte	.LFB168
 16751 0554 2C000000 		.4byte	.LFE168-.LFB168
 16752 0558 00000000 		.4byte	.LFB169
 16753 055c 2C000000 		.4byte	.LFE169-.LFB169
 16754 0560 00000000 		.4byte	.LFB170
 16755 0564 2C000000 		.4byte	.LFE170-.LFB170
 16756 0568 00000000 		.4byte	.LFB171
 16757 056c 2C000000 		.4byte	.LFE171-.LFB171
 16758 0570 00000000 		.4byte	.LFB172
 16759 0574 2C000000 		.4byte	.LFE172-.LFB172
 16760 0578 00000000 		.4byte	.LFB173
 16761 057c 28000000 		.4byte	.LFE173-.LFB173
 16762 0580 00000000 		.4byte	.LFB174
 16763 0584 2C000000 		.4byte	.LFE174-.LFB174
 16764 0588 00000000 		.4byte	.LFB175
 16765 058c 28000000 		.4byte	.LFE175-.LFB175
 16766 0590 00000000 		.4byte	.LFB176
 16767 0594 28000000 		.4byte	.LFE176-.LFB176
 16768 0598 00000000 		.4byte	.LFB177
 16769 059c 1C000000 		.4byte	.LFE177-.LFB177
 16770 05a0 00000000 		.4byte	.LFB178
 16771 05a4 1C000000 		.4byte	.LFE178-.LFB178
 16772 05a8 00000000 		.4byte	.LFB179
 16773 05ac 1C000000 		.4byte	.LFE179-.LFB179
 16774 05b0 00000000 		.4byte	.LFB180
 16775 05b4 1C000000 		.4byte	.LFE180-.LFB180
 16776 05b8 00000000 		.4byte	.LFB181
 16777 05bc 2C000000 		.4byte	.LFE181-.LFB181
 16778 05c0 00000000 		.4byte	.LFB182
 16779 05c4 28000000 		.4byte	.LFE182-.LFB182
 16780 05c8 00000000 		.4byte	.LFB183
 16781 05cc 2C000000 		.4byte	.LFE183-.LFB183
 16782 05d0 00000000 		.4byte	.LFB184
 16783 05d4 28000000 		.4byte	.LFE184-.LFB184
 16784 05d8 00000000 		.4byte	.LFB185
 16785 05dc 2C000000 		.4byte	.LFE185-.LFB185
 16786 05e0 00000000 		.4byte	.LFB186
 16787 05e4 30000000 		.4byte	.LFE186-.LFB186
 16788 05e8 00000000 		.4byte	.LFB187
 16789 05ec 2C000000 		.4byte	.LFE187-.LFB187
 16790 05f0 00000000 		.4byte	.LFB188
 16791 05f4 2C000000 		.4byte	.LFE188-.LFB188
 16792 05f8 00000000 		.4byte	.LFB189
 16793 05fc 2C000000 		.4byte	.LFE189-.LFB189
 16794 0600 00000000 		.4byte	.LFB190
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 353


 16795 0604 2C000000 		.4byte	.LFE190-.LFB190
 16796 0608 00000000 		.4byte	.LFB191
 16797 060c 2C000000 		.4byte	.LFE191-.LFB191
 16798 0610 00000000 		.4byte	.LFB192
 16799 0614 28000000 		.4byte	.LFE192-.LFB192
 16800 0618 00000000 		.4byte	.LFB193
 16801 061c 2C000000 		.4byte	.LFE193-.LFB193
 16802 0620 00000000 		.4byte	.LFB194
 16803 0624 28000000 		.4byte	.LFE194-.LFB194
 16804 0628 00000000 		.4byte	.LFB195
 16805 062c 2C000000 		.4byte	.LFE195-.LFB195
 16806 0630 00000000 		.4byte	.LFB196
 16807 0634 28000000 		.4byte	.LFE196-.LFB196
 16808 0638 00000000 		.4byte	.LFB197
 16809 063c 2C000000 		.4byte	.LFE197-.LFB197
 16810 0640 00000000 		.4byte	.LFB198
 16811 0644 28000000 		.4byte	.LFE198-.LFB198
 16812 0648 00000000 		.4byte	.LFB199
 16813 064c 2C000000 		.4byte	.LFE199-.LFB199
 16814 0650 00000000 		.4byte	.LFB200
 16815 0654 28000000 		.4byte	.LFE200-.LFB200
 16816 0658 00000000 		.4byte	.LFB201
 16817 065c 2C000000 		.4byte	.LFE201-.LFB201
 16818 0660 00000000 		.4byte	.LFB202
 16819 0664 28000000 		.4byte	.LFE202-.LFB202
 16820 0668 00000000 		.4byte	.LFB203
 16821 066c 34000000 		.4byte	.LFE203-.LFB203
 16822 0670 00000000 		.4byte	.LFB204
 16823 0674 28000000 		.4byte	.LFE204-.LFB204
 16824 0678 00000000 		.4byte	.LFB205
 16825 067c 2C000000 		.4byte	.LFE205-.LFB205
 16826 0680 00000000 		.4byte	.LFB206
 16827 0684 28000000 		.4byte	.LFE206-.LFB206
 16828 0688 00000000 		.4byte	.LFB207
 16829 068c 2C000000 		.4byte	.LFE207-.LFB207
 16830 0690 00000000 		.4byte	.LFB208
 16831 0694 2C000000 		.4byte	.LFE208-.LFB208
 16832 0698 00000000 		.4byte	.LFB209
 16833 069c 28000000 		.4byte	.LFE209-.LFB209
 16834 06a0 00000000 		.4byte	.LFB210
 16835 06a4 28000000 		.4byte	.LFE210-.LFB210
 16836 06a8 00000000 		.4byte	.LFB211
 16837 06ac 30000000 		.4byte	.LFE211-.LFB211
 16838 06b0 00000000 		.4byte	.LFB212
 16839 06b4 2C000000 		.4byte	.LFE212-.LFB212
 16840 06b8 00000000 		.4byte	.LFB213
 16841 06bc 30000000 		.4byte	.LFE213-.LFB213
 16842 06c0 00000000 		.4byte	.LFB214
 16843 06c4 2C000000 		.4byte	.LFE214-.LFB214
 16844 06c8 00000000 		.4byte	.LFB215
 16845 06cc 30000000 		.4byte	.LFE215-.LFB215
 16846 06d0 00000000 		.4byte	.LFB216
 16847 06d4 2C000000 		.4byte	.LFE216-.LFB216
 16848 06d8 00000000 		.4byte	.LFB217
 16849 06dc 2C000000 		.4byte	.LFE217-.LFB217
 16850 06e0 00000000 		.4byte	.LFB218
 16851 06e4 28000000 		.4byte	.LFE218-.LFB218
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 354


 16852 06e8 00000000 		.4byte	.LFB219
 16853 06ec 2C000000 		.4byte	.LFE219-.LFB219
 16854 06f0 00000000 		.4byte	.LFB220
 16855 06f4 28000000 		.4byte	.LFE220-.LFB220
 16856 06f8 00000000 		.4byte	.LFB221
 16857 06fc 2C000000 		.4byte	.LFE221-.LFB221
 16858 0700 00000000 		.4byte	.LFB222
 16859 0704 28000000 		.4byte	.LFE222-.LFB222
 16860 0708 00000000 		.4byte	.LFB223
 16861 070c 34000000 		.4byte	.LFE223-.LFB223
 16862 0710 00000000 		.4byte	.LFB224
 16863 0714 28000000 		.4byte	.LFE224-.LFB224
 16864 0718 00000000 		.4byte	.LFB225
 16865 071c 34000000 		.4byte	.LFE225-.LFB225
 16866 0720 00000000 		.4byte	.LFB226
 16867 0724 28000000 		.4byte	.LFE226-.LFB226
 16868 0728 00000000 		.4byte	.LFB227
 16869 072c 34000000 		.4byte	.LFE227-.LFB227
 16870 0730 00000000 		.4byte	.LFB228
 16871 0734 28000000 		.4byte	.LFE228-.LFB228
 16872 0738 00000000 		.4byte	.LFB229
 16873 073c 34000000 		.4byte	.LFE229-.LFB229
 16874 0740 00000000 		.4byte	.LFB230
 16875 0744 28000000 		.4byte	.LFE230-.LFB230
 16876 0748 00000000 		.4byte	.LFB231
 16877 074c 34000000 		.4byte	.LFE231-.LFB231
 16878 0750 00000000 		.4byte	.LFB232
 16879 0754 28000000 		.4byte	.LFE232-.LFB232
 16880 0758 00000000 		.4byte	.LFB233
 16881 075c 34000000 		.4byte	.LFE233-.LFB233
 16882 0760 00000000 		.4byte	.LFB234
 16883 0764 28000000 		.4byte	.LFE234-.LFB234
 16884 0768 00000000 		.4byte	.LFB235
 16885 076c 2C000000 		.4byte	.LFE235-.LFB235
 16886 0770 00000000 		.4byte	.LFB236
 16887 0774 28000000 		.4byte	.LFE236-.LFB236
 16888 0778 00000000 		.4byte	.LFB237
 16889 077c 2C000000 		.4byte	.LFE237-.LFB237
 16890 0780 00000000 		.4byte	.LFB238
 16891 0784 28000000 		.4byte	.LFE238-.LFB238
 16892 0788 00000000 		.4byte	.LFB239
 16893 078c 2C000000 		.4byte	.LFE239-.LFB239
 16894 0790 00000000 		.4byte	.LFB240
 16895 0794 2C000000 		.4byte	.LFE240-.LFB240
 16896 0798 00000000 		.4byte	.LFB241
 16897 079c 2C000000 		.4byte	.LFE241-.LFB241
 16898 07a0 00000000 		.4byte	.LFB242
 16899 07a4 2C000000 		.4byte	.LFE242-.LFB242
 16900 07a8 00000000 		.4byte	.LFB243
 16901 07ac 2C000000 		.4byte	.LFE243-.LFB243
 16902 07b0 00000000 		.4byte	.LFB244
 16903 07b4 2C000000 		.4byte	.LFE244-.LFB244
 16904 07b8 00000000 		.4byte	.LFB245
 16905 07bc 2C000000 		.4byte	.LFE245-.LFB245
 16906 07c0 00000000 		.4byte	.LFB246
 16907 07c4 2C000000 		.4byte	.LFE246-.LFB246
 16908 07c8 00000000 		.4byte	.LFB247
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 355


 16909 07cc 2C000000 		.4byte	.LFE247-.LFB247
 16910 07d0 00000000 		.4byte	.LFB248
 16911 07d4 28000000 		.4byte	.LFE248-.LFB248
 16912 07d8 00000000 		.4byte	.LFB249
 16913 07dc 1C000000 		.4byte	.LFE249-.LFB249
 16914 07e0 00000000 		.4byte	.LFB250
 16915 07e4 64000000 		.4byte	.LFE250-.LFB250
 16916 07e8 00000000 		.4byte	.LFB251
 16917 07ec 28000000 		.4byte	.LFE251-.LFB251
 16918 07f0 00000000 		.4byte	.LFB252
 16919 07f4 28000000 		.4byte	.LFE252-.LFB252
 16920 07f8 00000000 		.4byte	.LFB253
 16921 07fc 28000000 		.4byte	.LFE253-.LFB253
 16922 0800 00000000 		.4byte	.LFB254
 16923 0804 2C010000 		.4byte	.LFE254-.LFB254
 16924 0808 00000000 		.4byte	.LFB255
 16925 080c 28000000 		.4byte	.LFE255-.LFB255
 16926 0810 00000000 		.4byte	.LFB256
 16927 0814 28000000 		.4byte	.LFE256-.LFB256
 16928 0818 00000000 		.4byte	.LFB257
 16929 081c 28000000 		.4byte	.LFE257-.LFB257
 16930 0820 00000000 		.4byte	.LFB258
 16931 0824 28000000 		.4byte	.LFE258-.LFB258
 16932 0828 00000000 		.4byte	.LFB259
 16933 082c 6E000000 		.4byte	.LFE259-.LFB259
 16934 0830 00000000 		.4byte	0
 16935 0834 00000000 		.4byte	0
 16936              		.section	.debug_ranges,"",%progbits
 16937              	.Ldebug_ranges0:
 16938 0000 00000000 		.4byte	.LFB0
 16939 0004 14000000 		.4byte	.LFE0
 16940 0008 00000000 		.4byte	.LFB1
 16941 000c 20000000 		.4byte	.LFE1
 16942 0010 00000000 		.4byte	.LFB2
 16943 0014 20000000 		.4byte	.LFE2
 16944 0018 00000000 		.4byte	.LFB3
 16945 001c 18000000 		.4byte	.LFE3
 16946 0020 00000000 		.4byte	.LFB4
 16947 0024 28000000 		.4byte	.LFE4
 16948 0028 00000000 		.4byte	.LFB5
 16949 002c 28000000 		.4byte	.LFE5
 16950 0030 00000000 		.4byte	.LFB6
 16951 0034 28000000 		.4byte	.LFE6
 16952 0038 00000000 		.4byte	.LFB7
 16953 003c 28000000 		.4byte	.LFE7
 16954 0040 00000000 		.4byte	.LFB8
 16955 0044 2C000000 		.4byte	.LFE8
 16956 0048 00000000 		.4byte	.LFB9
 16957 004c 2C000000 		.4byte	.LFE9
 16958 0050 00000000 		.4byte	.LFB10
 16959 0054 2C000000 		.4byte	.LFE10
 16960 0058 00000000 		.4byte	.LFB11
 16961 005c 2C000000 		.4byte	.LFE11
 16962 0060 00000000 		.4byte	.LFB12
 16963 0064 2C000000 		.4byte	.LFE12
 16964 0068 00000000 		.4byte	.LFB13
 16965 006c 2C000000 		.4byte	.LFE13
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 356


 16966 0070 00000000 		.4byte	.LFB14
 16967 0074 2C000000 		.4byte	.LFE14
 16968 0078 00000000 		.4byte	.LFB15
 16969 007c 28000000 		.4byte	.LFE15
 16970 0080 00000000 		.4byte	.LFB16
 16971 0084 2C000000 		.4byte	.LFE16
 16972 0088 00000000 		.4byte	.LFB17
 16973 008c 28000000 		.4byte	.LFE17
 16974 0090 00000000 		.4byte	.LFB18
 16975 0094 2C000000 		.4byte	.LFE18
 16976 0098 00000000 		.4byte	.LFB19
 16977 009c 28000000 		.4byte	.LFE19
 16978 00a0 00000000 		.4byte	.LFB20
 16979 00a4 2C000000 		.4byte	.LFE20
 16980 00a8 00000000 		.4byte	.LFB21
 16981 00ac 2C000000 		.4byte	.LFE21
 16982 00b0 00000000 		.4byte	.LFB22
 16983 00b4 2C000000 		.4byte	.LFE22
 16984 00b8 00000000 		.4byte	.LFB23
 16985 00bc 2C000000 		.4byte	.LFE23
 16986 00c0 00000000 		.4byte	.LFB24
 16987 00c4 28000000 		.4byte	.LFE24
 16988 00c8 00000000 		.4byte	.LFB25
 16989 00cc 28000000 		.4byte	.LFE25
 16990 00d0 00000000 		.4byte	.LFB26
 16991 00d4 28000000 		.4byte	.LFE26
 16992 00d8 00000000 		.4byte	.LFB27
 16993 00dc 28000000 		.4byte	.LFE27
 16994 00e0 00000000 		.4byte	.LFB28
 16995 00e4 28000000 		.4byte	.LFE28
 16996 00e8 00000000 		.4byte	.LFB29
 16997 00ec 28000000 		.4byte	.LFE29
 16998 00f0 00000000 		.4byte	.LFB30
 16999 00f4 28000000 		.4byte	.LFE30
 17000 00f8 00000000 		.4byte	.LFB31
 17001 00fc 28000000 		.4byte	.LFE31
 17002 0100 00000000 		.4byte	.LFB32
 17003 0104 28000000 		.4byte	.LFE32
 17004 0108 00000000 		.4byte	.LFB33
 17005 010c 28000000 		.4byte	.LFE33
 17006 0110 00000000 		.4byte	.LFB34
 17007 0114 28000000 		.4byte	.LFE34
 17008 0118 00000000 		.4byte	.LFB35
 17009 011c 28000000 		.4byte	.LFE35
 17010 0120 00000000 		.4byte	.LFB36
 17011 0124 2C000000 		.4byte	.LFE36
 17012 0128 00000000 		.4byte	.LFB37
 17013 012c 28000000 		.4byte	.LFE37
 17014 0130 00000000 		.4byte	.LFB38
 17015 0134 2C000000 		.4byte	.LFE38
 17016 0138 00000000 		.4byte	.LFB39
 17017 013c 28000000 		.4byte	.LFE39
 17018 0140 00000000 		.4byte	.LFB40
 17019 0144 2C000000 		.4byte	.LFE40
 17020 0148 00000000 		.4byte	.LFB41
 17021 014c 28000000 		.4byte	.LFE41
 17022 0150 00000000 		.4byte	.LFB42
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 357


 17023 0154 2C000000 		.4byte	.LFE42
 17024 0158 00000000 		.4byte	.LFB43
 17025 015c 28000000 		.4byte	.LFE43
 17026 0160 00000000 		.4byte	.LFB44
 17027 0164 2C000000 		.4byte	.LFE44
 17028 0168 00000000 		.4byte	.LFB45
 17029 016c 28000000 		.4byte	.LFE45
 17030 0170 00000000 		.4byte	.LFB46
 17031 0174 2C000000 		.4byte	.LFE46
 17032 0178 00000000 		.4byte	.LFB47
 17033 017c 28000000 		.4byte	.LFE47
 17034 0180 00000000 		.4byte	.LFB48
 17035 0184 2C000000 		.4byte	.LFE48
 17036 0188 00000000 		.4byte	.LFB49
 17037 018c 28000000 		.4byte	.LFE49
 17038 0190 00000000 		.4byte	.LFB50
 17039 0194 2C000000 		.4byte	.LFE50
 17040 0198 00000000 		.4byte	.LFB51
 17041 019c 28000000 		.4byte	.LFE51
 17042 01a0 00000000 		.4byte	.LFB52
 17043 01a4 2C000000 		.4byte	.LFE52
 17044 01a8 00000000 		.4byte	.LFB53
 17045 01ac 28000000 		.4byte	.LFE53
 17046 01b0 00000000 		.4byte	.LFB54
 17047 01b4 2C000000 		.4byte	.LFE54
 17048 01b8 00000000 		.4byte	.LFB55
 17049 01bc 28000000 		.4byte	.LFE55
 17050 01c0 00000000 		.4byte	.LFB56
 17051 01c4 2C000000 		.4byte	.LFE56
 17052 01c8 00000000 		.4byte	.LFB57
 17053 01cc 28000000 		.4byte	.LFE57
 17054 01d0 00000000 		.4byte	.LFB58
 17055 01d4 2C000000 		.4byte	.LFE58
 17056 01d8 00000000 		.4byte	.LFB59
 17057 01dc 28000000 		.4byte	.LFE59
 17058 01e0 00000000 		.4byte	.LFB60
 17059 01e4 2C000000 		.4byte	.LFE60
 17060 01e8 00000000 		.4byte	.LFB61
 17061 01ec 2C000000 		.4byte	.LFE61
 17062 01f0 00000000 		.4byte	.LFB62
 17063 01f4 4C000000 		.4byte	.LFE62
 17064 01f8 00000000 		.4byte	.LFB63
 17065 01fc 48000000 		.4byte	.LFE63
 17066 0200 00000000 		.4byte	.LFB64
 17067 0204 4C000000 		.4byte	.LFE64
 17068 0208 00000000 		.4byte	.LFB65
 17069 020c 48000000 		.4byte	.LFE65
 17070 0210 00000000 		.4byte	.LFB66
 17071 0214 54000000 		.4byte	.LFE66
 17072 0218 00000000 		.4byte	.LFB67
 17073 021c 48000000 		.4byte	.LFE67
 17074 0220 00000000 		.4byte	.LFB68
 17075 0224 54000000 		.4byte	.LFE68
 17076 0228 00000000 		.4byte	.LFB69
 17077 022c 48000000 		.4byte	.LFE69
 17078 0230 00000000 		.4byte	.LFB70
 17079 0234 54000000 		.4byte	.LFE70
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 358


 17080 0238 00000000 		.4byte	.LFB71
 17081 023c 48000000 		.4byte	.LFE71
 17082 0240 00000000 		.4byte	.LFB72
 17083 0244 54000000 		.4byte	.LFE72
 17084 0248 00000000 		.4byte	.LFB73
 17085 024c 48000000 		.4byte	.LFE73
 17086 0250 00000000 		.4byte	.LFB74
 17087 0254 50000000 		.4byte	.LFE74
 17088 0258 00000000 		.4byte	.LFB75
 17089 025c 4C000000 		.4byte	.LFE75
 17090 0260 00000000 		.4byte	.LFB76
 17091 0264 28000000 		.4byte	.LFE76
 17092 0268 00000000 		.4byte	.LFB77
 17093 026c 28000000 		.4byte	.LFE77
 17094 0270 00000000 		.4byte	.LFB78
 17095 0274 28000000 		.4byte	.LFE78
 17096 0278 00000000 		.4byte	.LFB79
 17097 027c 28000000 		.4byte	.LFE79
 17098 0280 00000000 		.4byte	.LFB80
 17099 0284 28000000 		.4byte	.LFE80
 17100 0288 00000000 		.4byte	.LFB81
 17101 028c 2C000000 		.4byte	.LFE81
 17102 0290 00000000 		.4byte	.LFB82
 17103 0294 28000000 		.4byte	.LFE82
 17104 0298 00000000 		.4byte	.LFB83
 17105 029c 2C000000 		.4byte	.LFE83
 17106 02a0 00000000 		.4byte	.LFB84
 17107 02a4 28000000 		.4byte	.LFE84
 17108 02a8 00000000 		.4byte	.LFB85
 17109 02ac 2C000000 		.4byte	.LFE85
 17110 02b0 00000000 		.4byte	.LFB86
 17111 02b4 28000000 		.4byte	.LFE86
 17112 02b8 00000000 		.4byte	.LFB87
 17113 02bc 2C000000 		.4byte	.LFE87
 17114 02c0 00000000 		.4byte	.LFB88
 17115 02c4 2C000000 		.4byte	.LFE88
 17116 02c8 00000000 		.4byte	.LFB89
 17117 02cc 28000000 		.4byte	.LFE89
 17118 02d0 00000000 		.4byte	.LFB90
 17119 02d4 2C000000 		.4byte	.LFE90
 17120 02d8 00000000 		.4byte	.LFB91
 17121 02dc 2C000000 		.4byte	.LFE91
 17122 02e0 00000000 		.4byte	.LFB92
 17123 02e4 2C000000 		.4byte	.LFE92
 17124 02e8 00000000 		.4byte	.LFB93
 17125 02ec 2C000000 		.4byte	.LFE93
 17126 02f0 00000000 		.4byte	.LFB94
 17127 02f4 2C000000 		.4byte	.LFE94
 17128 02f8 00000000 		.4byte	.LFB95
 17129 02fc 2C000000 		.4byte	.LFE95
 17130 0300 00000000 		.4byte	.LFB96
 17131 0304 2C000000 		.4byte	.LFE96
 17132 0308 00000000 		.4byte	.LFB97
 17133 030c 2C000000 		.4byte	.LFE97
 17134 0310 00000000 		.4byte	.LFB98
 17135 0314 2C000000 		.4byte	.LFE98
 17136 0318 00000000 		.4byte	.LFB99
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 359


 17137 031c 28000000 		.4byte	.LFE99
 17138 0320 00000000 		.4byte	.LFB100
 17139 0324 2C000000 		.4byte	.LFE100
 17140 0328 00000000 		.4byte	.LFB101
 17141 032c 28000000 		.4byte	.LFE101
 17142 0330 00000000 		.4byte	.LFB102
 17143 0334 2C000000 		.4byte	.LFE102
 17144 0338 00000000 		.4byte	.LFB103
 17145 033c 28000000 		.4byte	.LFE103
 17146 0340 00000000 		.4byte	.LFB104
 17147 0344 2C000000 		.4byte	.LFE104
 17148 0348 00000000 		.4byte	.LFB105
 17149 034c 28000000 		.4byte	.LFE105
 17150 0350 00000000 		.4byte	.LFB106
 17151 0354 2C000000 		.4byte	.LFE106
 17152 0358 00000000 		.4byte	.LFB107
 17153 035c 28000000 		.4byte	.LFE107
 17154 0360 00000000 		.4byte	.LFB108
 17155 0364 2C000000 		.4byte	.LFE108
 17156 0368 00000000 		.4byte	.LFB109
 17157 036c 28000000 		.4byte	.LFE109
 17158 0370 00000000 		.4byte	.LFB110
 17159 0374 2C000000 		.4byte	.LFE110
 17160 0378 00000000 		.4byte	.LFB111
 17161 037c 28000000 		.4byte	.LFE111
 17162 0380 00000000 		.4byte	.LFB112
 17163 0384 2C000000 		.4byte	.LFE112
 17164 0388 00000000 		.4byte	.LFB113
 17165 038c 28000000 		.4byte	.LFE113
 17166 0390 00000000 		.4byte	.LFB114
 17167 0394 28000000 		.4byte	.LFE114
 17168 0398 00000000 		.4byte	.LFB115
 17169 039c 28000000 		.4byte	.LFE115
 17170 03a0 00000000 		.4byte	.LFB116
 17171 03a4 2C000000 		.4byte	.LFE116
 17172 03a8 00000000 		.4byte	.LFB117
 17173 03ac 28000000 		.4byte	.LFE117
 17174 03b0 00000000 		.4byte	.LFB118
 17175 03b4 2C000000 		.4byte	.LFE118
 17176 03b8 00000000 		.4byte	.LFB119
 17177 03bc 28000000 		.4byte	.LFE119
 17178 03c0 00000000 		.4byte	.LFB120
 17179 03c4 2C000000 		.4byte	.LFE120
 17180 03c8 00000000 		.4byte	.LFB121
 17181 03cc 28000000 		.4byte	.LFE121
 17182 03d0 00000000 		.4byte	.LFB122
 17183 03d4 2C000000 		.4byte	.LFE122
 17184 03d8 00000000 		.4byte	.LFB123
 17185 03dc 28000000 		.4byte	.LFE123
 17186 03e0 00000000 		.4byte	.LFB124
 17187 03e4 2C000000 		.4byte	.LFE124
 17188 03e8 00000000 		.4byte	.LFB125
 17189 03ec 28000000 		.4byte	.LFE125
 17190 03f0 00000000 		.4byte	.LFB126
 17191 03f4 2C000000 		.4byte	.LFE126
 17192 03f8 00000000 		.4byte	.LFB127
 17193 03fc 28000000 		.4byte	.LFE127
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 360


 17194 0400 00000000 		.4byte	.LFB128
 17195 0404 28000000 		.4byte	.LFE128
 17196 0408 00000000 		.4byte	.LFB129
 17197 040c 2C000000 		.4byte	.LFE129
 17198 0410 00000000 		.4byte	.LFB130
 17199 0414 2C000000 		.4byte	.LFE130
 17200 0418 00000000 		.4byte	.LFB131
 17201 041c 2C000000 		.4byte	.LFE131
 17202 0420 00000000 		.4byte	.LFB132
 17203 0424 2C000000 		.4byte	.LFE132
 17204 0428 00000000 		.4byte	.LFB133
 17205 042c 2C000000 		.4byte	.LFE133
 17206 0430 00000000 		.4byte	.LFB134
 17207 0434 2C000000 		.4byte	.LFE134
 17208 0438 00000000 		.4byte	.LFB135
 17209 043c D8000000 		.4byte	.LFE135
 17210 0440 00000000 		.4byte	.LFB136
 17211 0444 EC000000 		.4byte	.LFE136
 17212 0448 00000000 		.4byte	.LFB137
 17213 044c A4000000 		.4byte	.LFE137
 17214 0450 00000000 		.4byte	.LFB138
 17215 0454 B8000000 		.4byte	.LFE138
 17216 0458 00000000 		.4byte	.LFB139
 17217 045c 68000000 		.4byte	.LFE139
 17218 0460 00000000 		.4byte	.LFB140
 17219 0464 34000000 		.4byte	.LFE140
 17220 0468 00000000 		.4byte	.LFB141
 17221 046c 34000000 		.4byte	.LFE141
 17222 0470 00000000 		.4byte	.LFB142
 17223 0474 34000000 		.4byte	.LFE142
 17224 0478 00000000 		.4byte	.LFB143
 17225 047c 34000000 		.4byte	.LFE143
 17226 0480 00000000 		.4byte	.LFB144
 17227 0484 68000000 		.4byte	.LFE144
 17228 0488 00000000 		.4byte	.LFB145
 17229 048c 34000000 		.4byte	.LFE145
 17230 0490 00000000 		.4byte	.LFB146
 17231 0494 34000000 		.4byte	.LFE146
 17232 0498 00000000 		.4byte	.LFB147
 17233 049c 34000000 		.4byte	.LFE147
 17234 04a0 00000000 		.4byte	.LFB148
 17235 04a4 34000000 		.4byte	.LFE148
 17236 04a8 00000000 		.4byte	.LFB149
 17237 04ac 44000000 		.4byte	.LFE149
 17238 04b0 00000000 		.4byte	.LFB150
 17239 04b4 4C000000 		.4byte	.LFE150
 17240 04b8 00000000 		.4byte	.LFB151
 17241 04bc 2C000000 		.4byte	.LFE151
 17242 04c0 00000000 		.4byte	.LFB152
 17243 04c4 2C000000 		.4byte	.LFE152
 17244 04c8 00000000 		.4byte	.LFB153
 17245 04cc 2C000000 		.4byte	.LFE153
 17246 04d0 00000000 		.4byte	.LFB154
 17247 04d4 2C000000 		.4byte	.LFE154
 17248 04d8 00000000 		.4byte	.LFB155
 17249 04dc 2C000000 		.4byte	.LFE155
 17250 04e0 00000000 		.4byte	.LFB156
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 361


 17251 04e4 2C000000 		.4byte	.LFE156
 17252 04e8 00000000 		.4byte	.LFB157
 17253 04ec 2C000000 		.4byte	.LFE157
 17254 04f0 00000000 		.4byte	.LFB158
 17255 04f4 40000000 		.4byte	.LFE158
 17256 04f8 00000000 		.4byte	.LFB159
 17257 04fc 2C000000 		.4byte	.LFE159
 17258 0500 00000000 		.4byte	.LFB160
 17259 0504 28000000 		.4byte	.LFE160
 17260 0508 00000000 		.4byte	.LFB161
 17261 050c 44000000 		.4byte	.LFE161
 17262 0510 00000000 		.4byte	.LFB162
 17263 0514 30000000 		.4byte	.LFE162
 17264 0518 00000000 		.4byte	.LFB163
 17265 051c 1C000000 		.4byte	.LFE163
 17266 0520 00000000 		.4byte	.LFB164
 17267 0524 1C000000 		.4byte	.LFE164
 17268 0528 00000000 		.4byte	.LFB165
 17269 052c 1C000000 		.4byte	.LFE165
 17270 0530 00000000 		.4byte	.LFB166
 17271 0534 2C000000 		.4byte	.LFE166
 17272 0538 00000000 		.4byte	.LFB167
 17273 053c 2C000000 		.4byte	.LFE167
 17274 0540 00000000 		.4byte	.LFB168
 17275 0544 2C000000 		.4byte	.LFE168
 17276 0548 00000000 		.4byte	.LFB169
 17277 054c 2C000000 		.4byte	.LFE169
 17278 0550 00000000 		.4byte	.LFB170
 17279 0554 2C000000 		.4byte	.LFE170
 17280 0558 00000000 		.4byte	.LFB171
 17281 055c 2C000000 		.4byte	.LFE171
 17282 0560 00000000 		.4byte	.LFB172
 17283 0564 2C000000 		.4byte	.LFE172
 17284 0568 00000000 		.4byte	.LFB173
 17285 056c 28000000 		.4byte	.LFE173
 17286 0570 00000000 		.4byte	.LFB174
 17287 0574 2C000000 		.4byte	.LFE174
 17288 0578 00000000 		.4byte	.LFB175
 17289 057c 28000000 		.4byte	.LFE175
 17290 0580 00000000 		.4byte	.LFB176
 17291 0584 28000000 		.4byte	.LFE176
 17292 0588 00000000 		.4byte	.LFB177
 17293 058c 1C000000 		.4byte	.LFE177
 17294 0590 00000000 		.4byte	.LFB178
 17295 0594 1C000000 		.4byte	.LFE178
 17296 0598 00000000 		.4byte	.LFB179
 17297 059c 1C000000 		.4byte	.LFE179
 17298 05a0 00000000 		.4byte	.LFB180
 17299 05a4 1C000000 		.4byte	.LFE180
 17300 05a8 00000000 		.4byte	.LFB181
 17301 05ac 2C000000 		.4byte	.LFE181
 17302 05b0 00000000 		.4byte	.LFB182
 17303 05b4 28000000 		.4byte	.LFE182
 17304 05b8 00000000 		.4byte	.LFB183
 17305 05bc 2C000000 		.4byte	.LFE183
 17306 05c0 00000000 		.4byte	.LFB184
 17307 05c4 28000000 		.4byte	.LFE184
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 362


 17308 05c8 00000000 		.4byte	.LFB185
 17309 05cc 2C000000 		.4byte	.LFE185
 17310 05d0 00000000 		.4byte	.LFB186
 17311 05d4 30000000 		.4byte	.LFE186
 17312 05d8 00000000 		.4byte	.LFB187
 17313 05dc 2C000000 		.4byte	.LFE187
 17314 05e0 00000000 		.4byte	.LFB188
 17315 05e4 2C000000 		.4byte	.LFE188
 17316 05e8 00000000 		.4byte	.LFB189
 17317 05ec 2C000000 		.4byte	.LFE189
 17318 05f0 00000000 		.4byte	.LFB190
 17319 05f4 2C000000 		.4byte	.LFE190
 17320 05f8 00000000 		.4byte	.LFB191
 17321 05fc 2C000000 		.4byte	.LFE191
 17322 0600 00000000 		.4byte	.LFB192
 17323 0604 28000000 		.4byte	.LFE192
 17324 0608 00000000 		.4byte	.LFB193
 17325 060c 2C000000 		.4byte	.LFE193
 17326 0610 00000000 		.4byte	.LFB194
 17327 0614 28000000 		.4byte	.LFE194
 17328 0618 00000000 		.4byte	.LFB195
 17329 061c 2C000000 		.4byte	.LFE195
 17330 0620 00000000 		.4byte	.LFB196
 17331 0624 28000000 		.4byte	.LFE196
 17332 0628 00000000 		.4byte	.LFB197
 17333 062c 2C000000 		.4byte	.LFE197
 17334 0630 00000000 		.4byte	.LFB198
 17335 0634 28000000 		.4byte	.LFE198
 17336 0638 00000000 		.4byte	.LFB199
 17337 063c 2C000000 		.4byte	.LFE199
 17338 0640 00000000 		.4byte	.LFB200
 17339 0644 28000000 		.4byte	.LFE200
 17340 0648 00000000 		.4byte	.LFB201
 17341 064c 2C000000 		.4byte	.LFE201
 17342 0650 00000000 		.4byte	.LFB202
 17343 0654 28000000 		.4byte	.LFE202
 17344 0658 00000000 		.4byte	.LFB203
 17345 065c 34000000 		.4byte	.LFE203
 17346 0660 00000000 		.4byte	.LFB204
 17347 0664 28000000 		.4byte	.LFE204
 17348 0668 00000000 		.4byte	.LFB205
 17349 066c 2C000000 		.4byte	.LFE205
 17350 0670 00000000 		.4byte	.LFB206
 17351 0674 28000000 		.4byte	.LFE206
 17352 0678 00000000 		.4byte	.LFB207
 17353 067c 2C000000 		.4byte	.LFE207
 17354 0680 00000000 		.4byte	.LFB208
 17355 0684 2C000000 		.4byte	.LFE208
 17356 0688 00000000 		.4byte	.LFB209
 17357 068c 28000000 		.4byte	.LFE209
 17358 0690 00000000 		.4byte	.LFB210
 17359 0694 28000000 		.4byte	.LFE210
 17360 0698 00000000 		.4byte	.LFB211
 17361 069c 30000000 		.4byte	.LFE211
 17362 06a0 00000000 		.4byte	.LFB212
 17363 06a4 2C000000 		.4byte	.LFE212
 17364 06a8 00000000 		.4byte	.LFB213
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 363


 17365 06ac 30000000 		.4byte	.LFE213
 17366 06b0 00000000 		.4byte	.LFB214
 17367 06b4 2C000000 		.4byte	.LFE214
 17368 06b8 00000000 		.4byte	.LFB215
 17369 06bc 30000000 		.4byte	.LFE215
 17370 06c0 00000000 		.4byte	.LFB216
 17371 06c4 2C000000 		.4byte	.LFE216
 17372 06c8 00000000 		.4byte	.LFB217
 17373 06cc 2C000000 		.4byte	.LFE217
 17374 06d0 00000000 		.4byte	.LFB218
 17375 06d4 28000000 		.4byte	.LFE218
 17376 06d8 00000000 		.4byte	.LFB219
 17377 06dc 2C000000 		.4byte	.LFE219
 17378 06e0 00000000 		.4byte	.LFB220
 17379 06e4 28000000 		.4byte	.LFE220
 17380 06e8 00000000 		.4byte	.LFB221
 17381 06ec 2C000000 		.4byte	.LFE221
 17382 06f0 00000000 		.4byte	.LFB222
 17383 06f4 28000000 		.4byte	.LFE222
 17384 06f8 00000000 		.4byte	.LFB223
 17385 06fc 34000000 		.4byte	.LFE223
 17386 0700 00000000 		.4byte	.LFB224
 17387 0704 28000000 		.4byte	.LFE224
 17388 0708 00000000 		.4byte	.LFB225
 17389 070c 34000000 		.4byte	.LFE225
 17390 0710 00000000 		.4byte	.LFB226
 17391 0714 28000000 		.4byte	.LFE226
 17392 0718 00000000 		.4byte	.LFB227
 17393 071c 34000000 		.4byte	.LFE227
 17394 0720 00000000 		.4byte	.LFB228
 17395 0724 28000000 		.4byte	.LFE228
 17396 0728 00000000 		.4byte	.LFB229
 17397 072c 34000000 		.4byte	.LFE229
 17398 0730 00000000 		.4byte	.LFB230
 17399 0734 28000000 		.4byte	.LFE230
 17400 0738 00000000 		.4byte	.LFB231
 17401 073c 34000000 		.4byte	.LFE231
 17402 0740 00000000 		.4byte	.LFB232
 17403 0744 28000000 		.4byte	.LFE232
 17404 0748 00000000 		.4byte	.LFB233
 17405 074c 34000000 		.4byte	.LFE233
 17406 0750 00000000 		.4byte	.LFB234
 17407 0754 28000000 		.4byte	.LFE234
 17408 0758 00000000 		.4byte	.LFB235
 17409 075c 2C000000 		.4byte	.LFE235
 17410 0760 00000000 		.4byte	.LFB236
 17411 0764 28000000 		.4byte	.LFE236
 17412 0768 00000000 		.4byte	.LFB237
 17413 076c 2C000000 		.4byte	.LFE237
 17414 0770 00000000 		.4byte	.LFB238
 17415 0774 28000000 		.4byte	.LFE238
 17416 0778 00000000 		.4byte	.LFB239
 17417 077c 2C000000 		.4byte	.LFE239
 17418 0780 00000000 		.4byte	.LFB240
 17419 0784 2C000000 		.4byte	.LFE240
 17420 0788 00000000 		.4byte	.LFB241
 17421 078c 2C000000 		.4byte	.LFE241
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 364


 17422 0790 00000000 		.4byte	.LFB242
 17423 0794 2C000000 		.4byte	.LFE242
 17424 0798 00000000 		.4byte	.LFB243
 17425 079c 2C000000 		.4byte	.LFE243
 17426 07a0 00000000 		.4byte	.LFB244
 17427 07a4 2C000000 		.4byte	.LFE244
 17428 07a8 00000000 		.4byte	.LFB245
 17429 07ac 2C000000 		.4byte	.LFE245
 17430 07b0 00000000 		.4byte	.LFB246
 17431 07b4 2C000000 		.4byte	.LFE246
 17432 07b8 00000000 		.4byte	.LFB247
 17433 07bc 2C000000 		.4byte	.LFE247
 17434 07c0 00000000 		.4byte	.LFB248
 17435 07c4 28000000 		.4byte	.LFE248
 17436 07c8 00000000 		.4byte	.LFB249
 17437 07cc 1C000000 		.4byte	.LFE249
 17438 07d0 00000000 		.4byte	.LFB250
 17439 07d4 64000000 		.4byte	.LFE250
 17440 07d8 00000000 		.4byte	.LFB251
 17441 07dc 28000000 		.4byte	.LFE251
 17442 07e0 00000000 		.4byte	.LFB252
 17443 07e4 28000000 		.4byte	.LFE252
 17444 07e8 00000000 		.4byte	.LFB253
 17445 07ec 28000000 		.4byte	.LFE253
 17446 07f0 00000000 		.4byte	.LFB254
 17447 07f4 2C010000 		.4byte	.LFE254
 17448 07f8 00000000 		.4byte	.LFB255
 17449 07fc 28000000 		.4byte	.LFE255
 17450 0800 00000000 		.4byte	.LFB256
 17451 0804 28000000 		.4byte	.LFE256
 17452 0808 00000000 		.4byte	.LFB257
 17453 080c 28000000 		.4byte	.LFE257
 17454 0810 00000000 		.4byte	.LFB258
 17455 0814 28000000 		.4byte	.LFE258
 17456 0818 00000000 		.4byte	.LFB259
 17457 081c 6E000000 		.4byte	.LFE259
 17458 0820 00000000 		.4byte	0
 17459 0824 00000000 		.4byte	0
 17460              		.section	.debug_line,"",%progbits
 17461              	.Ldebug_line0:
 17462 0000 F6140000 		.section	.debug_str,"MS",%progbits,1
 17462      02002901 
 17462      00000201 
 17462      FB0E0D00 
 17462      01010101 
 17463              	.LASF136:
 17464 0000 64726976 		.ascii	"drive\000"
 17464      6500
 17465              	.LASF310:
 17466 0006 64657641 		.ascii	"devAddr\000"
 17466      64647200 
 17467              	.LASF125:
 17468 000e 4D505536 		.ascii	"MPU6050_getSlave4IsDone\000"
 17468      3035305F 
 17468      67657453 
 17468      6C617665 
 17468      34497344 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 365


 17469              	.LASF139:
 17470 0026 6C617463 		.ascii	"latch\000"
 17470      6800
 17471              	.LASF94:
 17472 002c 4D505536 		.ascii	"MPU6050_getSlaveAddress\000"
 17472      3035305F 
 17472      67657453 
 17472      6C617665 
 17472      41646472 
 17473              	.LASF23:
 17474 0044 4D505536 		.ascii	"MPU6050_getAuxVDDIOLevel\000"
 17474      3035305F 
 17474      67657441 
 17474      75785644 
 17474      44494F4C 
 17475              	.LASF29:
 17476 005d 4D505536 		.ascii	"MPU6050_setRate\000"
 17476      3035305F 
 17476      73657452 
 17476      61746500 
 17477              	.LASF127:
 17478 006d 4D505536 		.ascii	"MPU6050_getSlave4Nack\000"
 17478      3035305F 
 17478      67657453 
 17478      6C617665 
 17478      344E6163 
 17479              	.LASF75:
 17480 0083 4D505536 		.ascii	"MPU6050_setAccelFIFOEnabled\000"
 17480      3035305F 
 17480      73657441 
 17480      6363656C 
 17480      4649464F 
 17481              	.LASF292:
 17482 009f 4D505536 		.ascii	"MPU6050_resetDMP\000"
 17482      3035305F 
 17482      72657365 
 17482      74444D50 
 17482      00
 17483              	.LASF230:
 17484 00b0 4D505536 		.ascii	"MPU6050_setWakeFrequency\000"
 17484      3035305F 
 17484      73657457 
 17484      616B6546 
 17484      72657175 
 17485              	.LASF224:
 17486 00c9 4D505536 		.ascii	"MPU6050_getTempSensorEnabled\000"
 17486      3035305F 
 17486      67657454 
 17486      656D7053 
 17486      656E736F 
 17487              	.LASF176:
 17488 00e6 4D505536 		.ascii	"MPU6050_getAcceleration\000"
 17488      3035305F 
 17488      67657441 
 17488      6363656C 
 17488      65726174 
 17489              	.LASF268:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 366


 17490 00fe 4D505536 		.ascii	"MPU6050_getYAccelOffset\000"
 17490      3035305F 
 17490      67657459 
 17490      41636365 
 17490      6C4F6666 
 17491              	.LASF214:
 17492 0116 4D505536 		.ascii	"MPU6050_setI2CMasterModeEnabled\000"
 17492      3035305F 
 17492      73657449 
 17492      32434D61 
 17492      73746572 
 17493              	.LASF255:
 17494 0136 4D505536 		.ascii	"MPU6050_getYGyroOffset\000"
 17494      3035305F 
 17494      67657459 
 17494      4779726F 
 17494      4F666673 
 17495              	.LASF1:
 17496 014d 5F5F7569 		.ascii	"__uint8_t\000"
 17496      6E74385F 
 17496      7400
 17497              	.LASF222:
 17498 0157 4D505536 		.ascii	"MPU6050_getWakeCycleEnabled\000"
 17498      3035305F 
 17498      67657457 
 17498      616B6543 
 17498      79636C65 
 17499              	.LASF218:
 17500 0173 4D505536 		.ascii	"MPU6050_resetSensors\000"
 17500      3035305F 
 17500      72657365 
 17500      7453656E 
 17500      736F7273 
 17501              	.LASF105:
 17502 0188 4D505536 		.ascii	"MPU6050_getSlaveDataLength\000"
 17502      3035305F 
 17502      67657453 
 17502      6C617665 
 17502      44617461 
 17503              	.LASF219:
 17504 01a3 4D505536 		.ascii	"MPU6050_reset\000"
 17504      3035305F 
 17504      72657365 
 17504      7400
 17505              	.LASF194:
 17506 01b1 4D505536 		.ascii	"MPU6050_getZPosMotionDetected\000"
 17506      3035305F 
 17506      6765745A 
 17506      506F734D 
 17506      6F74696F 
 17507              	.LASF277:
 17508 01cf 4D505536 		.ascii	"MPU6050_setZGyroOffsetUser\000"
 17508      3035305F 
 17508      7365745A 
 17508      4779726F 
 17508      4F666673 
 17509              	.LASF278:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 367


 17510 01ea 4D505536 		.ascii	"MPU6050_getIntPLLReadyEnabled\000"
 17510      3035305F 
 17510      67657449 
 17510      6E74504C 
 17510      4C526561 
 17511              	.LASF71:
 17512 0208 4D505536 		.ascii	"MPU6050_setYGyroFIFOEnabled\000"
 17512      3035305F 
 17512      73657459 
 17512      4779726F 
 17512      4649464F 
 17513              	.LASF116:
 17514 0224 4D505536 		.ascii	"MPU6050_getSlave4InterruptEnabled\000"
 17514      3035305F 
 17514      67657453 
 17514      6C617665 
 17514      34496E74 
 17515              	.LASF19:
 17516 0246 4D505536 		.ascii	"MPU6050_init\000"
 17516      3035305F 
 17516      696E6974 
 17516      00
 17517              	.LASF235:
 17518 0253 4D505536 		.ascii	"MPU6050_setStandbyYAccelEnabled\000"
 17518      3035305F 
 17518      73657453 
 17518      74616E64 
 17518      62795941 
 17519              	.LASF84:
 17520 0273 4D505536 		.ascii	"MPU6050_getWaitForExternalSensorEnabled\000"
 17520      3035305F 
 17520      67657457 
 17520      61697446 
 17520      6F724578 
 17521              	.LASF12:
 17522 029b 6C6F6E67 		.ascii	"long long unsigned int\000"
 17522      206C6F6E 
 17522      6720756E 
 17522      7369676E 
 17522      65642069 
 17523              	.LASF66:
 17524 02b2 4D505536 		.ascii	"MPU6050_getTempFIFOEnabled\000"
 17524      3035305F 
 17524      67657454 
 17524      656D7046 
 17524      49464F45 
 17525              	.LASF163:
 17526 02cd 4D505536 		.ascii	"MPU6050_getIntDataReadyEnabled\000"
 17526      3035305F 
 17526      67657449 
 17526      6E744461 
 17526      74615265 
 17527              	.LASF213:
 17528 02ec 4D505536 		.ascii	"MPU6050_getI2CMasterModeEnabled\000"
 17528      3035305F 
 17528      67657449 
 17528      32434D61 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 368


 17528      73746572 
 17529              	.LASF99:
 17530 030c 4D505536 		.ascii	"MPU6050_getSlaveWordByteSwap\000"
 17530      3035305F 
 17530      67657453 
 17530      6C617665 
 17530      576F7264 
 17531              	.LASF189:
 17532 0329 4D505536 		.ascii	"MPU6050_getXNegMotionDetected\000"
 17532      3035305F 
 17532      67657458 
 17532      4E65674D 
 17532      6F74696F 
 17533              	.LASF187:
 17534 0347 4D505536 		.ascii	"MPU6050_getExternalSensorWord\000"
 17534      3035305F 
 17534      67657445 
 17534      78746572 
 17534      6E616C53 
 17535              	.LASF158:
 17536 0365 4D505536 		.ascii	"MPU6050_setIntZeroMotionEnabled\000"
 17536      3035305F 
 17536      73657449 
 17536      6E745A65 
 17536      726F4D6F 
 17537              	.LASF0:
 17538 0385 5F5F696E 		.ascii	"__int8_t\000"
 17538      74385F74 
 17538      00
 17539              	.LASF226:
 17540 038e 4D505536 		.ascii	"MPU6050_getClockSource\000"
 17540      3035305F 
 17540      67657443 
 17540      6C6F636B 
 17540      536F7572 
 17541              	.LASF296:
 17542 03a5 75736572 		.ascii	"userBank\000"
 17542      42616E6B 
 17542      00
 17543              	.LASF231:
 17544 03ae 66726571 		.ascii	"frequency\000"
 17544      75656E63 
 17544      7900
 17545              	.LASF83:
 17546 03b8 4D505536 		.ascii	"MPU6050_setMultiMasterEnabled\000"
 17546      3035305F 
 17546      7365744D 
 17546      756C7469 
 17546      4D617374 
 17547              	.LASF76:
 17548 03d6 4D505536 		.ascii	"MPU6050_getSlave2FIFOEnabled\000"
 17548      3035305F 
 17548      67657453 
 17548      6C617665 
 17548      32464946 
 17549              	.LASF215:
 17550 03f3 4D505536 		.ascii	"MPU6050_switchSPIEnabled\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 369


 17550      3035305F 
 17550      73776974 
 17550      63685350 
 17550      49456E61 
 17551              	.LASF72:
 17552 040c 4D505536 		.ascii	"MPU6050_getZGyroFIFOEnabled\000"
 17552      3035305F 
 17552      6765745A 
 17552      4779726F 
 17552      4649464F 
 17553              	.LASF289:
 17554 0428 4D505536 		.ascii	"MPU6050_getIntDMPStatus\000"
 17554      3035305F 
 17554      67657449 
 17554      6E74444D 
 17554      50537461 
 17555              	.LASF16:
 17556 0440 696E7431 		.ascii	"int16_t\000"
 17556      365F7400 
 17557              	.LASF239:
 17558 0448 4D505536 		.ascii	"MPU6050_setStandbyXGyroEnabled\000"
 17558      3035305F 
 17558      73657453 
 17558      74616E64 
 17558      62795847 
 17559              	.LASF11:
 17560 0467 6C6F6E67 		.ascii	"long long int\000"
 17560      206C6F6E 
 17560      6720696E 
 17560      7400
 17561              	.LASF2:
 17562 0475 7369676E 		.ascii	"signed char\000"
 17562      65642063 
 17562      68617200 
 17563              	.LASF130:
 17564 0481 4D505536 		.ascii	"MPU6050_getSlave1Nack\000"
 17564      3035305F 
 17564      67657453 
 17564      6C617665 
 17564      314E6163 
 17565              	.LASF192:
 17566 0497 4D505536 		.ascii	"MPU6050_getYPosMotionDetected\000"
 17566      3035305F 
 17566      67657459 
 17566      506F734D 
 17566      6F74696F 
 17567              	.LASF30:
 17568 04b5 72617465 		.ascii	"rate\000"
 17568      00
 17569              	.LASF195:
 17570 04ba 4D505536 		.ascii	"MPU6050_getZeroMotionDetected\000"
 17570      3035305F 
 17570      6765745A 
 17570      65726F4D 
 17570      6F74696F 
 17571              	.LASF77:
 17572 04d8 4D505536 		.ascii	"MPU6050_setSlave2FIFOEnabled\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 370


 17572      3035305F 
 17572      73657453 
 17572      6C617665 
 17572      32464946 
 17573              	.LASF59:
 17574 04f5 4D505536 		.ascii	"MPU6050_setMotionDetectionThreshold\000"
 17574      3035305F 
 17574      7365744D 
 17574      6F74696F 
 17574      6E446574 
 17575              	.LASF181:
 17576 0519 4D505536 		.ascii	"MPU6050_getRotation\000"
 17576      3035305F 
 17576      67657452 
 17576      6F746174 
 17576      696F6E00 
 17577              	.LASF145:
 17578 052d 4D505536 		.ascii	"MPU6050_getFSyncInterruptEnabled\000"
 17578      3035305F 
 17578      67657446 
 17578      53796E63 
 17578      496E7465 
 17579              	.LASF272:
 17580 054e 4D505536 		.ascii	"MPU6050_getXGyroOffsetUser\000"
 17580      3035305F 
 17580      67657458 
 17580      4779726F 
 17580      4F666673 
 17581              	.LASF25:
 17582 0569 4D505536 		.ascii	"MPU6050_setAuxVDDIOLevel\000"
 17582      3035305F 
 17582      73657441 
 17582      75785644 
 17582      44494F4C 
 17583              	.LASF93:
 17584 0582 4D505536 		.ascii	"MPU6050_setSlaveAddress\000"
 17584      3035305F 
 17584      73657453 
 17584      6C617665 
 17584      41646472 
 17585              	.LASF73:
 17586 059a 4D505536 		.ascii	"MPU6050_setZGyroFIFOEnabled\000"
 17586      3035305F 
 17586      7365745A 
 17586      4779726F 
 17586      4649464F 
 17587              	.LASF249:
 17588 05b6 4D505536 		.ascii	"MPU6050_setDeviceID\000"
 17588      3035305F 
 17588      73657444 
 17588      65766963 
 17588      65494400 
 17589              	.LASF8:
 17590 05ca 6C6F6E67 		.ascii	"long int\000"
 17590      20696E74 
 17590      00
 17591              	.LASF172:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 371


 17592 05d3 4D505536 		.ascii	"MPU6050_getMotion9\000"
 17592      3035305F 
 17592      6765744D 
 17592      6F74696F 
 17592      6E3900
 17593              	.LASF161:
 17594 05e6 4D505536 		.ascii	"MPU6050_getIntI2CMasterEnabled\000"
 17594      3035305F 
 17594      67657449 
 17594      6E744932 
 17594      434D6173 
 17595              	.LASF177:
 17596 0605 4D505536 		.ascii	"MPU6050_getAccelerationX\000"
 17596      3035305F 
 17596      67657441 
 17596      6363656C 
 17596      65726174 
 17597              	.LASF211:
 17598 061e 4D505536 		.ascii	"MPU6050_getFIFOEnabled\000"
 17598      3035305F 
 17598      67657446 
 17598      49464F45 
 17598      6E61626C 
 17599              	.LASF178:
 17600 0635 4D505536 		.ascii	"MPU6050_getAccelerationY\000"
 17600      3035305F 
 17600      67657441 
 17600      6363656C 
 17600      65726174 
 17601              	.LASF314:
 17602 064e 433A5C55 		.ascii	"C:\\Users\\Christina\\Documents\\For_fun\\GitHub\\D"
 17602      73657273 
 17602      5C436872 
 17602      69737469 
 17602      6E615C44 
 17603 067b 65707265 		.ascii	"eprecated\\Corner-Module\\CornerModule\\CornerModul"
 17603      63617465 
 17603      645C436F 
 17603      726E6572 
 17603      2D4D6F64 
 17604 06ab 652E6379 		.ascii	"e.cydsn\000"
 17604      64736E00 
 17605              	.LASF61:
 17606 06b3 4D505536 		.ascii	"MPU6050_setMotionDetectionDuration\000"
 17606      3035305F 
 17606      7365744D 
 17606      6F74696F 
 17606      6E446574 
 17607              	.LASF32:
 17608 06d6 4D505536 		.ascii	"MPU6050_setExternalFrameSync\000"
 17608      3035305F 
 17608      73657445 
 17608      78746572 
 17608      6E616C46 
 17609              	.LASF48:
 17610 06f3 4D505536 		.ascii	"MPU6050_setFullScaleAccelRange\000"
 17610      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 372


 17610      73657446 
 17610      756C6C53 
 17610      63616C65 
 17611              	.LASF274:
 17612 0712 4D505536 		.ascii	"MPU6050_getYGyroOffsetUser\000"
 17612      3035305F 
 17612      67657459 
 17612      4779726F 
 17612      4F666673 
 17613              	.LASF17:
 17614 072d 75696E74 		.ascii	"uint16_t\000"
 17614      31365F74 
 17614      00
 17615              	.LASF78:
 17616 0736 4D505536 		.ascii	"MPU6050_getSlave1FIFOEnabled\000"
 17616      3035305F 
 17616      67657453 
 17616      6C617665 
 17616      31464946 
 17617              	.LASF182:
 17618 0753 4D505536 		.ascii	"MPU6050_getRotationX\000"
 17618      3035305F 
 17618      67657452 
 17618      6F746174 
 17618      696F6E58 
 17619              	.LASF183:
 17620 0768 4D505536 		.ascii	"MPU6050_getRotationY\000"
 17620      3035305F 
 17620      67657452 
 17620      6F746174 
 17620      696F6E59 
 17621              	.LASF184:
 17622 077d 4D505536 		.ascii	"MPU6050_getRotationZ\000"
 17622      3035305F 
 17622      67657452 
 17622      6F746174 
 17622      696F6E5A 
 17623              	.LASF264:
 17624 0792 4D505536 		.ascii	"MPU6050_getZFineGain\000"
 17624      3035305F 
 17624      6765745A 
 17624      46696E65 
 17624      4761696E 
 17625              	.LASF91:
 17626 07a7 4D505536 		.ascii	"MPU6050_setMasterClockSpeed\000"
 17626      3035305F 
 17626      7365744D 
 17626      61737465 
 17626      72436C6F 
 17627              	.LASF241:
 17628 07c3 4D505536 		.ascii	"MPU6050_setStandbyYGyroEnabled\000"
 17628      3035305F 
 17628      73657453 
 17628      74616E64 
 17628      62795947 
 17629              	.LASF117:
 17630 07e2 4D505536 		.ascii	"MPU6050_setSlave4InterruptEnabled\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 373


 17630      3035305F 
 17630      73657453 
 17630      6C617665 
 17630      34496E74 
 17631              	.LASF191:
 17632 0804 4D505536 		.ascii	"MPU6050_getYNegMotionDetected\000"
 17632      3035305F 
 17632      67657459 
 17632      4E65674D 
 17632      6F74696F 
 17633              	.LASF154:
 17634 0822 4D505536 		.ascii	"MPU6050_setIntFreefallEnabled\000"
 17634      3035305F 
 17634      73657449 
 17634      6E744672 
 17634      65656661 
 17635              	.LASF146:
 17636 0840 4D505536 		.ascii	"MPU6050_setFSyncInterruptEnabled\000"
 17636      3035305F 
 17636      73657446 
 17636      53796E63 
 17636      496E7465 
 17637              	.LASF119:
 17638 0861 4D505536 		.ascii	"MPU6050_setSlave4WriteMode\000"
 17638      3035305F 
 17638      73657453 
 17638      6C617665 
 17638      34577269 
 17639              	.LASF198:
 17640 087c 4D505536 		.ascii	"MPU6050_setExternalShadowDelayEnabled\000"
 17640      3035305F 
 17640      73657445 
 17640      78746572 
 17640      6E616C53 
 17641              	.LASF22:
 17642 08a2 4D505536 		.ascii	"MPU6050_testConnection\000"
 17642      3035305F 
 17642      74657374 
 17642      436F6E6E 
 17642      65637469 
 17643              	.LASF171:
 17644 08b9 4D505536 		.ascii	"MPU6050_getIntDataReadyStatus\000"
 17644      3035305F 
 17644      67657449 
 17644      6E744461 
 17644      74615265 
 17645              	.LASF9:
 17646 08d7 5F5F7569 		.ascii	"__uint32_t\000"
 17646      6E743332 
 17646      5F7400
 17647              	.LASF132:
 17648 08e2 4D505536 		.ascii	"MPU6050_getInterruptMode\000"
 17648      3035305F 
 17648      67657449 
 17648      6E746572 
 17648      72757074 
 17649              	.LASF234:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 374


 17650 08fb 4D505536 		.ascii	"MPU6050_getStandbyYAccelEnabled\000"
 17650      3035305F 
 17650      67657453 
 17650      74616E64 
 17650      62795941 
 17651              	.LASF201:
 17652 091b 4D505536 		.ascii	"MPU6050_resetGyroscopePath\000"
 17652      3035305F 
 17652      72657365 
 17652      74477972 
 17652      6F73636F 
 17653              	.LASF254:
 17654 0936 6F666673 		.ascii	"offset\000"
 17654      657400
 17655              	.LASF217:
 17656 093d 4D505536 		.ascii	"MPU6050_resetI2CMaster\000"
 17656      3035305F 
 17656      72657365 
 17656      74493243 
 17656      4D617374 
 17657              	.LASF4:
 17658 0954 5F5F696E 		.ascii	"__int16_t\000"
 17658      7431365F 
 17658      7400
 17659              	.LASF308:
 17660 095e 4D505536 		.ascii	"MPU6050_setup_compass\000"
 17660      3035305F 
 17660      73657475 
 17660      705F636F 
 17660      6D706173 
 17661              	.LASF57:
 17662 0974 64757261 		.ascii	"duration\000"
 17662      74696F6E 
 17662      00
 17663              	.LASF63:
 17664 097d 4D505536 		.ascii	"MPU6050_setZeroMotionDetectionThreshold\000"
 17664      3035305F 
 17664      7365745A 
 17664      65726F4D 
 17664      6F74696F 
 17665              	.LASF100:
 17666 09a5 4D505536 		.ascii	"MPU6050_setSlaveWordByteSwap\000"
 17666      3035305F 
 17666      73657453 
 17666      6C617665 
 17666      576F7264 
 17667              	.LASF301:
 17668 09c2 64617461 		.ascii	"dataSize\000"
 17668      53697A65 
 17668      00
 17669              	.LASF180:
 17670 09cb 4D505536 		.ascii	"MPU6050_getTemperature\000"
 17670      3035305F 
 17670      67657454 
 17670      656D7065 
 17670      72617475 
 17671              	.LASF140:
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 375


 17672 09e2 4D505536 		.ascii	"MPU6050_getInterruptLatchClear\000"
 17672      3035305F 
 17672      67657449 
 17672      6E746572 
 17672      72757074 
 17673              	.LASF190:
 17674 0a01 4D505536 		.ascii	"MPU6050_getXPosMotionDetected\000"
 17674      3035305F 
 17674      67657458 
 17674      506F734D 
 17674      6F74696F 
 17675              	.LASF74:
 17676 0a1f 4D505536 		.ascii	"MPU6050_getAccelFIFOEnabled\000"
 17676      3035305F 
 17676      67657441 
 17676      6363656C 
 17676      4649464F 
 17677              	.LASF110:
 17678 0a3b 4D505536 		.ascii	"MPU6050_getSlave4Register\000"
 17678      3035305F 
 17678      67657453 
 17678      6C617665 
 17678      34526567 
 17679              	.LASF13:
 17680 0a55 756E7369 		.ascii	"unsigned int\000"
 17680      676E6564 
 17680      20696E74 
 17680      00
 17681              	.LASF112:
 17682 0a62 4D505536 		.ascii	"MPU6050_setSlave4OutputByte\000"
 17682      3035305F 
 17682      73657453 
 17682      6C617665 
 17682      344F7574 
 17683              	.LASF186:
 17684 0a7e 706F7369 		.ascii	"position\000"
 17684      74696F6E 
 17684      00
 17685              	.LASF149:
 17686 0a87 4D505536 		.ascii	"MPU6050_getClockOutputEnabled\000"
 17686      3035305F 
 17686      67657443 
 17686      6C6F636B 
 17686      4F757470 
 17687              	.LASF281:
 17688 0aa5 4D505536 		.ascii	"MPU6050_setIntDMPEnabled\000"
 17688      3035305F 
 17688      73657449 
 17688      6E74444D 
 17688      50456E61 
 17689              	.LASF305:
 17690 0abe 636F6E66 		.ascii	"config\000"
 17690      696700
 17691              	.LASF101:
 17692 0ac5 4D505536 		.ascii	"MPU6050_getSlaveWriteMode\000"
 17692      3035305F 
 17692      67657453 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 376


 17692      6C617665 
 17692      57726974 
 17693              	.LASF207:
 17694 0adf 4D505536 		.ascii	"MPU6050_setFreefallDetectionCounterDecrement\000"
 17694      3035305F 
 17694      73657446 
 17694      72656566 
 17694      616C6C44 
 17695              	.LASF250:
 17696 0b0c 4D505536 		.ascii	"MPU6050_getOTPBankValid\000"
 17696      3035305F 
 17696      6765744F 
 17696      54504261 
 17696      6E6B5661 
 17697              	.LASF10:
 17698 0b24 6C6F6E67 		.ascii	"long unsigned int\000"
 17698      20756E73 
 17698      69676E65 
 17698      6420696E 
 17698      7400
 17699              	.LASF144:
 17700 0b36 4D505536 		.ascii	"MPU6050_setFSyncInterruptLevel\000"
 17700      3035305F 
 17700      73657446 
 17700      53796E63 
 17700      496E7465 
 17701              	.LASF56:
 17702 0b55 4D505536 		.ascii	"MPU6050_setFreefallDetectionDuration\000"
 17702      3035305F 
 17702      73657446 
 17702      72656566 
 17702      616C6C44 
 17703              	.LASF70:
 17704 0b7a 4D505536 		.ascii	"MPU6050_getYGyroFIFOEnabled\000"
 17704      3035305F 
 17704      67657459 
 17704      4779726F 
 17704      4649464F 
 17705              	.LASF300:
 17706 0b96 4D505536 		.ascii	"MPU6050_readMemoryBlock\000"
 17706      3035305F 
 17706      72656164 
 17706      4D656D6F 
 17706      7279426C 
 17707              	.LASF208:
 17708 0bae 64656372 		.ascii	"decrement\000"
 17708      656D656E 
 17708      7400
 17709              	.LASF210:
 17710 0bb8 4D505536 		.ascii	"MPU6050_setMotionDetectionCounterDecrement\000"
 17710      3035305F 
 17710      7365744D 
 17710      6F74696F 
 17710      6E446574 
 17711              	.LASF242:
 17712 0be3 4D505536 		.ascii	"MPU6050_getStandbyZGyroEnabled\000"
 17712      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 377


 17712      67657453 
 17712      74616E64 
 17712      62795A47 
 17713              	.LASF27:
 17714 0c02 6C657665 		.ascii	"level\000"
 17714      6C00
 17715              	.LASF113:
 17716 0c08 64617461 		.ascii	"data\000"
 17716      00
 17717              	.LASF220:
 17718 0c0d 4D505536 		.ascii	"MPU6050_getSleepEnabled\000"
 17718      3035305F 
 17718      67657453 
 17718      6C656570 
 17718      456E6162 
 17719              	.LASF7:
 17720 0c25 73686F72 		.ascii	"short unsigned int\000"
 17720      7420756E 
 17720      7369676E 
 17720      65642069 
 17720      6E7400
 17721              	.LASF282:
 17722 0c38 4D505536 		.ascii	"MPU6050_getDMPInt5Status\000"
 17722      3035305F 
 17722      67657444 
 17722      4D50496E 
 17722      74355374 
 17723              	.LASF20:
 17724 0c51 4D505536 		.ascii	"MPU6050_initialize\000"
 17724      3035305F 
 17724      696E6974 
 17724      69616C69 
 17724      7A6500
 17725              	.LASF80:
 17726 0c64 4D505536 		.ascii	"MPU6050_getSlave0FIFOEnabled\000"
 17726      3035305F 
 17726      67657453 
 17726      6C617665 
 17726      30464946 
 17727              	.LASF256:
 17728 0c81 4D505536 		.ascii	"MPU6050_setYGyroOffset\000"
 17728      3035305F 
 17728      73657459 
 17728      4779726F 
 17728      4F666673 
 17729              	.LASF237:
 17730 0c98 4D505536 		.ascii	"MPU6050_setStandbyZAccelEnabled\000"
 17730      3035305F 
 17730      73657453 
 17730      74616E64 
 17730      62795A41 
 17731              	.LASF128:
 17732 0cb8 4D505536 		.ascii	"MPU6050_getSlave3Nack\000"
 17732      3035305F 
 17732      67657453 
 17732      6C617665 
 17732      334E6163 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 378


 17733              	.LASF98:
 17734 0cce 4D505536 		.ascii	"MPU6050_setSlaveEnabled\000"
 17734      3035305F 
 17734      73657453 
 17734      6C617665 
 17734      456E6162 
 17735              	.LASF85:
 17736 0ce6 4D505536 		.ascii	"MPU6050_setWaitForExternalSensorEnabled\000"
 17736      3035305F 
 17736      73657457 
 17736      61697446 
 17736      6F724578 
 17737              	.LASF120:
 17738 0d0e 4D505536 		.ascii	"MPU6050_getSlave4MasterDelay\000"
 17738      3035305F 
 17738      67657453 
 17738      6C617665 
 17738      344D6173 
 17739              	.LASF58:
 17740 0d2b 4D505536 		.ascii	"MPU6050_getMotionDetectionThreshold\000"
 17740      3035305F 
 17740      6765744D 
 17740      6F74696F 
 17740      6E446574 
 17741              	.LASF233:
 17742 0d4f 4D505536 		.ascii	"MPU6050_setStandbyXAccelEnabled\000"
 17742      3035305F 
 17742      73657453 
 17742      74616E64 
 17742      62795841 
 17743              	.LASF103:
 17744 0d6f 4D505536 		.ascii	"MPU6050_getSlaveWordGroupOffset\000"
 17744      3035305F 
 17744      67657453 
 17744      6C617665 
 17744      576F7264 
 17745              	.LASF248:
 17746 0d8f 4D505536 		.ascii	"MPU6050_getDeviceID\000"
 17746      3035305F 
 17746      67657444 
 17746      65766963 
 17746      65494400 
 17747              	.LASF53:
 17748 0da3 4D505536 		.ascii	"MPU6050_setFreefallDetectionThreshold\000"
 17748      3035305F 
 17748      73657446 
 17748      72656566 
 17748      616C6C44 
 17749              	.LASF205:
 17750 0dc9 4D505536 		.ascii	"MPU6050_setAccelerometerPowerOnDelay\000"
 17750      3035305F 
 17750      73657441 
 17750      6363656C 
 17750      65726F6D 
 17751              	.LASF147:
 17752 0dee 4D505536 		.ascii	"MPU6050_getI2CBypassEnabled\000"
 17752      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 379


 17752      67657449 
 17752      32434279 
 17752      70617373 
 17753              	.LASF209:
 17754 0e0a 4D505536 		.ascii	"MPU6050_getMotionDetectionCounterDecrement\000"
 17754      3035305F 
 17754      6765744D 
 17754      6F74696F 
 17754      6E446574 
 17755              	.LASF50:
 17756 0e35 4D505536 		.ascii	"MPU6050_setDHPFMode\000"
 17756      3035305F 
 17756      73657444 
 17756      4850464D 
 17756      6F646500 
 17757              	.LASF121:
 17758 0e49 4D505536 		.ascii	"MPU6050_setSlave4MasterDelay\000"
 17758      3035305F 
 17758      73657453 
 17758      6C617665 
 17758      344D6173 
 17759              	.LASF297:
 17760 0e66 4D505536 		.ascii	"MPU6050_setMemoryStartAddress\000"
 17760      3035305F 
 17760      7365744D 
 17760      656D6F72 
 17760      79537461 
 17761              	.LASF240:
 17762 0e84 4D505536 		.ascii	"MPU6050_getStandbyYGyroEnabled\000"
 17762      3035305F 
 17762      67657453 
 17762      74616E64 
 17762      62795947 
 17763              	.LASF298:
 17764 0ea3 4D505536 		.ascii	"MPU6050_readMemoryByte\000"
 17764      3035305F 
 17764      72656164 
 17764      4D656D6F 
 17764      72794279 
 17765              	.LASF276:
 17766 0eba 4D505536 		.ascii	"MPU6050_getZGyroOffsetUser\000"
 17766      3035305F 
 17766      6765745A 
 17766      4779726F 
 17766      4F666673 
 17767              	.LASF199:
 17768 0ed5 4D505536 		.ascii	"MPU6050_getSlaveDelayEnabled\000"
 17768      3035305F 
 17768      67657453 
 17768      6C617665 
 17768      44656C61 
 17769              	.LASF124:
 17770 0ef2 4D505536 		.ascii	"MPU6050_getPassthroughStatus\000"
 17770      3035305F 
 17770      67657450 
 17770      61737374 
 17770      68726F75 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 380


 17771              	.LASF160:
 17772 0f0f 4D505536 		.ascii	"MPU6050_setIntFIFOBufferOverflowEnabled\000"
 17772      3035305F 
 17772      73657449 
 17772      6E744649 
 17772      464F4275 
 17773              	.LASF86:
 17774 0f37 4D505536 		.ascii	"MPU6050_getSlave3FIFOEnabled\000"
 17774      3035305F 
 17774      67657453 
 17774      6C617665 
 17774      33464946 
 17775              	.LASF228:
 17776 0f54 736F7572 		.ascii	"source\000"
 17776      636500
 17777              	.LASF295:
 17778 0f5b 70726566 		.ascii	"prefetchEnabled\000"
 17778      65746368 
 17778      456E6162 
 17778      6C656400 
 17779              	.LASF200:
 17780 0f6b 4D505536 		.ascii	"MPU6050_setSlaveDelayEnabled\000"
 17780      3035305F 
 17780      73657453 
 17780      6C617665 
 17780      44656C61 
 17781              	.LASF35:
 17782 0f88 4D505536 		.ascii	"MPU6050_setDLPFMode\000"
 17782      3035305F 
 17782      73657444 
 17782      4C50464D 
 17782      6F646500 
 17783              	.LASF270:
 17784 0f9c 4D505536 		.ascii	"MPU6050_getZAccelOffset\000"
 17784      3035305F 
 17784      6765745A 
 17784      41636365 
 17784      6C4F6666 
 17785              	.LASF287:
 17786 0fb4 4D505536 		.ascii	"MPU6050_getDMPInt0Status\000"
 17786      3035305F 
 17786      67657444 
 17786      4D50496E 
 17786      74305374 
 17787              	.LASF26:
 17788 0fcd 61646472 		.ascii	"address\000"
 17788      65737300 
 17789              	.LASF284:
 17790 0fd5 4D505536 		.ascii	"MPU6050_getDMPInt3Status\000"
 17790      3035305F 
 17790      67657444 
 17790      4D50496E 
 17790      74335374 
 17791              	.LASF87:
 17792 0fee 4D505536 		.ascii	"MPU6050_setSlave3FIFOEnabled\000"
 17792      3035305F 
 17792      73657453 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 381


 17792      6C617665 
 17792      33464946 
 17793              	.LASF302:
 17794 100b 6368756E 		.ascii	"chunkSize\000"
 17794      6B53697A 
 17794      6500
 17795              	.LASF271:
 17796 1015 4D505536 		.ascii	"MPU6050_setZAccelOffset\000"
 17796      3035305F 
 17796      7365745A 
 17796      41636365 
 17796      6C4F6666 
 17797              	.LASF90:
 17798 102d 4D505536 		.ascii	"MPU6050_getMasterClockSpeed\000"
 17798      3035305F 
 17798      6765744D 
 17798      61737465 
 17798      72436C6F 
 17799              	.LASF28:
 17800 1049 4D505536 		.ascii	"MPU6050_getRate\000"
 17800      3035305F 
 17800      67657452 
 17800      61746500 
 17801              	.LASF118:
 17802 1059 4D505536 		.ascii	"MPU6050_getSlave4WriteMode\000"
 17802      3035305F 
 17802      67657453 
 17802      6C617665 
 17802      34577269 
 17803              	.LASF156:
 17804 1074 4D505536 		.ascii	"MPU6050_setIntMotionEnabled\000"
 17804      3035305F 
 17804      73657449 
 17804      6E744D6F 
 17804      74696F6E 
 17805              	.LASF273:
 17806 1090 4D505536 		.ascii	"MPU6050_setXGyroOffsetUser\000"
 17806      3035305F 
 17806      73657458 
 17806      4779726F 
 17806      4F666673 
 17807              	.LASF40:
 17808 10ab 4D505536 		.ascii	"MPU6050_getAccelXSelfTest\000"
 17808      3035305F 
 17808      67657441 
 17808      6363656C 
 17808      5853656C 
 17809              	.LASF238:
 17810 10c5 4D505536 		.ascii	"MPU6050_getStandbyXGyroEnabled\000"
 17810      3035305F 
 17810      67657453 
 17810      74616E64 
 17810      62795847 
 17811              	.LASF212:
 17812 10e4 4D505536 		.ascii	"MPU6050_setFIFOEnabled\000"
 17812      3035305F 
 17812      73657446 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 382


 17812      49464F45 
 17812      6E61626C 
 17813              	.LASF262:
 17814 10fb 4D505536 		.ascii	"MPU6050_getYFineGain\000"
 17814      3035305F 
 17814      67657459 
 17814      46696E65 
 17814      4761696E 
 17815              	.LASF236:
 17816 1110 4D505536 		.ascii	"MPU6050_getStandbyZAccelEnabled\000"
 17816      3035305F 
 17816      67657453 
 17816      74616E64 
 17816      62795A41 
 17817              	.LASF153:
 17818 1130 4D505536 		.ascii	"MPU6050_getIntFreefallEnabled\000"
 17818      3035305F 
 17818      67657449 
 17818      6E744672 
 17818      65656661 
 17819              	.LASF260:
 17820 114e 4D505536 		.ascii	"MPU6050_setXFineGain\000"
 17820      3035305F 
 17820      73657458 
 17820      46696E65 
 17820      4761696E 
 17821              	.LASF51:
 17822 1163 62616E64 		.ascii	"bandwidth\000"
 17822      77696474 
 17822      6800
 17823              	.LASF39:
 17824 116d 72616E67 		.ascii	"range\000"
 17824      6500
 17825              	.LASF169:
 17826 1173 4D505536 		.ascii	"MPU6050_getIntFIFOBufferOverflowStatus\000"
 17826      3035305F 
 17826      67657449 
 17826      6E744649 
 17826      464F4275 
 17827              	.LASF311:
 17828 119a 62756666 		.ascii	"buffer\000"
 17828      657200
 17829              	.LASF133:
 17830 11a1 4D505536 		.ascii	"MPU6050_setInterruptMode\000"
 17830      3035305F 
 17830      73657449 
 17830      6E746572 
 17830      72757074 
 17831              	.LASF157:
 17832 11ba 4D505536 		.ascii	"MPU6050_getIntZeroMotionEnabled\000"
 17832      3035305F 
 17832      67657449 
 17832      6E745A65 
 17832      726F4D6F 
 17833              	.LASF312:
 17834 11da 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 17834      4320342E 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 383


 17834      382E3420 
 17834      32303134 
 17834      30353236 
 17835 120d 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 17835      20726576 
 17835      6973696F 
 17835      6E203231 
 17835      31333538 
 17836 1240 30202D66 		.ascii	"0 -ffunction-sections\000"
 17836      66756E63 
 17836      74696F6E 
 17836      2D736563 
 17836      74696F6E 
 17837              	.LASF159:
 17838 1256 4D505536 		.ascii	"MPU6050_getIntFIFOBufferOverflowEnabled\000"
 17838      3035305F 
 17838      67657449 
 17838      6E744649 
 17838      464F4275 
 17839              	.LASF69:
 17840 127e 4D505536 		.ascii	"MPU6050_setXGyroFIFOEnabled\000"
 17840      3035305F 
 17840      73657458 
 17840      4779726F 
 17840      4649464F 
 17841              	.LASF64:
 17842 129a 4D505536 		.ascii	"MPU6050_getZeroMotionDetectionDuration\000"
 17842      3035305F 
 17842      6765745A 
 17842      65726F4D 
 17842      6F74696F 
 17843              	.LASF243:
 17844 12c1 4D505536 		.ascii	"MPU6050_setStandbyZGyroEnabled\000"
 17844      3035305F 
 17844      73657453 
 17844      74616E64 
 17844      62795A47 
 17845              	.LASF303:
 17846 12e0 4D505536 		.ascii	"MPU6050_getDMPConfig1\000"
 17846      3035305F 
 17846      67657444 
 17846      4D50436F 
 17846      6E666967 
 17847              	.LASF232:
 17848 12f6 4D505536 		.ascii	"MPU6050_getStandbyXAccelEnabled\000"
 17848      3035305F 
 17848      67657453 
 17848      74616E64 
 17848      62795841 
 17849              	.LASF306:
 17850 1316 4D505536 		.ascii	"MPU6050_getDMPConfig2\000"
 17850      3035305F 
 17850      67657444 
 17850      4D50436F 
 17850      6E666967 
 17851              	.LASF313:
 17852 132c 2E5C6D70 		.ascii	".\\mpu6050.c\000"
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 384


 17852      75363035 
 17852      302E6300 
 17853              	.LASF114:
 17854 1338 4D505536 		.ascii	"MPU6050_getSlave4Enabled\000"
 17854      3035305F 
 17854      67657453 
 17854      6C617665 
 17854      34456E61 
 17855              	.LASF261:
 17856 1351 6761696E 		.ascii	"gain\000"
 17856      00
 17857              	.LASF89:
 17858 1356 4D505536 		.ascii	"MPU6050_setSlaveReadWriteTransitionEnabled\000"
 17858      3035305F 
 17858      73657453 
 17858      6C617665 
 17858      52656164 
 17859              	.LASF54:
 17860 1381 74687265 		.ascii	"threshold\000"
 17860      73686F6C 
 17860      6400
 17861              	.LASF47:
 17862 138b 4D505536 		.ascii	"MPU6050_getFullScaleAccelRange\000"
 17862      3035305F 
 17862      67657446 
 17862      756C6C53 
 17862      63616C65 
 17863              	.LASF21:
 17864 13aa 5F426F6F 		.ascii	"_Bool\000"
 17864      6C00
 17865              	.LASF3:
 17866 13b0 756E7369 		.ascii	"unsigned char\000"
 17866      676E6564 
 17866      20636861 
 17866      7200
 17867              	.LASF196:
 17868 13be 4D505536 		.ascii	"MPU6050_setSlaveOutputByte\000"
 17868      3035305F 
 17868      73657453 
 17868      6C617665 
 17868      4F757470 
 17869              	.LASF166:
 17870 13d9 4D505536 		.ascii	"MPU6050_getIntFreefallStatus\000"
 17870      3035305F 
 17870      67657449 
 17870      6E744672 
 17870      65656661 
 17871              	.LASF244:
 17872 13f6 4D505536 		.ascii	"MPU6050_getFIFOCount\000"
 17872      3035305F 
 17872      67657446 
 17872      49464F43 
 17872      6F756E74 
 17873              	.LASF38:
 17874 140b 4D505536 		.ascii	"MPU6050_setFullScaleGyroRange\000"
 17874      3035305F 
 17874      73657446 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 385


 17874      756C6C53 
 17874      63616C65 
 17875              	.LASF122:
 17876 1429 64656C61 		.ascii	"delay\000"
 17876      7900
 17877              	.LASF5:
 17878 142f 73686F72 		.ascii	"short int\000"
 17878      7420696E 
 17878      7400
 17879              	.LASF269:
 17880 1439 4D505536 		.ascii	"MPU6050_setYAccelOffset\000"
 17880      3035305F 
 17880      73657459 
 17880      41636365 
 17880      6C4F6666 
 17881              	.LASF62:
 17882 1451 4D505536 		.ascii	"MPU6050_getZeroMotionDetectionThreshold\000"
 17882      3035305F 
 17882      6765745A 
 17882      65726F4D 
 17882      6F74696F 
 17883              	.LASF151:
 17884 1479 4D505536 		.ascii	"MPU6050_getIntEnabled\000"
 17884      3035305F 
 17884      67657449 
 17884      6E74456E 
 17884      61626C65 
 17885              	.LASF164:
 17886 148f 4D505536 		.ascii	"MPU6050_setIntDataReadyEnabled\000"
 17886      3035305F 
 17886      73657449 
 17886      6E744461 
 17886      74615265 
 17887              	.LASF41:
 17888 14ae 4D505536 		.ascii	"MPU6050_setAccelXSelfTest\000"
 17888      3035305F 
 17888      73657441 
 17888      6363656C 
 17888      5853656C 
 17889              	.LASF263:
 17890 14c8 4D505536 		.ascii	"MPU6050_setYFineGain\000"
 17890      3035305F 
 17890      73657459 
 17890      46696E65 
 17890      4761696E 
 17891              	.LASF280:
 17892 14dd 4D505536 		.ascii	"MPU6050_getIntDMPEnabled\000"
 17892      3035305F 
 17892      67657449 
 17892      6E74444D 
 17892      50456E61 
 17893              	.LASF275:
 17894 14f6 4D505536 		.ascii	"MPU6050_setYGyroOffsetUser\000"
 17894      3035305F 
 17894      73657459 
 17894      4779726F 
 17894      4F666673 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 386


 17895              	.LASF43:
 17896 1511 4D505536 		.ascii	"MPU6050_getAccelYSelfTest\000"
 17896      3035305F 
 17896      67657441 
 17896      6363656C 
 17896      5953656C 
 17897              	.LASF108:
 17898 152b 4D505536 		.ascii	"MPU6050_getSlave4Address\000"
 17898      3035305F 
 17898      67657453 
 17898      6C617665 
 17898      34416464 
 17899              	.LASF290:
 17900 1544 4D505536 		.ascii	"MPU6050_getDMPEnabled\000"
 17900      3035305F 
 17900      67657444 
 17900      4D50456E 
 17900      61626C65 
 17901              	.LASF104:
 17902 155a 4D505536 		.ascii	"MPU6050_setSlaveWordGroupOffset\000"
 17902      3035305F 
 17902      73657453 
 17902      6C617665 
 17902      576F7264 
 17903              	.LASF246:
 17904 157a 4D505536 		.ascii	"MPU6050_getFIFOBytes\000"
 17904      3035305F 
 17904      67657446 
 17904      49464F42 
 17904      79746573 
 17905              	.LASF193:
 17906 158f 4D505536 		.ascii	"MPU6050_getZNegMotionDetected\000"
 17906      3035305F 
 17906      6765745A 
 17906      4E65674D 
 17906      6F74696F 
 17907              	.LASF142:
 17908 15ad 636C6561 		.ascii	"clear\000"
 17908      7200
 17909              	.LASF197:
 17910 15b3 4D505536 		.ascii	"MPU6050_getExternalShadowDelayEnabled\000"
 17910      3035305F 
 17910      67657445 
 17910      78746572 
 17910      6E616C53 
 17911              	.LASF174:
 17912 15d9 4D505536 		.ascii	"MPU6050_getMotion6\000"
 17912      3035305F 
 17912      6765744D 
 17912      6F74696F 
 17912      6E3600
 17913              	.LASF81:
 17914 15ec 4D505536 		.ascii	"MPU6050_setSlave0FIFOEnabled\000"
 17914      3035305F 
 17914      73657453 
 17914      6C617665 
 17914      30464946 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 387


 17915              	.LASF18:
 17916 1609 75696E74 		.ascii	"uint32_t\000"
 17916      33325F74 
 17916      00
 17917              	.LASF126:
 17918 1612 4D505536 		.ascii	"MPU6050_getLostArbitration\000"
 17918      3035305F 
 17918      6765744C 
 17918      6F737441 
 17918      72626974 
 17919              	.LASF129:
 17920 162d 4D505536 		.ascii	"MPU6050_getSlave2Nack\000"
 17920      3035305F 
 17920      67657453 
 17920      6C617665 
 17920      324E6163 
 17921              	.LASF42:
 17922 1643 656E6162 		.ascii	"enabled\000"
 17922      6C656400 
 17923              	.LASF68:
 17924 164b 4D505536 		.ascii	"MPU6050_getXGyroFIFOEnabled\000"
 17924      3035305F 
 17924      67657458 
 17924      4779726F 
 17924      4649464F 
 17925              	.LASF309:
 17926 1667 73697A65 		.ascii	"sizetype\000"
 17926      74797065 
 17926      00
 17927              	.LASF245:
 17928 1670 4D505536 		.ascii	"MPU6050_getFIFOByte\000"
 17928      3035305F 
 17928      67657446 
 17928      49464F42 
 17928      79746500 
 17929              	.LASF107:
 17930 1684 6C656E67 		.ascii	"length\000"
 17930      746800
 17931              	.LASF111:
 17932 168b 4D505536 		.ascii	"MPU6050_setSlave4Register\000"
 17932      3035305F 
 17932      73657453 
 17932      6C617665 
 17932      34526567 
 17933              	.LASF36:
 17934 16a5 6D6F6465 		.ascii	"mode\000"
 17934      00
 17935              	.LASF143:
 17936 16aa 4D505536 		.ascii	"MPU6050_getFSyncInterruptLevel\000"
 17936      3035305F 
 17936      67657446 
 17936      53796E63 
 17936      496E7465 
 17937              	.LASF307:
 17938 16c9 4D505536 		.ascii	"MPU6050_setDMPConfig2\000"
 17938      3035305F 
 17938      73657444 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 388


 17938      4D50436F 
 17938      6E666967 
 17939              	.LASF279:
 17940 16df 4D505536 		.ascii	"MPU6050_setIntPLLReadyEnabled\000"
 17940      3035305F 
 17940      73657449 
 17940      6E74504C 
 17940      4C526561 
 17941              	.LASF6:
 17942 16fd 5F5F7569 		.ascii	"__uint16_t\000"
 17942      6E743136 
 17942      5F7400
 17943              	.LASF225:
 17944 1708 4D505536 		.ascii	"MPU6050_setTempSensorEnabled\000"
 17944      3035305F 
 17944      73657454 
 17944      656D7053 
 17944      656E736F 
 17945              	.LASF102:
 17946 1725 4D505536 		.ascii	"MPU6050_setSlaveWriteMode\000"
 17946      3035305F 
 17946      73657453 
 17946      6C617665 
 17946      57726974 
 17947              	.LASF266:
 17948 173f 4D505536 		.ascii	"MPU6050_getXAccelOffset\000"
 17948      3035305F 
 17948      67657458 
 17948      41636365 
 17948      6C4F6666 
 17949              	.LASF162:
 17950 1757 4D505536 		.ascii	"MPU6050_setIntI2CMasterEnabled\000"
 17950      3035305F 
 17950      73657449 
 17950      6E744932 
 17950      434D6173 
 17951              	.LASF299:
 17952 1776 4D505536 		.ascii	"MPU6050_writeMemoryByte\000"
 17952      3035305F 
 17952      77726974 
 17952      654D656D 
 17952      6F727942 
 17953              	.LASF79:
 17954 178e 4D505536 		.ascii	"MPU6050_setSlave1FIFOEnabled\000"
 17954      3035305F 
 17954      73657453 
 17954      6C617665 
 17954      31464946 
 17955              	.LASF265:
 17956 17ab 4D505536 		.ascii	"MPU6050_setZFineGain\000"
 17956      3035305F 
 17956      7365745A 
 17956      46696E65 
 17956      4761696E 
 17957              	.LASF115:
 17958 17c0 4D505536 		.ascii	"MPU6050_setSlave4Enabled\000"
 17958      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 389


 17958      73657453 
 17958      6C617665 
 17958      34456E61 
 17959              	.LASF267:
 17960 17d9 4D505536 		.ascii	"MPU6050_setXAccelOffset\000"
 17960      3035305F 
 17960      73657458 
 17960      41636365 
 17960      6C4F6666 
 17961              	.LASF252:
 17962 17f1 4D505536 		.ascii	"MPU6050_getXGyroOffset\000"
 17962      3035305F 
 17962      67657458 
 17962      4779726F 
 17962      4F666673 
 17963              	.LASF175:
 17964 1808 4D505536 		.ascii	"MPU6050_getMotion6t\000"
 17964      3035305F 
 17964      6765744D 
 17964      6F74696F 
 17964      6E367400 
 17965              	.LASF67:
 17966 181c 4D505536 		.ascii	"MPU6050_setTempFIFOEnabled\000"
 17966      3035305F 
 17966      73657454 
 17966      656D7046 
 17966      49464F45 
 17967              	.LASF95:
 17968 1837 4D505536 		.ascii	"MPU6050_getSlaveRegister\000"
 17968      3035305F 
 17968      67657453 
 17968      6C617665 
 17968      52656769 
 17969              	.LASF152:
 17970 1850 4D505536 		.ascii	"MPU6050_setIntEnabled\000"
 17970      3035305F 
 17970      73657449 
 17970      6E74456E 
 17970      61626C65 
 17971              	.LASF251:
 17972 1866 4D505536 		.ascii	"MPU6050_setOTPBankValid\000"
 17972      3035305F 
 17972      7365744F 
 17972      54504261 
 17972      6E6B5661 
 17973              	.LASF294:
 17974 187e 62616E6B 		.ascii	"bank\000"
 17974      00
 17975              	.LASF44:
 17976 1883 4D505536 		.ascii	"MPU6050_setAccelYSelfTest\000"
 17976      3035305F 
 17976      73657441 
 17976      6363656C 
 17976      5953656C 
 17977              	.LASF170:
 17978 189d 4D505536 		.ascii	"MPU6050_getIntI2CMasterStatus\000"
 17978      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 390


 17978      67657449 
 17978      6E744932 
 17978      434D6173 
 17979              	.LASF55:
 17980 18bb 4D505536 		.ascii	"MPU6050_getFreefallDetectionDuration\000"
 17980      3035305F 
 17980      67657446 
 17980      72656566 
 17980      616C6C44 
 17981              	.LASF14:
 17982 18e0 696E7438 		.ascii	"int8_t\000"
 17982      5F7400
 17983              	.LASF285:
 17984 18e7 4D505536 		.ascii	"MPU6050_getDMPInt2Status\000"
 17984      3035305F 
 17984      67657444 
 17984      4D50496E 
 17984      74325374 
 17985              	.LASF138:
 17986 1900 4D505536 		.ascii	"MPU6050_setInterruptLatch\000"
 17986      3035305F 
 17986      73657449 
 17986      6E746572 
 17986      72757074 
 17987              	.LASF45:
 17988 191a 4D505536 		.ascii	"MPU6050_getAccelZSelfTest\000"
 17988      3035305F 
 17988      67657441 
 17988      6363656C 
 17988      5A53656C 
 17989              	.LASF167:
 17990 1934 4D505536 		.ascii	"MPU6050_getIntMotionStatus\000"
 17990      3035305F 
 17990      67657449 
 17990      6E744D6F 
 17990      74696F6E 
 17991              	.LASF223:
 17992 194f 4D505536 		.ascii	"MPU6050_setWakeCycleEnabled\000"
 17992      3035305F 
 17992      73657457 
 17992      616B6543 
 17992      79636C65 
 17993              	.LASF253:
 17994 196b 4D505536 		.ascii	"MPU6050_setXGyroOffset\000"
 17994      3035305F 
 17994      73657458 
 17994      4779726F 
 17994      4F666673 
 17995              	.LASF247:
 17996 1982 4D505536 		.ascii	"MPU6050_setFIFOByte\000"
 17996      3035305F 
 17996      73657446 
 17996      49464F42 
 17996      79746500 
 17997              	.LASF221:
 17998 1996 4D505536 		.ascii	"MPU6050_setSleepEnabled\000"
 17998      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 391


 17998      73657453 
 17998      6C656570 
 17998      456E6162 
 17999              	.LASF49:
 18000 19ae 4D505536 		.ascii	"MPU6050_getDHPFMode\000"
 18000      3035305F 
 18000      67657444 
 18000      4850464D 
 18000      6F646500 
 18001              	.LASF82:
 18002 19c2 4D505536 		.ascii	"MPU6050_getMultiMasterEnabled\000"
 18002      3035305F 
 18002      6765744D 
 18002      756C7469 
 18002      4D617374 
 18003              	.LASF229:
 18004 19e0 4D505536 		.ascii	"MPU6050_getWakeFrequency\000"
 18004      3035305F 
 18004      67657457 
 18004      616B6546 
 18004      72657175 
 18005              	.LASF148:
 18006 19f9 4D505536 		.ascii	"MPU6050_setI2CBypassEnabled\000"
 18006      3035305F 
 18006      73657449 
 18006      32434279 
 18006      70617373 
 18007              	.LASF185:
 18008 1a15 4D505536 		.ascii	"MPU6050_getExternalSensorByte\000"
 18008      3035305F 
 18008      67657445 
 18008      78746572 
 18008      6E616C53 
 18009              	.LASF283:
 18010 1a33 4D505536 		.ascii	"MPU6050_getDMPInt4Status\000"
 18010      3035305F 
 18010      67657444 
 18010      4D50496E 
 18010      74345374 
 18011              	.LASF109:
 18012 1a4c 4D505536 		.ascii	"MPU6050_setSlave4Address\000"
 18012      3035305F 
 18012      73657453 
 18012      6C617665 
 18012      34416464 
 18013              	.LASF150:
 18014 1a65 4D505536 		.ascii	"MPU6050_setClockOutputEnabled\000"
 18014      3035305F 
 18014      73657443 
 18014      6C6F636B 
 18014      4F757470 
 18015              	.LASF131:
 18016 1a83 4D505536 		.ascii	"MPU6050_getSlave0Nack\000"
 18016      3035305F 
 18016      67657453 
 18016      6C617665 
 18016      304E6163 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 392


 18017              	.LASF31:
 18018 1a99 4D505536 		.ascii	"MPU6050_getExternalFrameSync\000"
 18018      3035305F 
 18018      67657445 
 18018      78746572 
 18018      6E616C46 
 18019              	.LASF52:
 18020 1ab6 4D505536 		.ascii	"MPU6050_getFreefallDetectionThreshold\000"
 18020      3035305F 
 18020      67657446 
 18020      72656566 
 18020      616C6C44 
 18021              	.LASF24:
 18022 1adc 4932435F 		.ascii	"I2C_MPU6050_I2CAddress\000"
 18022      4D505536 
 18022      3035305F 
 18022      49324341 
 18022      64647265 
 18023              	.LASF123:
 18024 1af3 4D505536 		.ascii	"MPU6050_getSlate4InputByte\000"
 18024      3035305F 
 18024      67657453 
 18024      6C617465 
 18024      34496E70 
 18025              	.LASF15:
 18026 1b0e 75696E74 		.ascii	"uint8_t\000"
 18026      385F7400 
 18027              	.LASF141:
 18028 1b16 4D505536 		.ascii	"MPU6050_setInterruptLatchClear\000"
 18028      3035305F 
 18028      73657449 
 18028      6E746572 
 18028      72757074 
 18029              	.LASF293:
 18030 1b35 4D505536 		.ascii	"MPU6050_setMemoryBank\000"
 18030      3035305F 
 18030      7365744D 
 18030      656D6F72 
 18030      7942616E 
 18031              	.LASF33:
 18032 1b4b 73796E63 		.ascii	"sync\000"
 18032      00
 18033              	.LASF155:
 18034 1b50 4D505536 		.ascii	"MPU6050_getIntMotionEnabled\000"
 18034      3035305F 
 18034      67657449 
 18034      6E744D6F 
 18034      74696F6E 
 18035              	.LASF179:
 18036 1b6c 4D505536 		.ascii	"MPU6050_getAccelerationZ\000"
 18036      3035305F 
 18036      67657441 
 18036      6363656C 
 18036      65726174 
 18037              	.LASF168:
 18038 1b85 4D505536 		.ascii	"MPU6050_getIntZeroMotionStatus\000"
 18038      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 393


 18038      67657449 
 18038      6E745A65 
 18038      726F4D6F 
 18039              	.LASF106:
 18040 1ba4 4D505536 		.ascii	"MPU6050_setSlaveDataLength\000"
 18040      3035305F 
 18040      73657453 
 18040      6C617665 
 18040      44617461 
 18041              	.LASF137:
 18042 1bbf 4D505536 		.ascii	"MPU6050_getInterruptLatch\000"
 18042      3035305F 
 18042      67657449 
 18042      6E746572 
 18042      72757074 
 18043              	.LASF188:
 18044 1bd9 4D505536 		.ascii	"MPU6050_getExternalSensorDWord\000"
 18044      3035305F 
 18044      67657445 
 18044      78746572 
 18044      6E616C53 
 18045              	.LASF34:
 18046 1bf8 4D505536 		.ascii	"MPU6050_getDLPFMode\000"
 18046      3035305F 
 18046      67657444 
 18046      4C50464D 
 18046      6F646500 
 18047              	.LASF257:
 18048 1c0c 4D505536 		.ascii	"MPU6050_getZGyroOffset\000"
 18048      3035305F 
 18048      6765745A 
 18048      4779726F 
 18048      4F666673 
 18049              	.LASF92:
 18050 1c23 73706565 		.ascii	"speed\000"
 18050      6400
 18051              	.LASF97:
 18052 1c29 4D505536 		.ascii	"MPU6050_getSlaveEnabled\000"
 18052      3035305F 
 18052      67657453 
 18052      6C617665 
 18052      456E6162 
 18053              	.LASF165:
 18054 1c41 4D505536 		.ascii	"MPU6050_getIntStatus\000"
 18054      3035305F 
 18054      67657449 
 18054      6E745374 
 18054      61747573 
 18055              	.LASF65:
 18056 1c56 4D505536 		.ascii	"MPU6050_setZeroMotionDetectionDuration\000"
 18056      3035305F 
 18056      7365745A 
 18056      65726F4D 
 18056      6F74696F 
 18057              	.LASF227:
 18058 1c7d 4D505536 		.ascii	"MPU6050_setClockSource\000"
 18058      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 394


 18058      73657443 
 18058      6C6F636B 
 18058      536F7572 
 18059              	.LASF204:
 18060 1c94 4D505536 		.ascii	"MPU6050_getAccelerometerPowerOnDelay\000"
 18060      3035305F 
 18060      67657441 
 18060      6363656C 
 18060      65726F6D 
 18061              	.LASF206:
 18062 1cb9 4D505536 		.ascii	"MPU6050_getFreefallDetectionCounterDecrement\000"
 18062      3035305F 
 18062      67657446 
 18062      72656566 
 18062      616C6C44 
 18063              	.LASF203:
 18064 1ce6 4D505536 		.ascii	"MPU6050_resetTemperaturePath\000"
 18064      3035305F 
 18064      72657365 
 18064      7454656D 
 18064      70657261 
 18065              	.LASF286:
 18066 1d03 4D505536 		.ascii	"MPU6050_getDMPInt1Status\000"
 18066      3035305F 
 18066      67657444 
 18066      4D50496E 
 18066      74315374 
 18067              	.LASF173:
 18068 1d1c 4D505536 		.ascii	"MPU6050_getMotion9t\000"
 18068      3035305F 
 18068      6765744D 
 18068      6F74696F 
 18068      6E397400 
 18069              	.LASF291:
 18070 1d30 4D505536 		.ascii	"MPU6050_setDMPEnabled\000"
 18070      3035305F 
 18070      73657444 
 18070      4D50456E 
 18070      61626C65 
 18071              	.LASF37:
 18072 1d46 4D505536 		.ascii	"MPU6050_getFullScaleGyroRange\000"
 18072      3035305F 
 18072      67657446 
 18072      756C6C53 
 18072      63616C65 
 18073              	.LASF288:
 18074 1d64 4D505536 		.ascii	"MPU6050_getIntPLLReadyStatus\000"
 18074      3035305F 
 18074      67657449 
 18074      6E74504C 
 18074      4C526561 
 18075              	.LASF258:
 18076 1d81 4D505536 		.ascii	"MPU6050_setZGyroOffset\000"
 18076      3035305F 
 18076      7365745A 
 18076      4779726F 
 18076      4F666673 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 395


 18077              	.LASF96:
 18078 1d98 4D505536 		.ascii	"MPU6050_setSlaveRegister\000"
 18078      3035305F 
 18078      73657453 
 18078      6C617665 
 18078      52656769 
 18079              	.LASF259:
 18080 1db1 4D505536 		.ascii	"MPU6050_getXFineGain\000"
 18080      3035305F 
 18080      67657458 
 18080      46696E65 
 18080      4761696E 
 18081              	.LASF304:
 18082 1dc6 4D505536 		.ascii	"MPU6050_setDMPConfig1\000"
 18082      3035305F 
 18082      73657444 
 18082      4D50436F 
 18082      6E666967 
 18083              	.LASF46:
 18084 1ddc 4D505536 		.ascii	"MPU6050_setAccelZSelfTest\000"
 18084      3035305F 
 18084      73657441 
 18084      6363656C 
 18084      5A53656C 
 18085              	.LASF88:
 18086 1df6 4D505536 		.ascii	"MPU6050_getSlaveReadWriteTransitionEnabled\000"
 18086      3035305F 
 18086      67657453 
 18086      6C617665 
 18086      52656164 
 18087              	.LASF135:
 18088 1e21 4D505536 		.ascii	"MPU6050_setInterruptDrive\000"
 18088      3035305F 
 18088      73657449 
 18088      6E746572 
 18088      72757074 
 18089              	.LASF202:
 18090 1e3b 4D505536 		.ascii	"MPU6050_resetAccelerometerPath\000"
 18090      3035305F 
 18090      72657365 
 18090      74416363 
 18090      656C6572 
 18091              	.LASF60:
 18092 1e5a 4D505536 		.ascii	"MPU6050_getMotionDetectionDuration\000"
 18092      3035305F 
 18092      6765744D 
 18092      6F74696F 
 18092      6E446574 
 18093              	.LASF134:
 18094 1e7d 4D505536 		.ascii	"MPU6050_getInterruptDrive\000"
 18094      3035305F 
 18094      67657449 
 18094      6E746572 
 18094      72757074 
 18095              	.LASF216:
 18096 1e97 4D505536 		.ascii	"MPU6050_resetFIFO\000"
 18096      3035305F 
ARM GAS  C:\Users\CHRIST~1\AppData\Local\Temp\ccslI7ZX.s 			page 396


 18096      72657365 
 18096      74464946 
 18096      4F00
 18097              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
