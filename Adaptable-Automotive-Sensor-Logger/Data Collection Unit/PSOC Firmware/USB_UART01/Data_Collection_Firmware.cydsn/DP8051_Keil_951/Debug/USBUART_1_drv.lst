C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBUART_1_DRV
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\USBUART_1_drv.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBUART_1_drv.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\USBUART_1_drv.lst) CD D
                    -B NOIP OT(2,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\USBUART_1_drv.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBUART_1_drv.c
   3          * Version 2.70
   4          *
   5          * Description:
   6          *  Endpoint 0 Driver for the USBFS Component.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USBUART_1.h"
  18          #include "USBUART_1_pvt.h"
  19          
  20          
  21          /***************************************
  22          * Global data allocation
  23          ***************************************/
  24          
  25          volatile T_USBUART_1_EP_CTL_BLOCK USBUART_1_EP[USBUART_1_MAX_EP];
  26          volatile uint8 USBUART_1_configuration;
  27          volatile uint8 USBUART_1_interfaceNumber;
  28          volatile uint8 USBUART_1_configurationChanged;
  29          volatile uint8 USBUART_1_deviceAddress;
  30          volatile uint8 USBUART_1_deviceStatus;
  31          volatile uint8 USBUART_1_interfaceSetting[USBUART_1_MAX_INTERFACES_NUMBER];
  32          volatile uint8 USBUART_1_interfaceSetting_last[USBUART_1_MAX_INTERFACES_NUMBER];
  33          volatile uint8 USBUART_1_interfaceStatus[USBUART_1_MAX_INTERFACES_NUMBER];
  34          volatile uint8 USBUART_1_device;
  35          const uint8 CYCODE *USBUART_1_interfaceClass;
  36          
  37          
  38          /***************************************
  39          * Local data allocation
  40          ***************************************/
  41          
  42          volatile uint8 USBUART_1_ep0Toggle;
  43          volatile uint8 USBUART_1_lastPacketSize;
  44          volatile uint8 USBUART_1_transferState;
  45          volatile T_USBUART_1_TD USBUART_1_currentTD;
  46          volatile uint8 USBUART_1_ep0Mode;
  47          volatile uint8 USBUART_1_ep0Count;
  48          volatile uint16 USBUART_1_transferByteCount;
  49          
  50          
  51          /*******************************************************************************
  52          * Function Name: USBUART_1_ep_0_Interrupt
  53          ********************************************************************************
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 2   

  54          *
  55          * Summary:
  56          *  This Interrupt Service Routine handles Endpoint 0 (Control Pipe) traffic.
  57          *  It dispatches setup requests and handles the data and status stages.
  58          *
  59          * Parameters:
  60          *  None.
  61          *
  62          * Return:
  63          *  None.
  64          *
  65          *******************************************************************************/
  66          CY_ISR(USBUART_1_EP_0_ISR)
  67          {
  68   1          uint8 bRegTemp;
  69   1          uint8 modifyReg;
  70   1      
  71   1      
  72   1          bRegTemp = CY_GET_REG8(USBUART_1_EP0_CR_PTR);
  73   1          if ((bRegTemp & USBUART_1_MODE_ACKD) != 0u)
  74   1          {
  75   2              modifyReg = 1u;
  76   2              if ((bRegTemp & USBUART_1_MODE_SETUP_RCVD) != 0u)
  77   2              {
  78   3                  if((bRegTemp & USBUART_1_MODE_MASK) != USBUART_1_MODE_NAK_IN_OUT)
  79   3                  {
  80   4                      modifyReg = 0u;                                     /* When mode not NAK_IN_OUT => invalid
             - setup */
  81   4                  }
  82   3                  else
  83   3                  {
  84   4                      USBUART_1_HandleSetup();
  85   4                      if((USBUART_1_ep0Mode & USBUART_1_MODE_SETUP_RCVD) != 0u)
  86   4                      {
  87   5                          modifyReg = 0u;                         /* if SETUP bit set -> exit without modifying 
             -the mode */
  88   5                      }
  89   4      
  90   4                  }
  91   3              }
  92   2              else if ((bRegTemp & USBUART_1_MODE_IN_RCVD) != 0u)
  93   2              {
  94   3                  USBUART_1_HandleIN();
  95   3              }
  96   2              else if ((bRegTemp & USBUART_1_MODE_OUT_RCVD) != 0u)
  97   2              {
  98   3                  USBUART_1_HandleOUT();
  99   3              }
 100   2              else
 101   2              {
 102   3                  modifyReg = 0u;
 103   3              }
 104   2              if(modifyReg != 0u)
 105   2              {
 106   3                  bRegTemp = CY_GET_REG8(USBUART_1_EP0_CR_PTR);    /* unlock registers */
 107   3                  if((bRegTemp & USBUART_1_MODE_SETUP_RCVD) == 0u)  /* Check if SETUP bit is not set, otherwise 
             -exit */
 108   3                  {
 109   4                      /* Update the count register */
 110   4                      bRegTemp = USBUART_1_ep0Toggle | USBUART_1_ep0Count;
 111   4                      CY_SET_REG8(USBUART_1_EP0_CNT_PTR, bRegTemp);
 112   4                      if(bRegTemp == CY_GET_REG8(USBUART_1_EP0_CNT_PTR))   /* continue if writing was successful
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 3   

             - */
 113   4                      {
 114   5                          do
 115   5                          {
 116   6                              modifyReg = USBUART_1_ep0Mode;       /* Init temporary variable */
 117   6                              /* Unlock registers */
 118   6                              bRegTemp = CY_GET_REG8(USBUART_1_EP0_CR_PTR) & USBUART_1_MODE_SETUP_RCVD;
 119   6                              if(bRegTemp == 0u)                          /* Check if SETUP bit is not set */
 120   6                              {
 121   7                                  /* Set the Mode Register  */
 122   7                                  CY_SET_REG8(USBUART_1_EP0_CR_PTR, USBUART_1_ep0Mode);
 123   7                                  /* Writing check */
 124   7                                  modifyReg = CY_GET_REG8(USBUART_1_EP0_CR_PTR) & USBUART_1_MODE_MASK;
 125   7                              }
 126   6                          }while(modifyReg != USBUART_1_ep0Mode);  /* Repeat if writing was not successful */
 127   5                      }
 128   4                  }
 129   3              }
 130   2          }
 131   1      }
 132          
 133          
 134          /*******************************************************************************
 135          * Function Name: USBUART_1_HandleSetup
 136          ********************************************************************************
 137          *
 138          * Summary:
 139          *  This Routine dispatches requests for the four USB request types
 140          *
 141          * Parameters:
 142          *  None.
 143          *
 144          * Return:
 145          *  None.
 146          *
 147          * Reentrant:
 148          *  No.
 149          *
 150          *******************************************************************************/
 151          void USBUART_1_HandleSetup(void) 
 152          {
 153   1          uint8 requestHandled;
 154   1      
 155   1          requestHandled = CY_GET_REG8(USBUART_1_EP0_CR_PTR);      /* unlock registers */
 156   1          CY_SET_REG8(USBUART_1_EP0_CR_PTR, requestHandled);       /* clear setup bit */
 157   1          requestHandled = CY_GET_REG8(USBUART_1_EP0_CR_PTR);      /* reread register */
 158   1          if((requestHandled & USBUART_1_MODE_SETUP_RCVD) != 0u)
 159   1          {
 160   2              USBUART_1_ep0Mode = requestHandled;        /* if SETUP bit set -> exit without modifying the mode 
             -*/
 161   2          }
 162   1          else
 163   1          {
 164   2              /* In case the previous transfer did not complete, close it out */
 165   2              USBUART_1_UpdateStatusBlock(USBUART_1_XFER_PREMATURE);
 166   2      
 167   2              switch (CY_GET_REG8(USBUART_1_bmRequestType) & USBUART_1_RQST_TYPE_MASK)
 168   2              {
 169   3                  case USBUART_1_RQST_TYPE_STD:
 170   3                      requestHandled = USBUART_1_HandleStandardRqst();
 171   3                      break;
 172   3                  case USBUART_1_RQST_TYPE_CLS:
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 4   

 173   3                      requestHandled = USBUART_1_DispatchClassRqst();
 174   3                      break;
 175   3                  case USBUART_1_RQST_TYPE_VND:
 176   3                      requestHandled = USBUART_1_HandleVendorRqst();
 177   3                      break;
 178   3                  default:
 179   3                      requestHandled = USBUART_1_FALSE;
 180   3                      break;
 181   3              }
 182   2              if (requestHandled == USBUART_1_FALSE)
 183   2              {
 184   3                  USBUART_1_ep0Mode = USBUART_1_MODE_STALL_IN_OUT;
 185   3              }
 186   2          }
 187   1      }
 188          
 189          
 190          /*******************************************************************************
 191          * Function Name: USBUART_1_HandleIN
 192          ********************************************************************************
 193          *
 194          * Summary:
 195          *  This routine handles EP0 IN transfers.
 196          *
 197          * Parameters:
 198          *  None.
 199          *
 200          * Return:
 201          *  None.
 202          *
 203          * Reentrant:
 204          *  No.
 205          *
 206          *******************************************************************************/
 207          void USBUART_1_HandleIN(void) 
 208          {
 209   1          switch (USBUART_1_transferState)
 210   1          {
 211   2              case USBUART_1_TRANS_STATE_IDLE:
 212   2                  break;
 213   2              case USBUART_1_TRANS_STATE_CONTROL_READ:
 214   2                  USBUART_1_ControlReadDataStage();
 215   2                  break;
 216   2              case USBUART_1_TRANS_STATE_CONTROL_WRITE:
 217   2                  USBUART_1_ControlWriteStatusStage();
 218   2                  break;
 219   2              case USBUART_1_TRANS_STATE_NO_DATA_CONTROL:
 220   2                  USBUART_1_NoDataControlStatusStage();
 221   2                  break;
 222   2              default:    /* there are no more states */
 223   2                  break;
 224   2          }
 225   1      }
 226          
 227          
 228          /*******************************************************************************
 229          * Function Name: USBUART_1_HandleOUT
 230          ********************************************************************************
 231          *
 232          * Summary:
 233          *  This routine handles EP0 OUT transfers.
 234          *
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 5   

 235          * Parameters:
 236          *  None.
 237          *
 238          * Return:
 239          *  None.
 240          *
 241          * Reentrant:
 242          *  No.
 243          *
 244          *******************************************************************************/
 245          void USBUART_1_HandleOUT(void) 
 246          {
 247   1          switch (USBUART_1_transferState)
 248   1          {
 249   2              case USBUART_1_TRANS_STATE_IDLE:
 250   2                  break;
 251   2              case USBUART_1_TRANS_STATE_CONTROL_READ:
 252   2                  USBUART_1_ControlReadStatusStage();
 253   2                  break;
 254   2              case USBUART_1_TRANS_STATE_CONTROL_WRITE:
 255   2                  USBUART_1_ControlWriteDataStage();
 256   2                  break;
 257   2              case USBUART_1_TRANS_STATE_NO_DATA_CONTROL:
 258   2                  /* Update the completion block */
 259   2                  USBUART_1_UpdateStatusBlock(USBUART_1_XFER_ERROR);
 260   2                  /* We expect no more data, so stall INs and OUTs */
 261   2                  USBUART_1_ep0Mode = USBUART_1_MODE_STALL_IN_OUT;
 262   2                  break;
 263   2              default:    /* There are no more states */
 264   2                  break;
 265   2          }
 266   1      }
 267          
 268          
 269          /*******************************************************************************
 270          * Function Name: USBUART_1_LoadEP0
 271          ********************************************************************************
 272          *
 273          * Summary:
 274          *  This routine loads the EP0 data registers for OUT transfers.  It uses the
 275          *  currentTD (previously initialized by the _InitControlWrite function and
 276          *  updated for each OUT transfer, and the bLastPacketSize) to determine how
 277          *  many uint8s to transfer on the current OUT.
 278          *
 279          *  If the number of uint8s remaining is zero and the last transfer was full,
 280          *  we need to send a zero length packet.  Otherwise we send the minimum
 281          *  of the control endpoint size (8) or remaining number of uint8s for the
 282          *  transaction.
 283          *
 284          * Parameters:
 285          *  None.
 286          *
 287          * Return:
 288          *  None.
 289          *
 290          * Global variables:
 291          *  USBUART_1_transferByteCount - Update the transfer byte count from the
 292          *     last transaction.
 293          *  USBUART_1_ep0Count - counts the data loaded to the SIE memory in
 294          *     current packet.
 295          *  USBUART_1_lastPacketSize - remembers the USBFS_ep0Count value for the
 296          *     next packet.
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 6   

 297          *  USBUART_1_transferByteCount - sum of the previous bytes transferred
 298          *     on previous packets(sum of USBFS_lastPacketSize)
 299          *  USBUART_1_ep0Toggle - inverted
 300          *  USBUART_1_ep0Mode  - prepare for mode register content.
 301          *  USBUART_1_transferState - set to TRANS_STATE_CONTROL_READ
 302          *
 303          * Reentrant:
 304          *  No.
 305          *
 306          *******************************************************************************/
 307          void USBUART_1_LoadEP0(void) 
 308          {
 309   1          uint8 ep0Count = 0u;
 310   1      
 311   1          /* Update the transfer byte count from the last transaction */
 312   1          USBUART_1_transferByteCount += USBUART_1_lastPacketSize;
 313   1          /* Now load the next transaction */
 314   1          while ((USBUART_1_currentTD.count > 0u) && (ep0Count < 8u))
 315   1          {
 316   2              CY_SET_REG8((reg8 *)(USBUART_1_EP0_DR0_IND + ep0Count), *USBUART_1_currentTD.pData);
 317   2              USBUART_1_currentTD.pData = &USBUART_1_currentTD.pData[1u];
 318   2              ep0Count++;
 319   2              USBUART_1_currentTD.count--;
 320   2          }
 321   1          /* Support zero-length packet*/
 322   1          if( (USBUART_1_lastPacketSize == 8u) || (ep0Count > 0u) )
 323   1          {
 324   2              /* Update the data toggle */
 325   2              USBUART_1_ep0Toggle ^= USBUART_1_EP0_CNT_DATA_TOGGLE;
 326   2              /* Set the Mode Register  */
 327   2              USBUART_1_ep0Mode = USBUART_1_MODE_ACK_IN_STATUS_OUT;
 328   2              /* Update the state (or stay the same) */
 329   2              USBUART_1_transferState = USBUART_1_TRANS_STATE_CONTROL_READ;
 330   2          }
 331   1          else
 332   1          {
 333   2              /* Expect Status Stage Out */
 334   2              USBUART_1_ep0Mode = USBUART_1_MODE_STATUS_OUT_ONLY;
 335   2              /* Update the state (or stay the same) */
 336   2              USBUART_1_transferState = USBUART_1_TRANS_STATE_CONTROL_READ;
 337   2          }
 338   1      
 339   1          /* Save the packet size for next time */
 340   1          USBUART_1_lastPacketSize = ep0Count;
 341   1          USBUART_1_ep0Count = ep0Count;
 342   1      }
 343          
 344          
 345          /*******************************************************************************
 346          * Function Name: USBUART_1_InitControlRead
 347          ********************************************************************************
 348          *
 349          * Summary:
 350          *  Initialize a control read transaction, usable to send data to the host.
 351          *  The following global variables should be initialized before this function
 352          *  called. To send zero length packet use InitZeroLengthControlTransfer
 353          *  function.
 354          *
 355          * Parameters:
 356          *  None.
 357          *
 358          * Return:
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 7   

 359          *  requestHandled state.
 360          *
 361          * Global variables:
 362          *  USBUART_1_currentTD.count - counts of data to be sent.
 363          *  USBUART_1_currentTD.pData - data pointer.
 364          *
 365          * Reentrant:
 366          *  No.
 367          *
 368          *******************************************************************************/
 369          uint8 USBUART_1_InitControlRead(void) 
 370          {
 371   1          uint16 xferCount;
 372   1          if(USBUART_1_currentTD.count == 0u)
 373   1          {
 374   2              (void) USBUART_1_InitZeroLengthControlTransfer();
 375   2          }
 376   1          else
 377   1          {
 378   2              /* Set up the state machine */
 379   2              USBUART_1_transferState = USBUART_1_TRANS_STATE_CONTROL_READ;
 380   2              /* Set the toggle, it gets updated in LoadEP */
 381   2              USBUART_1_ep0Toggle = 0u;
 382   2              /* Initialize the Status Block */
 383   2              USBUART_1_InitializeStatusBlock();
 384   2              xferCount = (((uint16)CY_GET_REG8(USBUART_1_lengthHi) << 8u) | (CY_GET_REG8(USBUART_1_lengthLo)));
 385   2      
 386   2              if (USBUART_1_currentTD.count > xferCount)
 387   2              {
 388   3                  USBUART_1_currentTD.count = xferCount;
 389   3              }
 390   2              USBUART_1_LoadEP0();
 391   2          }
 392   1      
 393   1          return(USBUART_1_TRUE);
 394   1      }
 395          
 396          
 397          /*******************************************************************************
 398          * Function Name: USBUART_1_InitZeroLengthControlTransfer
 399          ********************************************************************************
 400          *
 401          * Summary:
 402          *  Initialize a zero length data IN transfer.
 403          *
 404          * Parameters:
 405          *  None.
 406          *
 407          * Return:
 408          *  requestHandled state.
 409          *
 410          * Global variables:
 411          *  USBUART_1_ep0Toggle - set to EP0_CNT_DATA_TOGGLE
 412          *  USBUART_1_ep0Mode  - prepare for mode register content.
 413          *  USBUART_1_transferState - set to TRANS_STATE_CONTROL_READ
 414          *  USBUART_1_ep0Count - cleared, means the zero-length packet.
 415          *  USBUART_1_lastPacketSize - cleared.
 416          *
 417          * Reentrant:
 418          *  No.
 419          *
 420          *******************************************************************************/
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 8   

 421          uint8 USBUART_1_InitZeroLengthControlTransfer(void)
 422                                                          
 423          {
 424   1          /* Update the state */
 425   1          USBUART_1_transferState = USBUART_1_TRANS_STATE_CONTROL_READ;
 426   1          /* Set the data toggle */
 427   1          USBUART_1_ep0Toggle = USBUART_1_EP0_CNT_DATA_TOGGLE;
 428   1          /* Set the Mode Register  */
 429   1          USBUART_1_ep0Mode = USBUART_1_MODE_ACK_IN_STATUS_OUT;
 430   1          /* Save the packet size for next time */
 431   1          USBUART_1_lastPacketSize = 0u;
 432   1          USBUART_1_ep0Count = 0u;
 433   1      
 434   1          return(USBUART_1_TRUE);
 435   1      }
 436          
 437          
 438          /*******************************************************************************
 439          * Function Name: USBUART_1_ControlReadDataStage
 440          ********************************************************************************
 441          *
 442          * Summary:
 443          *  Handle the Data Stage of a control read transfer.
 444          *
 445          * Parameters:
 446          *  None.
 447          *
 448          * Return:
 449          *  None.
 450          *
 451          * Reentrant:
 452          *  No.
 453          *
 454          *******************************************************************************/
 455          void USBUART_1_ControlReadDataStage(void) 
 456          
 457          {
 458   1          USBUART_1_LoadEP0();
 459   1      }
 460          
 461          
 462          /*******************************************************************************
 463          * Function Name: USBUART_1_ControlReadStatusStage
 464          ********************************************************************************
 465          *
 466          * Summary:
 467          *  Handle the Status Stage of a control read transfer.
 468          *
 469          * Parameters:
 470          *  None.
 471          *
 472          * Return:
 473          *  None.
 474          *
 475          * Global variables:
 476          *  USBUART_1_USBFS_transferByteCount - updated with last packet size.
 477          *  USBUART_1_transferState - set to TRANS_STATE_IDLE.
 478          *  USBUART_1_ep0Mode  - set to MODE_STALL_IN_OUT.
 479          *
 480          * Reentrant:
 481          *  No.
 482          *
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 9   

 483          *******************************************************************************/
 484          void USBUART_1_ControlReadStatusStage(void) 
 485          {
 486   1          /* Update the transfer byte count */
 487   1          USBUART_1_transferByteCount += USBUART_1_lastPacketSize;
 488   1          /* Go Idle */
 489   1          USBUART_1_transferState = USBUART_1_TRANS_STATE_IDLE;
 490   1          /* Update the completion block */
 491   1          USBUART_1_UpdateStatusBlock(USBUART_1_XFER_STATUS_ACK);
 492   1          /* We expect no more data, so stall INs and OUTs */
 493   1          USBUART_1_ep0Mode =  USBUART_1_MODE_STALL_IN_OUT;
 494   1      }
 495          
 496          
 497          /*******************************************************************************
 498          * Function Name: USBUART_1_InitControlWrite
 499          ********************************************************************************
 500          *
 501          * Summary:
 502          *  Initialize a control write transaction
 503          *
 504          * Parameters:
 505          *  None.
 506          *
 507          * Return:
 508          *  requestHandled state.
 509          *
 510          * Global variables:
 511          *  USBUART_1_USBFS_transferState - set to TRANS_STATE_CONTROL_WRITE
 512          *  USBUART_1_ep0Toggle - set to EP0_CNT_DATA_TOGGLE
 513          *  USBUART_1_ep0Mode  - set to MODE_ACK_OUT_STATUS_IN
 514          *
 515          * Reentrant:
 516          *  No.
 517          *
 518          *******************************************************************************/
 519          uint8 USBUART_1_InitControlWrite(void) 
 520          {
 521   1          uint16 xferCount;
 522   1      
 523   1          /* Set up the state machine */
 524   1          USBUART_1_transferState = USBUART_1_TRANS_STATE_CONTROL_WRITE;
 525   1          /* This might not be necessary */
 526   1          USBUART_1_ep0Toggle = USBUART_1_EP0_CNT_DATA_TOGGLE;
 527   1          /* Initialize the Status Block */
 528   1          USBUART_1_InitializeStatusBlock();
 529   1      
 530   1          xferCount = (((uint16)CY_GET_REG8(USBUART_1_lengthHi) << 8u) | (CY_GET_REG8(USBUART_1_lengthLo)));
 531   1      
 532   1          if (USBUART_1_currentTD.count > xferCount)
 533   1          {
 534   2              USBUART_1_currentTD.count = xferCount;
 535   2          }
 536   1      
 537   1          /* Expect Data or Status Stage */
 538   1          USBUART_1_ep0Mode = USBUART_1_MODE_ACK_OUT_STATUS_IN;
 539   1      
 540   1          return(USBUART_1_TRUE);
 541   1      }
 542          
 543          
 544          /*******************************************************************************
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 10  

 545          * Function Name: USBUART_1_ControlWriteDataStage
 546          ********************************************************************************
 547          *
 548          * Summary:
 549          *  Handle the Data Stage of a control write transfer
 550          *       1. Get the data (We assume the destination was validated previously)
 551          *       2. Update the count and data toggle
 552          *       3. Update the mode register for the next transaction
 553          *
 554          * Parameters:
 555          *  None.
 556          *
 557          * Return:
 558          *  None.
 559          *
 560          * Global variables:
 561          *  USBUART_1_transferByteCount - Update the transfer byte count from the
 562          *    last transaction.
 563          *  USBUART_1_ep0Count - counts the data loaded from the SIE memory
 564          *    in current packet.
 565          *  USBUART_1_transferByteCount - sum of the previous bytes transferred
 566          *    on previous packets(sum of USBFS_lastPacketSize)
 567          *  USBUART_1_ep0Toggle - inverted
 568          *  USBUART_1_ep0Mode  - set to MODE_ACK_OUT_STATUS_IN.
 569          *
 570          * Reentrant:
 571          *  No.
 572          *
 573          *******************************************************************************/
 574          void USBUART_1_ControlWriteDataStage(void) 
 575          {
 576   1          uint8 ep0Count;
 577   1          uint8 regIndex = 0u;
 578   1      
 579   1          ep0Count = (CY_GET_REG8(USBUART_1_EP0_CNT_PTR) & USBUART_1_EPX_CNT0_MASK) -
 580   1                     USBUART_1_EPX_CNTX_CRC_COUNT;
 581   1      
 582   1          USBUART_1_transferByteCount += ep0Count;
 583   1      
 584   1          while ((USBUART_1_currentTD.count > 0u) && (ep0Count > 0u))
 585   1          {
 586   2              *USBUART_1_currentTD.pData = CY_GET_REG8((reg8 *)(USBUART_1_EP0_DR0_IND + regIndex));
 587   2              USBUART_1_currentTD.pData = &USBUART_1_currentTD.pData[1u];
 588   2              regIndex++;
 589   2              ep0Count--;
 590   2              USBUART_1_currentTD.count--;
 591   2          }
 592   1          USBUART_1_ep0Count = ep0Count;
 593   1          /* Update the data toggle */
 594   1          USBUART_1_ep0Toggle ^= USBUART_1_EP0_CNT_DATA_TOGGLE;
 595   1          /* Expect Data or Status Stage */
 596   1          USBUART_1_ep0Mode = USBUART_1_MODE_ACK_OUT_STATUS_IN;
 597   1      }
 598          
 599          
 600          /*******************************************************************************
 601          * Function Name: USBUART_1_ControlWriteStatusStage
 602          ********************************************************************************
 603          *
 604          * Summary:
 605          *  Handle the Status Stage of a control write transfer
 606          *
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 11  

 607          * Parameters:
 608          *  None.
 609          *
 610          * Return:
 611          *  None.
 612          *
 613          * Global variables:
 614          *  USBUART_1_transferState - set to TRANS_STATE_IDLE.
 615          *  USBUART_1_USBFS_ep0Mode  - set to MODE_STALL_IN_OUT.
 616          *
 617          * Reentrant:
 618          *  No.
 619          *
 620          *******************************************************************************/
 621          void USBUART_1_ControlWriteStatusStage(void) 
 622          {
 623   1          /* Go Idle */
 624   1          USBUART_1_transferState = USBUART_1_TRANS_STATE_IDLE;
 625   1          /* Update the completion block */
 626   1          USBUART_1_UpdateStatusBlock(USBUART_1_XFER_STATUS_ACK);
 627   1          /* We expect no more data, so stall INs and OUTs */
 628   1          USBUART_1_ep0Mode = USBUART_1_MODE_STALL_IN_OUT;
 629   1      }
 630          
 631          
 632          /*******************************************************************************
 633          * Function Name: USBUART_1_InitNoDataControlTransfer
 634          ********************************************************************************
 635          *
 636          * Summary:
 637          *  Initialize a no data control transfer
 638          *
 639          * Parameters:
 640          *  None.
 641          *
 642          * Return:
 643          *  requestHandled state.
 644          *
 645          * Global variables:
 646          *  USBUART_1_transferState - set to TRANS_STATE_NO_DATA_CONTROL.
 647          *  USBUART_1_ep0Mode  - set to MODE_STATUS_IN_ONLY.
 648          *  USBUART_1_ep0Count - cleared.
 649          *  USBUART_1_ep0Toggle - set to EP0_CNT_DATA_TOGGLE
 650          *
 651          * Reentrant:
 652          *  No.
 653          *
 654          *******************************************************************************/
 655          uint8 USBUART_1_InitNoDataControlTransfer(void) 
 656          {
 657   1          USBUART_1_transferState = USBUART_1_TRANS_STATE_NO_DATA_CONTROL;
 658   1          USBUART_1_ep0Mode = USBUART_1_MODE_STATUS_IN_ONLY;
 659   1          USBUART_1_ep0Toggle = USBUART_1_EP0_CNT_DATA_TOGGLE;
 660   1          USBUART_1_ep0Count = 0u;
 661   1      
 662   1          return(USBUART_1_TRUE);
 663   1      }
 664          
 665          
 666          /*******************************************************************************
 667          * Function Name: USBUART_1_NoDataControlStatusStage
 668          ********************************************************************************
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 12  

 669          * Summary:
 670          *  Handle the Status Stage of a no data control transfer.
 671          *
 672          *  SET_ADDRESS is special, since we need to receive the status stage with
 673          *  the old address.
 674          *
 675          * Parameters:
 676          *  None.
 677          *
 678          * Return:
 679          *  None.
 680          *
 681          * Global variables:
 682          *  USBUART_1_transferState - set to TRANS_STATE_IDLE.
 683          *  USBUART_1_ep0Mode  - set to MODE_STALL_IN_OUT.
 684          *  USBUART_1_ep0Toggle - set to EP0_CNT_DATA_TOGGLE
 685          *  USBUART_1_deviceAddress - used to set new address and cleared
 686          *
 687          * Reentrant:
 688          *  No.
 689          *
 690          *******************************************************************************/
 691          void USBUART_1_NoDataControlStatusStage(void) 
 692          {
 693   1          /* Change the USB address register if we got a SET_ADDRESS. */
 694   1          if (USBUART_1_deviceAddress != 0u)
 695   1          {
 696   2              CY_SET_REG8(USBUART_1_CR0_PTR, USBUART_1_deviceAddress | USBUART_1_CR0_ENABLE);
 697   2              USBUART_1_deviceAddress = 0u;
 698   2          }
 699   1          /* Go Idle */
 700   1          USBUART_1_transferState = USBUART_1_TRANS_STATE_IDLE;
 701   1          /* Update the completion block */
 702   1          USBUART_1_UpdateStatusBlock(USBUART_1_XFER_STATUS_ACK);
 703   1           /* We expect no more data, so stall INs and OUTs */
 704   1          USBUART_1_ep0Mode = USBUART_1_MODE_STALL_IN_OUT;
 705   1      }
 706          
 707          
 708          /*******************************************************************************
 709          * Function Name: USBUART_1_UpdateStatusBlock
 710          ********************************************************************************
 711          *
 712          * Summary:
 713          *  Update the Completion Status Block for a Request.  The block is updated
 714          *  with the completion code the USBUART_1_transferByteCount.  The
 715          *  StatusBlock Pointer is set to NULL.
 716          *
 717          * Parameters:
 718          *  completionCode - status.
 719          *
 720          * Return:
 721          *  None.
 722          *
 723          * Global variables:
 724          *  USBUART_1_currentTD.pStatusBlock->status - updated by the
 725          *    completionCode parameter.
 726          *  USBUART_1_currentTD.pStatusBlock->length - updated.
 727          *  USBUART_1_currentTD.pStatusBlock - cleared.
 728          *
 729          * Reentrant:
 730          *  No.
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 13  

 731          *
 732          *******************************************************************************/
 733          void USBUART_1_UpdateStatusBlock(uint8 completionCode) 
 734          {
 735   1          if (USBUART_1_currentTD.pStatusBlock != NULL)
 736   1          {
 737   2              USBUART_1_currentTD.pStatusBlock->status = completionCode;
 738   2              USBUART_1_currentTD.pStatusBlock->length = USBUART_1_transferByteCount;
 739   2              USBUART_1_currentTD.pStatusBlock = NULL;
 740   2          }
 741   1      }
 742          
 743          
 744          /*******************************************************************************
 745          * Function Name: USBUART_1_InitializeStatusBlock
 746          ********************************************************************************
 747          *
 748          * Summary:
 749          *  Initialize the Completion Status Block for a Request.  The completion
 750          *  code is set to USB_XFER_IDLE.
 751          *
 752          *  Also, initializes USBUART_1_transferByteCount.  Save some space,
 753          *  this is the only consumer.
 754          *
 755          * Parameters:
 756          *  None.
 757          *
 758          * Return:
 759          *  None.
 760          *
 761          * Global variables:
 762          *  USBUART_1_currentTD.pStatusBlock->status - set to XFER_IDLE.
 763          *  USBUART_1_currentTD.pStatusBlock->length - cleared.
 764          *  USBUART_1_transferByteCount - cleared.
 765          *
 766          * Reentrant:
 767          *  No.
 768          *
 769          *******************************************************************************/
 770          void USBUART_1_InitializeStatusBlock(void) 
 771          {
 772   1          USBUART_1_transferByteCount = 0u;
 773   1          if(USBUART_1_currentTD.pStatusBlock != NULL)
 774   1          {
 775   2              USBUART_1_currentTD.pStatusBlock->status = USBUART_1_XFER_IDLE;
 776   2              USBUART_1_currentTD.pStatusBlock->length = 0u;
 777   2          }
 778   1      }
 779          
 780          
 781          /* [] END OF FILE */
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBUART_1_EP_0_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 72
002B 906028            MOV     DPTR,#06028H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#bRegTemp
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0035 900000      R     MOV     DPTR,#bRegTemp
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 5410              ANL     A,#010H
003D FF                MOV     R7,A
003E 7E00              MOV     R6,#00H
0040 EF                MOV     A,R7
0041 4E                ORL     A,R6
0042 7003              JNZ     $ + 5H
0044 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
0047 900000      R     MOV     DPTR,#modifyReg
004A 7401              MOV     A,#01H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
004D 900000      R     MOV     DPTR,#bRegTemp
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 5480              ANL     A,#080H
0055 FF                MOV     R7,A
0056 7E00              MOV     R6,#00H
0058 EF                MOV     A,R7
0059 4E                ORL     A,R6
005A 6031              JZ      ?C0002
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 15  

005C 900000      R     MOV     DPTR,#bRegTemp
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 540F              ANL     A,#0FH
0064 FF                MOV     R7,A
0065 7E00              MOV     R6,#00H
0067 EF                MOV     A,R7
0068 6401              XRL     A,#01H
006A 4E                ORL     A,R6
006B 6007              JZ      ?C0003
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
006D 900000      R     MOV     DPTR,#modifyReg
0070 E4                CLR     A
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
0072 8046              SJMP    ?C0006
0074         ?C0003:
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0074 120000      R     LCALL   USBUART_1_HandleSetup
                                           ; SOURCE LINE # 85
0077 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C EF                MOV     A,R7
007D 5480              ANL     A,#080H
007F FF                MOV     R7,A
0080 7E00              MOV     R6,#00H
0082 EF                MOV     A,R7
0083 4E                ORL     A,R6
0084 6034              JZ      ?C0006
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
0086 900000      R     MOV     DPTR,#modifyReg
0089 E4                CLR     A
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
008B 802D              SJMP    ?C0006
008D         ?C0002:
                                           ; SOURCE LINE # 92
008D 900000      R     MOV     DPTR,#bRegTemp
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 EF                MOV     A,R7
0093 5440              ANL     A,#040H
0095 FF                MOV     R7,A
0096 7E00              MOV     R6,#00H
0098 EF                MOV     A,R7
0099 4E                ORL     A,R6
009A 6005              JZ      ?C0007
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
009C 120000      R     LCALL   USBUART_1_HandleIN
                                           ; SOURCE LINE # 95
009F 8019              SJMP    ?C0006
00A1         ?C0007:
                                           ; SOURCE LINE # 96
00A1 900000      R     MOV     DPTR,#bRegTemp
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 16  

00A4 E0                MOVX    A,@DPTR
00A5 FF                MOV     R7,A
00A6 EF                MOV     A,R7
00A7 5420              ANL     A,#020H
00A9 FF                MOV     R7,A
00AA 7E00              MOV     R6,#00H
00AC EF                MOV     A,R7
00AD 4E                ORL     A,R6
00AE 6005              JZ      ?C0009
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
00B0 120000      R     LCALL   USBUART_1_HandleOUT
                                           ; SOURCE LINE # 99
00B3 8005              SJMP    ?C0006
00B5         ?C0009:
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
00B5 900000      R     MOV     DPTR,#modifyReg
00B8 E4                CLR     A
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
00BA         ?C0006:
                                           ; SOURCE LINE # 104
00BA 900000      R     MOV     DPTR,#modifyReg
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
00BF EF                MOV     A,R7
00C0 7003              JNZ     $ + 5H
00C2 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
00C5 906028            MOV     DPTR,#06028H
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA 900000      R     MOV     DPTR,#bRegTemp
00CD EF                MOV     A,R7
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
00CF 900000      R     MOV     DPTR,#bRegTemp
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 EF                MOV     A,R7
00D5 5480              ANL     A,#080H
00D7 FF                MOV     R7,A
00D8 7E00              MOV     R6,#00H
00DA EF                MOV     A,R7
00DB 4E                ORL     A,R6
00DC 7070              JNZ     ?C0018
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 110
00DE 900000      R     MOV     DPTR,#USBUART_1_ep0Count
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 900000      R     MOV     DPTR,#USBUART_1_ep0Toggle
00E6 E0                MOVX    A,@DPTR
00E7 FE                MOV     R6,A
00E8 EE                MOV     A,R6
00E9 4F                ORL     A,R7
00EA FF                MOV     R7,A
00EB 900000      R     MOV     DPTR,#bRegTemp
00EE EF                MOV     A,R7
00EF F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 17  

                                           ; SOURCE LINE # 111
00F0 900000      R     MOV     DPTR,#bRegTemp
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 906029            MOV     DPTR,#06029H
00F8 EF                MOV     A,R7
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
00FA 906029            MOV     DPTR,#06029H
00FD E0                MOVX    A,@DPTR
00FE FF                MOV     R7,A
00FF 900000      R     MOV     DPTR,#bRegTemp
0102 E0                MOVX    A,@DPTR
0103 FE                MOV     R6,A
0104 EE                MOV     A,R6
0105 6F                XRL     A,R7
0106 7046              JNZ     ?C0018
                                           ; SOURCE LINE # 113
0108         ?C0016:
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
0108 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
010B E0                MOVX    A,@DPTR
010C FF                MOV     R7,A
010D 900000      R     MOV     DPTR,#modifyReg
0110 EF                MOV     A,R7
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
0112 906028            MOV     DPTR,#06028H
0115 E0                MOVX    A,@DPTR
0116 FF                MOV     R7,A
0117 EF                MOV     A,R7
0118 5480              ANL     A,#080H
011A FF                MOV     R7,A
011B 900000      R     MOV     DPTR,#bRegTemp
011E EF                MOV     A,R7
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
0120 900000      R     MOV     DPTR,#bRegTemp
0123 E0                MOVX    A,@DPTR
0124 FF                MOV     R7,A
0125 EF                MOV     A,R7
0126 7018              JNZ     ?C0014
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 122
0128 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
012B E0                MOVX    A,@DPTR
012C FF                MOV     R7,A
012D 906028            MOV     DPTR,#06028H
0130 EF                MOV     A,R7
0131 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
0132 906028            MOV     DPTR,#06028H
0135 E0                MOVX    A,@DPTR
0136 FF                MOV     R7,A
0137 EF                MOV     A,R7
0138 540F              ANL     A,#0FH
013A FF                MOV     R7,A
013B 900000      R     MOV     DPTR,#modifyReg
013E EF                MOV     A,R7
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 18  

                                           ; SOURCE LINE # 126
0140         ?C0014:
0140 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
0143 E0                MOVX    A,@DPTR
0144 FF                MOV     R7,A
0145 900000      R     MOV     DPTR,#modifyReg
0148 E0                MOVX    A,@DPTR
0149 FE                MOV     R6,A
014A EE                MOV     A,R6
014B B507BA            CJNE    A,AR7,?C0016
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
014E         ?C0018:
014E D007              POP     AR7
0150 D006              POP     AR6
0152 D005              POP     AR5
0154 D004              POP     AR4
0156 D003              POP     AR3
0158 D002              POP     AR2
015A D001              POP     AR1
015C D000              POP     AR0
015E D0D0              POP     PSW
0160 D000        E     POP     ?C?XPAGE1SFR
0162 D086              POP     DPS
0164 D084              POP     DPL1
0166 D085              POP     DPH1
0168 D082              POP     DPL
016A D083              POP     DPH
016C D0F0              POP     B
016E D0E0              POP     ACC
0170 32                RETI    
             ; FUNCTION USBUART_1_EP_0_ISR (END)

             ; FUNCTION USBUART_1_HandleSetup (BEGIN)
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 155
0000 906028            MOV     DPTR,#06028H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#requestHandled
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
000A 900000      R     MOV     DPTR,#requestHandled
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 906028            MOV     DPTR,#06028H
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
0014 906028            MOV     DPTR,#06028H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#requestHandled
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
001E 900000      R     MOV     DPTR,#requestHandled
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 19  

0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 5480              ANL     A,#080H
0026 FF                MOV     R7,A
0027 7E00              MOV     R6,#00H
0029 EF                MOV     A,R7
002A 4E                ORL     A,R6
002B 600B              JZ      ?C0019
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
002D 900000      R     MOV     DPTR,#requestHandled
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
0037 22                RET     
0038         ?C0019:
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 165
0038 7F02              MOV     R7,#02H
003A 120000      R     LCALL   _USBUART_1_UpdateStatusBlock
                                           ; SOURCE LINE # 167
003D 906000            MOV     DPTR,#06000H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 5460              ANL     A,#060H
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 120000      E     LCALL   ?C?CCASE
004A 0000        R     DW      ?C0022
004C 00                DB      00H
004D 0000        R     DW      ?C0023
004F 20                DB      020H
0050 0000        R     DW      ?C0024
0052 40                DB      040H
0053 0000              DW      00H
0055 0000        R     DW      ?C0025
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
0057         ?C0022:
                                           ; SOURCE LINE # 170
0057 120000      E     LCALL   USBUART_1_HandleStandardRqst
005A 900000      R     MOV     DPTR,#requestHandled
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
005F 8019              SJMP    ?C0021
                                           ; SOURCE LINE # 172
0061         ?C0023:
                                           ; SOURCE LINE # 173
0061 120000      E     LCALL   USBUART_1_DispatchClassRqst
0064 900000      R     MOV     DPTR,#requestHandled
0067 EF                MOV     A,R7
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
0069 800F              SJMP    ?C0021
                                           ; SOURCE LINE # 175
006B         ?C0024:
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 20  

                                           ; SOURCE LINE # 176
006B 120000      E     LCALL   USBUART_1_HandleVendorRqst
006E 900000      R     MOV     DPTR,#requestHandled
0071 EF                MOV     A,R7
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
0073 8005              SJMP    ?C0021
                                           ; SOURCE LINE # 178
0075         ?C0025:
                                           ; SOURCE LINE # 179
0075 900000      R     MOV     DPTR,#requestHandled
0078 E4                CLR     A
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
007A         ?C0021:
                                           ; SOURCE LINE # 182
007A 900000      R     MOV     DPTR,#requestHandled
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 7006              JNZ     ?C0027
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
0082 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
0085 7403              MOV     A,#03H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0088         ?C0027:
0088 22                RET     
             ; FUNCTION USBUART_1_HandleSetup (END)

             ; FUNCTION USBUART_1_HandleIN (BEGIN)
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
0000 900000      R     MOV     DPTR,#USBUART_1_transferState
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 120000      E     LCALL   ?C?CCASE
0009 0000        R     DW      ?C0034
000B 00                DB      00H
000C 0000        R     DW      ?C0030
000E 02                DB      02H
000F 0000        R     DW      ?C0031
0011 04                DB      04H
0012 0000        R     DW      ?C0032
0014 06                DB      06H
0015 0000              DW      00H
0017 0000        R     DW      ?C0034
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
0019         ?C0030:
                                           ; SOURCE LINE # 214
0019 120000      R     LCALL   USBUART_1_ControlReadDataStage
                                           ; SOURCE LINE # 215
001C 22                RET     
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 21  

                                           ; SOURCE LINE # 216
001D         ?C0031:
                                           ; SOURCE LINE # 217
001D 120000      R     LCALL   USBUART_1_ControlWriteStatusStage
                                           ; SOURCE LINE # 218
0020 22                RET     
                                           ; SOURCE LINE # 219
0021         ?C0032:
                                           ; SOURCE LINE # 220
0021 120000      R     LCALL   USBUART_1_NoDataControlStatusStage
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
0024         ?C0034:
0024 22                RET     
             ; FUNCTION USBUART_1_HandleIN (END)

             ; FUNCTION USBUART_1_HandleOUT (BEGIN)
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
0000 900000      R     MOV     DPTR,#USBUART_1_transferState
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 120000      E     LCALL   ?C?CCASE
0009 0000        R     DW      ?C0041
000B 00                DB      00H
000C 0000        R     DW      ?C0037
000E 02                DB      02H
000F 0000        R     DW      ?C0038
0011 04                DB      04H
0012 0000        R     DW      ?C0039
0014 06                DB      06H
0015 0000              DW      00H
0017 0000        R     DW      ?C0041
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
0019         ?C0037:
                                           ; SOURCE LINE # 252
0019 120000      R     LCALL   USBUART_1_ControlReadStatusStage
                                           ; SOURCE LINE # 253
001C 22                RET     
                                           ; SOURCE LINE # 254
001D         ?C0038:
                                           ; SOURCE LINE # 255
001D 120000      R     LCALL   USBUART_1_ControlWriteDataStage
                                           ; SOURCE LINE # 256
0020 22                RET     
                                           ; SOURCE LINE # 257
0021         ?C0039:
                                           ; SOURCE LINE # 259
0021 7F03              MOV     R7,#03H
0023 120000      R     LCALL   _USBUART_1_UpdateStatusBlock
                                           ; SOURCE LINE # 261
0026 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
0029 7403              MOV     A,#03H
002B F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 22  

                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
002C         ?C0041:
002C 22                RET     
             ; FUNCTION USBUART_1_HandleOUT (END)

             ; FUNCTION USBUART_1_LoadEP0 (BEGIN)
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
0000 900000      R     MOV     DPTR,#ep0Count
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0005 900000      R     MOV     DPTR,#USBUART_1_lastPacketSize
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 7E00              MOV     R6,#00H
000C 900000      R     MOV     DPTR,#USBUART_1_transferByteCount
000F EE                MOV     A,R6
0010 8FF0              MOV     B,R7
0012 120000      E     LCALL   ?C?IILDX
0015         ?C0042:
                                           ; SOURCE LINE # 314
0015 900000      R     MOV     DPTR,#USBUART_1_currentTD
0018 E0                MOVX    A,@DPTR
0019 FE                MOV     R6,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D D3                SETB    C
001E EF                MOV     A,R7
001F 9400              SUBB    A,#00H
0021 EE                MOV     A,R6
0022 9400              SUBB    A,#00H
0024 4053              JC      ?C0043
0026 900000      R     MOV     DPTR,#ep0Count
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C C3                CLR     C
002D 9408              SUBB    A,#08H
002F 5048              JNC     ?C0043
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0031 900000      R     MOV     DPTR,#USBUART_1_currentTD+02H
0034 120000      E     LCALL   ?C?PLDXDATA
0037 120000      E     LCALL   ?C?CLDPTR
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#ep0Count
003E E0                MOVX    A,@DPTR
003F FE                MOV     R6,A
0040 EE                MOV     A,R6
0041 FD                MOV     R5,A
0042 7C00              MOV     R4,#00H
0044 ED                MOV     A,R5
0045 2400              ADD     A,#00H
0047 FD                MOV     R5,A
0048 EC                MOV     A,R4
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 23  

0049 3460              ADDC    A,#060H
004B FC                MOV     R4,A
004C 8D82              MOV     DPL,R5
004E 8C83              MOV     DPH,R4
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
0052 900000      R     MOV     DPTR,#USBUART_1_currentTD+02H
0055 120000      E     LCALL   ?C?PLDXDATA
0058 E9                MOV     A,R1
0059 2401              ADD     A,#01H
005B F9                MOV     R1,A
005C EA                MOV     A,R2
005D 3400              ADDC    A,#00H
005F FA                MOV     R2,A
0060 900000      R     MOV     DPTR,#USBUART_1_currentTD+02H
0063 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 318
0066 900000      R     MOV     DPTR,#ep0Count
0069 E0                MOVX    A,@DPTR
006A 04                INC     A
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
006C 900000      R     MOV     DPTR,#USBUART_1_currentTD
006F 74FF              MOV     A,#0FFH
0071 75F0FF            MOV     B,#0FFH
0074 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 320
0077 809C              SJMP    ?C0042
0079         ?C0043:
                                           ; SOURCE LINE # 322
0079 900000      R     MOV     DPTR,#USBUART_1_lastPacketSize
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F 6408              XRL     A,#08H
0081 600B              JZ      ?C0045
0083 900000      R     MOV     DPTR,#ep0Count
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 EF                MOV     A,R7
0089 D3                SETB    C
008A 9400              SUBB    A,#00H
008C 401C              JC      ?C0044
008E         ?C0045:
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 325
008E 900000      R     MOV     DPTR,#USBUART_1_ep0Toggle
0091 E0                MOVX    A,@DPTR
0092 FF                MOV     R7,A
0093 EF                MOV     A,R7
0094 6480              XRL     A,#080H
0096 FF                MOV     R7,A
0097 900000      R     MOV     DPTR,#USBUART_1_ep0Toggle
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
009C 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
009F 740F              MOV     A,#0FH
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
00A2 900000      R     MOV     DPTR,#USBUART_1_transferState
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 24  

00A5 7402              MOV     A,#02H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 330
00A8 800C              SJMP    ?C0046
00AA         ?C0044:
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 334
00AA 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
00AD 7402              MOV     A,#02H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 336
00B0 900000      R     MOV     DPTR,#USBUART_1_transferState
00B3 7402              MOV     A,#02H
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
00B6         ?C0046:
                                           ; SOURCE LINE # 340
00B6 900000      R     MOV     DPTR,#ep0Count
00B9 E0                MOVX    A,@DPTR
00BA FF                MOV     R7,A
00BB 900000      R     MOV     DPTR,#USBUART_1_lastPacketSize
00BE EF                MOV     A,R7
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 341
00C0 900000      R     MOV     DPTR,#ep0Count
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 900000      R     MOV     DPTR,#USBUART_1_ep0Count
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
00CA 22                RET     
             ; FUNCTION USBUART_1_LoadEP0 (END)

             ; FUNCTION USBUART_1_InitControlRead (BEGIN)
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 372
0000 900000      R     MOV     DPTR,#USBUART_1_currentTD
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 4E                ORL     A,R6
000A 7005              JNZ     ?C0048
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
000C 120000      R     LCALL   USBUART_1_InitZeroLengthControlTransfer
                                           ; SOURCE LINE # 375
000F 8058              SJMP    ?C0049
0011         ?C0048:
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 379
0011 900000      R     MOV     DPTR,#USBUART_1_transferState
0014 7402              MOV     A,#02H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
0017 900000      R     MOV     DPTR,#USBUART_1_ep0Toggle
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 25  

                                           ; SOURCE LINE # 383
001C 120000      R     LCALL   USBUART_1_InitializeStatusBlock
                                           ; SOURCE LINE # 384
001F 906007            MOV     DPTR,#06007H
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 7E00              MOV     R6,#00H
0026 EF                MOV     A,R7
0027 7F00              MOV     R7,#00H
0029 FE                MOV     R6,A
002A 906006            MOV     DPTR,#06006H
002D E0                MOVX    A,@DPTR
002E FD                MOV     R5,A
002F 7C00              MOV     R4,#00H
0031 EE                MOV     A,R6
0032 4C                ORL     A,R4
0033 FE                MOV     R6,A
0034 EF                MOV     A,R7
0035 4D                ORL     A,R5
0036 FF                MOV     R7,A
0037 900000      R     MOV     DPTR,#xferCount
003A EE                MOV     A,R6
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
003F 900000      R     MOV     DPTR,#xferCount
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 900000      R     MOV     DPTR,#USBUART_1_currentTD
004A E0                MOVX    A,@DPTR
004B FC                MOV     R4,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E FD                MOV     R5,A
004F D3                SETB    C
0050 ED                MOV     A,R5
0051 9F                SUBB    A,R7
0052 EC                MOV     A,R4
0053 9E                SUBB    A,R6
0054 4010              JC      ?C0050
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
0056 900000      R     MOV     DPTR,#xferCount
0059 E0                MOVX    A,@DPTR
005A FE                MOV     R6,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E 900000      R     MOV     DPTR,#USBUART_1_currentTD
0061 EE                MOV     A,R6
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
0066         ?C0050:
                                           ; SOURCE LINE # 390
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 26  

0066 120000      R     LCALL   USBUART_1_LoadEP0
                                           ; SOURCE LINE # 391
0069         ?C0049:
                                           ; SOURCE LINE # 393
0069 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 394
006B         ?C0051:
006B 22                RET     
             ; FUNCTION USBUART_1_InitControlRead (END)

             ; FUNCTION USBUART_1_InitZeroLengthControlTransfer (BEGIN)
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 425
0000 900000      R     MOV     DPTR,#USBUART_1_transferState
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0006 900000      R     MOV     DPTR,#USBUART_1_ep0Toggle
0009 7480              MOV     A,#080H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 429
000C 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
000F 740F              MOV     A,#0FH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
0012 900000      R     MOV     DPTR,#USBUART_1_lastPacketSize
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
0017 900000      R     MOV     DPTR,#USBUART_1_ep0Count
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
001C 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 435
001E         ?C0052:
001E 22                RET     
             ; FUNCTION USBUART_1_InitZeroLengthControlTransfer (END)

             ; FUNCTION USBUART_1_ControlReadDataStage (BEGIN)
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
0000 120000      R     LCALL   USBUART_1_LoadEP0
                                           ; SOURCE LINE # 459
0003 22                RET     
             ; FUNCTION USBUART_1_ControlReadDataStage (END)

             ; FUNCTION USBUART_1_ControlReadStatusStage (BEGIN)
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 487
0000 900000      R     MOV     DPTR,#USBUART_1_lastPacketSize
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7E00              MOV     R6,#00H
0007 900000      R     MOV     DPTR,#USBUART_1_transferByteCount
000A EE                MOV     A,R6
000B 8FF0              MOV     B,R7
000D 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 489
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 27  

0010 900000      R     MOV     DPTR,#USBUART_1_transferState
0013 E4                CLR     A
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
0015 7F01              MOV     R7,#01H
0017 120000      R     LCALL   _USBUART_1_UpdateStatusBlock
                                           ; SOURCE LINE # 493
001A 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
001D 7403              MOV     A,#03H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
0020 22                RET     
             ; FUNCTION USBUART_1_ControlReadStatusStage (END)

             ; FUNCTION USBUART_1_InitControlWrite (BEGIN)
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 524
0000 900000      R     MOV     DPTR,#USBUART_1_transferState
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0006 900000      R     MOV     DPTR,#USBUART_1_ep0Toggle
0009 7480              MOV     A,#080H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
000C 120000      R     LCALL   USBUART_1_InitializeStatusBlock
                                           ; SOURCE LINE # 530
000F 906007            MOV     DPTR,#06007H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 EF                MOV     A,R7
0017 7F00              MOV     R7,#00H
0019 FE                MOV     R6,A
001A 906006            MOV     DPTR,#06006H
001D E0                MOVX    A,@DPTR
001E FD                MOV     R5,A
001F 7C00              MOV     R4,#00H
0021 EE                MOV     A,R6
0022 4C                ORL     A,R4
0023 FE                MOV     R6,A
0024 EF                MOV     A,R7
0025 4D                ORL     A,R5
0026 FF                MOV     R7,A
0027 900000      R     MOV     DPTR,#xferCount
002A EE                MOV     A,R6
002B F0                MOVX    @DPTR,A
002C A3                INC     DPTR
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
002F 900000      R     MOV     DPTR,#xferCount
0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 900000      R     MOV     DPTR,#USBUART_1_currentTD
003A E0                MOVX    A,@DPTR
003B FC                MOV     R4,A
003C A3                INC     DPTR
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 28  

003D E0                MOVX    A,@DPTR
003E FD                MOV     R5,A
003F D3                SETB    C
0040 ED                MOV     A,R5
0041 9F                SUBB    A,R7
0042 EC                MOV     A,R4
0043 9E                SUBB    A,R6
0044 4010              JC      ?C0055
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0046 900000      R     MOV     DPTR,#xferCount
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#USBUART_1_currentTD
0051 EE                MOV     A,R6
0052 F0                MOVX    @DPTR,A
0053 A3                INC     DPTR
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
0056         ?C0055:
                                           ; SOURCE LINE # 538
0056 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
0059 740B              MOV     A,#0BH
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 540
005C 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 541
005E         ?C0056:
005E 22                RET     
             ; FUNCTION USBUART_1_InitControlWrite (END)

             ; FUNCTION USBUART_1_ControlWriteDataStage (BEGIN)
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 577
0000 900000      R     MOV     DPTR,#regIndex
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 579
0005 906029            MOV     DPTR,#06029H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 540F              ANL     A,#0FH
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F 24FE              ADD     A,#0FEH
0011 FF                MOV     R7,A
0012 900000      R     MOV     DPTR,#ep0Count
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
0017 900000      R     MOV     DPTR,#ep0Count
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 7E00              MOV     R6,#00H
001E 900000      R     MOV     DPTR,#USBUART_1_transferByteCount
0021 EE                MOV     A,R6
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 29  

0022 8FF0              MOV     B,R7
0024 120000      E     LCALL   ?C?IILDX
0027         ?C0057:
                                           ; SOURCE LINE # 584
0027 900000      R     MOV     DPTR,#USBUART_1_currentTD
002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F D3                SETB    C
0030 EF                MOV     A,R7
0031 9400              SUBB    A,#00H
0033 EE                MOV     A,R6
0034 9400              SUBB    A,#00H
0036 4057              JC      ?C0058
0038 900000      R     MOV     DPTR,#ep0Count
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E D3                SETB    C
003F 9400              SUBB    A,#00H
0041 404C              JC      ?C0058
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
0043 900000      R     MOV     DPTR,#regIndex
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 7E00              MOV     R6,#00H
004A EF                MOV     A,R7
004B 2400              ADD     A,#00H
004D FF                MOV     R7,A
004E EE                MOV     A,R6
004F 3460              ADDC    A,#060H
0051 FE                MOV     R6,A
0052 8F82              MOV     DPL,R7
0054 8E83              MOV     DPH,R6
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 900000      R     MOV     DPTR,#USBUART_1_currentTD+02H
005B 120000      E     LCALL   ?C?PLDXDATA
005E EF                MOV     A,R7
005F 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 587
0062 900000      R     MOV     DPTR,#USBUART_1_currentTD+02H
0065 120000      E     LCALL   ?C?PLDXDATA
0068 E9                MOV     A,R1
0069 2401              ADD     A,#01H
006B F9                MOV     R1,A
006C EA                MOV     A,R2
006D 3400              ADDC    A,#00H
006F FA                MOV     R2,A
0070 900000      R     MOV     DPTR,#USBUART_1_currentTD+02H
0073 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 588
0076 900000      R     MOV     DPTR,#regIndex
0079 E0                MOVX    A,@DPTR
007A 04                INC     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
007C 900000      R     MOV     DPTR,#ep0Count
007F E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 30  

0080 14                DEC     A
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
0082 900000      R     MOV     DPTR,#USBUART_1_currentTD
0085 74FF              MOV     A,#0FFH
0087 75F0FF            MOV     B,#0FFH
008A 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 591
008D 8098              SJMP    ?C0057
008F         ?C0058:
                                           ; SOURCE LINE # 592
008F 900000      R     MOV     DPTR,#ep0Count
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 900000      R     MOV     DPTR,#USBUART_1_ep0Count
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
0099 900000      R     MOV     DPTR,#USBUART_1_ep0Toggle
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
009E EF                MOV     A,R7
009F 6480              XRL     A,#080H
00A1 FF                MOV     R7,A
00A2 900000      R     MOV     DPTR,#USBUART_1_ep0Toggle
00A5 EF                MOV     A,R7
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 596
00A7 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
00AA 740B              MOV     A,#0BH
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
00AD 22                RET     
             ; FUNCTION USBUART_1_ControlWriteDataStage (END)

             ; FUNCTION USBUART_1_ControlWriteStatusStage (BEGIN)
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
                                           ; SOURCE LINE # 624
0000 900000      R     MOV     DPTR,#USBUART_1_transferState
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 626
0005 7F01              MOV     R7,#01H
0007 120000      R     LCALL   _USBUART_1_UpdateStatusBlock
                                           ; SOURCE LINE # 628
000A 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
000D 7403              MOV     A,#03H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
0010 22                RET     
             ; FUNCTION USBUART_1_ControlWriteStatusStage (END)

             ; FUNCTION USBUART_1_InitNoDataControlTransfer (BEGIN)
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 657
0000 900000      R     MOV     DPTR,#USBUART_1_transferState
0003 7406              MOV     A,#06H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
0006 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 31  

0009 7406              MOV     A,#06H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
000C 900000      R     MOV     DPTR,#USBUART_1_ep0Toggle
000F 7480              MOV     A,#080H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
0012 900000      R     MOV     DPTR,#USBUART_1_ep0Count
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 662
0017 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 663
0019         ?C0061:
0019 22                RET     
             ; FUNCTION USBUART_1_InitNoDataControlTransfer (END)

             ; FUNCTION USBUART_1_NoDataControlStatusStage (BEGIN)
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 694
0000 900000      R     MOV     DPTR,#USBUART_1_deviceAddress
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 6013              JZ      ?C0062
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 696
0008 900000      R     MOV     DPTR,#USBUART_1_deviceAddress
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4480              ORL     A,#080H
0010 FF                MOV     R7,A
0011 906008            MOV     DPTR,#06008H
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 697
0016 900000      R     MOV     DPTR,#USBUART_1_deviceAddress
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 698
001B         ?C0062:
                                           ; SOURCE LINE # 700
001B 900000      R     MOV     DPTR,#USBUART_1_transferState
001E E4                CLR     A
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 702
0020 7F01              MOV     R7,#01H
0022 120000      R     LCALL   _USBUART_1_UpdateStatusBlock
                                           ; SOURCE LINE # 704
0025 900000      R     MOV     DPTR,#USBUART_1_ep0Mode
0028 7403              MOV     A,#03H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 705
002B 22                RET     
             ; FUNCTION USBUART_1_NoDataControlStatusStage (END)

             ; FUNCTION _USBUART_1_UpdateStatusBlock (BEGIN)
                                           ; SOURCE LINE # 733
0000 900000      R     MOV     DPTR,#completionCode
0003 EF                MOV     A,R7
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 32  

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
0005 7B00              MOV     R3,#00H
0007 7A00              MOV     R2,#00H
0009 7900              MOV     R1,#00H
000B C003              PUSH    AR3
000D C002              PUSH    AR2
000F C001              PUSH    AR1
0011 900000      R     MOV     DPTR,#USBUART_1_currentTD+05H
0014 120000      E     LCALL   ?C?PLDXDATA
0017 D082              POP     DPL
0019 D083              POP     DPH
001B D0E0              POP     ACC
001D 6B                XRL     A,R3
001E 7008              JNZ     ?C0068
0020 E9                MOV     A,R1
0021 6582              XRL     A,DPL
0023 7003              JNZ     ?C0068
0025 EA                MOV     A,R2
0026 6583              XRL     A,DPH
0028         ?C0068:
0028 6037              JZ      ?C0065
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
002A 900000      R     MOV     DPTR,#completionCode
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#USBUART_1_currentTD+05H
0032 120000      E     LCALL   ?C?PLDXDATA
0035 EF                MOV     A,R7
0036 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 738
0039 900000      R     MOV     DPTR,#USBUART_1_transferByteCount
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 900000      R     MOV     DPTR,#USBUART_1_currentTD+05H
0044 120000      E     LCALL   ?C?PLDXDATA
0047 E9                MOV     A,R1
0048 2401              ADD     A,#01H
004A F9                MOV     R1,A
004B EA                MOV     A,R2
004C 3400              ADDC    A,#00H
004E FA                MOV     R2,A
004F EE                MOV     A,R6
0050 8FF0              MOV     B,R7
0052 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 739
0055 7B00              MOV     R3,#00H
0057 7A00              MOV     R2,#00H
0059 7900              MOV     R1,#00H
005B 900000      R     MOV     DPTR,#USBUART_1_currentTD+05H
005E 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 741
0061         ?C0065:
0061 22                RET     
             ; FUNCTION _USBUART_1_UpdateStatusBlock (END)

C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 33  

             ; FUNCTION USBUART_1_InitializeStatusBlock (BEGIN)
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
0000 900000      R     MOV     DPTR,#USBUART_1_transferByteCount
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
0008 7B00              MOV     R3,#00H
000A 7A00              MOV     R2,#00H
000C 7900              MOV     R1,#00H
000E C003              PUSH    AR3
0010 C002              PUSH    AR2
0012 C001              PUSH    AR1
0014 900000      R     MOV     DPTR,#USBUART_1_currentTD+05H
0017 120000      E     LCALL   ?C?PLDXDATA
001A D082              POP     DPL
001C D083              POP     DPH
001E D0E0              POP     ACC
0020 6B                XRL     A,R3
0021 7008              JNZ     ?C0069
0023 E9                MOV     A,R1
0024 6582              XRL     A,DPL
0026 7003              JNZ     ?C0069
0028 EA                MOV     A,R2
0029 6583              XRL     A,DPH
002B         ?C0069:
002B 601F              JZ      ?C0067
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 775
002D 900000      R     MOV     DPTR,#USBUART_1_currentTD+05H
0030 120000      E     LCALL   ?C?PLDXDATA
0033 E4                CLR     A
0034 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 776
0037 900000      R     MOV     DPTR,#USBUART_1_currentTD+05H
003A 120000      E     LCALL   ?C?PLDXDATA
003D E9                MOV     A,R1
003E 2401              ADD     A,#01H
0040 F9                MOV     R1,A
0041 EA                MOV     A,R2
0042 3400              ADDC    A,#00H
0044 FA                MOV     R2,A
0045 E4                CLR     A
0046 75F000            MOV     B,#00H
0049 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
004C         ?C0067:
004C 22                RET     
             ; FUNCTION USBUART_1_InitializeStatusBlock (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1498    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128      11
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.51   USBUART_1_DRV                                                         09/04/2014 17:45:46 PAGE 34  

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
