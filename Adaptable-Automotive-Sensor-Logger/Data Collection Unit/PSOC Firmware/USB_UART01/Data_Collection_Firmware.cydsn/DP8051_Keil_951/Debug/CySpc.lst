C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYSPC
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CySpc.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CySpc.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\CySpc.lst) CD DB NOIP OT(2,SIZE
                    -) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\CySpc.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CySpc.c
   3          * Version 4.10
   4          *
   5          *  Description:
   6          *   Provides an API for the System Performance Component.
   7          *   The SPC functions are not meant to be called directly by the user
   8          *   application.
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CySpc.h"
  18          
  19          #define CY_SPC_KEY_ONE                      (0xB6u)
  20          #define CY_SPC_KEY_TWO(x)                   ((uint8) (((uint16) 0xD3u) + ((uint16) (x))))
  21          
  22          /* Command Codes */
  23          #define CY_SPC_CMD_LD_BYTE                  (0x00u)
  24          #define CY_SPC_CMD_LD_MULTI_BYTE            (0x01u)
  25          #define CY_SPC_CMD_LD_ROW                   (0x02u)
  26          #define CY_SPC_CMD_RD_BYTE                  (0x03u)
  27          #define CY_SPC_CMD_RD_MULTI_BYTE            (0x04u)
  28          #define CY_SPC_CMD_WR_ROW                   (0x05u)
  29          #define CY_SPC_CMD_WR_USER_NVL              (0x06u)
  30          #define CY_SPC_CMD_PRG_ROW                  (0x07u)
  31          #define CY_SPC_CMD_ER_SECTOR                (0x08u)
  32          #define CY_SPC_CMD_ER_ALL                   (0x09u)
  33          #define CY_SPC_CMD_RD_HIDDEN                (0x0Au)
  34          #define CY_SPC_CMD_PRG_PROTECT              (0x0Bu)
  35          #define CY_SPC_CMD_CHECKSUM                 (0x0Cu)
  36          #define CY_SPC_CMD_DWNLD_ALGORITHM          (0x0Du)
  37          #define CY_SPC_CMD_GET_TEMP                 (0x0Eu)
  38          #define CY_SPC_CMD_GET_ADC                  (0x0Fu)
  39          #define CY_SPC_CMD_RD_NVL_VOLATILE          (0x10u)
  40          #define CY_SPC_CMD_SETUP_TS                 (0x11u)
  41          #define CY_SPC_CMD_DISABLE_TS               (0x12u)
  42          #define CY_SPC_CMD_ER_ROW                   (0x13u)
  43          
  44          /* Enable bit in Active and Alternate Active mode templates */
  45          #define PM_SPC_PM_EN                        (0x08u)
  46          
  47          /* Gate calls to the SPC. */
  48          uint8 SpcLockState = CY_SPC_UNLOCKED;
  49          
  50          
  51          #if(CY_PSOC5)
              
                  /***************************************************************************
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 2   

                  * The wait-state pipeline must be enabled prior to accessing the SPC
                  * register interface regardless of CPU frequency. The CySpcLock() saves
                  * current wait-state pipeline state and enables it. The CySpcUnlock()
                  * function, which must be called after SPC transaction, restores original
                  * state.
                  ***************************************************************************/
                  static uint32 spcWaitPipeBypass = 0u;
              
              #endif  /* (CY_PSOC5) */
  63          
  64          
  65          /*******************************************************************************
  66          * Function Name: CySpcStart
  67          ********************************************************************************
  68          * Summary:
  69          *  Starts the SPC.
  70          *
  71          * Parameters:
  72          *  None
  73          *
  74          * Return:
  75          *  None
  76          *
  77          *******************************************************************************/
  78          void CySpcStart(void) 
  79          {
  80   1          /* Save current global interrupt enable and disable it */
  81   1          uint8 interruptState = CyEnterCriticalSection();
  82   1      
  83   1          CY_SPC_PM_ACT_REG  |= PM_SPC_PM_EN;
  84   1          CY_SPC_PM_STBY_REG |= PM_SPC_PM_EN;
  85   1      
  86   1          /* Restore global interrupt enable state */
  87   1          CyExitCriticalSection(interruptState);
  88   1      }
  89          
  90          
  91          /*******************************************************************************
  92          * Function Name: CySpcStop
  93          ********************************************************************************
  94          * Summary:
  95          *  Stops the SPC.
  96          *
  97          * Parameters:
  98          *  None
  99          *
 100          * Return:
 101          *  None
 102          *
 103          *******************************************************************************/
 104          void CySpcStop(void) 
 105          {
 106   1          /* Save current global interrupt enable and disable it */
 107   1          uint8 interruptState = CyEnterCriticalSection();
 108   1      
 109   1          CY_SPC_PM_ACT_REG  &= ((uint8)(~PM_SPC_PM_EN));
 110   1          CY_SPC_PM_STBY_REG &= ((uint8)(~PM_SPC_PM_EN));
 111   1      
 112   1          /* Restore global interrupt enable state */
 113   1          CyExitCriticalSection(interruptState);
 114   1      }
 115          
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 3   

 116          
 117          /*******************************************************************************
 118          * Function Name: CySpcReadData
 119          ********************************************************************************
 120          * Summary:
 121          *  Reads data from the SPC.
 122          *
 123          * Parameters:
 124          *  uint8 buffer:
 125          *   Address to store data read.
 126          *
 127          *  uint8 size:
 128          *   Number of bytes to read from the SPC.
 129          *
 130          * Return:
 131          *  uint8:
 132          *   The number of bytes read from the SPC.
 133          *
 134          *******************************************************************************/
 135          uint8 CySpcReadData(uint8 buffer[], uint8 size) 
 136          {
 137   1          uint8 i;
 138   1      
 139   1          for(i = 0u; i < size; i++)
 140   1          {
 141   2              while(!CY_SPC_DATA_READY)
 142   2              {
 143   3                  CyDelayUs(1u);
 144   3              }
 145   2              buffer[i] = CY_SPC_CPU_DATA_REG;
 146   2          }
 147   1      
 148   1          return(i);
 149   1      }
 150          
 151          
 152          /*******************************************************************************
 153          * Function Name: CySpcLoadMultiByte
 154          ********************************************************************************
 155          * Summary:
 156          *  Loads 1 to 32 bytes of data into the row latch of a Flash/EEPROM array.
 157          *
 158          * Parameters:
 159          *  uint8 array:
 160          *   Id of the array.
 161          *
 162          *  uint16 address:
 163          *   Flash/eeprom addrress
 164          *
 165          *  uint8* buffer:
 166          *   Data to load to the row latch
 167          *
 168          *  uint16 number:
 169          *   Number bytes to load.
 170          *
 171          * Return:
 172          *  CYRET_STARTED
 173          *  CYRET_CANCELED
 174          *  CYRET_LOCKED
 175          *  CYRET_BAD_PARAM
 176          *
 177          *******************************************************************************/
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 4   

 178          cystatus CySpcLoadMultiByte(uint8 array, uint16 address, const uint8 buffer[], uint8 size)\
 179          
 180          {
 181   1          cystatus status = CYRET_STARTED;
 182   1          uint8 i;
 183   1      
 184   1          /***************************************************************************
 185   1          * Check if number is correct for array. Number must be less than
 186   1          * 32 for Flash or less than 16 for EEPROM.
 187   1          ***************************************************************************/
 188   1          if(((array < CY_SPC_LAST_FLASH_ARRAYID) && (size < 32u)) ||
 189   1             ((array > CY_SPC_LAST_FLASH_ARRAYID) && (size < 16u)))
 190   1          {
 191   2              if(CY_SPC_IDLE)
 192   2              {
 193   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 194   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_MULTI_BYTE);
 195   3                  CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_MULTI_BYTE;
 196   3      
 197   3                  if(CY_SPC_BUSY)
 198   3                  {
 199   4                      CY_SPC_CPU_DATA_REG = array;
 200   4                      CY_SPC_CPU_DATA_REG = 1u & HI8(address);
 201   4                      CY_SPC_CPU_DATA_REG = LO8(address);
 202   4                      CY_SPC_CPU_DATA_REG = ((uint8)(size - 1u));
 203   4      
 204   4                      for(i = 0u; i < size; i++)
 205   4                      {
 206   5                          CY_SPC_CPU_DATA_REG = buffer[i];
 207   5                      }
 208   4                  }
 209   3                  else
 210   3                  {
 211   4                      status = CYRET_CANCELED;
 212   4                  }
 213   3              }
 214   2              else
 215   2              {
 216   3                  status = CYRET_LOCKED;
 217   3              }
 218   2          }
 219   1          else
 220   1          {
 221   2              status = CYRET_BAD_PARAM;
 222   2          }
 223   1      
 224   1          return(status);
 225   1      }
 226          
 227          
 228          /*******************************************************************************
 229          * Function Name: CySpcLoadRow
 230          ********************************************************************************
 231          * Summary:
 232          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 233          *
 234          * Parameters:
 235          *  uint8 array:
 236          *   Id of the array.
 237          *
 238          *  uint8* buffer:
 239          *   Data to be loaded to the row latch
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 5   

 240          *
 241          *  uint8 size:
 242          *   The number of data bytes that the SPC expects to be written. Depends on the
 243          *   type of the array and, if the array is Flash, whether ECC is being enabled
 244          *   or not. There are following values: flash row latch size with ECC enabled,
 245          *   flash row latch size with ECC disabled and EEPROM row latch size.
 246          *
 247          * Return:
 248          *  CYRET_STARTED
 249          *  CYRET_CANCELED
 250          *  CYRET_LOCKED
 251          *
 252          *******************************************************************************/
 253          cystatus CySpcLoadRow(uint8 array, const uint8 buffer[], uint16 size)
 254          {
 255   1          cystatus status = CYRET_STARTED;
 256   1          uint16 i;
 257   1      
 258   1          /* Make sure the SPC is ready to accept command */
 259   1          if(CY_SPC_IDLE)
 260   1          {
 261   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 262   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 263   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 264   2      
 265   2              /* Make sure the command was accepted */
 266   2              if(CY_SPC_BUSY)
 267   2              {
 268   3                  CY_SPC_CPU_DATA_REG = array;
 269   3      
 270   3                  for(i = 0u; i < size; i++)
 271   3                  {
 272   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 273   4                  }
 274   3              }
 275   2              else
 276   2              {
 277   3                  status = CYRET_CANCELED;
 278   3              }
 279   2          }
 280   1          else
 281   1          {
 282   2              status = CYRET_LOCKED;
 283   2          }
 284   1      
 285   1          return(status);
 286   1      }
 287          
 288          
 289          /*******************************************************************************
 290          * Function Name: CySpcWriteRow
 291          ********************************************************************************
 292          * Summary:
 293          *  Erases then programs a row in Flash/EEPROM with data in row latch.
 294          *
 295          * Parameters:
 296          *  uint8 array:
 297          *   Id of the array.
 298          *
 299          *  uint16 address:
 300          *   flash/eeprom addrress
 301          *
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 6   

 302          *  uint8 tempPolarity:
 303          *   temperature polarity.
 304          *   1: the Temp Magnitude is interpreted as a positive value
 305          *   0: the Temp Magnitude is interpreted as a negative value
 306          *
 307          *  uint8 tempMagnitude:
 308          *   temperature magnitude.
 309          *
 310          * Return:
 311          *  CYRET_STARTED
 312          *  CYRET_CANCELED
 313          *  CYRET_LOCKED
 314          *
 315          *******************************************************************************/
 316          cystatus CySpcWriteRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
 317          
 318          {
 319   1          cystatus status = CYRET_STARTED;
 320   1      
 321   1          /* Make sure the SPC is ready to accept command */
 322   1          if(CY_SPC_IDLE)
 323   1          {
 324   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 325   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_WR_ROW);
 326   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_WR_ROW;
 327   2      
 328   2              /* Make sure the command was accepted */
 329   2              if(CY_SPC_BUSY)
 330   2              {
 331   3                  CY_SPC_CPU_DATA_REG = array;
 332   3                  CY_SPC_CPU_DATA_REG = HI8(address);
 333   3                  CY_SPC_CPU_DATA_REG = LO8(address);
 334   3                  CY_SPC_CPU_DATA_REG = tempPolarity;
 335   3                  CY_SPC_CPU_DATA_REG = tempMagnitude;
 336   3              }
 337   2              else
 338   2              {
 339   3                  status = CYRET_CANCELED;
 340   3              }
 341   2          }
 342   1          else
 343   1          {
 344   2              status = CYRET_LOCKED;
 345   2          }
 346   1      
 347   1          return(status);
 348   1      }
 349          
 350          
 351          /*******************************************************************************
 352          * Function Name: CySpcEraseSector
 353          ********************************************************************************
 354          * Summary:
 355          *  Erases all data in the addressed sector (block of 64 rows).
 356          *
 357          * Parameters:
 358          *  uint8 array:
 359          *   Id of the array.
 360          *
 361          *  uint8 sectorNumber:
 362          *   Zero based sector number within Flash/EEPROM array
 363          *
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 7   

 364          * Return:
 365          *  CYRET_STARTED
 366          *  CYRET_CANCELED
 367          *  CYRET_LOCKED
 368          *
 369          *******************************************************************************/
 370          cystatus CySpcEraseSector(uint8 array, uint8 sectorNumber)
 371          {
 372   1          cystatus status = CYRET_STARTED;
 373   1      
 374   1          /* Make sure the SPC is ready to accept command */
 375   1          if(CY_SPC_IDLE)
 376   1          {
 377   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 378   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_ER_SECTOR);
 379   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_ER_SECTOR;
 380   2      
 381   2              /* Make sure the command was accepted */
 382   2              if(CY_SPC_BUSY)
 383   2              {
 384   3                  CY_SPC_CPU_DATA_REG = array;
 385   3                  CY_SPC_CPU_DATA_REG = sectorNumber;
 386   3              }
 387   2              else
 388   2              {
 389   3                  status = CYRET_CANCELED;
 390   3              }
 391   2          }
 392   1          else
 393   1          {
 394   2              status = CYRET_LOCKED;
 395   2          }
 396   1      
 397   1          return(status);
 398   1      }
 399          
 400          
 401          /*******************************************************************************
 402          * Function Name: CySpcGetTemp
 403          ********************************************************************************
 404          * Summary:
 405          *  Returns the internal die temperature
 406          *
 407          * Parameters:
 408          *  uint8 numSamples:
 409          *   Number of samples. Valid values are 1-5, resulting in 2 - 32 samples
 410          *   respectively.
 411          *
 412          * uint16 timerPeriod:
 413          *   Number of ADC ACLK cycles. A valid 14 bit value is accepted, higher 2 bits
 414          *   of 16 bit values are ignored.
 415          *
 416          * uint8 clkDivSelect:
 417          *   ADC ACLK clock divide value. Valid values are 2 - 225.
 418          *
 419          * Return:
 420          *  CYRET_STARTED
 421          *  CYRET_CANCELED
 422          *  CYRET_LOCKED
 423          *
 424          *******************************************************************************/
 425          cystatus CySpcGetTemp(uint8 numSamples)
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 8   

 426          {
 427   1          cystatus status = CYRET_STARTED;
 428   1      
 429   1          /* Make sure the SPC is ready to accept command */
 430   1          if(CY_SPC_IDLE)
 431   1          {
 432   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 433   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_GET_TEMP);
 434   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_GET_TEMP;
 435   2      
 436   2              /* Make sure the command was accepted */
 437   2              if(CY_SPC_BUSY)
 438   2              {
 439   3                  CY_SPC_CPU_DATA_REG = numSamples;
 440   3              }
 441   2              else
 442   2              {
 443   3                  status = CYRET_CANCELED;
 444   3              }
 445   2          }
 446   1          else
 447   1          {
 448   2              status = CYRET_LOCKED;
 449   2          }
 450   1      
 451   1          return(status);
 452   1      }
 453          
 454          
 455          /*******************************************************************************
 456          * Function Name: CySpcLock
 457          ********************************************************************************
 458          * Summary:
 459          *  Locks the SPC so it can not be used by someone else:
 460          *   - Saves wait-pipeline enable state and enable pipeline (PSoC5)
 461          *
 462          * Parameters:
 463          *  Note
 464          *
 465          * Return:
 466          *  CYRET_SUCCESS - if the resource was free.
 467          *  CYRET_LOCKED  - if the SPC is in use.
 468          *
 469          *******************************************************************************/
 470          cystatus CySpcLock(void)
 471          {
 472   1          cystatus status = CYRET_LOCKED;
 473   1          uint8 interruptState;
 474   1      
 475   1          /* Enter critical section */
 476   1          interruptState = CyEnterCriticalSection();
 477   1      
 478   1          if(CY_SPC_UNLOCKED == SpcLockState)
 479   1          {
 480   2              SpcLockState = CY_SPC_LOCKED;
 481   2              status = CYRET_SUCCESS;
 482   2      
 483   2              #if(CY_PSOC5)
              
                          if(0u != (CY_SPC_CPU_WAITPIPE_REG & CY_SPC_CPU_WAITPIPE_BYPASS))
                          {
                              /* Enable pipeline registers */
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 9   

                              CY_SPC_CPU_WAITPIPE_REG &= ((uint32)(~CY_SPC_CPU_WAITPIPE_BYPASS));
              
                              /* At least 2 NOP instructions are recommended */
                              CY_NOP;
                              CY_NOP;
                              CY_NOP;
              
                              spcWaitPipeBypass = CY_SPC_CPU_WAITPIPE_BYPASS;
                          }
              
                      #endif  /* (CY_PSOC5) */
 499   2          }
 500   1      
 501   1          /* Exit critical section */
 502   1          CyExitCriticalSection(interruptState);
 503   1      
 504   1          return(status);
 505   1      }
 506          
 507          
 508          /*******************************************************************************
 509          * Function Name: CySpcUnlock
 510          ********************************************************************************
 511          * Summary:
 512          *  Unlocks the SPC so it can be used by someone else:
 513          *   - Restores wait-pipeline enable state (PSoC5)
 514          *
 515          * Parameters:
 516          *  None
 517          *
 518          * Return:
 519          *  None
 520          *
 521          *******************************************************************************/
 522          void CySpcUnlock(void)
 523          {
 524   1          uint8 interruptState;
 525   1      
 526   1          /* Enter critical section */
 527   1          interruptState = CyEnterCriticalSection();
 528   1      
 529   1          /* Release the SPC object */
 530   1          SpcLockState = CY_SPC_UNLOCKED;
 531   1      
 532   1          #if(CY_PSOC5)
              
                      if(CY_SPC_CPU_WAITPIPE_BYPASS == spcWaitPipeBypass)
                      {
                          /* Force to bypass pipeline registers */
                          CY_SPC_CPU_WAITPIPE_REG |= CY_SPC_CPU_WAITPIPE_BYPASS;
              
                          /* At least 2 NOP instructions are recommended */
                          CY_NOP;
                          CY_NOP;
                          CY_NOP;
              
                          spcWaitPipeBypass = 0u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 548   1      
 549   1          /* Exit critical section */
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 10  

 550   1          CyExitCriticalSection(interruptState);
 551   1      }
 552          
 553          
 554          /* [] END OF FILE */
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CySpcStart (BEGIN)
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4408              ORL     A,#08H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0013 9043B0            MOV     DPTR,#043B0H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4408              ORL     A,#08H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
001E 900000      R     MOV     DPTR,#interruptState
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 88
0026 22                RET     
             ; FUNCTION CySpcStart (END)

             ; FUNCTION CySpcStop (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54F7              ANL     A,#0F7H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0013 9043B0            MOV     DPTR,#043B0H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54F7              ANL     A,#0F7H
001B FF                MOV     R7,A
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 12  

001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
001E 900000      R     MOV     DPTR,#interruptState
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 114
0026 22                RET     
             ; FUNCTION CySpcStop (END)

             ; FUNCTION _CySpcReadData (BEGIN)
                                           ; SOURCE LINE # 135
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#size
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 139
000B 900000      R     MOV     DPTR,#i
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
0010         ?C0003:
0010 900000      R     MOV     DPTR,#size
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 900000      R     MOV     DPTR,#i
0018 E0                MOVX    A,@DPTR
0019 FE                MOV     R6,A
001A EE                MOV     A,R6
001B C3                CLR     C
001C 9F                SUBB    A,R7
001D 5040              JNC     ?C0004
                                           ; SOURCE LINE # 140
001F         ?C0006:
                                           ; SOURCE LINE # 141
001F 904722            MOV     DPTR,#04722H
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 5401              ANL     A,#01H
0027 FF                MOV     R7,A
0028 7E00              MOV     R6,#00H
002A EF                MOV     A,R7
002B 4E                ORL     A,R6
002C 6003              JZ      ?C0008
002E D3                SETB    C
002F 8001              SJMP    ?C0009
0031         ?C0008:
0031 C3                CLR     C
0032         ?C0009:
0032 4009              JC      ?C0007
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
0034 7F01              MOV     R7,#01H
0036 7E00              MOV     R6,#00H
0038 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 144
003B 80E2              SJMP    ?C0006
003D         ?C0007:
                                           ; SOURCE LINE # 145
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 13  

003D 904720            MOV     DPTR,#04720H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 900000      R     MOV     DPTR,#buffer
0045 120000      E     LCALL   ?C?PLDXDATA
0048 900000      R     MOV     DPTR,#i
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D E9                MOV     A,R1
004E 2E                ADD     A,R6
004F F9                MOV     R1,A
0050 E4                CLR     A
0051 3A                ADDC    A,R2
0052 FA                MOV     R2,A
0053 EF                MOV     A,R7
0054 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 146
0057 900000      R     MOV     DPTR,#i
005A E0                MOVX    A,@DPTR
005B 04                INC     A
005C F0                MOVX    @DPTR,A
005D 80B1              SJMP    ?C0003
005F         ?C0004:
                                           ; SOURCE LINE # 148
005F 900000      R     MOV     DPTR,#i
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
                                           ; SOURCE LINE # 149
0064         ?C0010:
0064 22                RET     
             ; FUNCTION _CySpcReadData (END)

             ; FUNCTION _CySpcLoadMultiByte (BEGIN)
                                           ; SOURCE LINE # 178
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#buffer
0010 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0013 900000      R     MOV     DPTR,#status
0016 7407              MOV     A,#07H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
0019 900000      R     MOV     DPTR,#array
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F C3                CLR     C
0020 943F              SUBB    A,#03FH
0022 500B              JNC     ?C0013
0024 900000      R     MOV     DPTR,#size
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 14  

002A C3                CLR     C
002B 9420              SUBB    A,#020H
002D 401C              JC      ?C0012
002F         ?C0013:
002F 900000      R     MOV     DPTR,#array
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 D3                SETB    C
0036 943F              SUBB    A,#03FH
0038 5003              JNC     $ + 5H
003A 020000      R     LJMP    ?C0011
003D 900000      R     MOV     DPTR,#size
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 C3                CLR     C
0044 9410              SUBB    A,#010H
0046 4003              JC      $ + 5H
0048 020000      R     LJMP    ?C0011
004B         ?C0012:
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
004B 904722            MOV     DPTR,#04722H
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 5402              ANL     A,#02H
0053 FF                MOV     R7,A
0054 7E00              MOV     R6,#00H
0056 EF                MOV     A,R7
0057 4E                ORL     A,R6
0058 7003              JNZ     $ + 5H
005A 020000      R     LJMP    ?C0014
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
005D 904720            MOV     DPTR,#04720H
0060 74B6              MOV     A,#0B6H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
0063 904720            MOV     DPTR,#04720H
0066 74D4              MOV     A,#0D4H
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0069 904720            MOV     DPTR,#04720H
006C 7401              MOV     A,#01H
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
006F 904722            MOV     DPTR,#04722H
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 5402              ANL     A,#02H
0077 FF                MOV     R7,A
0078 7E00              MOV     R6,#00H
007A EF                MOV     A,R7
007B 4E                ORL     A,R6
007C 7073              JNZ     ?C0015
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
007E 900000      R     MOV     DPTR,#array
0081 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 15  

0082 FF                MOV     R7,A
0083 904720            MOV     DPTR,#04720H
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0088 900000      R     MOV     DPTR,#address
008B E0                MOVX    A,@DPTR
008C FE                MOV     R6,A
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 EE                MOV     A,R6
0091 FF                MOV     R7,A
0092 7E00              MOV     R6,#00H
0094 EF                MOV     A,R7
0095 5401              ANL     A,#01H
0097 FF                MOV     R7,A
0098 904720            MOV     DPTR,#04720H
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
009D 900000      R     MOV     DPTR,#address
00A0 E0                MOVX    A,@DPTR
00A1 FE                MOV     R6,A
00A2 A3                INC     DPTR
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
00A5 EF                MOV     A,R7
00A6 54FF              ANL     A,#0FFH
00A8 FF                MOV     R7,A
00A9 904720            MOV     DPTR,#04720H
00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
00AE 900000      R     MOV     DPTR,#size
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 14                DEC     A
00B5 FF                MOV     R7,A
00B6 904720            MOV     DPTR,#04720H
00B9 EF                MOV     A,R7
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
00BB 900000      R     MOV     DPTR,#i
00BE E4                CLR     A
00BF F0                MOVX    @DPTR,A
00C0         ?C0016:
00C0 900000      R     MOV     DPTR,#size
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 900000      R     MOV     DPTR,#i
00C8 E0                MOVX    A,@DPTR
00C9 FE                MOV     R6,A
00CA EE                MOV     A,R6
00CB C3                CLR     C
00CC 9F                SUBB    A,R7
00CD 5038              JNC     ?C0021
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
00CF 900000      R     MOV     DPTR,#buffer
00D2 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 16  

00D5 900000      R     MOV     DPTR,#i
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
00DA E9                MOV     A,R1
00DB 2F                ADD     A,R7
00DC F9                MOV     R1,A
00DD E4                CLR     A
00DE 3A                ADDC    A,R2
00DF FA                MOV     R2,A
00E0 120000      E     LCALL   ?C?CLDPTR
00E3 FF                MOV     R7,A
00E4 904720            MOV     DPTR,#04720H
00E7 EF                MOV     A,R7
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
00E9 900000      R     MOV     DPTR,#i
00EC E0                MOVX    A,@DPTR
00ED 04                INC     A
00EE F0                MOVX    @DPTR,A
00EF 80CF              SJMP    ?C0016
                                           ; SOURCE LINE # 208
00F1         ?C0015:
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
00F1 900000      R     MOV     DPTR,#status
00F4 7409              MOV     A,#09H
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
00F7 800E              SJMP    ?C0021
00F9         ?C0014:
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
00F9 900000      R     MOV     DPTR,#status
00FC 7404              MOV     A,#04H
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
00FF 8006              SJMP    ?C0021
0101         ?C0011:
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
0101 900000      R     MOV     DPTR,#status
0104 7401              MOV     A,#01H
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
0107         ?C0021:
                                           ; SOURCE LINE # 224
0107 900000      R     MOV     DPTR,#status
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
                                           ; SOURCE LINE # 225
010C         ?C0022:
010C 22                RET     
             ; FUNCTION _CySpcLoadMultiByte (END)

             ; FUNCTION _CySpcLoadRow (BEGIN)
                                           ; SOURCE LINE # 253
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#buffer
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 17  

0008 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
000B 900000      R     MOV     DPTR,#status
000E 7407              MOV     A,#07H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0011 904722            MOV     DPTR,#04722H
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 5402              ANL     A,#02H
0019 FF                MOV     R7,A
001A 7E00              MOV     R6,#00H
001C EF                MOV     A,R7
001D 4E                ORL     A,R6
001E 607B              JZ      ?C0023
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
0020 904720            MOV     DPTR,#04720H
0023 74B6              MOV     A,#0B6H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0026 904720            MOV     DPTR,#04720H
0029 74D5              MOV     A,#0D5H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
002C 904720            MOV     DPTR,#04720H
002F 7402              MOV     A,#02H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0032 904722            MOV     DPTR,#04722H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 5402              ANL     A,#02H
003A FF                MOV     R7,A
003B 7E00              MOV     R6,#00H
003D EF                MOV     A,R7
003E 4E                ORL     A,R6
003F 7052              JNZ     ?C0024
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
0041 900000      R     MOV     DPTR,#array
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 904720            MOV     DPTR,#04720H
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
004B 900000      R     MOV     DPTR,#i
004E E4                CLR     A
004F F0                MOVX    @DPTR,A
0050 A3                INC     DPTR
0051 E4                CLR     A
0052 F0                MOVX    @DPTR,A
0053         ?C0025:
0053 900000      R     MOV     DPTR,#size
0056 E0                MOVX    A,@DPTR
0057 FE                MOV     R6,A
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 18  

005A FF                MOV     R7,A
005B 900000      R     MOV     DPTR,#i
005E E0                MOVX    A,@DPTR
005F FC                MOV     R4,A
0060 A3                INC     DPTR
0061 E0                MOVX    A,@DPTR
0062 FD                MOV     R5,A
0063 C3                CLR     C
0064 ED                MOV     A,R5
0065 9F                SUBB    A,R7
0066 EC                MOV     A,R4
0067 9E                SUBB    A,R6
0068 5037              JNC     ?C0029
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
006A 900000      R     MOV     DPTR,#buffer
006D 120000      E     LCALL   ?C?PLDXDATA
0070 900000      R     MOV     DPTR,#i
0073 E0                MOVX    A,@DPTR
0074 FE                MOV     R6,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 E9                MOV     A,R1
0079 2F                ADD     A,R7
007A F9                MOV     R1,A
007B EA                MOV     A,R2
007C 3E                ADDC    A,R6
007D FA                MOV     R2,A
007E 120000      E     LCALL   ?C?CLDPTR
0081 FF                MOV     R7,A
0082 904720            MOV     DPTR,#04720H
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
0087 900000      R     MOV     DPTR,#i
008A E4                CLR     A
008B 75F001            MOV     B,#01H
008E 120000      E     LCALL   ?C?IILDX
0091 80C0              SJMP    ?C0025
                                           ; SOURCE LINE # 274
0093         ?C0024:
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
0093 900000      R     MOV     DPTR,#status
0096 7409              MOV     A,#09H
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0099 8006              SJMP    ?C0029
009B         ?C0023:
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
009B 900000      R     MOV     DPTR,#status
009E 7404              MOV     A,#04H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
00A1         ?C0029:
                                           ; SOURCE LINE # 285
00A1 900000      R     MOV     DPTR,#status
00A4 E0                MOVX    A,@DPTR
00A5 FF                MOV     R7,A
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 19  

                                           ; SOURCE LINE # 286
00A6         ?C0030:
00A6 22                RET     
             ; FUNCTION _CySpcLoadRow (END)

             ; FUNCTION _CySpcWriteRow (BEGIN)
                                           ; SOURCE LINE # 316
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#tempPolarity
0010 EB                MOV     A,R3
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
0012 900000      R     MOV     DPTR,#status
0015 7407              MOV     A,#07H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
0018 904722            MOV     DPTR,#04722H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 5402              ANL     A,#02H
0020 FF                MOV     R7,A
0021 7E00              MOV     R6,#00H
0023 EF                MOV     A,R7
0024 4E                ORL     A,R6
0025 606B              JZ      ?C0031
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
0027 904720            MOV     DPTR,#04720H
002A 74B6              MOV     A,#0B6H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
002D 904720            MOV     DPTR,#04720H
0030 74D8              MOV     A,#0D8H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
0033 904720            MOV     DPTR,#04720H
0036 7405              MOV     A,#05H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
0039 904722            MOV     DPTR,#04722H
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F 5402              ANL     A,#02H
0041 FF                MOV     R7,A
0042 7E00              MOV     R6,#00H
0044 EF                MOV     A,R7
0045 4E                ORL     A,R6
0046 7042              JNZ     ?C0032
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
0048 900000      R     MOV     DPTR,#array
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 20  

004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 904720            MOV     DPTR,#04720H
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
0052 900000      R     MOV     DPTR,#address
0055 E0                MOVX    A,@DPTR
0056 FE                MOV     R6,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EE                MOV     A,R6
005B FF                MOV     R7,A
005C 7E00              MOV     R6,#00H
005E 904720            MOV     DPTR,#04720H
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
0063 900000      R     MOV     DPTR,#address
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 54FF              ANL     A,#0FFH
006E FF                MOV     R7,A
006F 904720            MOV     DPTR,#04720H
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
0074 900000      R     MOV     DPTR,#tempPolarity
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 904720            MOV     DPTR,#04720H
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
007E 900000      R     MOV     DPTR,#tempMagnitude
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 904720            MOV     DPTR,#04720H
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 336
0088 800E              SJMP    ?C0034
008A         ?C0032:
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
008A 900000      R     MOV     DPTR,#status
008D 7409              MOV     A,#09H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
0090 8006              SJMP    ?C0034
0092         ?C0031:
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
0092 900000      R     MOV     DPTR,#status
0095 7404              MOV     A,#04H
0097 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 21  

                                           ; SOURCE LINE # 345
0098         ?C0034:
                                           ; SOURCE LINE # 347
0098 900000      R     MOV     DPTR,#status
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
                                           ; SOURCE LINE # 348
009D         ?C0035:
009D 22                RET     
             ; FUNCTION _CySpcWriteRow (END)

             ; FUNCTION _CySpcEraseSector (BEGIN)
                                           ; SOURCE LINE # 370
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#sectorNumber
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
000A 900000      R     MOV     DPTR,#status
000D 7407              MOV     A,#07H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
0010 904722            MOV     DPTR,#04722H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 5402              ANL     A,#02H
0018 FF                MOV     R7,A
0019 7E00              MOV     R6,#00H
001B EF                MOV     A,R7
001C 4E                ORL     A,R6
001D 603F              JZ      ?C0036
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
001F 904720            MOV     DPTR,#04720H
0022 74B6              MOV     A,#0B6H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
0025 904720            MOV     DPTR,#04720H
0028 74DB              MOV     A,#0DBH
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
002B 904720            MOV     DPTR,#04720H
002E 7408              MOV     A,#08H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
0031 904722            MOV     DPTR,#04722H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 5402              ANL     A,#02H
0039 FF                MOV     R7,A
003A 7E00              MOV     R6,#00H
003C EF                MOV     A,R7
003D 4E                ORL     A,R6
003E 7016              JNZ     ?C0037
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
0040 900000      R     MOV     DPTR,#array
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 22  

0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 904720            MOV     DPTR,#04720H
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
004A 900000      R     MOV     DPTR,#sectorNumber
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 904720            MOV     DPTR,#04720H
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0054 800E              SJMP    ?C0039
0056         ?C0037:
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
0056 900000      R     MOV     DPTR,#status
0059 7409              MOV     A,#09H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
005C 8006              SJMP    ?C0039
005E         ?C0036:
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
005E 900000      R     MOV     DPTR,#status
0061 7404              MOV     A,#04H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0064         ?C0039:
                                           ; SOURCE LINE # 397
0064 900000      R     MOV     DPTR,#status
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
                                           ; SOURCE LINE # 398
0069         ?C0040:
0069 22                RET     
             ; FUNCTION _CySpcEraseSector (END)

             ; FUNCTION _CySpcGetTemp (BEGIN)
                                           ; SOURCE LINE # 425
0000 900000      R     MOV     DPTR,#numSamples
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0005 900000      R     MOV     DPTR,#status
0008 7407              MOV     A,#07H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
000B 904722            MOV     DPTR,#04722H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 5402              ANL     A,#02H
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 EF                MOV     A,R7
0017 4E                ORL     A,R6
0018 6035              JZ      ?C0041
                                           ; SOURCE LINE # 431
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 23  

                                           ; SOURCE LINE # 432
001A 904720            MOV     DPTR,#04720H
001D 74B6              MOV     A,#0B6H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
0020 904720            MOV     DPTR,#04720H
0023 74E1              MOV     A,#0E1H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
0026 904720            MOV     DPTR,#04720H
0029 740E              MOV     A,#0EH
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
002C 904722            MOV     DPTR,#04722H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 5402              ANL     A,#02H
0034 FF                MOV     R7,A
0035 7E00              MOV     R6,#00H
0037 EF                MOV     A,R7
0038 4E                ORL     A,R6
0039 700C              JNZ     ?C0042
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
003B 900000      R     MOV     DPTR,#numSamples
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 904720            MOV     DPTR,#04720H
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
0045 800E              SJMP    ?C0044
0047         ?C0042:
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
0047 900000      R     MOV     DPTR,#status
004A 7409              MOV     A,#09H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
004D 8006              SJMP    ?C0044
004F         ?C0041:
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
004F 900000      R     MOV     DPTR,#status
0052 7404              MOV     A,#04H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
0055         ?C0044:
                                           ; SOURCE LINE # 451
0055 900000      R     MOV     DPTR,#status
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
                                           ; SOURCE LINE # 452
005A         ?C0045:
005A 22                RET     
             ; FUNCTION _CySpcGetTemp (END)

             ; FUNCTION CySpcLock (BEGIN)
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 471
C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 24  

                                           ; SOURCE LINE # 472
0000 900000      R     MOV     DPTR,#status
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
000E 900000      R     MOV     DPTR,#SpcLockState
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 700B              JNZ     ?C0046
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
0016 900000      R     MOV     DPTR,#SpcLockState
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
001C 900000      R     MOV     DPTR,#status
001F E4                CLR     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
0021         ?C0046:
                                           ; SOURCE LINE # 502
0021 900000      R     MOV     DPTR,#interruptState
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 504
0029 900000      R     MOV     DPTR,#status
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 505
002E         ?C0047:
002E 22                RET     
             ; FUNCTION CySpcLock (END)

             ; FUNCTION CySpcUnlock (BEGIN)
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 527
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
0008 900000      R     MOV     DPTR,#SpcLockState
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
000D 900000      R     MOV     DPTR,#interruptState
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 551
0015 22                RET     
             ; FUNCTION CySpcUnlock (END)


C51 COMPILER V9.51   CYSPC                                                                 09/04/2014 17:45:52 PAGE 25  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1039    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      39
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
