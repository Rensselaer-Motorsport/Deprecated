C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYLIB
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CyLib.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CyLib.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\CyLib.lst) CD DB NOIP OT(2,SIZE
                    -) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\CyLib.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyLib.c
   3          * Version 4.10
   4          *
   5          *  Description:
   6          *   Provides a system API for the clocking, interrupts and watchdog timer.
   7          *
   8          *  Note:
   9          *   Documentation of the API's in this file is located in the
  10          *   System Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "CyLib.h"
  20          
  21          
  22          /*******************************************************************************
  23          * The CyResetStatus variable is used to obtain value of RESET_SR0 register after
  24          * a device reset. It is set from initialize_psoc() at the early initialization
  25          * stage. In case of IAR EW IDE, initialize_psoc() is executed before the data
  26          * sections are initialized. To avoid zeroing, CyResetStatus should be placed
  27          * to the .noinit section.
  28          *******************************************************************************/
  29          CY_NOINIT uint8 CYXDATA CyResetStatus;
  30          
  31          
  32          /* Variable Vdda */
  33          #if(CYDEV_VARIABLE_VDDA == 1)
              
                  uint8 CyScPumpEnabled = (uint8)(CYDEV_VDDA_MV < 2700);
              
              #endif  /* (CYDEV_VARIABLE_VDDA == 1) */
  38          
  39          
  40          /* Do not use these definitions directly in your application */
  41          uint32 cydelay_freq_hz  = BCLK__BUS_CLK__HZ;
  42          uint32 cydelay_freq_khz = (BCLK__BUS_CLK__HZ + 999u) / 1000u;
  43          uint8  cydelay_freq_mhz = (uint8)((BCLK__BUS_CLK__HZ + 999999u) / 1000000u);
  44          uint32 cydelay_32k_ms   = 32768u * ((BCLK__BUS_CLK__HZ + 999u) / 1000u);
  45          
  46          
  47          /* Function Prototypes */
  48          static uint8 CyUSB_PowerOnCheck(void)  ;
  49          static void CyIMO_SetTrimValue(uint8 freq) ;
  50          static void CyBusClk_Internal_SetDivider(uint16 divider);
  51          
  52          
  53          /*******************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 2   

  54          * Function Name: CyPLL_OUT_Start
  55          ********************************************************************************
  56          *
  57          * Summary:
  58          *   Enables the PLL.  Optionally waits for it to become stable.
  59          *   Waits at least 250 us or until it is detected that the PLL is stable.
  60          *
  61          * Parameters:
  62          *   wait:
  63          *    0: Return immediately after configuration
  64          *    1: Wait for PLL lock or timeout.
  65          *
  66          * Return:
  67          *   Status
  68          *    CYRET_SUCCESS - Completed successfully
  69          *    CYRET_TIMEOUT - Timeout occurred without detecting a stable clock.
  70          *     If the input source of the clock is jittery, then the lock indication
  71          *     may not occur.  However, after the timeout has expired the generated PLL
  72          *     clock can still be used.
  73          *
  74          * Side Effects:
  75          *  If wait is enabled: This function uses the Fast Time Wheel to time the wait.
  76          *  Any other use of the Fast Time Wheel will be stopped during the period of
  77          *  this function and then restored. This function also uses the 100 KHz ILO.
  78          *  If not enabled, this function will enable the 100 KHz ILO for the period of
  79          *  this function.
  80          *
  81          *  No changes to the setup of the ILO, Fast Time Wheel, Central Time Wheel or
  82          *  Once Per Second interrupt may be made by interrupt routines during the period
  83          *  of this function execution. The current operation of the ILO, Central Time
  84          *  Wheel and Once Per Second interrupt are maintained during the operation of
  85          *  this function provided the reading of the Power Manager Interrupt Status
  86          *  Register is only done using the CyPmReadStatus() function.
  87          *
  88          *******************************************************************************/
  89          cystatus CyPLL_OUT_Start(uint8 wait) 
  90          {
  91   1          cystatus status = CYRET_SUCCESS;
  92   1      
  93   1          uint8 iloEnableState;
  94   1          uint8 pmTwCfg0State;
  95   1          uint8 pmTwCfg2State;
  96   1      
  97   1      
  98   1          /* Enables PLL circuit  */
  99   1          CY_CLK_PLL_CFG0_REG |= CY_CLK_PLL_ENABLE;
 100   1      
 101   1          if(wait != 0u)
 102   1          {
 103   2              /* Save 100 KHz ILO, FTW interval, enable and interrupt enable */
 104   2              iloEnableState = CY_LIB_SLOWCLK_ILO_CR0_REG & CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ;
 105   2              pmTwCfg0State = CY_LIB_PM_TW_CFG0_REG;
 106   2              pmTwCfg2State = CY_LIB_PM_TW_CFG2_REG;
 107   2      
 108   2              CyPmFtwSetInterval(CY_CLK_PLL_FTW_INTERVAL);
 109   2      
 110   2              status = CYRET_TIMEOUT;
 111   2      
 112   2              while(0u == (CY_PM_FTW_INT & CyPmReadStatus(CY_PM_FTW_INT)))
 113   2              {
 114   3                  /* Wait for interrupt status */
 115   3                  if(0u != (CY_CLK_PLL_SR_REG & CY_CLK_PLL_LOCK_STATUS))
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 3   

 116   3                  {
 117   4                      if(0u != (CY_CLK_PLL_SR_REG & CY_CLK_PLL_LOCK_STATUS))
 118   4                      {
 119   5                          status = CYRET_SUCCESS;
 120   5                          break;
 121   5                      }
 122   4                  }
 123   3              }
 124   2      
 125   2              /* Restore 100 KHz ILO, FTW interval, enable and interrupt enable */
 126   2              if(0u == iloEnableState)
 127   2              {
 128   3                  CyILO_Stop100K();
 129   3              }
 130   2      
 131   2              CY_LIB_PM_TW_CFG0_REG = pmTwCfg0State;
 132   2              CY_LIB_PM_TW_CFG2_REG = pmTwCfg2State;
 133   2          }
 134   1      
 135   1          return(status);
 136   1      }
 137          
 138          
 139          /*******************************************************************************
 140          * Function Name: CyPLL_OUT_Stop
 141          ********************************************************************************
 142          *
 143          * Summary:
 144          *  Disables the PLL.
 145          *
 146          * Parameters:
 147          *  None
 148          *
 149          * Return:
 150          *  None
 151          *
 152          *******************************************************************************/
 153          void CyPLL_OUT_Stop(void) 
 154          {
 155   1          CY_CLK_PLL_CFG0_REG &= ((uint8)(~CY_CLK_PLL_ENABLE));
 156   1      }
 157          
 158          
 159          /*******************************************************************************
 160          * Function Name: CyPLL_OUT_SetPQ
 161          ********************************************************************************
 162          *
 163          * Summary:
 164          *  Sets the P and Q dividers and the charge pump current.
 165          *  The Frequency Out will be P/Q * Frequency In.
 166          *  The PLL must be disabled before calling this function.
 167          *
 168          * Parameters:
 169          *  uint8 pDiv:
 170          *   Valid range [8 - 255].
 171          *
 172          *  uint8 qDiv:
 173          *   Valid range [1 - 16]. Input Frequency / Q must be in range of 1 to 3 MHz.
 174          
 175          *  uint8 current:
 176          *   Valid range [1 - 7]. Charge pump current in uA. Refer to the device TRM and
 177          *   datasheet for more information.
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 4   

 178          *
 179          * Return:
 180          *  None
 181          *
 182          * Side Effects:
 183          *  If this function execution results in the CPU clock frequency increasing,
 184          *  then the number of clock cycles the cache will wait before it samples data
 185          *  coming back from the Flash must be adjusted by calling CyFlash_SetWaitCycles()
 186          *  with an appropriate parameter. It can be optionally called if the CPU clock
 187          *  frequency is lowered in order to improve the CPU performance.
 188          *  See CyFlash_SetWaitCycles() description for more information.
 189          *
 190          *******************************************************************************/
 191          void CyPLL_OUT_SetPQ(uint8 pDiv, uint8 qDiv, uint8 current) 
 192          {
 193   1          /* Halt CPU in debug mode if PLL is enabled */
 194   1          CYASSERT(0u == (CY_CLK_PLL_CFG0_REG & CY_CLK_PLL_ENABLE));
 195   1      
 196   1          if((pDiv    >= CY_CLK_PLL_MIN_P_VALUE  ) &&
 197   1             (qDiv    <= CY_CLK_PLL_MAX_Q_VALUE  ) && (qDiv    >= CY_CLK_PLL_MIN_Q_VALUE  ) &&
 198   1             (current >= CY_CLK_PLL_MIN_CUR_VALUE) && (current <= CY_CLK_PLL_MAX_CUR_VALUE))
 199   1          {
 200   2              /* Set new values */
 201   2              CY_CLK_PLL_P_REG = pDiv;
 202   2              CY_CLK_PLL_Q_REG = ((uint8)(qDiv - 1u));
 203   2              CY_CLK_PLL_CFG1_REG = (CY_CLK_PLL_CFG1_REG & CY_CLK_PLL_CURRENT_MASK) |
 204   2                                      ((uint8)(((uint8)(current - 1u)) << CY_CLK_PLL_CURRENT_POSITION));
 205   2          }
 206   1          else
 207   1          {
 208   2              /***********************************************************************
 209   2              * Halt CPU in debug mode if:
 210   2              * - P divider is less than required
 211   2              * - Q divider is out of range
 212   2              * - pump current is out of range
 213   2              ***********************************************************************/
 214   2              CYASSERT(0u != 0u);
 215   2          }
 216   1      
 217   1      }
 218          
 219          
 220          /*******************************************************************************
 221          * Function Name: CyPLL_OUT_SetSource
 222          ********************************************************************************
 223          *
 224          * Summary:
 225          *  Sets the input clock source to the PLL. The PLL must be disabled before
 226          *  calling this function.
 227          *
 228          * Parameters:
 229          *   source: One of the three available PLL clock sources
 230          *    CY_PLL_SOURCE_IMO  :   IMO
 231          *    CY_PLL_SOURCE_XTAL :   MHz Crystal
 232          *    CY_PLL_SOURCE_DSI  :   DSI
 233          *
 234          * Return:
 235          *  None
 236          *
 237          * Side Effects:
 238          *  If this function execution results in the CPU clock frequency increasing,
 239          *  then the number of clock cycles the cache will wait before it samples data
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 5   

 240          *  coming back from the3 Flash must be adjusted by calling CyFlash_SetWaitCycles()
 241          *  with an appropriate parameter. It can be optionally called if the CPU clock
 242          *  frequency is lowered in order to improve the CPU performance.
 243          *  See CyFlash_SetWaitCycles() description for more information.
 244          *
 245          *******************************************************************************/
 246          void CyPLL_OUT_SetSource(uint8 source) 
 247          {
 248   1          /* Halt CPU in debug mode if PLL is enabled */
 249   1          CYASSERT(0u == (CY_CLK_PLL_CFG0_REG & CY_CLK_PLL_ENABLE));
 250   1      
 251   1          switch(source)
 252   1          {
 253   2              case CY_PLL_SOURCE_IMO:
 254   2              case CY_PLL_SOURCE_XTAL:
 255   2              case CY_PLL_SOURCE_DSI:
 256   2                  CY_LIB_CLKDIST_CR_REG = ((CY_LIB_CLKDIST_CR_REG & CY_LIB_CLKDIST_CR_PLL_SCR_MASK) | source);
 257   2              break;
 258   2      
 259   2              default:
 260   2                  CYASSERT(0u != 0u);
 261   2              break;
 262   2          }
 263   1      }
 264          
 265          
 266          /*******************************************************************************
 267          * Function Name: CyIMO_Start
 268          ********************************************************************************
 269          *
 270          * Summary:
 271          *  Enables the IMO. Optionally waits at least 6 us for it to settle.
 272          *
 273          * Parameters:
 274          *  uint8 wait:
 275          *   0: Return immediately after configuration
 276          *   1: Wait for at least 6 us for the IMO to settle.
 277          *
 278          * Return:
 279          *  None
 280          *
 281          * Side Effects:
 282          *  If wait is enabled: This function uses the Fast Time Wheel to time the wait.
 283          *  Any other use of the Fast Time Wheel will be stopped during the period of
 284          *  this function and then restored. This function also uses the 100 KHz ILO.
 285          *  If not enabled, this function will enable the 100 KHz ILO for the period of
 286          *  this function.
 287          *
 288          *  No changes to the setup of the ILO, Fast Time Wheel, Central Time Wheel or
 289          *  Once Per Second interrupt may be made by interrupt routines during the period
 290          *  of this function execution. The current operation of the ILO, Central Time
 291          *  Wheel and Once Per Second interrupt are maintained during the operation of
 292          *  this function provided the reading of the Power Manager Interrupt Status
 293          *  Register is only done using the CyPmReadStatus() function.
 294          *
 295          *******************************************************************************/
 296          void CyIMO_Start(uint8 wait) 
 297          {
 298   1          uint8 pmFtwCfg2Reg;
 299   1          uint8 pmFtwCfg0Reg;
 300   1          uint8 ilo100KhzEnable;
 301   1      
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 6   

 302   1      
 303   1          CY_LIB_PM_ACT_CFG0_REG  |= CY_LIB_PM_ACT_CFG0_IMO_EN;
 304   1          CY_LIB_PM_STBY_CFG0_REG |= CY_LIB_PM_STBY_CFG0_IMO_EN;
 305   1      
 306   1          if(0u != wait)
 307   1          {
 308   2              /* Need to turn on 100KHz ILO if it happens to not already be running.*/
 309   2              ilo100KhzEnable = CY_LIB_SLOWCLK_ILO_CR0_REG & CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ;
 310   2              pmFtwCfg0Reg = CY_LIB_PM_TW_CFG0_REG;
 311   2              pmFtwCfg2Reg = CY_LIB_PM_TW_CFG2_REG;
 312   2      
 313   2              CyPmFtwSetInterval(CY_LIB_CLK_IMO_FTW_TIMEOUT);
 314   2      
 315   2              while (0u == (CY_PM_FTW_INT & CyPmReadStatus(CY_PM_FTW_INT)))
 316   2              {
 317   3                  /* Wait for interrupt status */
 318   3              }
 319   2      
 320   2              if(0u == ilo100KhzEnable)
 321   2              {
 322   3                  CyILO_Stop100K();
 323   3              }
 324   2      
 325   2              CY_LIB_PM_TW_CFG0_REG = pmFtwCfg0Reg;
 326   2              CY_LIB_PM_TW_CFG2_REG = pmFtwCfg2Reg;
 327   2          }
 328   1      }
 329          
 330          
 331          /*******************************************************************************
 332          * Function Name: CyIMO_Stop
 333          ********************************************************************************
 334          *
 335          * Summary:
 336          *   Disables the IMO.
 337          *
 338          * Parameters:
 339          *  None
 340          *
 341          * Return:
 342          *  None
 343          *
 344          *******************************************************************************/
 345          void CyIMO_Stop(void) 
 346          {
 347   1          CY_LIB_PM_ACT_CFG0_REG  &= ((uint8) (~CY_LIB_PM_ACT_CFG0_IMO_EN));
 348   1          CY_LIB_PM_STBY_CFG0_REG &= ((uint8) (~CY_LIB_PM_STBY_CFG0_IMO_EN));
 349   1      }
 350          
 351          
 352          /*******************************************************************************
 353          * Function Name: CyUSB_PowerOnCheck
 354          ********************************************************************************
 355          *
 356          * Summary:
 357          *  Returns the USB power status value. A private function to cy_boot.
 358          *
 359          * Parameters:
 360          *   None
 361          *
 362          * Return:
 363          *   uint8: one if the USB is enabled, 0 if not enabled.
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 7   

 364          *
 365          *******************************************************************************/
 366          static uint8 CyUSB_PowerOnCheck(void)  
 367          {
 368   1          uint8 poweredOn = 0u;
 369   1      
 370   1          /* Check whether device is in Active or AltActiv and if USB is powered on */
 371   1          if((((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ACTIVE ) &&
 372   1             (0u != (CY_LIB_PM_ACT_CFG5_REG & CY_ACT_USB_ENABLED     )))  ||
 373   1             (((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ALT_ACT) &&
 374   1             (0u != (CY_LIB_PM_STBY_CFG5_REG & CY_ALT_ACT_USB_ENABLED))))
 375   1          {
 376   2              poweredOn = 1u;
 377   2          }
 378   1      
 379   1          return (poweredOn);
 380   1      }
 381          
 382          
 383          /*******************************************************************************
 384          * Function Name: CyIMO_SetTrimValue
 385          ********************************************************************************
 386          *
 387          * Summary:
 388          *  Sets the IMO factory trim values.
 389          *
 390          * Parameters:
 391          *  uint8 freq - frequency for which trims must be set
 392          *
 393          * Return:
 394          *  None
 395          *
 396          *******************************************************************************/
 397          static void CyIMO_SetTrimValue(uint8 freq) 
 398          {
 399   1          uint8 usbPowerOn = CyUSB_PowerOnCheck();
 400   1      
 401   1          /* If USB is powered */
 402   1          if(usbPowerOn == 1u)
 403   1          {
 404   2              /* Unlock USB write */
 405   2              CY_LIB_USB_CR1_REG &= ((uint8)(~CY_LIB_USB_CLK_EN));
 406   2          }
 407   1          switch(freq)
 408   1          {
 409   2          case CY_IMO_FREQ_3MHZ:
 410   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_3MHZ_PTR);
 411   2              break;
 412   2      
 413   2          case CY_IMO_FREQ_6MHZ:
 414   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_6MHZ_PTR);
 415   2              break;
 416   2      
 417   2          case CY_IMO_FREQ_12MHZ:
 418   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_12MHZ_PTR);
 419   2              break;
 420   2      
 421   2          case CY_IMO_FREQ_24MHZ:
 422   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_24MHZ_PTR);
 423   2              break;
 424   2      
 425   2          case CY_IMO_FREQ_48MHZ:
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 8   

 426   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_TR1_PTR);
 427   2              break;
 428   2      
 429   2          case CY_IMO_FREQ_62MHZ:
 430   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_67MHZ_PTR);
 431   2              break;
 432   2      
 433   2      #if(CY_PSOC5)
                  case CY_IMO_FREQ_74MHZ:
                      CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_80MHZ_PTR);
                      break;
              #endif  /* (CY_PSOC5) */
 438   2      
 439   2          case CY_IMO_FREQ_USB:
 440   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_USB_PTR);
 441   2      
 442   2              /* If USB is powered */
 443   2              if(usbPowerOn == 1u)
 444   2              {
 445   3                  /* Lock USB Oscillator */
 446   3                  CY_LIB_USB_CR1_REG |= CY_LIB_USB_CLK_EN;
 447   3              }
 448   2              break;
 449   2      
 450   2          default:
 451   2                  CYASSERT(0u != 0u);
 452   2              break;
 453   2          }
 454   1      
 455   1      }
 456          
 457          
 458          /*******************************************************************************
 459          * Function Name: CyIMO_SetFreq
 460          ********************************************************************************
 461          *
 462          * Summary:
 463          *  Sets the frequency of the IMO. Changes may be made while the IMO is running.
 464          *
 465          * Parameters:
 466          *  freq: Frequency of IMO operation
 467          *       CY_IMO_FREQ_3MHZ  to set  3   MHz
 468          *       CY_IMO_FREQ_6MHZ  to set  6   MHz
 469          *       CY_IMO_FREQ_12MHZ to set 12   MHz
 470          *       CY_IMO_FREQ_24MHZ to set 24   MHz
 471          *       CY_IMO_FREQ_48MHZ to set 48   MHz
 472          *       CY_IMO_FREQ_62MHZ to set 62.6 MHz
 473          *       CY_IMO_FREQ_74MHZ to set 74.7 MHz (not applicable for PSoC 3)
 474          *       CY_IMO_FREQ_USB   to set 24   MHz (Trimmed for USB operation)
 475          *
 476          * Return:
 477          *  None
 478          *
 479          * Side Effects:
 480          *  If this function execution results in the CPU clock frequency increasing,
 481          *  then the number of clock cycles the cache will wait before it samples data
 482          *  coming back from the Flash must be adjusted by calling CyFlash_SetWaitCycles()
 483          *  with an appropriate parameter. It can be optionally called if the CPU clock
 484          *  frequency is lowered in order to improve the CPU performance.
 485          *  See CyFlash_SetWaitCycles() description for more information.
 486          *
 487          *  When the USB setting is chosen, the USB clock locking circuit is enabled.
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 9   

 488          *  Otherwise this circuit is disabled. The USB block must be powered before
 489          *  selecting the USB setting.
 490          *
 491          *******************************************************************************/
 492          void CyIMO_SetFreq(uint8 freq) 
 493          {
 494   1          uint8 currentFreq;
 495   1          uint8 nextFreq;
 496   1      
 497   1          /***************************************************************************
 498   1          * If the IMO frequency is changed,the Trim values must also be set
 499   1          * accordingly.This requires reading the current frequency. If the new
 500   1          * frequency is faster, then set a new trim and then change the frequency,
 501   1          * otherwise change the frequency and then set new trim values.
 502   1          ***************************************************************************/
 503   1      
 504   1          currentFreq = CY_LIB_FASTCLK_IMO_CR_REG & ((uint8)(~CY_LIB_FASTCLK_IMO_CR_RANGE_MASK));
 505   1      
 506   1          /* Check if requested frequency is USB. */
 507   1          nextFreq = (freq == CY_IMO_FREQ_USB) ? CY_IMO_FREQ_24MHZ : freq;
 508   1      
 509   1          switch (currentFreq)
 510   1          {
 511   2          case 0u:
 512   2              currentFreq = CY_IMO_FREQ_12MHZ;
 513   2              break;
 514   2      
 515   2          case 1u:
 516   2              currentFreq = CY_IMO_FREQ_6MHZ;
 517   2              break;
 518   2      
 519   2          case 2u:
 520   2              currentFreq = CY_IMO_FREQ_24MHZ;
 521   2              break;
 522   2      
 523   2          case 3u:
 524   2              currentFreq = CY_IMO_FREQ_3MHZ;
 525   2              break;
 526   2      
 527   2          case 4u:
 528   2              currentFreq = CY_IMO_FREQ_48MHZ;
 529   2              break;
 530   2      
 531   2          case 5u:
 532   2              currentFreq = CY_IMO_FREQ_62MHZ;
 533   2              break;
 534   2      
 535   2      #if(CY_PSOC5)
                  case 6u:
                      currentFreq = CY_IMO_FREQ_74MHZ;
                      break;
              #endif  /* (CY_PSOC5) */
 540   2      
 541   2          default:
 542   2              CYASSERT(0u != 0u);
 543   2              break;
 544   2          }
 545   1      
 546   1          if (nextFreq >= currentFreq)
 547   1          {
 548   2              /* Set new trim first */
 549   2              CyIMO_SetTrimValue(freq);
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 10  

 550   2          }
 551   1      
 552   1          /* Set usbclk_on bit when using CY_IMO_FREQ_USB, if not clear it */
 553   1          switch(freq)
 554   1          {
 555   2          case CY_IMO_FREQ_3MHZ:
 556   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 557   2                  CY_LIB_IMO_3MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 558   2              break;
 559   2      
 560   2          case CY_IMO_FREQ_6MHZ:
 561   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 562   2                  CY_LIB_IMO_6MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 563   2              break;
 564   2      
 565   2          case CY_IMO_FREQ_12MHZ:
 566   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 567   2                  CY_LIB_IMO_12MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 568   2              break;
 569   2      
 570   2          case CY_IMO_FREQ_24MHZ:
 571   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 572   2                  CY_LIB_IMO_24MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 573   2              break;
 574   2      
 575   2          case CY_IMO_FREQ_48MHZ:
 576   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 577   2                  CY_LIB_IMO_48MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 578   2              break;
 579   2      
 580   2          case CY_IMO_FREQ_62MHZ:
 581   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 582   2                  CY_LIB_IMO_62MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 583   2              break;
 584   2      
 585   2      #if(CY_PSOC5)
                  case CY_IMO_FREQ_74MHZ:
                      CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
                          CY_LIB_IMO_74MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
                      break;
              #endif  /* (CY_PSOC5) */
 591   2      
 592   2          case CY_IMO_FREQ_USB:
 593   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 594   2                  CY_LIB_IMO_24MHZ_VALUE) | CY_LIB_IMO_USBCLK_ON_SET;
 595   2              break;
 596   2      
 597   2          default:
 598   2              CYASSERT(0u != 0u);
 599   2              break;
 600   2          }
 601   1      
 602   1          /* Tu rn onIMO Doubler, if switching to CY_IMO_FREQ_USB */
 603   1          if (freq == CY_IMO_FREQ_USB)
 604   1          {
 605   2              CyIMO_EnableDoubler();
 606   2          }
 607   1          else
 608   1          {
 609   2              CyIMO_DisableDoubler();
 610   2          }
 611   1      
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 11  

 612   1          if (nextFreq < currentFreq)
 613   1          {
 614   2              /* Set the trim after setting frequency */
 615   2              CyIMO_SetTrimValue(freq);
 616   2          }
 617   1      }
 618          
 619          
 620          /*******************************************************************************
 621          * Function Name: CyIMO_SetSource
 622          ********************************************************************************
 623          *
 624          * Summary:
 625          *  Sets the source of the clock output from the IMO block.
 626          *
 627          *  The output from the IMO is by default the IMO itself. Optionally the MHz
 628          *  Crystal or DSI input can be the source of the IMO output instead.
 629          *
 630          * Parameters:
 631          *   source: CY_IMO_SOURCE_DSI to set the DSI as source.
 632          *           CY_IMO_SOURCE_XTAL to set the MHz as source.
 633          *           CY_IMO_SOURCE_IMO to set the IMO itself.
 634          *
 635          * Return:
 636          *  None
 637          *
 638          * Side Effects:
 639          *  If this function execution resulted in the CPU clock frequency increasing,
 640          *  then the number of clock cycles the cache will wait before it samples data
 641          *  coming back from the Flash must be adjusted by calling CyFlash_SetWaitCycles()
 642          *  with an appropriate parameter. It can be optionally called if the CPU clock
 643          *  frequency is lowered in order to improve the CPU performance.
 644          *  See CyFlash_SetWaitCycles() description for more information.
 645          *
 646          *******************************************************************************/
 647          void CyIMO_SetSource(uint8 source) 
 648          {
 649   1          switch(source)
 650   1          {
 651   2          case CY_IMO_SOURCE_DSI:
 652   2              CY_LIB_CLKDIST_CR_REG     &= ((uint8)(~CY_LIB_CLKDIST_CR_IMO2X));
 653   2              CY_LIB_FASTCLK_IMO_CR_REG |= CY_LIB_FASTCLK_IMO_IMO;
 654   2              break;
 655   2      
 656   2          case CY_IMO_SOURCE_XTAL:
 657   2              CY_LIB_CLKDIST_CR_REG     |= CY_LIB_CLKDIST_CR_IMO2X;
 658   2              CY_LIB_FASTCLK_IMO_CR_REG |= CY_LIB_FASTCLK_IMO_IMO;
 659   2              break;
 660   2      
 661   2          case CY_IMO_SOURCE_IMO:
 662   2              CY_LIB_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_LIB_FASTCLK_IMO_IMO));
 663   2              break;
 664   2      
 665   2          default:
 666   2              /* Incorrect source value */
 667   2              CYASSERT(0u != 0u);
 668   2              break;
 669   2          }
 670   1      }
 671          
 672          
 673          /*******************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 12  

 674          * Function Name: CyIMO_EnableDoubler
 675          ********************************************************************************
 676          *
 677          * Summary:
 678          *  Enables the IMO doubler.  The 2x frequency clock is used to convert a 24 MHz
 679          *  input to a 48 MHz output for use by the USB block.
 680          *
 681          * Parameters:
 682          *  None
 683          *
 684          * Return:
 685          *  None
 686          *
 687          *******************************************************************************/
 688          void CyIMO_EnableDoubler(void) 
 689          {
 690   1          /* Set FASTCLK_IMO_CR_PTR regigster's 4th bit */
 691   1          CY_LIB_FASTCLK_IMO_CR_REG |= CY_LIB_FASTCLK_IMO_DOUBLER;
 692   1      }
 693          
 694          
 695          /*******************************************************************************
 696          * Function Name: CyIMO_DisableDoubler
 697          ********************************************************************************
 698          *
 699          * Summary:
 700          *   Disables the IMO doubler.
 701          *
 702          * Parameters:
 703          *  None
 704          *
 705          * Return:
 706          *  None
 707          *
 708          *******************************************************************************/
 709          void CyIMO_DisableDoubler(void) 
 710          {
 711   1          CY_LIB_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_LIB_FASTCLK_IMO_DOUBLER));
 712   1      }
 713          
 714          
 715          /*******************************************************************************
 716          * Function Name: CyMasterClk_SetSource
 717          ********************************************************************************
 718          *
 719          * Summary:
 720          *  Sets the source of the master clock.
 721          *
 722          * Parameters:
 723          *   source: One of the four available Master clock sources.
 724          *     CY_MASTER_SOURCE_IMO
 725          *     CY_MASTER_SOURCE_PLL
 726          *     CY_MASTER_SOURCE_XTAL
 727          *     CY_MASTER_SOURCE_DSI
 728          *
 729          * Return:
 730          *  None
 731          *
 732          * Side Effects:
 733          *  The current source and the new source must both be running and stable before
 734          *  calling this function.
 735          *
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 13  

 736          *  If this function execution resulted in the CPU clock frequency increasing,
 737          *  then the number of clock cycles the cache will wait before it samples data
 738          *  coming back from the Flash must be adjusted by calling CyFlash_SetWaitCycles()
 739          *  with an appropriate parameter. It can be optionally called if the CPU clock
 740          *  frequency is lowered in order to improve the CPU performance.
 741          *  See CyFlash_SetWaitCycles() description for more information.
 742          *
 743          *******************************************************************************/
 744          void CyMasterClk_SetSource(uint8 source) 
 745          {
 746   1          CY_LIB_CLKDIST_MSTR1_REG = (CY_LIB_CLKDIST_MSTR1_REG & MASTER_CLK_SRC_CLEAR) |
 747   1                                      (source & ((uint8)(~MASTER_CLK_SRC_CLEAR)));
 748   1      }
 749          
 750          
 751          /*******************************************************************************
 752          * Function Name: CyMasterClk_SetDivider
 753          ********************************************************************************
 754          *
 755          * Summary:
 756          *  Sets the divider value used to generate Master Clock.
 757          *
 758          * Parameters:
 759          *  uint8 divider:
 760          *   The valid range is [0-255]. The clock will be divided by this value + 1.
 761          *   For example to divide this parameter by two should be set to 1.
 762          *
 763          * Return:
 764          *  None
 765          *
 766          * Side Effects:
 767          *  If this function execution resulted in the CPU clock frequency increasing,
 768          *  then the number of clock cycles the cache will wait before it samples data
 769          *  coming back from the Flash must be adjusted by calling CyFlash_SetWaitCycles()
 770          *  with an appropriate parameter. It can be optionally called if the CPU clock
 771          *  frequency is lowered in order to improve the CPU performance.
 772          *  See CyFlash_SetWaitCycles() description for more information.
 773          *
 774          *  When changing the Master or Bus clock divider value from div-by-n to div-by-1
 775          *  the first clock cycle output after the div-by-1 can be up to 4 ns shorter
 776          *  than the final/expected div-by-1 period.
 777          *
 778          *******************************************************************************/
 779          void CyMasterClk_SetDivider(uint8 divider) 
 780          {
 781   1          CY_LIB_CLKDIST_MSTR0_REG = divider;
 782   1      }
 783          
 784          
 785          /*******************************************************************************
 786          * Function Name: CyBusClk_Internal_SetDivider
 787          ********************************************************************************
 788          *
 789          * Summary:
 790          *  The function used by CyBusClk_SetDivider(). For internal use only.
 791          *
 792          * Parameters:
 793          *   divider: Valid range [0-65535].
 794          *   The clock will be divided by this value + 1.
 795          *   For example, to divide this parameter by two should be set to 1.
 796          *
 797          * Return:
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 14  

 798          *  None
 799          *
 800          *******************************************************************************/
 801          static void CyBusClk_Internal_SetDivider(uint16 divider)
 802          {
 803   1          /* Mask bits to enable shadow loads  */
 804   1          CY_LIB_CLKDIST_AMASK_REG &= CY_LIB_CLKDIST_AMASK_MASK;
 805   1          CY_LIB_CLKDIST_DMASK_REG  = CY_LIB_CLKDIST_DMASK_MASK;
 806   1      
 807   1          /* Enable mask bits to enable shadow loads */
 808   1          CY_LIB_CLKDIST_BCFG2_REG |= CY_LIB_CLKDIST_BCFG2_MASK;
 809   1      
 810   1          /* Update Shadow Divider Value Register with new divider */
 811   1          CY_LIB_CLKDIST_WRK_LSB_REG = LO8(divider);
 812   1          CY_LIB_CLKDIST_WRK_MSB_REG = HI8(divider);
 813   1      
 814   1      
 815   1          /***************************************************************************
 816   1          * Copy shadow value defined in Shadow Divider Value Register
 817   1          * (CY_LIB_CLKDIST_WRK_LSB_REG and CY_LIB_CLKDIST_WRK_MSB_REG) to all
 818   1          * dividers selected in Analog and Digital Clock Mask Registers
 819   1          * (CY_LIB_CLKDIST_AMASK_REG and CY_LIB_CLKDIST_DMASK_REG).
 820   1          ***************************************************************************/
 821   1          CY_LIB_CLKDIST_LD_REG |= CY_LIB_CLKDIST_LD_LOAD;
 822   1      }
 823          
 824          
 825          /*******************************************************************************
 826          * Function Name: CyBusClk_SetDivider
 827          ********************************************************************************
 828          *
 829          * Summary:
 830          *  Sets the divider value used to generate the Bus Clock.
 831          *
 832          * Parameters:
 833          *  divider: Valid range [0-65535]. The clock will be divided by this value + 1.
 834          *  For example, to divide this parameter by two should be set to 1.
 835          *
 836          * Return:
 837          *  None
 838          *
 839          * Side Effects:
 840          *  If this function execution resulted in the CPU clock frequency increasing,
 841          *  then the number of clock cycles the cache will wait before it samples data
 842          *  coming back from the Flash must be adjusted by calling CyFlash_SetWaitCycles()
 843          *  with an appropriate parameter. It can be optionally called if the CPU clock
 844          *  frequency is lowered in order to improve the CPU performance.
 845          *  See CyFlash_SetWaitCycles() description for more information.
 846          *
 847          *******************************************************************************/
 848          void CyBusClk_SetDivider(uint16 divider) 
 849          {
 850   1          uint8  masterClkDiv;
 851   1          uint16 busClkDiv;
 852   1          uint8 interruptState;
 853   1      
 854   1          interruptState = CyEnterCriticalSection();
 855   1      
 856   1          /* Work around to set bus clock divider value */
 857   1          busClkDiv = (uint16)((uint16)CY_LIB_CLKDIST_BCFG_MSB_REG << 8u);
 858   1          busClkDiv |= CY_LIB_CLKDIST_BCFG_LSB_REG;
 859   1      
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 15  

 860   1          if ((divider == 0u) || (busClkDiv == 0u))
 861   1          {
 862   2              /* Save away master clock divider value */
 863   2              masterClkDiv = CY_LIB_CLKDIST_MSTR0_REG;
 864   2      
 865   2              if (masterClkDiv < CY_LIB_CLKDIST_MASTERCLK_DIV)
 866   2              {
 867   3                  /* Set master clock divider to 7 */
 868   3                  CyMasterClk_SetDivider(CY_LIB_CLKDIST_MASTERCLK_DIV);
 869   3              }
 870   2      
 871   2              if (divider == 0u)
 872   2              {
 873   3                  /* Set SSS bit and divider register desired value */
 874   3                  CY_LIB_CLKDIST_BCFG2_REG |= CY_LIB_CLKDIST_BCFG2_SSS;
 875   3                  CyBusClk_Internal_SetDivider(divider);
 876   3              }
 877   2              else
 878   2              {
 879   3                  CyBusClk_Internal_SetDivider(divider);
 880   3                  CY_LIB_CLKDIST_BCFG2_REG &= ((uint8)(~CY_LIB_CLKDIST_BCFG2_SSS));
 881   3              }
 882   2      
 883   2              /* Restore master clock */
 884   2              CyMasterClk_SetDivider(masterClkDiv);
 885   2          }
 886   1          else
 887   1          {
 888   2              CyBusClk_Internal_SetDivider(divider);
 889   2          }
 890   1      
 891   1          CyExitCriticalSection(interruptState);
 892   1      }
 893          
 894          
 895          #if(CY_PSOC3)
 896          
 897              /*******************************************************************************
 898              * Function Name: CyCpuClk_SetDivider
 899              ********************************************************************************
 900              *
 901              * Summary:
 902              *  Sets the divider value used to generate the CPU Clock. Only applicable for
 903              *  PSoC 3 parts.
 904              *
 905              * Parameters:
 906              *  divider: Valid range [0-15]. The clock will be divided by this value + 1.
 907              *  For example, to divide this parameter by two should be set to 1.
 908              *
 909              * Return:
 910              *  None
 911              *
 912              * Side Effects:
 913              *  If this function execution resulted in the CPU clock frequency increasing,
 914          *  then the number of clock cycles the cache will wait before it samples data
 915          *  coming back from the Flash must be adjusted by calling CyFlash_SetWaitCycles()
 916          *  with an appropriate parameter. It can be optionally called if the CPU clock
 917          *  frequency is lowered in order to improve the CPU performance.
 918              *  See CyFlash_SetWaitCycles() description for more information.
 919              *
 920              *******************************************************************************/
 921              void CyCpuClk_SetDivider(uint8 divider) 
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 16  

 922              {
 923   1                  CY_LIB_CLKDIST_MSTR1_REG = (CY_LIB_CLKDIST_MSTR1_REG & CY_LIB_CLKDIST_MSTR1_DIV_MASK) |
 924   1                                      ((uint8)(divider << CY_LIB_CLKDIST_DIV_POSITION));
 925   1          }
 926          
 927          #endif /* (CY_PSOC3) */
 928          
 929          
 930          /*******************************************************************************
 931          * Function Name: CyUsbClk_SetSource
 932          ********************************************************************************
 933          *
 934          * Summary:
 935          *  Sets the source of the USB clock.
 936          *
 937          * Parameters:
 938          *  source: One of the four available USB clock sources
 939          *    CY_LIB_USB_CLK_IMO2X     - IMO 2x
 940          *    CY_LIB_USB_CLK_IMO       - IMO
 941          *    CY_LIB_USB_CLK_PLL       - PLL
 942          *    CY_LIB_USB_CLK_DSI       - DSI
 943          *
 944          * Return:
 945          *  None
 946          *
 947          *******************************************************************************/
 948          void CyUsbClk_SetSource(uint8 source) 
 949          {
 950   1          CY_LIB_CLKDIST_UCFG_REG = (CY_LIB_CLKDIST_UCFG_REG & ((uint8)(~CY_LIB_CLKDIST_UCFG_SRC_SEL_MASK))) |
 951   1                              (CY_LIB_CLKDIST_UCFG_SRC_SEL_MASK & source);
 952   1      }
 953          
 954          
 955          /*******************************************************************************
 956          * Function Name: CyILO_Start1K
 957          ********************************************************************************
 958          *
 959          * Summary:
 960          *  Enables the ILO 1 KHz oscillator.
 961          *
 962          *  Note The ILO 1 KHz oscillator is always enabled by default, regardless of the
 963          *  selection in the Clock Editor. Therefore, this API is only needed if the
 964          *  oscillator was turned off manually.
 965          *
 966          * Parameters:
 967          *  None
 968          *
 969          * Return:
 970          *  None
 971          *
 972          *******************************************************************************/
 973          void CyILO_Start1K(void) 
 974          {
 975   1          /* Set bit 1 of ILO RS */
 976   1          CY_LIB_SLOWCLK_ILO_CR0_REG |= CY_LIB_SLOWCLK_ILO_CR0_EN_1KHZ;
 977   1      }
 978          
 979          
 980          /*******************************************************************************
 981          * Function Name: CyILO_Stop1K
 982          ********************************************************************************
 983          *
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 17  

 984          * Summary:
 985          *  Disables the ILO 1 KHz oscillator.
 986          *
 987          *  Note The ILO 1 KHz oscillator must be enabled if the Sleep or Hibernate low power
 988          *  mode APIs are expected to be used. For more information, refer to the Power
 989          *  Management section of this document.
 990          *
 991          * Parameters:
 992          *  None
 993          *
 994          * Return:
 995          *  None
 996          *
 997          * Side Effects:
 998          *  PSoC5: Stopping the ILO 1 kHz could break the active WDT functionality.
 999          *
1000          *******************************************************************************/
1001          void CyILO_Stop1K(void) 
1002          {
1003   1          /* Clear bit 1 of ILO RS */
1004   1          CY_LIB_SLOWCLK_ILO_CR0_REG &= ((uint8)(~CY_LIB_SLOWCLK_ILO_CR0_EN_1KHZ));
1005   1      }
1006          
1007          
1008          /*******************************************************************************
1009          * Function Name: CyILO_Start100K
1010          ********************************************************************************
1011          *
1012          * Summary:
1013          *  Enables the ILO 100 KHz oscillator.
1014          *
1015          * Parameters:
1016          *  None
1017          *
1018          * Return:
1019          *  None
1020          *
1021          *******************************************************************************/
1022          void CyILO_Start100K(void) 
1023          {
1024   1          CY_LIB_SLOWCLK_ILO_CR0_REG |= CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ;
1025   1      }
1026          
1027          
1028          /*******************************************************************************
1029          * Function Name: CyILO_Stop100K
1030          ********************************************************************************
1031          *
1032          * Summary:
1033          *  Disables the ILO 100 KHz oscillator.
1034          *
1035          * Parameters:
1036          *  None
1037          *
1038          * Return:
1039          *  None
1040          *
1041          *******************************************************************************/
1042          void CyILO_Stop100K(void) 
1043          {
1044   1          CY_LIB_SLOWCLK_ILO_CR0_REG &= ((uint8)(~CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ));
1045   1      }
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 18  

1046          
1047          
1048          /*******************************************************************************
1049          * Function Name: CyILO_Enable33K
1050          ********************************************************************************
1051          *
1052          * Summary:
1053          *  Enables the ILO 33 KHz divider.
1054          *
1055          *  Note that the 33 KHz clock is generated from the 100 KHz oscillator,
1056          *  so it must also be running in order to generate the 33 KHz output.
1057          *
1058          * Parameters:
1059          *  None
1060          *
1061          * Return:
1062          *  None
1063          *
1064          *******************************************************************************/
1065          void CyILO_Enable33K(void) 
1066          {
1067   1          /* Set bit 5 of ILO RS */
1068   1          CY_LIB_SLOWCLK_ILO_CR0_REG |= CY_LIB_SLOWCLK_ILO_CR0_EN_33KHZ;
1069   1      }
1070          
1071          
1072          /*******************************************************************************
1073          * Function Name: CyILO_Disable33K
1074          ********************************************************************************
1075          *
1076          * Summary:
1077          *  Disables the ILO 33 KHz divider.
1078          *
1079          *  Note that the 33 KHz clock is generated from the 100 KHz oscillator, but this
1080          *  API does not disable the 100 KHz clock.
1081          *
1082          * Parameters:
1083          *  None
1084          *
1085          * Return:
1086          *  None
1087          *
1088          *******************************************************************************/
1089          void CyILO_Disable33K(void) 
1090          {
1091   1          CY_LIB_SLOWCLK_ILO_CR0_REG &= ((uint8)(~CY_LIB_SLOWCLK_ILO_CR0_EN_33KHZ));
1092   1      }
1093          
1094          
1095          /*******************************************************************************
1096          * Function Name: CyILO_SetSource
1097          ********************************************************************************
1098          *
1099          * Summary:
1100          *  Sets the source of the clock output from the ILO block.
1101          *
1102          * Parameters:
1103          *  source: One of the three available ILO output sources
1104          *       Value        Define                Source
1105          *       0            CY_ILO_SOURCE_100K    ILO 100 KHz
1106          *       1            CY_ILO_SOURCE_33K     ILO 33 KHz
1107          *       2            CY_ILO_SOURCE_1K      ILO 1 KHz
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 19  

1108          *
1109          * Return:
1110          *  None
1111          *
1112          *******************************************************************************/
1113          void CyILO_SetSource(uint8 source) 
1114          {
1115   1          CY_LIB_CLKDIST_CR_REG = (CY_LIB_CLKDIST_CR_REG & CY_ILO_SOURCE_BITS_CLEAR) |
1116   1                          (((uint8) (source << 2u)) & ((uint8)(~CY_ILO_SOURCE_BITS_CLEAR)));
1117   1      }
1118          
1119          
1120          /*******************************************************************************
1121          * Function Name: CyILO_SetPowerMode
1122          ********************************************************************************
1123          *
1124          * Summary:
1125          *  Sets the power mode used by the ILO during power down. Allows for lower power
1126          *  down power usage resulting in a slower startup time.
1127          *
1128          * Parameters:
1129          *  uint8 mode
1130          *   CY_ILO_FAST_START - Faster start-up, internal bias left on when powered down
1131          *   CY_ILO_SLOW_START - Slower start-up, internal bias off when powered down
1132          *
1133          * Return:
1134          *   Prevous power mode state.
1135          *
1136          *******************************************************************************/
1137          uint8 CyILO_SetPowerMode(uint8 mode) 
1138          {
1139   1          uint8 state;
1140   1      
1141   1          /* Get current state. */
1142   1          state = CY_LIB_SLOWCLK_ILO_CR0_REG;
1143   1      
1144   1          /* Set the oscillator power mode. */
1145   1          if(mode != CY_ILO_FAST_START)
1146   1          {
1147   2              CY_LIB_SLOWCLK_ILO_CR0_REG = (state | CY_ILO_CONTROL_PD_MODE);
1148   2          }
1149   1          else
1150   1          {
1151   2              CY_LIB_SLOWCLK_ILO_CR0_REG = (state & ((uint8)(~CY_ILO_CONTROL_PD_MODE)));
1152   2          }
1153   1      
1154   1          /* Return old mode. */
1155   1          return ((state & CY_ILO_CONTROL_PD_MODE) >> CY_ILO_CONTROL_PD_POSITION);
1156   1      }
1157          
1158          
1159          /*******************************************************************************
1160          * Function Name: CyXTAL_32KHZ_Start
1161          ********************************************************************************
1162          *
1163          * Summary:
1164          *  Enables the 32 KHz Crystal Oscillator.
1165          *
1166          * Parameters:
1167          *  None
1168          *
1169          * Return:
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 20  

1170          *  None
1171          *
1172          *******************************************************************************/
1173          void CyXTAL_32KHZ_Start(void) 
1174          {
1175   1          volatile uint16 i;
1176   1      
1177   1          CY_CLK_XTAL32_TST_REG = CY_CLK_XTAL32_TST_DEFAULT;
1178   1          CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_STARTUP;
1179   1          CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1180   1                                      CY_CLK_XTAL32_CFG_LP_DEFAULT;
1181   1      
1182   1          #if(CY_PSOC3)
1183   1              CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_PDBEN;
1184   1          #endif  /* (CY_PSOC3) */
1185   1      
1186   1          /* Enable operation of 32K Crystal Oscillator */
1187   1          CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_EN;
1188   1      
1189   1          for (i = 1000u; i > 0u; i--)
1190   1          {
1191   2              if(0u != (CyXTAL_32KHZ_ReadStatus() & CY_XTAL32K_ANA_STAT))
1192   2              {
1193   3                  /* Ready - switch to high power mode */
1194   3                  (void) CyXTAL_32KHZ_SetPowerMode(0u);
1195   3      
1196   3                  break;
1197   3              }
1198   2              CyDelayUs(1u);
1199   2          }
1200   1      }
1201          
1202          
1203          /*******************************************************************************
1204          * Function Name: CyXTAL_32KHZ_Stop
1205          ********************************************************************************
1206          *
1207          * Summary:
1208          *  Disables the 32KHz Crystal Oscillator.
1209          *
1210          * Parameters:
1211          *  None
1212          *
1213          * Return:
1214          *  None
1215          *
1216          *******************************************************************************/
1217          void CyXTAL_32KHZ_Stop(void) 
1218          {
1219   1          CY_CLK_XTAL32_TST_REG  = CY_CLK_XTAL32_TST_DEFAULT;
1220   1          CY_CLK_XTAL32_TR_REG   = CY_CLK_XTAL32_TR_POWERDOWN;
1221   1          CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1222   1                                   CY_CLK_XTAL32_CFG_LP_DEFAULT;
1223   1          CY_CLK_XTAL32_CR_REG &= ((uint8)(~(CY_CLK_XTAL32_CR_EN | CY_CLK_XTAL32_CR_LPM)));
1224   1      
1225   1          #if(CY_PSOC3)
1226   1              CY_CLK_XTAL32_CR_REG &= ((uint8)(~CY_CLK_XTAL32_CR_PDBEN));
1227   1          #endif  /* (CY_PSOC3) */
1228   1      }
1229          
1230          
1231          /*******************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 21  

1232          * Function Name: CyXTAL_32KHZ_ReadStatus
1233          ********************************************************************************
1234          *
1235          * Summary:
1236          *  Returns status of the 32 KHz oscillator.
1237          *
1238          * Parameters:
1239          *  None
1240          *
1241          * Return:
1242          *  Value     Define                    Source
1243          *  20        CY_XTAL32K_ANA_STAT       Analog measurement
1244          *                                       1: Stable
1245          *                                       0: Not stable
1246          *
1247          *******************************************************************************/
1248          uint8 CyXTAL_32KHZ_ReadStatus(void) 
1249          {
1250   1          return(CY_CLK_XTAL32_CR_REG & CY_XTAL32K_ANA_STAT);
1251   1      }
1252          
1253          
1254          /*******************************************************************************
1255          * Function Name: CyXTAL_32KHZ_SetPowerMode
1256          ********************************************************************************
1257          *
1258          * Summary:
1259          *  Sets the power mode for the 32 KHz oscillator used during the sleep mode.
1260          *  Allows for lower power during sleep when there are fewer sources of noise.
1261          *  During the active mode the oscillator is always run in the high power mode.
1262          *
1263          * Parameters:
1264          *  uint8 mode
1265          *       0: High power mode
1266          *       1: Low power mode during sleep
1267          *
1268          * Return:
1269          *  Previous power mode.
1270          *
1271          *******************************************************************************/
1272          uint8 CyXTAL_32KHZ_SetPowerMode(uint8 mode) 
1273          {
1274   1          uint8 state = (0u != (CY_CLK_XTAL32_CR_REG & CY_CLK_XTAL32_CR_LPM)) ? 1u : 0u;
1275   1      
1276   1          CY_CLK_XTAL32_TST_REG = CY_CLK_XTAL32_TST_DEFAULT;
1277   1      
1278   1          if(1u == mode)
1279   1          {
1280   2              /* Low power mode during Sleep */
1281   2              CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_LOW_POWER;
1282   2              CyDelayUs(10u);
1283   2              CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1284   2                                      CY_CLK_XTAL32_CFG_LP_LOWPOWER;
1285   2              CyDelayUs(20u);
1286   2              CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_LPM;
1287   2          }
1288   1          else
1289   1          {
1290   2              /* High power mode */
1291   2              CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_HIGH_POWER;
1292   2              CyDelayUs(10u);
1293   2              CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 22  

1294   2                                      CY_CLK_XTAL32_CFG_LP_DEFAULT;
1295   2              CY_CLK_XTAL32_CR_REG &= ((uint8)(~CY_CLK_XTAL32_CR_LPM));
1296   2          }
1297   1      
1298   1          return(state);
1299   1      }
1300          
1301          
1302          /*******************************************************************************
1303          * Function Name: CyXTAL_Start
1304          ********************************************************************************
1305          *
1306          * Summary:
1307          *  Enables the megahertz crystal.
1308          *
1309          *  PSoC 3:
1310          *  Waits until the XERR bit is low (no error) for a millisecond or until the
1311          *  number of milliseconds specified by the wait parameter has expired.
1312          *
1313          * Parameters:
1314          *   wait: Valid range [0-255].
1315          *   This is the timeout value in milliseconds.
1316          *   The appropriate value is crystal specific.
1317          *
1318          * Return:
1319          *   CYRET_SUCCESS - Completed successfully
1320          *   CYRET_TIMEOUT - Timeout occurred without detecting a low value on XERR.
1321          *
1322          * Side Effects and Restrictions:
1323          *  If wait is enabled (non-zero wait). Uses the Fast Timewheel to time the wait.
1324          *  Any other use of the Fast Timewheel (FTW) will be stopped during the period
1325          *  of this function and then restored.
1326          *
1327          *  Uses the 100KHz ILO.  If not enabled, this function will enable the 100KHz
1328          *  ILO for the period of this function. No changes to the setup of the ILO,
1329          *  Fast Timewheel, Central Timewheel or Once Per Second interrupt may be made
1330          *  by interrupt routines during the period of this function.
1331          *
1332          *  The current operation of the ILO, Central Timewheel and Once Per Second
1333          *  interrupt are maintained during the operation of this function provided the
1334          *  reading of the Power Manager Interrupt Status Register is only done using the
1335          *  CyPmReadStatus() function.
1336          *
1337          *******************************************************************************/
1338          cystatus CyXTAL_Start(uint8 wait) 
1339          {
1340   1          cystatus status = CYRET_SUCCESS;
1341   1          volatile uint8  timeout = wait;
1342   1          volatile uint8 count;
1343   1          uint8 iloEnableState;
1344   1          uint8 pmTwCfg0Tmp;
1345   1          uint8 pmTwCfg2Tmp;
1346   1      
1347   1      
1348   1          /* Enables MHz crystal oscillator circuit  */
1349   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_ENABLE;
1350   1      
1351   1      
1352   1          if(wait > 0u)
1353   1          {
1354   2              /* Save 100 KHz ILO, FTW interval, enable and interrupt enable */
1355   2              iloEnableState = CY_LIB_SLOWCLK_ILO_CR0_REG;
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 23  

1356   2              pmTwCfg0Tmp = CY_LIB_PM_TW_CFG0_REG;
1357   2              pmTwCfg2Tmp = CY_LIB_PM_TW_CFG2_REG;
1358   2      
1359   2              /* Set 250 us interval */
1360   2              CyPmFtwSetInterval(CY_CLK_XMHZ_FTW_INTERVAL);
1361   2              status = CYRET_TIMEOUT;
1362   2      
1363   2      
1364   2              for( ; timeout > 0u; timeout--)
1365   2              {
1366   3                  /* Read XERR bit to clear it */
1367   3                  (void) CY_CLK_XMHZ_CSR_REG;
1368   3      
1369   3                  /* Wait for 1 millisecond - 4 x 250 us */
1370   3                  for(count = 4u; count > 0u; count--)
1371   3                  {
1372   4                      while(0u == (CY_PM_FTW_INT & CyPmReadStatus(CY_PM_FTW_INT)))
1373   4                      {
1374   5                          /* Wait for FTW interrupt event */
1375   5                      }
1376   4                  }
1377   3      
1378   3      
1379   3                  /*******************************************************************
1380   3                  * High output indicates an oscillator failure.
1381   3                  * Only can be used after a start-up interval (1 ms) is completed.
1382   3                  *******************************************************************/
1383   3                  if(0u == (CY_CLK_XMHZ_CSR_REG & CY_CLK_XMHZ_CSR_XERR))
1384   3                  {
1385   4                      status = CYRET_SUCCESS;
1386   4                      break;
1387   4                  }
1388   3              }
1389   2      
1390   2      
1391   2              /* Restore 100 KHz ILO, FTW interval, enable and interrupt enable */
1392   2              if(0u == (iloEnableState & CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ))
1393   2              {
1394   3                  CyILO_Stop100K();
1395   3              }
1396   2              CY_LIB_PM_TW_CFG0_REG = pmTwCfg0Tmp;
1397   2              CY_LIB_PM_TW_CFG2_REG = pmTwCfg2Tmp;
1398   2          }
1399   1      
1400   1          return(status);
1401   1      }
1402          
1403          
1404          /*******************************************************************************
1405          * Function Name: CyXTAL_Stop
1406          ********************************************************************************
1407          *
1408          * Summary:
1409          *  Disables the megahertz crystal oscillator.
1410          *
1411          * Parameters:
1412          *  None
1413          *
1414          * Return:
1415          *  None
1416          *
1417          *******************************************************************************/
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 24  

1418          void CyXTAL_Stop(void) 
1419          {
1420   1          /* Disable oscillator. */
1421   1          FASTCLK_XMHZ_CSR &= ((uint8)(~XMHZ_CONTROL_ENABLE));
1422   1      }
1423          
1424          
1425          /*******************************************************************************
1426          * Function Name: CyXTAL_EnableErrStatus
1427          ********************************************************************************
1428          *
1429          * Summary:
1430          *  Enables the generation of the XERR status bit for the megahertz crystal.
1431          *  This function is not available for PSoC5.
1432          *
1433          * Parameters:
1434          *  None
1435          *
1436          * Return:
1437          *  None
1438          *
1439          *******************************************************************************/
1440          void CyXTAL_EnableErrStatus(void) 
1441          {
1442   1          /* If oscillator has insufficient amplitude, XERR bit will be high. */
1443   1          CY_CLK_XMHZ_CSR_REG &= ((uint8)(~CY_CLK_XMHZ_CSR_XFB));
1444   1      }
1445          
1446          
1447          /*******************************************************************************
1448          * Function Name: CyXTAL_DisableErrStatus
1449          ********************************************************************************
1450          *
1451          * Summary:
1452          *  Disables the generation of the XERR status bit for the megahertz crystal.
1453          *  This function is not available for PSoC5.
1454          *
1455          * Parameters:
1456          *  None
1457          *
1458          * Return:
1459          *  None
1460          *
1461          *******************************************************************************/
1462          void CyXTAL_DisableErrStatus(void) 
1463          {
1464   1          /* If oscillator has insufficient amplitude, XERR bit will be high. */
1465   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_XFB;
1466   1      }
1467          
1468          
1469          /*******************************************************************************
1470          * Function Name: CyXTAL_ReadStatus
1471          ********************************************************************************
1472          *
1473          * Summary:
1474          *  Reads the XERR status bit for the megahertz crystal. This status bit is a
1475          *  sticky, clear on read. This function is not available for PSoC5.
1476          *
1477          * Parameters:
1478          *  None
1479          *
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 25  

1480          * Return:
1481          *   Status
1482          *    0: No error
1483          *    1: Error
1484          *
1485          *******************************************************************************/
1486          uint8 CyXTAL_ReadStatus(void) 
1487          {
1488   1          /***************************************************************************
1489   1          * High output indicates an oscillator failure. Only use this after a start-up
1490   1          * interval is completed. This can be used for the status and failure recovery.
1491   1          ***************************************************************************/
1492   1          return((0u != (CY_CLK_XMHZ_CSR_REG & CY_CLK_XMHZ_CSR_XERR)) ? 1u : 0u);
1493   1      }
1494          
1495          
1496          /*******************************************************************************
1497          * Function Name: CyXTAL_EnableFaultRecovery
1498          ********************************************************************************
1499          *
1500          * Summary:
1501          *  Enables the fault recovery circuit which will switch to the IMO in the case
1502          *  of a fault in the megahertz crystal circuit. The crystal must be up and
1503          *  running with the XERR bit at 0, before calling this function to prevent
1504          *  an immediate fault switchover. This function is not available for PSoC5.
1505          *
1506          * Parameters:
1507          *  None
1508          *
1509          * Return:
1510          *  None
1511          *
1512          *******************************************************************************/
1513          void CyXTAL_EnableFaultRecovery(void) 
1514          {
1515   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_XPROT;
1516   1      }
1517          
1518          
1519          /*******************************************************************************
1520          * Function Name: CyXTAL_DisableFaultRecovery
1521          ********************************************************************************
1522          *
1523          * Summary:
1524          *  Disables the fault recovery circuit which will switch to the IMO in the case
1525          *  of a fault in the megahertz crystal circuit. This function is not available
1526          *  for PSoC5.
1527          *
1528          * Parameters:
1529          *  None
1530          *
1531          * Return:
1532          *  None
1533          *
1534          *******************************************************************************/
1535          void CyXTAL_DisableFaultRecovery(void) 
1536          {
1537   1          CY_CLK_XMHZ_CSR_REG &= ((uint8)(~CY_CLK_XMHZ_CSR_XPROT));
1538   1      }
1539          
1540          
1541          /*******************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 26  

1542          * Function Name: CyXTAL_SetStartup
1543          ********************************************************************************
1544          *
1545          * Summary:
1546          *  Sets the startup settings for the crystal. The logic model outputs a frequency
1547          *  (setting + 4) MHz when enabled.
1548          *
1549          *  This is artificial as the actual frequency is determined by an attached
1550          *  external crystal.
1551          *
1552          * Parameters:
1553          *  setting: Valid range [0-31].
1554          *   The value is dependent on the frequency and quality of the crystal being used.
1555          *   Refer to the device TRM and datasheet for more information.
1556          *
1557          * Return:
1558          *  None
1559          *
1560          *******************************************************************************/
1561          void CyXTAL_SetStartup(uint8 setting) 
1562          {
1563   1          CY_CLK_XMHZ_CFG0_REG = (CY_CLK_XMHZ_CFG0_REG & ((uint8)(~CY_CLK_XMHZ_CFG0_XCFG_MASK))) |
1564   1                                 (setting & CY_CLK_XMHZ_CFG0_XCFG_MASK);
1565   1      }
1566          
1567          
1568          
1569          /*******************************************************************************
1570          * Function Name: CyXTAL_SetFbVoltage
1571          ********************************************************************************
1572          *
1573          * Summary:
1574          *  Sets the feedback reference voltage to use for the crystal circuit.
1575          *  This function is only available for PSoC3 and PSoC 5LP.
1576          *
1577          * Parameters:
1578          *  setting: Valid range [0-15].
1579          *  Refer to the device TRM and datasheet for more information.
1580          *
1581          * Return:
1582          *  None
1583          *
1584          *******************************************************************************/
1585          void CyXTAL_SetFbVoltage(uint8 setting) 
1586          {
1587   1          CY_CLK_XMHZ_CFG1_REG = ((CY_CLK_XMHZ_CFG1_REG & ((uint8)(~CY_CLK_XMHZ_CFG1_VREF_FB_MASK))) |
1588   1                                  (setting & CY_CLK_XMHZ_CFG1_VREF_FB_MASK));
1589   1      }
1590          
1591          
1592          /*******************************************************************************
1593          * Function Name: CyXTAL_SetWdVoltage
1594          ********************************************************************************
1595          *
1596          * Summary:
1597          *  Sets the reference voltage used by the watchdog to detect a failure in the
1598          *  crystal circuit. This function is only available for PSoC3 and PSoC 5LP.
1599          *
1600          * Parameters:
1601          *  setting: Valid range [0-7].
1602          *  Refer to the device TRM and datasheet for more information.
1603          *
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 27  

1604          * Return:
1605          *  None
1606          *
1607          *******************************************************************************/
1608          void CyXTAL_SetWdVoltage(uint8 setting) 
1609          {
1610   1          CY_CLK_XMHZ_CFG1_REG = ((CY_CLK_XMHZ_CFG1_REG & ((uint8)(~CY_CLK_XMHZ_CFG1_VREF_WD_MASK))) |
1611   1                                  (((uint8)(setting << 4u)) & CY_CLK_XMHZ_CFG1_VREF_WD_MASK));
1612   1      }
1613          
1614          
1615          /*******************************************************************************
1616          * Function Name: CyHalt
1617          ********************************************************************************
1618          *
1619          * Summary:
1620          *  Halts the CPU.
1621          *
1622          * Parameters:
1623          *  uint8 reason: Value to be used during debugging.
1624          *
1625          * Return:
1626          *  None
1627          *
1628          *******************************************************************************/
1629          void CyHalt(uint8 reason) CYREENTRANT
1630          {
1631   1          if(0u != reason)
1632   1          {
1633   2              /* To remove unreferenced local variable warning */
1634   2          }
1635   1      
1636   1          #if defined (__ARMCC_VERSION)
                      __breakpoint(0x0);
                  #elif defined(__GNUC__) || defined (__ICCARM__)
                      __asm("    bkpt    1");
                  #elif defined(__C51__)
1641   1              CYDEV_HALT_CPU;
1642   1          #endif  /* (__ARMCC_VERSION) */
1643   1      }
1644          
1645          
1646          /*******************************************************************************
1647          * Function Name: CySoftwareReset
1648          ********************************************************************************
1649          *
1650          * Summary:
1651          *  Forces a device software reset.
1652          *
1653          * Parameters:
1654          *  None
1655          *
1656          * Return:
1657          *  None
1658          *
1659          *******************************************************************************/
1660          void CySoftwareReset(void) 
1661          {
1662   1          CY_LIB_RESET_CR2_REG |= CY_LIB_RESET_CR2_RESET;
1663   1      }
1664          
1665          
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 28  

1666          /*******************************************************************************
1667          * Function Name: CyDelay
1668          ********************************************************************************
1669          *
1670          * Summary:
1671          *  Blocks for milliseconds.
1672          *
1673          *  Note:
1674          *  CyDelay has been implemented with the instruction cache assumed enabled. When
1675          *  the instruction cache is disabled on PSoC5, CyDelay will be two times larger.
1676          *  For example, with instruction cache disabled CyDelay(100) would result in
1677          *  about 200 ms delay instead of 100 ms.
1678          *
1679          * Parameters:
1680          *  milliseconds: number of milliseconds to delay.
1681          *
1682          * Return:
1683          *   None
1684          *
1685          *******************************************************************************/
1686          void CyDelay(uint32 milliseconds) CYREENTRANT
1687          {
1688   1          while (milliseconds > 32768u)
1689   1          {
1690   2              /***********************************************************************
1691   2              * This loop prevents overflow.At 100MHz, milliseconds * delay_freq_khz
1692   2              * overflows at about 42 seconds.
1693   2              ***********************************************************************/
1694   2              CyDelayCycles(cydelay_32k_ms);
1695   2              milliseconds = ((uint32)(milliseconds - 32768u));
1696   2          }
1697   1      
1698   1          CyDelayCycles(milliseconds * cydelay_freq_khz);
1699   1      }
1700          
1701          
1702          #if(!CY_PSOC3)
              
                  /* For PSoC3 devices function is defined in CyBootAsmKeil.a51 file */
              
                  /*******************************************************************************
                  * Function Name: CyDelayUs
                  ********************************************************************************
                  *
                  * Summary:
                  *  Blocks for microseconds.
                  *
                  *  Note:
                  *   CyDelay has been implemented with the instruction cache assumed enabled.
                  *   When instruction cache is disabled on PSoC5, CyDelayUs will be two times
                  *   larger. Ex: With instruction cache disabled CyDelayUs(100) would result
                  *   in about 200us delay instead of 100us.
                  *
                  * Parameters:
                  *  uint16 microseconds: number of microseconds to delay.
                  *
                  * Return:
                  *  None
                  *
                  * Side Effects:
                  *  CyDelayUS has been implemented with the instruction cache assumed enabled.
                  *  When the instruction cache is disabled on PSoC 5, CyDelayUs will be two times
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 29  

                  *  larger. For example, with the instruction cache disabled CyDelayUs(100) would
                  *  result in about 200 us delay instead of 100 us.
                  *
                  *  If the bus clock frequency is a small non-integer number, the actual delay
                  *  can be up to twice as long as the nominal value. The actual delay cannot be
                  *  shorter than the nominal one.
                  *******************************************************************************/
                  void CyDelayUs(uint16 microseconds) CYREENTRANT
                  {
                      CyDelayCycles((uint32)microseconds * cydelay_freq_mhz);
                  }
              
              #endif  /* (!CY_PSOC3) */
1741          
1742          
1743          /*******************************************************************************
1744          * Function Name: CyDelayFreq
1745          ********************************************************************************
1746          *
1747          * Summary:
1748          *  Sets the clock frequency for CyDelay.
1749          *
1750          * Parameters:
1751          *  freq: The frequency of the bus clock in Hertz.
1752          *
1753          * Return:
1754          *  None
1755          *
1756          *******************************************************************************/
1757          void CyDelayFreq(uint32 freq) CYREENTRANT
1758          {
1759   1          if (freq != 0u)
1760   1          {
1761   2              cydelay_freq_hz = freq;
1762   2          }
1763   1          else
1764   1          {
1765   2              cydelay_freq_hz = BCLK__BUS_CLK__HZ;
1766   2          }
1767   1      
1768   1          cydelay_freq_mhz = (uint8)((cydelay_freq_hz + 999999u) / 1000000u);
1769   1          cydelay_freq_khz = (cydelay_freq_hz + 999u) / 1000u;
1770   1          cydelay_32k_ms   = 32768u * cydelay_freq_khz;
1771   1      }
1772          
1773          
1774          /*******************************************************************************
1775          * Function Name: CyWdtStart
1776          ********************************************************************************
1777          *
1778          * Summary:
1779          *  Enables the watchdog timer.
1780          *
1781          *  The timer is configured for the specified count interval, the central
1782          *  timewheel is cleared, the setting for the low power mode is configured and the
1783          *  watchdog timer is enabled.
1784          *
1785          *  Once enabled the watchdog cannot be disabled. The watchdog counts each time
1786          *  the Central Time Wheel (CTW) reaches the period specified. The watchdog must
1787          *  be cleared using the CyWdtClear() function before three ticks of the watchdog
1788          *  timer occur. The CTW is free running, so this will occur after between 2 and
1789          *  3 timer periods elapse.
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 30  

1790          *
1791          *  PSoC5: The watchdog timer should not be used during sleep modes. Since the
1792          *  WDT cannot be disabled after it is enabled, the WDT timeout period can be
1793          *  set to be greater than the sleep wakeup period, then feed the dog on each
1794          *  wakeup from Sleep.
1795          *
1796          * Parameters:
1797          *  ticks: One of the four available timer periods. Once WDT enabled, the
1798             interval cannot be changed.
1799          *         CYWDT_2_TICKS     -     4 - 6     ms
1800          *         CYWDT_16_TICKS    -    32 - 48    ms
1801          *         CYWDT_128_TICKS   -   256 - 384   ms
1802          *         CYWDT_1024_TICKS  - 2.048 - 3.072 s
1803          *
1804          *  lpMode: Low power mode configuration. This parameter is ignored for PSoC 5.
1805          *          The WDT always acts as if CYWDT_LPMODE_NOCHANGE is passed.
1806          *
1807          *          CYWDT_LPMODE_NOCHANGE - No Change
1808          *          CYWDT_LPMODE_MAXINTER - Switch to longest timer mode during low power
1809          *                                 mode
1810          *          CYWDT_LPMODE_DISABLED - Disable WDT during low power mode
1811          *
1812          * Return:
1813          *  None
1814          *
1815          * Side Effects:
1816          *  PSoC5: The ILO 1 KHz must be enabled for proper WDT operation. Stopping the
1817          *  ILO 1 kHz could break the active WDT functionality.
1818          *
1819          *******************************************************************************/
1820          void CyWdtStart(uint8 ticks, uint8 lpMode) 
1821          {
1822   1          /* Set WDT interval */
1823   1          CY_WDT_CFG_REG = (CY_WDT_CFG_REG & ((uint8)(~CY_WDT_CFG_INTERVAL_MASK))) | (ticks & CY_WDT_CFG_INTERVA
             -L_MASK);
1824   1      
1825   1          /* Reset CTW to ensure that first watchdog period is full */
1826   1          CY_WDT_CFG_REG |= CY_WDT_CFG_CTW_RESET;
1827   1          CY_WDT_CFG_REG &= ((uint8)(~CY_WDT_CFG_CTW_RESET));
1828   1      
1829   1          /* Setting low power mode */
1830   1          CY_WDT_CFG_REG = (((uint8)(lpMode << CY_WDT_CFG_LPMODE_SHIFT)) & CY_WDT_CFG_LPMODE_MASK) |
1831   1                             (CY_WDT_CFG_REG & ((uint8)(~CY_WDT_CFG_LPMODE_MASK)));
1832   1      
1833   1          /* Enables watchdog reset */
1834   1          CY_WDT_CFG_REG |= CY_WDT_CFG_WDR_EN;
1835   1      }
1836          
1837          
1838          /*******************************************************************************
1839          * Function Name: CyWdtClear
1840          ********************************************************************************
1841          *
1842          * Summary:
1843          *  Clears (feeds) the watchdog timer.
1844          *
1845          * Parameters:
1846          *  None
1847          *
1848          * Return:
1849          *  None
1850          *
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 31  

1851          *******************************************************************************/
1852          void CyWdtClear(void) 
1853          {
1854   1          CY_WDT_CR_REG = CY_WDT_CR_FEED;
1855   1      }
1856          
1857          
1858          
1859          /*******************************************************************************
1860          * Function Name: CyVdLvDigitEnable
1861          ********************************************************************************
1862          *
1863          * Summary:
1864          *  Enables the digital low voltage monitors to generate interrupt on Vddd
1865          *   archives specified threshold and optionally resets the device.
1866          *
1867          * Parameters:
1868          *  reset: The option to reset the device at a specified Vddd threshold:
1869          *           0 - Device is not reset.
1870          *           1 - Device is reset.
1871          *
1872          *  threshold: Sets the trip level for the voltage monitor.
1873          *  Values from 1.70 V to 5.45 V are accepted with an interval  of approximately
1874          *  250 mV.
1875          *
1876          * Return:
1877          *  None
1878          *
1879          *******************************************************************************/
1880          void CyVdLvDigitEnable(uint8 reset, uint8 threshold) 
1881          {
1882   1          *CY_INT_CLEAR_PTR = 0x01u;
1883   1      
1884   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESD_EN));
1885   1      
1886   1          CY_VD_LVI_TRIP_REG = (threshold & CY_VD_LVI_TRIP_LVID_MASK) |
1887   1                                  (CY_VD_LVI_TRIP_REG & ((uint8)(~CY_VD_LVI_TRIP_LVID_MASK)));
1888   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_LVID_EN;
1889   1      
1890   1          /* Timeout to eliminate glitches on LVI/HVI when enabling */
1891   1          CyDelayUs(1u);
1892   1      
1893   1          (void)CY_VD_PERSISTENT_STATUS_REG;
1894   1      
1895   1          if(0u != reset)
1896   1          {
1897   2              CY_VD_PRES_CONTROL_REG |= CY_VD_PRESD_EN;
1898   2          }
1899   1          else
1900   1          {
1901   2              CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESD_EN));
1902   2          }
1903   1      
1904   1          *CY_INT_CLR_PEND_PTR = 0x01u;
1905   1          *CY_INT_ENABLE_PTR   = 0x01u;
1906   1      }
1907          
1908          
1909          /*******************************************************************************
1910          * Function Name: CyVdLvAnalogEnable
1911          ********************************************************************************
1912          *
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 32  

1913          * Summary:
1914          *  Enables the analog low voltage monitors to generate interrupt on Vdda
1915          *   archives specified threshold and optionally resets the device.
1916          *
1917          * Parameters:
1918          *  reset: The option to reset the device at a specified Vdda threshold:
1919          *           0 - Device is not reset.
1920          *           1 - Device is reset.
1921          *
1922          *  threshold: Sets the trip level for the voltage monitor.
1923          *  Values from 1.70 V to 5.45 V are accepted with the approximately 250 mV
1924          *  interval.
1925          *
1926          * Return:
1927          *  None
1928          *
1929          *******************************************************************************/
1930          void CyVdLvAnalogEnable(uint8 reset, uint8 threshold) 
1931          {
1932   1          *CY_INT_CLEAR_PTR = 0x01u;
1933   1      
1934   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
1935   1      
1936   1          CY_VD_LVI_TRIP_REG = ((uint8)(threshold << 4u)) | (CY_VD_LVI_TRIP_REG & 0x0Fu);
1937   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_LVIA_EN;
1938   1      
1939   1          /* Timeout to eliminate glitches on LVI/HVI when enabling */
1940   1          CyDelayUs(1u);
1941   1      
1942   1          (void)CY_VD_PERSISTENT_STATUS_REG;
1943   1      
1944   1          if(0u != reset)
1945   1          {
1946   2              CY_VD_PRES_CONTROL_REG |= CY_VD_PRESA_EN;
1947   2          }
1948   1          else
1949   1          {
1950   2              CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
1951   2          }
1952   1      
1953   1          *CY_INT_CLR_PEND_PTR = 0x01u;
1954   1          *CY_INT_ENABLE_PTR   = 0x01u;
1955   1      }
1956          
1957          
1958          /*******************************************************************************
1959          * Function Name: CyVdLvDigitDisable
1960          ********************************************************************************
1961          *
1962          * Summary:
1963          *  Disables the digital low voltage monitor (interrupt and device reset are
1964          *  disabled).
1965          *
1966          * Parameters:
1967          *  None
1968          *
1969          * Return:
1970          *  None
1971          *
1972          *******************************************************************************/
1973          void CyVdLvDigitDisable(void) 
1974          {
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 33  

1975   1          CY_VD_LVI_HVI_CONTROL_REG &= ((uint8)(~CY_VD_LVID_EN));
1976   1      
1977   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESD_EN));
1978   1      
1979   1          while(0u != (CY_VD_PERSISTENT_STATUS_REG & 0x07u))
1980   1          {
1981   2      
1982   2          }
1983   1      }
1984          
1985          
1986          /*******************************************************************************
1987          * Function Name: CyVdLvAnalogDisable
1988          ********************************************************************************
1989          *
1990          * Summary:
1991          *  Disables the analog low voltage monitor (interrupt and device reset are
1992          *  disabled).
1993          *
1994          * Parameters:
1995          *  None
1996          *
1997          * Return:
1998          *  None
1999          *
2000          *******************************************************************************/
2001          void CyVdLvAnalogDisable(void) 
2002          {
2003   1          CY_VD_LVI_HVI_CONTROL_REG &= ((uint8)(~CY_VD_LVIA_EN));
2004   1      
2005   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
2006   1      
2007   1          while(0u != (CY_VD_PERSISTENT_STATUS_REG & 0x07u))
2008   1          {
2009   2      
2010   2          }
2011   1      }
2012          
2013          
2014          /*******************************************************************************
2015          * Function Name: CyVdHvAnalogEnable
2016          ********************************************************************************
2017          *
2018          * Summary:
2019          *  Enables the analog high voltage monitors to generate interrupt on
2020          *  Vdda archives 5.75 V threshold and optionally resets device.
2021          *
2022          * Parameters:
2023          *  None
2024          *
2025          * Return:
2026          *  None
2027          *
2028          *******************************************************************************/
2029          void CyVdHvAnalogEnable(void) 
2030          {
2031   1          *CY_INT_CLEAR_PTR = 0x01u;
2032   1      
2033   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
2034   1      
2035   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_HVIA_EN;
2036   1      
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 34  

2037   1          /* Timeout to eliminate glitches on the LVI/HVI when enabling */
2038   1          CyDelayUs(1u);
2039   1      
2040   1          (void) CY_VD_PERSISTENT_STATUS_REG;
2041   1      
2042   1          *CY_INT_CLR_PEND_PTR = 0x01u;
2043   1          *CY_INT_ENABLE_PTR   = 0x01u;
2044   1      }
2045          
2046          
2047          /*******************************************************************************
2048          * Function Name: CyVdHvAnalogDisable
2049          ********************************************************************************
2050          *
2051          * Summary:
2052          *  Disables the analog low voltage monitor
2053          *  (interrupt and device reset are disabled).
2054          *
2055          * Parameters:
2056          *  None
2057          *
2058          * Return:
2059          *  None
2060          *
2061          *******************************************************************************/
2062          void CyVdHvAnalogDisable(void) 
2063          {
2064   1          CY_VD_LVI_HVI_CONTROL_REG &= ((uint8)(~CY_VD_HVIA_EN));
2065   1      }
2066          
2067          
2068          /*******************************************************************************
2069          * Function Name: CyVdStickyStatus
2070          ********************************************************************************
2071          *
2072          * Summary:
2073          *  Manages the Reset and Voltage Detection Status Register 0.
2074          *  This register has the interrupt status for the HVIA, LVID and LVIA.
2075          *  This hardware register clears on read.
2076          *
2077          * Parameters:
2078          *  mask: Bits in the shadow register to clear.
2079          *   Define                  Definition
2080          *   CY_VD_LVID            Persistent status of digital LVI.
2081          *   CY_VD_LVIA            Persistent status of analog LVI.
2082          *   CY_VD_HVIA            Persistent status of analog HVI.
2083          *
2084          * Return:
2085          *  Status.  Same enumerated bit values as used for the mask parameter.
2086          *
2087          *******************************************************************************/
2088          uint8 CyVdStickyStatus(uint8 mask) 
2089          {
2090   1          uint8 status;
2091   1      
2092   1          status = CY_VD_PERSISTENT_STATUS_REG;
2093   1          CY_VD_PERSISTENT_STATUS_REG &= ((uint8)(~mask));
2094   1      
2095   1          return(status);
2096   1      }
2097          
2098          
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 35  

2099          /*******************************************************************************
2100          * Function Name: CyVdRealTimeStatus
2101          ********************************************************************************
2102          *
2103          * Summary:
2104          *  Returns the real time voltage detection status.
2105          *
2106          * Parameters:
2107          *  None
2108          *
2109          * Return:
2110          *  Status:
2111          *   Define                  Definition
2112          *   CY_VD_LVID            Persistent status of digital LVI.
2113          *   CY_VD_LVIA            Persistent status of analog LVI.
2114          *   CY_VD_HVIA            Persistent status of analog HVI.
2115          *
2116          *******************************************************************************/
2117          uint8 CyVdRealTimeStatus(void) 
2118          {
2119   1          uint8 interruptState;
2120   1          uint8 vdFlagsState;
2121   1      
2122   1          interruptState = CyEnterCriticalSection();
2123   1          vdFlagsState = CY_VD_RT_STATUS_REG;
2124   1          CyExitCriticalSection(interruptState);
2125   1      
2126   1          return(vdFlagsState);
2127   1      }
2128          
2129          
2130          /*******************************************************************************
2131          * Function Name: CyDisableInts
2132          ********************************************************************************
2133          *
2134          * Summary:
2135          *  Disables the interrupt enable for each interrupt.
2136          *
2137          * Parameters:
2138          *  None
2139          *
2140          * Return:
2141          *  32 bit mask of previously enabled interrupts.
2142          *
2143          *******************************************************************************/
2144          uint32 CyDisableInts(void) 
2145          {
2146   1          uint32 intState;
2147   1          uint8 interruptState;
2148   1      
2149   1          interruptState = CyEnterCriticalSection();
2150   1      
2151   1          #if(CY_PSOC3)
2152   1      
2153   1              /* Get the current interrupt state. */
2154   1              intState  = ((uint32) CY_GET_REG8(CY_INT_CLR_EN0_PTR));
2155   1              intState |= ((uint32) (((uint32) CY_GET_REG8(CY_INT_CLR_EN1_PTR)) << 8u));
2156   1              intState |= ((uint32) (((uint32) CY_GET_REG8(CY_INT_CLR_EN2_PTR)) << 16u));
2157   1              intState |= ((uint32) (((uint32) CY_GET_REG8(CY_INT_CLR_EN3_PTR)) << 24u));
2158   1      
2159   1      
2160   1              /* Disable all of the interrupts. */
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 36  

2161   1              CY_SET_REG8(CY_INT_CLR_EN0_PTR, 0xFFu);
2162   1              CY_SET_REG8(CY_INT_CLR_EN1_PTR, 0xFFu);
2163   1              CY_SET_REG8(CY_INT_CLR_EN2_PTR, 0xFFu);
2164   1              CY_SET_REG8(CY_INT_CLR_EN3_PTR, 0xFFu);
2165   1      
2166   1          #else
              
                      /* Get the current interrupt state. */
                      intState = CY_GET_REG32(CY_INT_CLEAR_PTR);
              
                      /* Disable all of the interrupts. */
                      CY_SET_REG32(CY_INT_CLEAR_PTR, 0xFFFFFFFFu);
              
                  #endif /* (CY_PSOC3) */
2175   1      
2176   1          CyExitCriticalSection(interruptState);
2177   1      
2178   1          return (intState);
2179   1      }
2180          
2181          
2182          /*******************************************************************************
2183          * Function Name: CyEnableInts
2184          ********************************************************************************
2185          *
2186          * Summary:
2187          *  Enables interrupts to a given state.
2188          *
2189          * Parameters:
2190          *  uint32 mask: 32 bit mask of interrupts to enable.
2191          *
2192          * Return:
2193          *  None
2194          *
2195          *******************************************************************************/
2196          void CyEnableInts(uint32 mask) 
2197          {
2198   1      
2199   1          uint8 interruptState;
2200   1      
2201   1          interruptState = CyEnterCriticalSection();
2202   1      
2203   1          #if(CY_PSOC3)
2204   1      
2205   1              /* Set interrupts as enabled. */
2206   1              CY_SET_REG8(CY_INT_SET_EN3_PTR, ((uint8) (mask >> 24u)));
2207   1              CY_SET_REG8(CY_INT_SET_EN2_PTR, ((uint8) (mask >> 16u)));
2208   1              CY_SET_REG8(CY_INT_SET_EN1_PTR, ((uint8) (mask >> 8u )));
2209   1              CY_SET_REG8(CY_INT_SET_EN0_PTR, ((uint8) (mask )));
2210   1      
2211   1          #else
              
                      CY_SET_REG32(CY_INT_ENABLE_PTR, mask);
              
                  #endif /* (CY_PSOC3) */
2216   1      
2217   1          CyExitCriticalSection(interruptState);
2218   1      
2219   1      }
2220          
2221          #if(CY_PSOC5)
              
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 37  

                  /*******************************************************************************
                  * Function Name: CyFlushCache
                  ********************************************************************************
                  * Summary:
                  *  Flushes the PSoC 5/5LP cache by invalidating all entries.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void CyFlushCache(void)
                  {
                      uint8 interruptState;
              
                      /* Save current global interrupt enable and disable it */
                      interruptState = CyEnterCriticalSection();
              
                      /* Fill instruction prefectch unit to insure data integrity */
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
              
                      /* All entries in cache are invalidated on next clock cycle. */
                      CY_CACHE_CONTROL_REG |= CY_CACHE_CONTROL_FLUSH;
              
              
                      /***********************************************************************
                      * The prefetch unit could/would be filled with the instructions that
                      * succeed the flush. Since a flush is desired then theoretically those
                      * instructions might be considered stale/invalid.
                      ***********************************************************************/
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 38  

                      CY_NOP;
              
                      /* Restore global interrupt enable state */
                      CyExitCriticalSection(interruptState);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetSysVector
                  ********************************************************************************
                  * Summary:
                  *  Sets the interrupt vector of the specified system interrupt number. System
                  *  interrupts are present only for the ARM platform. These interrupts are for
                  *  SysTick, PendSV and others.
                  *
                  * Parameters:
                  *  number: Interrupt number, valid range [0-15].
                     address: Pointer to an interrupt service routine.
                  *
                  * Return:
                  *   The old ISR vector at this location.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
                  {
                      cyisraddress oldIsr;
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
              
                      CYASSERT(number <= CY_INT_SYS_NUMBER_MAX);
              
                      /* Save old Interrupt service routine. */
                      oldIsr = ramVectorTable[number & CY_INT_SYS_NUMBER_MASK];
              
                      /* Set new Interrupt service routine. */
                      ramVectorTable[number & CY_INT_SYS_NUMBER_MASK] = address;
              
                      return (oldIsr);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetSysVector
                  ********************************************************************************
                  *
                  * Summary:
                  *  Gets the interrupt vector of the specified system interrupt number. System
                  *  interrupts are present only for the ARM platform. These interrupts are for
                  *  SysTick, PendSV and others.
                  *
                  * Parameters:
                  *   number: The interrupt number, valid range [0-15].
                  *
                  * Return:
                  *   Address of the ISR in the interrupt vector table.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntGetSysVector(uint8 number)
                  {
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
                      CYASSERT(number <= CY_INT_SYS_NUMBER_MAX);
              
                      return ramVectorTable[number & CY_INT_SYS_NUMBER_MASK];
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 39  

                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetVector
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sets the interrupt vector of the specified interrupt number.
                  *
                  * Parameters:
                  *  number: Valid range [0-31].  Interrupt number
                  *  address: Pointer to an interrupt service routine
                  *
                  * Return:
                  *   Previous interrupt vector value.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
                  {
                      cyisraddress oldIsr;
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Save old Interrupt service routine. */
                      oldIsr = ramVectorTable[CY_INT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)];
              
                      /* Set new Interrupt service routine. */
                      ramVectorTable[CY_INT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)] = address;
              
                      return (oldIsr);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetVector
                  ********************************************************************************
                  *
                  * Summary:
                  *  Gets the interrupt vector of the specified interrupt number.
                  *
                  * Parameters:
                  *  number: Valid range [0-31].  Interrupt number
                  *
                  * Return:
                  *  The address of the ISR in the interrupt vector table.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntGetVector(uint8 number)
                  {
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      return (ramVectorTable[CY_INT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)]);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetPriority
                  ********************************************************************************
                  *
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 40  

                  * Summary:
                  *  Sets the Priority of the Interrupt.
                  *
                  * Parameters:
                  *  priority: Priority of the interrupt. 0 - 7, 0 being the highest.
                  *  number: The number of the interrupt, 0 - 31.
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void CyIntSetPriority(uint8 number, uint8 priority)
                  {
                      CYASSERT(priority <= CY_INT_PRIORITY_MAX);
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
                      CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] = (priority & CY_INT_PRIORITY_MASK)<< 5;
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetPriority
                  ********************************************************************************
                  *
                  * Summary:
                  *  Gets the Priority of the Interrupt.
                  *
                  * Parameters:
                  *  number: The number of the interrupt, 0 - 31.
                  *
                  * Return:
                  *  Priority of the interrupt. 0 - 7, 0 being the highest.
                  *
                  *******************************************************************************/
                  uint8 CyIntGetPriority(uint8 number)
                  {
                      uint8 priority;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      priority = CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] >> 5;
              
                      return (priority);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetState
                  ********************************************************************************
                  *
                  * Summary:
                  *   Gets the enable state of the specified interrupt number.
                  *
                  * Parameters:
                  *   number: Valid range [0-31].  Interrupt number.
                  *
                  * Return:
                  *   Enable status: 1 if enabled, 0 if disabled
                  *
                  *******************************************************************************/
                  uint8 CyIntGetState(uint8 number)
                  {
                      reg32 * stateReg;
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 41  

              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Get pointer to Interrupt enable register. */
                      stateReg = CY_INT_ENABLE_PTR;
              
                      /* Get state of interrupt. */
                      return (0u != (*stateReg & (((uint32) 1u) << (0x1Fu & number)))) ? ((uint8)(1u)) : ((uint8)(0u));
                  }
              
              
              #else   /* PSoC3 */
2483          
2484          
2485              /*******************************************************************************
2486              * Function Name: CyIntSetVector
2487              ********************************************************************************
2488              *
2489              * Summary:
2490              *  Sets the interrupt vector of the specified interrupt number.
2491              *
2492              * Parameters:
2493              *  number:  Valid range [0-31].  Interrupt number
2494              *  address: Pointer to an interrupt service routine
2495              *
2496              * Return:
2497              *  Previous interrupt vector value.
2498              *
2499              *******************************************************************************/
2500              cyisraddress CyIntSetVector(uint8 number, cyisraddress address) 
2501              {
2502   1              cyisraddress oldIsr;
2503   1      
2504   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2505   1      
2506   1              /* Save old Interrupt service routine. */
2507   1              oldIsr = (cyisraddress) \
2508   1                          CY_GET_REG16(&CY_INT_VECT_TABLE[number & CY_INT_NUMBER_MASK]);
2509   1      
2510   1              /* Set new Interrupt service routine. */
2511   1              CY_SET_REG16(&CY_INT_VECT_TABLE[number], (uint16) address);
2512   1      
2513   1              return (oldIsr);
2514   1          }
2515          
2516          
2517              /*******************************************************************************
2518              * Function Name: CyIntGetVector
2519              ********************************************************************************
2520              *
2521              * Summary:
2522              *  Gets the interrupt vector of the specified interrupt number.
2523              *
2524              * Parameters:
2525              *  number: Valid range [0-31].  Interrupt number
2526              *
2527              * Return:
2528              *  Address of the ISR in the interrupt vector table.
2529              *
2530              *******************************************************************************/
2531              cyisraddress CyIntGetVector(uint8 number) 
2532              {
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 42  

2533   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2534   1      
2535   1              return ((cyisraddress) \
2536   1                      CY_GET_REG16(&CY_INT_VECT_TABLE[number & CY_INT_NUMBER_MASK]));
2537   1          }
2538          
2539          
2540              /*******************************************************************************
2541              * Function Name: CyIntSetPriority
2542              ********************************************************************************
2543              *
2544              * Summary:
2545              *  Sets the Priority of the Interrupt.
2546              *
2547              * Parameters:
2548              *  priority: Priority of the interrupt. 0 - 7, 0 being the highest.
2549              *  number:   The number of the interrupt, 0 - 31.
2550              *
2551              * Return:
2552              *  None
2553              *
2554              *******************************************************************************/
2555              void CyIntSetPriority(uint8 number, uint8 priority) 
2556              {
2557   1              CYASSERT(priority <= CY_INT_PRIORITY_MAX);
2558   1      
2559   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2560   1      
2561   1              CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] =
2562   1                          (priority & CY_INT_PRIORITY_MASK) << 5;
2563   1          }
2564          
2565          
2566              /*******************************************************************************
2567              * Function Name: CyIntGetPriority
2568              ********************************************************************************
2569              *
2570              * Summary:
2571              *  Gets the Priority of the Interrupt.
2572              *
2573              * Parameters:
2574              *  number: The number of the interrupt, 0 - 31.
2575              *
2576              * Return:
2577              *  Priority of the interrupt. 0 - 7, 0 being the highest.
2578              *
2579              *******************************************************************************/
2580              uint8 CyIntGetPriority(uint8 number) 
2581              {
2582   1              uint8 priority;
2583   1      
2584   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2585   1      
2586   1              priority = CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] >> 5;
2587   1      
2588   1              return (priority);
2589   1          }
2590          
2591          
2592              /*******************************************************************************
2593              * Function Name: CyIntGetState
2594              ********************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 43  

2595              *
2596              * Summary:
2597              *   Gets the enable state of the specified interrupt number.
2598              *
2599              * Parameters:
2600              *   number: Valid range [0-31].  Interrupt number.
2601              *
2602              * Return:
2603              *   Enable status: 1 if enabled, 0 if disabled
2604              *
2605              *******************************************************************************/
2606              uint8 CyIntGetState(uint8 number) 
2607              {
2608   1              reg8 * stateReg;
2609   1      
2610   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2611   1      
2612   1              /* Get pointer to Interrupt enable register. */
2613   1              stateReg = CY_INT_ENABLE_PTR + ((number & CY_INT_NUMBER_MASK) >> 3u);
2614   1      
2615   1              /* Get state of interrupt. */
2616   1              return ((0u != (*stateReg & ((uint8)(1u << (0x07u & number))))) ? ((uint8)(1u)) : ((uint8)(0u)));
2617   1          }
2618          
2619          
2620          #endif  /* (CY_PSOC5) */
2621          
2622          
2623          #if(CYDEV_VARIABLE_VDDA == 1)
              
                  /*******************************************************************************
                  * Function Name: CySetScPumps
                  ********************************************************************************
                  *
                  * Summary:
                  *  If 1 is passed as a parameter:
                  *   - if any of the SC blocks are used - enable pumps for the SC blocks and
                  *     start boost clock.
                  *   - For each enabled SC block set a boost clock index and enable the boost
                  *     clock.
                  *
                  *  If non-1 value is passed as a parameter:
                  *   - If all SC blocks are not used - disable pumps for the SC blocks and
                  *     stop the boost clock.
                  *   - For each enabled SC block clear the boost clock index and disable the  boost
                  *     clock.
                  *
                  *  The global variable CyScPumpEnabled is updated to be equal to passed the
                  *  parameter.
                  *
                  * Parameters:
                  *   uint8 enable: Enable/disable SC pumps and the boost clock for the enabled SC block.
                  *                 1 - Enable
                  *                 0 - Disable
                  *
                  * Return:
                  *   None
                  *
                  *******************************************************************************/
                  void CySetScPumps(uint8 enable) 
                  {
                      if(1u == enable)
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 44  

                      {
                          /* The SC pumps should be enabled */
                          CyScPumpEnabled = 1u;
                          /* Enable pumps if any of SC blocks are used */
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAPS_MASK))
                          {
                              CY_LIB_SC_MISC_REG |= CY_LIB_SC_MISC_PUMP_FORCE;
                              CyScBoostClk_Start();
                          }
                          /* Set positive pump for each enabled SC block: set clock index and enable it */
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP0_EN))
                          {
                              CY_LIB_SC0_BST_REG = (CY_LIB_SC0_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC0_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP1_EN))
                          {
                              CY_LIB_SC1_BST_REG = (CY_LIB_SC1_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC1_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP2_EN))
                          {
                              CY_LIB_SC2_BST_REG = (CY_LIB_SC2_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC2_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP3_EN))
                          {
                              CY_LIB_SC3_BST_REG = (CY_LIB_SC3_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC3_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                      }
                      else
                      {
                          /* The SC pumps should be disabled */
                          CyScPumpEnabled = 0u;
                          /* Disable pumps for all SC blocks and stop boost clock */
                          CY_LIB_SC_MISC_REG &= ((uint8)(~CY_LIB_SC_MISC_PUMP_FORCE));
                          CyScBoostClk_Stop();
                          /* Disable boost clock and clear clock index for each SC block */
                          CY_LIB_SC0_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC0_BST_REG = CY_LIB_SC0_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                          CY_LIB_SC1_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC1_BST_REG = CY_LIB_SC1_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                          CY_LIB_SC2_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC2_BST_REG = CY_LIB_SC2_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                          CY_LIB_SC3_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC3_BST_REG = CY_LIB_SC3_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                      }
                  }
              
              #endif  /* (CYDEV_VARIABLE_VDDA == 1) */
2708          
2709          
2710          /* [] END OF FILE */
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 45  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyPLL_OUT_Start (BEGIN)
                                           ; SOURCE LINE # 89
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
000A 904220            MOV     DPTR,#04220H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 4401              ORL     A,#01H
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
0015 900000      R     MOV     DPTR,#wait
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 607A              JZ      ?C0001
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 104
001D 904300            MOV     DPTR,#04300H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 5404              ANL     A,#04H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#iloEnableState
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
002B 904380            MOV     DPTR,#04380H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#pmTwCfg0State
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0035 904382            MOV     DPTR,#04382H
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 900000      R     MOV     DPTR,#pmTwCfg2State
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
003F 7F18              MOV     R7,#018H
0041 120000      E     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 110
0044 900000      R     MOV     DPTR,#status
0047 7410              MOV     A,#010H
0049 F0                MOVX    @DPTR,A
004A         ?C0002:
                                           ; SOURCE LINE # 112
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 46  

004A 7F01              MOV     R7,#01H
004C 120000      E     LCALL   _CyPmReadStatus
004F 7E00              MOV     R6,#00H
0051 EF                MOV     A,R7
0052 20E023            JB      ACC.0,?C0003
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 115
0055 904225            MOV     DPTR,#04225H
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B 5401              ANL     A,#01H
005D FF                MOV     R7,A
005E 7E00              MOV     R6,#00H
0060 EF                MOV     A,R7
0061 4E                ORL     A,R6
0062 60E6              JZ      ?C0002
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
0064 904225            MOV     DPTR,#04225H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A 5401              ANL     A,#01H
006C FF                MOV     R7,A
006D 7E00              MOV     R6,#00H
006F EF                MOV     A,R7
0070 4E                ORL     A,R6
0071 60D7              JZ      ?C0002
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
0073 900000      R     MOV     DPTR,#status
0076 E4                CLR     A
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0078         ?C0003:
                                           ; SOURCE LINE # 126
0078 900000      R     MOV     DPTR,#iloEnableState
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 7003              JNZ     ?C0006
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
0080 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 129
0083         ?C0006:
                                           ; SOURCE LINE # 131
0083 900000      R     MOV     DPTR,#pmTwCfg0State
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 904380            MOV     DPTR,#04380H
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
008D 900000      R     MOV     DPTR,#pmTwCfg2State
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 904382            MOV     DPTR,#04382H
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 47  

0095 EF                MOV     A,R7
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
0097         ?C0001:
                                           ; SOURCE LINE # 135
0097 900000      R     MOV     DPTR,#status
009A E0                MOVX    A,@DPTR
009B FF                MOV     R7,A
                                           ; SOURCE LINE # 136
009C         ?C0007:
009C 22                RET     
             ; FUNCTION _CyPLL_OUT_Start (END)

             ; FUNCTION CyPLL_OUT_Stop (BEGIN)
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0000 904220            MOV     DPTR,#04220H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
000B 22                RET     
             ; FUNCTION CyPLL_OUT_Stop (END)

             ; FUNCTION _CyPLL_OUT_SetPQ (BEGIN)
                                           ; SOURCE LINE # 191
0000 900000      R     MOV     DPTR,#pDiv
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#qDiv
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#current
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 194
000F 904220            MOV     DPTR,#04220H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5401              ANL     A,#01H
0017 FF                MOV     R7,A
0018 7E00              MOV     R6,#00H
001A EF                MOV     A,R7
001B 4E                ORL     A,R6
001C 7003              JNZ     ?C0010
001E D3                SETB    C
001F 8001              SJMP    ?C0011
0021         ?C0010:
0021 C3                CLR     C
0022         ?C0011:
0022 4005              JC      ?C0009
0024 7F00              MOV     R7,#00H
0026 120000      R     LCALL   _?CyHalt
0029         ?C0009:
                                           ; SOURCE LINE # 196
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 48  

0029 900000      R     MOV     DPTR,#pDiv
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F C3                CLR     C
0030 9408              SUBB    A,#08H
0032 4062              JC      ?C0012
0034 900000      R     MOV     DPTR,#qDiv
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A D3                SETB    C
003B 9410              SUBB    A,#010H
003D 5057              JNC     ?C0012
003F 900000      R     MOV     DPTR,#qDiv
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 C3                CLR     C
0046 9401              SUBB    A,#01H
0048 404C              JC      ?C0012
004A 900000      R     MOV     DPTR,#current
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 C3                CLR     C
0051 9401              SUBB    A,#01H
0053 4041              JC      ?C0012
0055 900000      R     MOV     DPTR,#current
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B D3                SETB    C
005C 9407              SUBB    A,#07H
005E 5036              JNC     ?C0012
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 201
0060 900000      R     MOV     DPTR,#pDiv
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 904222            MOV     DPTR,#04222H
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
006A 900000      R     MOV     DPTR,#qDiv
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 14                DEC     A
0071 FF                MOV     R7,A
0072 904223            MOV     DPTR,#04223H
0075 EF                MOV     A,R7
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0077 900000      R     MOV     DPTR,#current
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C EF                MOV     A,R7
007D 14                DEC     A
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 C4                SWAP    A
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 49  

0081 54F0              ANL     A,#0F0H
0083 FF                MOV     R7,A
0084 904221            MOV     DPTR,#04221H
0087 E0                MOVX    A,@DPTR
0088 FE                MOV     R6,A
0089 EE                MOV     A,R6
008A 548F              ANL     A,#08FH
008C FE                MOV     R6,A
008D EF                MOV     A,R7
008E 4E                ORL     A,R6
008F FF                MOV     R7,A
0090 904221            MOV     DPTR,#04221H
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0095 22                RET     
0096         ?C0012:
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 214
0096 7F00              MOV     R7,#00H
0098 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 217
009B         ?C0015:
009B 22                RET     
             ; FUNCTION _CyPLL_OUT_SetPQ (END)

             ; FUNCTION _CyPLL_OUT_SetSource (BEGIN)
                                           ; SOURCE LINE # 246
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 249
0005 904220            MOV     DPTR,#04220H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5401              ANL     A,#01H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 7003              JNZ     ?C0017
0014 D3                SETB    C
0015 8001              SJMP    ?C0018
0017         ?C0017:
0017 C3                CLR     C
0018         ?C0018:
0018 4005              JC      ?C0016
001A 7F00              MOV     R7,#00H
001C 120000      R     LCALL   _?CyHalt
001F         ?C0016:
                                           ; SOURCE LINE # 251
001F 900000      R     MOV     DPTR,#source
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 120000      E     LCALL   ?C?CCASE
0028 0000        R     DW      ?C0022
002A 00                DB      00H
002B 0000        R     DW      ?C0022
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 50  

002D 01                DB      01H
002E 0000        R     DW      ?C0022
0030 02                DB      02H
0031 0000              DW      00H
0033 0000        R     DW      ?C0023
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
0035         ?C0022:
                                           ; SOURCE LINE # 256
0035 904000            MOV     DPTR,#04000H
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 54FC              ANL     A,#0FCH
003D FF                MOV     R7,A
003E 900000      R     MOV     DPTR,#source
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 EF                MOV     A,R7
0044 4E                ORL     A,R6
0045 FF                MOV     R7,A
0046 904000            MOV     DPTR,#04000H
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
004B 22                RET     
                                           ; SOURCE LINE # 259
004C         ?C0023:
                                           ; SOURCE LINE # 260
004C 7F00              MOV     R7,#00H
004E 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
0051         ?C0025:
0051 22                RET     
             ; FUNCTION _CyPLL_OUT_SetSource (END)

             ; FUNCTION _CyIMO_Start (BEGIN)
                                           ; SOURCE LINE # 296
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 303
0005 9043A0            MOV     DPTR,#043A0H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 4410              ORL     A,#010H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
0010 9043B0            MOV     DPTR,#043B0H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 4410              ORL     A,#010H
0018 FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 51  

0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
001B 900000      R     MOV     DPTR,#wait
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 6051              JZ      ?C0030
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 309
0023 904300            MOV     DPTR,#04300H
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5404              ANL     A,#04H
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#ilo100KhzEnable
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
0031 904380            MOV     DPTR,#04380H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#pmFtwCfg0Reg
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
003B 904382            MOV     DPTR,#04382H
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#pmFtwCfg2Reg
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
0045 7F00              MOV     R7,#00H
0047 120000      E     LCALL   _CyPmFtwSetInterval
004A         ?C0027:
                                           ; SOURCE LINE # 315
004A 7F01              MOV     R7,#01H
004C 120000      E     LCALL   _CyPmReadStatus
004F 7E00              MOV     R6,#00H
0051 EF                MOV     A,R7
0052 30E0F5            JNB     ACC.0,?C0027
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 318
0055         ?C0028:
                                           ; SOURCE LINE # 320
0055 900000      R     MOV     DPTR,#ilo100KhzEnable
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B 7003              JNZ     ?C0029
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
005D 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 323
0060         ?C0029:
                                           ; SOURCE LINE # 325
0060 900000      R     MOV     DPTR,#pmFtwCfg0Reg
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 904380            MOV     DPTR,#04380H
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 52  

0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
006A 900000      R     MOV     DPTR,#pmFtwCfg2Reg
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F 904382            MOV     DPTR,#04382H
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
0074         ?C0030:
0074 22                RET     
             ; FUNCTION _CyIMO_Start (END)

             ; FUNCTION CyIMO_Stop (BEGIN)
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0000 9043A0            MOV     DPTR,#043A0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
000B 9043B0            MOV     DPTR,#043B0H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54EF              ANL     A,#0EFH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
0016 22                RET     
             ; FUNCTION CyIMO_Stop (END)

             ; FUNCTION CyUSB_PowerOnCheck (BEGIN)
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
0000 900000      R     MOV     DPTR,#poweredOn
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
0005 904393            MOV     DPTR,#04393H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 700F              JNZ     ?C0034
0014 9043A5            MOV     DPTR,#043A5H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 53  

001A 5401              ANL     A,#01H
001C FF                MOV     R7,A
001D 7E00              MOV     R6,#00H
001F EF                MOV     A,R7
0020 4E                ORL     A,R6
0021 7020              JNZ     ?C0033
0023         ?C0034:
0023 904393            MOV     DPTR,#04393H
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5407              ANL     A,#07H
002B FF                MOV     R7,A
002C 7E00              MOV     R6,#00H
002E EF                MOV     A,R7
002F 6401              XRL     A,#01H
0031 4E                ORL     A,R6
0032 7015              JNZ     ?C0032
0034 9043B5            MOV     DPTR,#043B5H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 5401              ANL     A,#01H
003C FF                MOV     R7,A
003D 7E00              MOV     R6,#00H
003F EF                MOV     A,R7
0040 4E                ORL     A,R6
0041 6006              JZ      ?C0032
0043         ?C0033:
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
0043 900000      R     MOV     DPTR,#poweredOn
0046 7401              MOV     A,#01H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
0049         ?C0032:
                                           ; SOURCE LINE # 379
0049 900000      R     MOV     DPTR,#poweredOn
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
                                           ; SOURCE LINE # 380
004E         ?C0035:
004E 22                RET     
             ; FUNCTION CyUSB_PowerOnCheck (END)

             ; FUNCTION _CyIMO_SetTrimValue (BEGIN)
                                           ; SOURCE LINE # 397
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0005 120000      R     LCALL   CyUSB_PowerOnCheck
0008 900000      R     MOV     DPTR,#usbPowerOn
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
000D 900000      R     MOV     DPTR,#usbPowerOn
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 B4010B            CJNE    A,#01H,?C0036
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 54  

                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 405
0016 906009            MOV     DPTR,#06009H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FD              ANL     A,#0FDH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
0021         ?C0036:
                                           ; SOURCE LINE # 407
0021 900000      R     MOV     DPTR,#freq
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 120000      E     LCALL   ?C?CCASE
002A 0000        R     DW      ?C0038
002C 00                DB      00H
002D 0000        R     DW      ?C0039
002F 01                DB      01H
0030 0000        R     DW      ?C0040
0032 02                DB      02H
0033 0000        R     DW      ?C0041
0035 03                DB      03H
0036 0000        R     DW      ?C0042
0038 04                DB      04H
0039 0000        R     DW      ?C0043
003B 05                DB      05H
003C 0000        R     DW      ?C0044
003E 08                DB      08H
003F 0000              DW      00H
0041 0000        R     DW      ?C0046
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
0043         ?C0038:
                                           ; SOURCE LINE # 410
0043 7B0C              MOV     R3,#0CH
0045 7A01              MOV     R2,#01H
0047 7908              MOV     R1,#08H
0049 120000      E     LCALL   _cyread8
004C 9046A1            MOV     DPTR,#046A1H
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
0051 22                RET     
                                           ; SOURCE LINE # 413
0052         ?C0039:
                                           ; SOURCE LINE # 414
0052 7B0C              MOV     R3,#0CH
0054 7A01              MOV     R2,#01H
0056 7909              MOV     R1,#09H
0058 120000      E     LCALL   _cyread8
005B 9046A1            MOV     DPTR,#046A1H
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0060 22                RET     
                                           ; SOURCE LINE # 417
0061         ?C0040:
                                           ; SOURCE LINE # 418
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 55  

0061 7B0C              MOV     R3,#0CH
0063 7A01              MOV     R2,#01H
0065 790A              MOV     R1,#0AH
0067 120000      E     LCALL   _cyread8
006A 9046A1            MOV     DPTR,#046A1H
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
006F 22                RET     
                                           ; SOURCE LINE # 421
0070         ?C0041:
                                           ; SOURCE LINE # 422
0070 7B0C              MOV     R3,#0CH
0072 7A01              MOV     R2,#01H
0074 790B              MOV     R1,#0BH
0076 120000      E     LCALL   _cyread8
0079 9046A1            MOV     DPTR,#046A1H
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
007E 22                RET     
                                           ; SOURCE LINE # 425
007F         ?C0042:
                                           ; SOURCE LINE # 426
007F 7B0C              MOV     R3,#0CH
0081 7A01              MOV     R2,#01H
0083 7989              MOV     R1,#089H
0085 120000      E     LCALL   _cyread8
0088 9046A1            MOV     DPTR,#046A1H
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
008D 22                RET     
                                           ; SOURCE LINE # 429
008E         ?C0043:
                                           ; SOURCE LINE # 430
008E 7B0C              MOV     R3,#0CH
0090 7A01              MOV     R2,#01H
0092 790C              MOV     R1,#0CH
0094 120000      E     LCALL   _cyread8
0097 9046A1            MOV     DPTR,#046A1H
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
009C 22                RET     
                                           ; SOURCE LINE # 439
009D         ?C0044:
                                           ; SOURCE LINE # 440
009D 7B0C              MOV     R3,#0CH
009F 7A01              MOV     R2,#01H
00A1 790F              MOV     R1,#0FH
00A3 120000      E     LCALL   _cyread8
00A6 9046A1            MOV     DPTR,#046A1H
00A9 EF                MOV     A,R7
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
00AB 900000      R     MOV     DPTR,#usbPowerOn
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 EF                MOV     A,R7
00B1 B40111            CJNE    A,#01H,?C0048
                                           ; SOURCE LINE # 444
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 56  

                                           ; SOURCE LINE # 446
00B4 906009            MOV     DPTR,#06009H
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 EF                MOV     A,R7
00BA 4402              ORL     A,#02H
00BC FF                MOV     R7,A
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
00BF 22                RET     
                                           ; SOURCE LINE # 450
00C0         ?C0046:
                                           ; SOURCE LINE # 451
00C0 7F00              MOV     R7,#00H
00C2 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 455
00C5         ?C0048:
00C5 22                RET     
             ; FUNCTION _CyIMO_SetTrimValue (END)

             ; FUNCTION _CyIMO_SetFreq (BEGIN)
                                           ; SOURCE LINE # 492
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 504
0005 904200            MOV     DPTR,#04200H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#currentFreq
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
0013 900000      R     MOV     DPTR,#freq
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 B40804            CJNE    A,#08H,?C0049
001C 7F03              MOV     R7,#03H
001E 8005              SJMP    ?C0050
0020         ?C0049:
0020 900000      R     MOV     DPTR,#freq
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025         ?C0050:
0025 900000      R     MOV     DPTR,#nextFreq
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
002A 900000      R     MOV     DPTR,#currentFreq
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 120000      E     LCALL   ?C?CCASE
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 57  

0033 0000        R     DW      ?C0052
0035 00                DB      00H
0036 0000        R     DW      ?C0053
0038 01                DB      01H
0039 0000        R     DW      ?C0054
003B 02                DB      02H
003C 0000        R     DW      ?C0055
003E 03                DB      03H
003F 0000        R     DW      ?C0056
0041 04                DB      04H
0042 0000        R     DW      ?C0057
0044 05                DB      05H
0045 0000              DW      00H
0047 0000        R     DW      ?C0058
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0049         ?C0052:
                                           ; SOURCE LINE # 512
0049 900000      R     MOV     DPTR,#currentFreq
004C 7402              MOV     A,#02H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
004F 802C              SJMP    ?C0051
                                           ; SOURCE LINE # 515
0051         ?C0053:
                                           ; SOURCE LINE # 516
0051 900000      R     MOV     DPTR,#currentFreq
0054 7401              MOV     A,#01H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
0057 8024              SJMP    ?C0051
                                           ; SOURCE LINE # 519
0059         ?C0054:
                                           ; SOURCE LINE # 520
0059 900000      R     MOV     DPTR,#currentFreq
005C 7403              MOV     A,#03H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
005F 801C              SJMP    ?C0051
                                           ; SOURCE LINE # 523
0061         ?C0055:
                                           ; SOURCE LINE # 524
0061 900000      R     MOV     DPTR,#currentFreq
0064 E4                CLR     A
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0066 8015              SJMP    ?C0051
                                           ; SOURCE LINE # 527
0068         ?C0056:
                                           ; SOURCE LINE # 528
0068 900000      R     MOV     DPTR,#currentFreq
006B 7404              MOV     A,#04H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
006E 800D              SJMP    ?C0051
                                           ; SOURCE LINE # 531
0070         ?C0057:
                                           ; SOURCE LINE # 532
0070 900000      R     MOV     DPTR,#currentFreq
0073 7405              MOV     A,#05H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 58  

0076 8005              SJMP    ?C0051
                                           ; SOURCE LINE # 541
0078         ?C0058:
                                           ; SOURCE LINE # 542
0078 7F00              MOV     R7,#00H
007A 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
007D         ?C0051:
                                           ; SOURCE LINE # 546
007D 900000      R     MOV     DPTR,#currentFreq
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 900000      R     MOV     DPTR,#nextFreq
0085 E0                MOVX    A,@DPTR
0086 FE                MOV     R6,A
0087 EE                MOV     A,R6
0088 C3                CLR     C
0089 9F                SUBB    A,R7
008A 4008              JC      ?C0060
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 549
008C 900000      R     MOV     DPTR,#freq
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 550
0094         ?C0060:
                                           ; SOURCE LINE # 553
0094 900000      R     MOV     DPTR,#freq
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 120000      E     LCALL   ?C?CCASE
009D 0000        R     DW      ?C0062
009F 00                DB      00H
00A0 0000        R     DW      ?C0063
00A2 01                DB      01H
00A3 0000        R     DW      ?C0064
00A5 02                DB      02H
00A6 0000        R     DW      ?C0065
00A8 03                DB      03H
00A9 0000        R     DW      ?C0066
00AB 04                DB      04H
00AC 0000        R     DW      ?C0067
00AE 05                DB      05H
00AF 0000        R     DW      ?C0068
00B1 08                DB      08H
00B2 0000              DW      00H
00B4 0000        R     DW      ?C0069
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
00B6         ?C0062:
                                           ; SOURCE LINE # 557
00B6 904200            MOV     DPTR,#04200H
00B9 E0                MOVX    A,@DPTR
00BA FF                MOV     R7,A
00BB EF                MOV     A,R7
00BC 54F8              ANL     A,#0F8H
00BE FF                MOV     R7,A
00BF EF                MOV     A,R7
00C0 4403              ORL     A,#03H
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 59  

00C2 FF                MOV     R7,A
00C3 EF                MOV     A,R7
00C4 54BF              ANL     A,#0BFH
00C6 FF                MOV     R7,A
00C7 904200            MOV     DPTR,#04200H
00CA EF                MOV     A,R7
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
00CC 020000      R     LJMP    ?C0061
                                           ; SOURCE LINE # 560
00CF         ?C0063:
                                           ; SOURCE LINE # 562
00CF 904200            MOV     DPTR,#04200H
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 EF                MOV     A,R7
00D5 54F8              ANL     A,#0F8H
00D7 FF                MOV     R7,A
00D8 EF                MOV     A,R7
00D9 4401              ORL     A,#01H
00DB FF                MOV     R7,A
00DC EF                MOV     A,R7
00DD 54BF              ANL     A,#0BFH
00DF FF                MOV     R7,A
00E0 904200            MOV     DPTR,#04200H
00E3 EF                MOV     A,R7
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
00E5 806E              SJMP    ?C0061
                                           ; SOURCE LINE # 565
00E7         ?C0064:
                                           ; SOURCE LINE # 567
00E7 904200            MOV     DPTR,#04200H
00EA E0                MOVX    A,@DPTR
00EB FF                MOV     R7,A
00EC EF                MOV     A,R7
00ED 54B8              ANL     A,#0B8H
00EF FF                MOV     R7,A
00F0 EF                MOV     A,R7
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
00F2 8061              SJMP    ?C0061
                                           ; SOURCE LINE # 570
00F4         ?C0065:
                                           ; SOURCE LINE # 572
00F4 904200            MOV     DPTR,#04200H
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 EF                MOV     A,R7
00FA 54F8              ANL     A,#0F8H
00FC FF                MOV     R7,A
00FD EF                MOV     A,R7
00FE 4402              ORL     A,#02H
0100 FF                MOV     R7,A
0101 EF                MOV     A,R7
0102 54BF              ANL     A,#0BFH
0104 FF                MOV     R7,A
0105 904200            MOV     DPTR,#04200H
0108 EF                MOV     A,R7
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
010A 8049              SJMP    ?C0061
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 60  

                                           ; SOURCE LINE # 575
010C         ?C0066:
                                           ; SOURCE LINE # 577
010C 904200            MOV     DPTR,#04200H
010F E0                MOVX    A,@DPTR
0110 FF                MOV     R7,A
0111 EF                MOV     A,R7
0112 54F8              ANL     A,#0F8H
0114 FF                MOV     R7,A
0115 EF                MOV     A,R7
0116 4404              ORL     A,#04H
0118 FF                MOV     R7,A
0119 EF                MOV     A,R7
011A 54BF              ANL     A,#0BFH
011C FF                MOV     R7,A
011D 904200            MOV     DPTR,#04200H
0120 EF                MOV     A,R7
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
0122 8031              SJMP    ?C0061
                                           ; SOURCE LINE # 580
0124         ?C0067:
                                           ; SOURCE LINE # 582
0124 904200            MOV     DPTR,#04200H
0127 E0                MOVX    A,@DPTR
0128 FF                MOV     R7,A
0129 EF                MOV     A,R7
012A 54F8              ANL     A,#0F8H
012C FF                MOV     R7,A
012D EF                MOV     A,R7
012E 4405              ORL     A,#05H
0130 FF                MOV     R7,A
0131 EF                MOV     A,R7
0132 54BF              ANL     A,#0BFH
0134 FF                MOV     R7,A
0135 904200            MOV     DPTR,#04200H
0138 EF                MOV     A,R7
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
013A 8019              SJMP    ?C0061
                                           ; SOURCE LINE # 592
013C         ?C0068:
                                           ; SOURCE LINE # 593
013C 904200            MOV     DPTR,#04200H
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
0141 EF                MOV     A,R7
0142 54F8              ANL     A,#0F8H
0144 FF                MOV     R7,A
0145 EF                MOV     A,R7
0146 4442              ORL     A,#042H
0148 FF                MOV     R7,A
0149 904200            MOV     DPTR,#04200H
014C EF                MOV     A,R7
014D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
014E 8005              SJMP    ?C0061
                                           ; SOURCE LINE # 597
0150         ?C0069:
                                           ; SOURCE LINE # 598
0150 7F00              MOV     R7,#00H
0152 120000      R     LCALL   _?CyHalt
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 61  

                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
0155         ?C0061:
                                           ; SOURCE LINE # 603
0155 900000      R     MOV     DPTR,#freq
0158 E0                MOVX    A,@DPTR
0159 FF                MOV     R7,A
015A EF                MOV     A,R7
015B B40805            CJNE    A,#08H,?C0071
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 605
015E 120000      R     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 606
0161 8003              SJMP    ?C0072
0163         ?C0071:
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
0163 120000      R     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 610
0166         ?C0072:
                                           ; SOURCE LINE # 612
0166 900000      R     MOV     DPTR,#currentFreq
0169 E0                MOVX    A,@DPTR
016A FF                MOV     R7,A
016B 900000      R     MOV     DPTR,#nextFreq
016E E0                MOVX    A,@DPTR
016F FE                MOV     R6,A
0170 EE                MOV     A,R6
0171 C3                CLR     C
0172 9F                SUBB    A,R7
0173 5008              JNC     ?C0074
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 615
0175 900000      R     MOV     DPTR,#freq
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 617
017D         ?C0074:
017D 22                RET     
             ; FUNCTION _CyIMO_SetFreq (END)

             ; FUNCTION _CyIMO_SetSource (BEGIN)
                                           ; SOURCE LINE # 647
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 120000      E     LCALL   ?C?CCASE
000E 0000        R     DW      ?C0078
0010 00                DB      00H
0011 0000        R     DW      ?C0077
0013 01                DB      01H
0014 0000        R     DW      ?C0076
0016 02                DB      02H
0017 0000              DW      00H
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 62  

0019 0000        R     DW      ?C0079
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
001B         ?C0076:
                                           ; SOURCE LINE # 652
001B 904000            MOV     DPTR,#04000H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 54BF              ANL     A,#0BFH
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 653
0026 904200            MOV     DPTR,#04200H
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 4420              ORL     A,#020H
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
0031 22                RET     
                                           ; SOURCE LINE # 656
0032         ?C0077:
                                           ; SOURCE LINE # 657
0032 904000            MOV     DPTR,#04000H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4440              ORL     A,#040H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
003D 904200            MOV     DPTR,#04200H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 4420              ORL     A,#020H
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
0048 22                RET     
                                           ; SOURCE LINE # 661
0049         ?C0078:
                                           ; SOURCE LINE # 662
0049 904200            MOV     DPTR,#04200H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 54DF              ANL     A,#0DFH
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 663
0054 22                RET     
                                           ; SOURCE LINE # 665
0055         ?C0079:
                                           ; SOURCE LINE # 667
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 63  

0055 7F00              MOV     R7,#00H
0057 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
005A         ?C0081:
005A 22                RET     
             ; FUNCTION _CyIMO_SetSource (END)

             ; FUNCTION CyIMO_EnableDoubler (BEGIN)
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 691
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4410              ORL     A,#010H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 692
000B 22                RET     
             ; FUNCTION CyIMO_EnableDoubler (END)

             ; FUNCTION CyIMO_DisableDoubler (BEGIN)
                                           ; SOURCE LINE # 709
                                           ; SOURCE LINE # 710
                                           ; SOURCE LINE # 711
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 712
000B 22                RET     
             ; FUNCTION CyIMO_DisableDoubler (END)

             ; FUNCTION _CyMasterClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 744
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 747
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
000E 904005            MOV     DPTR,#04005H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54FC              ANL     A,#0FCH
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 64  

0019 FF                MOV     R7,A
001A 904005            MOV     DPTR,#04005H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 748
001F 22                RET     
             ; FUNCTION _CyMasterClk_SetSource (END)

             ; FUNCTION _CyMasterClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 779
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904004            MOV     DPTR,#04004H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 782
000F 22                RET     
             ; FUNCTION _CyMasterClk_SetDivider (END)

             ; FUNCTION _CyBusClk_Internal_SetDivider (BEGIN)
                                           ; SOURCE LINE # 801
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 804
0008 904014            MOV     DPTR,#04014H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54F0              ANL     A,#0F0H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
0013 904010            MOV     DPTR,#04010H
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
0018 904008            MOV     DPTR,#04008H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 4480              ORL     A,#080H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
0023 900000      R     MOV     DPTR,#divider
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 65  

002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 54FF              ANL     A,#0FFH
002E FF                MOV     R7,A
002F 904002            MOV     DPTR,#04002H
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 812
0034 900000      R     MOV     DPTR,#divider
0037 E0                MOVX    A,@DPTR
0038 FE                MOV     R6,A
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EE                MOV     A,R6
003D FF                MOV     R7,A
003E 7E00              MOV     R6,#00H
0040 904003            MOV     DPTR,#04003H
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 821
0045 904001            MOV     DPTR,#04001H
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 4401              ORL     A,#01H
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 822
0050 22                RET     
             ; FUNCTION _CyBusClk_Internal_SetDivider (END)

             ; FUNCTION _CyBusClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 848
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 854
0008 120000      E     LCALL   CyEnterCriticalSection
000B 900000      R     MOV     DPTR,#interruptState
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
0010 904007            MOV     DPTR,#04007H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 7E00              MOV     R6,#00H
0017 EF                MOV     A,R7
0018 7F00              MOV     R7,#00H
001A FE                MOV     R6,A
001B 900000      R     MOV     DPTR,#busClkDiv
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 66  

0023 900000      R     MOV     DPTR,#busClkDiv
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 904006            MOV     DPTR,#04006H
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 7C00              MOV     R4,#00H
0032 EE                MOV     A,R6
0033 4C                ORL     A,R4
0034 FE                MOV     R6,A
0035 EF                MOV     A,R7
0036 4D                ORL     A,R5
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#busClkDiv
003B EE                MOV     A,R6
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
0040 900000      R     MOV     DPTR,#divider
0043 E0                MOVX    A,@DPTR
0044 FE                MOV     R6,A
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 4E                ORL     A,R6
004A 600C              JZ      ?C0088
004C 900000      R     MOV     DPTR,#busClkDiv
004F E0                MOVX    A,@DPTR
0050 FE                MOV     R6,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 4E                ORL     A,R6
0056 705E              JNZ     ?C0087
0058         ?C0088:
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 863
0058 904004            MOV     DPTR,#04004H
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 900000      R     MOV     DPTR,#masterClkDiv
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 865
0062 900000      R     MOV     DPTR,#masterClkDiv
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 C3                CLR     C
0069 9407              SUBB    A,#07H
006B 5005              JNC     ?C0089
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 868
006D 7F07              MOV     R7,#07H
006F 120000      R     LCALL   _CyMasterClk_SetDivider
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 67  

                                           ; SOURCE LINE # 869
0072         ?C0089:
                                           ; SOURCE LINE # 871
0072 900000      R     MOV     DPTR,#divider
0075 E0                MOVX    A,@DPTR
0076 FE                MOV     R6,A
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A EF                MOV     A,R7
007B 4E                ORL     A,R6
007C 7018              JNZ     ?C0090
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 874
007E 904008            MOV     DPTR,#04008H
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 EF                MOV     A,R7
0084 4440              ORL     A,#040H
0086 FF                MOV     R7,A
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 875
0089 900000      R     MOV     DPTR,#divider
008C E0                MOVX    A,@DPTR
008D FE                MOV     R6,A
008E A3                INC     DPTR
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 876
0094 8016              SJMP    ?C0091
0096         ?C0090:
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
0096 900000      R     MOV     DPTR,#divider
0099 E0                MOVX    A,@DPTR
009A FE                MOV     R6,A
009B A3                INC     DPTR
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
009E 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 880
00A1 904008            MOV     DPTR,#04008H
00A4 E0                MOVX    A,@DPTR
00A5 FF                MOV     R7,A
00A6 EF                MOV     A,R7
00A7 54BF              ANL     A,#0BFH
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 881
00AC         ?C0091:
                                           ; SOURCE LINE # 884
00AC 900000      R     MOV     DPTR,#masterClkDiv
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 885
00B4 800B              SJMP    ?C0092
00B6         ?C0087:
                                           ; SOURCE LINE # 887
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 68  

                                           ; SOURCE LINE # 888
00B6 900000      R     MOV     DPTR,#divider
00B9 E0                MOVX    A,@DPTR
00BA FE                MOV     R6,A
00BB A3                INC     DPTR
00BC E0                MOVX    A,@DPTR
00BD FF                MOV     R7,A
00BE 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 889
00C1         ?C0092:
                                           ; SOURCE LINE # 891
00C1 900000      R     MOV     DPTR,#interruptState
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 892
00C9 22                RET     
             ; FUNCTION _CyBusClk_SetDivider (END)

             ; FUNCTION _CyCpuClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 921
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 922
                                           ; SOURCE LINE # 924
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
000F 904005            MOV     DPTR,#04005H
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 EE                MOV     A,R6
0015 540F              ANL     A,#0FH
0017 FE                MOV     R6,A
0018 EF                MOV     A,R7
0019 4E                ORL     A,R6
001A FF                MOV     R7,A
001B 904005            MOV     DPTR,#04005H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 925
0020 22                RET     
             ; FUNCTION _CyCpuClk_SetDivider (END)

             ; FUNCTION _CyUsbClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 948
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 69  

000E 904009            MOV     DPTR,#04009H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54FC              ANL     A,#0FCH
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904009            MOV     DPTR,#04009H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 952
001F 22                RET     
             ; FUNCTION _CyUsbClk_SetSource (END)

             ; FUNCTION CyILO_Start1K (BEGIN)
                                           ; SOURCE LINE # 973
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 976
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4402              ORL     A,#02H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 977
000B 22                RET     
             ; FUNCTION CyILO_Start1K (END)

             ; FUNCTION CyILO_Stop1K (BEGIN)
                                           ; SOURCE LINE # 1001
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1004
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1005
000B 22                RET     
             ; FUNCTION CyILO_Stop1K (END)

             ; FUNCTION CyILO_Start100K (BEGIN)
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1025
000B 22                RET     
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 70  

             ; FUNCTION CyILO_Start100K (END)

             ; FUNCTION CyILO_Stop100K (BEGIN)
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1044
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
000B 22                RET     
             ; FUNCTION CyILO_Stop100K (END)

             ; FUNCTION CyILO_Enable33K (BEGIN)
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1068
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4420              ORL     A,#020H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1069
000B 22                RET     
             ; FUNCTION CyILO_Enable33K (END)

             ; FUNCTION CyILO_Disable33K (BEGIN)
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1091
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54DF              ANL     A,#0DFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1092
000B 22                RET     
             ; FUNCTION CyILO_Disable33K (END)

             ; FUNCTION _CyILO_SetSource (BEGIN)
                                           ; SOURCE LINE # 1113
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1116
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 25E0              ADD     A,ACC
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 71  

000D 25E0              ADD     A,ACC
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 540C              ANL     A,#0CH
0013 FF                MOV     R7,A
0014 904000            MOV     DPTR,#04000H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A 54F3              ANL     A,#0F3H
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 4F                ORL     A,R7
001F FF                MOV     R7,A
0020 904000            MOV     DPTR,#04000H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1117
0025 22                RET     
             ; FUNCTION _CyILO_SetSource (END)

             ; FUNCTION _CyILO_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1137
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1138
                                           ; SOURCE LINE # 1142
0005 904300            MOV     DPTR,#04300H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#state
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1145
000F 900000      R     MOV     DPTR,#mode
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0103
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1147
0017 900000      R     MOV     DPTR,#state
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4410              ORL     A,#010H
001F FF                MOV     R7,A
0020 904300            MOV     DPTR,#04300H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1148
0025 800E              SJMP    ?C0104
0027         ?C0103:
                                           ; SOURCE LINE # 1150
                                           ; SOURCE LINE # 1151
0027 900000      R     MOV     DPTR,#state
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54EF              ANL     A,#0EFH
002F FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 72  

0030 904300            MOV     DPTR,#04300H
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1152
0035         ?C0104:
                                           ; SOURCE LINE # 1155
0035 900000      R     MOV     DPTR,#state
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 5410              ANL     A,#010H
003D FF                MOV     R7,A
003E 7E00              MOV     R6,#00H
0040 EE                MOV     A,R6
0041 C4                SWAP    A
0042 F8                MOV     R0,A
0043 54F0              ANL     A,#0F0H
0045 C8                XCH     A,R0
0046 68                XRL     A,R0
0047 FE                MOV     R6,A
0048 EF                MOV     A,R7
0049 C4                SWAP    A
004A 540F              ANL     A,#0FH
004C 48                ORL     A,R0
004D FF                MOV     R7,A
                                           ; SOURCE LINE # 1156
004E         ?C0105:
004E 22                RET     
             ; FUNCTION _CyILO_SetPowerMode (END)

             ; FUNCTION CyXTAL_32KHZ_Start (BEGIN)
                                           ; SOURCE LINE # 1173
                                           ; SOURCE LINE # 1174
                                           ; SOURCE LINE # 1177
0000 90430A            MOV     DPTR,#0430AH
0003 74F3              MOV     A,#0F3H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1178
0006 904698            MOV     DPTR,#04698H
0009 7403              MOV     A,#03H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1179
000C 904309            MOV     DPTR,#04309H
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 54F3              ANL     A,#0F3H
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 4404              ORL     A,#04H
0018 FF                MOV     R7,A
0019 904309            MOV     DPTR,#04309H
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1183
001E 904308            MOV     DPTR,#04308H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 4404              ORL     A,#04H
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 73  

0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1187
0029 904308            MOV     DPTR,#04308H
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 4401              ORL     A,#01H
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1189
0034 900000      R     MOV     DPTR,#i
0037 7403              MOV     A,#03H
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B 74E8              MOV     A,#0E8H
003D F0                MOVX    @DPTR,A
003E         ?C0106:
003E 900000      R     MOV     DPTR,#i
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 D3                SETB    C
0047 EF                MOV     A,R7
0048 9400              SUBB    A,#00H
004A EE                MOV     A,R6
004B 9400              SUBB    A,#00H
004D 4023              JC      ?C0110
                                           ; SOURCE LINE # 1190
                                           ; SOURCE LINE # 1191
004F 120000      R     LCALL   CyXTAL_32KHZ_ReadStatus
0052 7E00              MOV     R6,#00H
0054 EF                MOV     A,R7
0055 30E506            JNB     ACC.5,?C0109
                                           ; SOURCE LINE # 1192
                                           ; SOURCE LINE # 1194
0058 7F00              MOV     R7,#00H
005A 120000      R     LCALL   _CyXTAL_32KHZ_SetPowerMode
                                           ; SOURCE LINE # 1196
005D 22                RET     
                                           ; SOURCE LINE # 1197
005E         ?C0109:
                                           ; SOURCE LINE # 1198
005E 7F01              MOV     R7,#01H
0060 7E00              MOV     R6,#00H
0062 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1199
0065 900000      R     MOV     DPTR,#i
0068 74FF              MOV     A,#0FFH
006A 75F0FF            MOV     B,#0FFH
006D 120000      E     LCALL   ?C?IILDX
0070 80CC              SJMP    ?C0106
                                           ; SOURCE LINE # 1200
0072         ?C0110:
0072 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Start (END)

             ; FUNCTION CyXTAL_32KHZ_Stop (BEGIN)
                                           ; SOURCE LINE # 1217
                                           ; SOURCE LINE # 1218
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 74  

                                           ; SOURCE LINE # 1219
0000 90430A            MOV     DPTR,#0430AH
0003 74F3              MOV     A,#0F3H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1220
0006 904698            MOV     DPTR,#04698H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1221
000B 904309            MOV     DPTR,#04309H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54F3              ANL     A,#0F3H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 4404              ORL     A,#04H
0017 FF                MOV     R7,A
0018 904309            MOV     DPTR,#04309H
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1223
001D 904308            MOV     DPTR,#04308H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 54FC              ANL     A,#0FCH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1226
0028 904308            MOV     DPTR,#04308H
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 54FB              ANL     A,#0FBH
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1228
0033 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Stop (END)

             ; FUNCTION CyXTAL_32KHZ_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1249
                                           ; SOURCE LINE # 1250
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5420              ANL     A,#020H
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 1251
0009         ?C0112:
0009 22                RET     
             ; FUNCTION CyXTAL_32KHZ_ReadStatus (END)

             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1272
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 75  

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1273
                                           ; SOURCE LINE # 1274
0005 904308            MOV     DPTR,#04308H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5402              ANL     A,#02H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 6004              JZ      ?C0113
0014 7F01              MOV     R7,#01H
0016 8002              SJMP    ?C0114
0018         ?C0113:
0018 7F00              MOV     R7,#00H
001A         ?C0114:
001A 900000      R     MOV     DPTR,#state
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1276
001F 90430A            MOV     DPTR,#0430AH
0022 74F3              MOV     A,#0F3H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1278
0025 900000      R     MOV     DPTR,#mode
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B 6401              XRL     A,#01H
002D 7033              JNZ     ?C0115
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1281
002F 904698            MOV     DPTR,#04698H
0032 7401              MOV     A,#01H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1282
0035 7F0A              MOV     R7,#0AH
0037 7E00              MOV     R6,#00H
0039 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1283
003C 904309            MOV     DPTR,#04309H
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 54F3              ANL     A,#0F3H
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 4408              ORL     A,#08H
0048 FF                MOV     R7,A
0049 904309            MOV     DPTR,#04309H
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1285
004E 7F14              MOV     R7,#014H
0050 7E00              MOV     R6,#00H
0052 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1286
0055 904308            MOV     DPTR,#04308H
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 76  

005A EF                MOV     A,R7
005B 4402              ORL     A,#02H
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1287
0060 802A              SJMP    ?C0116
0062         ?C0115:
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1291
0062 904698            MOV     DPTR,#04698H
0065 7406              MOV     A,#06H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1292
0068 7F0A              MOV     R7,#0AH
006A 7E00              MOV     R6,#00H
006C 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1293
006F 904309            MOV     DPTR,#04309H
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 54F3              ANL     A,#0F3H
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 4404              ORL     A,#04H
007B FF                MOV     R7,A
007C 904309            MOV     DPTR,#04309H
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1295
0081 904308            MOV     DPTR,#04308H
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 EF                MOV     A,R7
0087 54FD              ANL     A,#0FDH
0089 FF                MOV     R7,A
008A EF                MOV     A,R7
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1296
008C         ?C0116:
                                           ; SOURCE LINE # 1298
008C 900000      R     MOV     DPTR,#state
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
                                           ; SOURCE LINE # 1299
0091         ?C0117:
0091 22                RET     
             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (END)

             ; FUNCTION _CyXTAL_Start (BEGIN)
                                           ; SOURCE LINE # 1338
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1339
                                           ; SOURCE LINE # 1340
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1341
000A 900000      R     MOV     DPTR,#wait
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 77  

000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#timeout
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1349
0014 904210            MOV     DPTR,#04210H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 4401              ORL     A,#01H
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1352
001F 900000      R     MOV     DPTR,#wait
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 D3                SETB    C
0026 9400              SUBB    A,#00H
0028 5003              JNC     $ + 5H
002A 020000      R     LJMP    ?C0118
                                           ; SOURCE LINE # 1353
                                           ; SOURCE LINE # 1355
002D 904300            MOV     DPTR,#04300H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#iloEnableState
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1356
0037 904380            MOV     DPTR,#04380H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#pmTwCfg0Tmp
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1357
0041 904382            MOV     DPTR,#04382H
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#pmTwCfg2Tmp
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1360
004B 7F18              MOV     R7,#018H
004D 120000      E     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 1361
0050 900000      R     MOV     DPTR,#status
0053 7410              MOV     A,#010H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1364
0056         ?C0119:
0056 900000      R     MOV     DPTR,#timeout
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C D3                SETB    C
005D 9400              SUBB    A,#00H
005F 4047              JC      ?C0120
                                           ; SOURCE LINE # 1365
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 78  

                                           ; SOURCE LINE # 1367
0061 904210            MOV     DPTR,#04210H
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
                                           ; SOURCE LINE # 1370
0066 900000      R     MOV     DPTR,#count
0069 7404              MOV     A,#04H
006B F0                MOVX    @DPTR,A
006C         ?C0122:
006C 900000      R     MOV     DPTR,#count
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 D3                SETB    C
0073 9400              SUBB    A,#00H
0075 4013              JC      ?C0123
                                           ; SOURCE LINE # 1371
0077         ?C0125:
                                           ; SOURCE LINE # 1372
0077 7F01              MOV     R7,#01H
0079 120000      E     LCALL   _CyPmReadStatus
007C 7E00              MOV     R6,#00H
007E EF                MOV     A,R7
007F 30E0F5            JNB     ACC.0,?C0125
                                           ; SOURCE LINE # 1373
                                           ; SOURCE LINE # 1375
0082         ?C0126:
                                           ; SOURCE LINE # 1376
0082         ?C0124:
0082 900000      R     MOV     DPTR,#count
0085 E0                MOVX    A,@DPTR
0086 14                DEC     A
0087 F0                MOVX    @DPTR,A
0088 80E2              SJMP    ?C0122
008A         ?C0123:
                                           ; SOURCE LINE # 1383
008A 904210            MOV     DPTR,#04210H
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 5480              ANL     A,#080H
0092 FF                MOV     R7,A
0093 7E00              MOV     R6,#00H
0095 EF                MOV     A,R7
0096 4E                ORL     A,R6
0097 7007              JNZ     ?C0121
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1385
0099 900000      R     MOV     DPTR,#status
009C E4                CLR     A
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1386
009E 8008              SJMP    ?C0120
                                           ; SOURCE LINE # 1387
                                           ; SOURCE LINE # 1388
00A0         ?C0121:
00A0 900000      R     MOV     DPTR,#timeout
00A3 E0                MOVX    A,@DPTR
00A4 14                DEC     A
00A5 F0                MOVX    @DPTR,A
00A6 80AE              SJMP    ?C0119
00A8         ?C0120:
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 79  

                                           ; SOURCE LINE # 1392
00A8 900000      R     MOV     DPTR,#iloEnableState
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD EF                MOV     A,R7
00AE 5404              ANL     A,#04H
00B0 FF                MOV     R7,A
00B1 7E00              MOV     R6,#00H
00B3 EF                MOV     A,R7
00B4 4E                ORL     A,R6
00B5 7003              JNZ     ?C0128
                                           ; SOURCE LINE # 1393
                                           ; SOURCE LINE # 1394
00B7 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 1395
00BA         ?C0128:
                                           ; SOURCE LINE # 1396
00BA 900000      R     MOV     DPTR,#pmTwCfg0Tmp
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
00BF 904380            MOV     DPTR,#04380H
00C2 EF                MOV     A,R7
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1397
00C4 900000      R     MOV     DPTR,#pmTwCfg2Tmp
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 904382            MOV     DPTR,#04382H
00CC EF                MOV     A,R7
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1398
00CE         ?C0118:
                                           ; SOURCE LINE # 1400
00CE 900000      R     MOV     DPTR,#status
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
                                           ; SOURCE LINE # 1401
00D3         ?C0129:
00D3 22                RET     
             ; FUNCTION _CyXTAL_Start (END)

             ; FUNCTION CyXTAL_Stop (BEGIN)
                                           ; SOURCE LINE # 1418
                                           ; SOURCE LINE # 1419
                                           ; SOURCE LINE # 1421
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1422
000B 22                RET     
             ; FUNCTION CyXTAL_Stop (END)

             ; FUNCTION CyXTAL_EnableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1440
                                           ; SOURCE LINE # 1441
                                           ; SOURCE LINE # 1443
0000 904210            MOV     DPTR,#04210H
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 80  

0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1444
000B 22                RET     
             ; FUNCTION CyXTAL_EnableErrStatus (END)

             ; FUNCTION CyXTAL_DisableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1462
                                           ; SOURCE LINE # 1463
                                           ; SOURCE LINE # 1465
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1466
000B 22                RET     
             ; FUNCTION CyXTAL_DisableErrStatus (END)

             ; FUNCTION CyXTAL_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1486
                                           ; SOURCE LINE # 1487
                                           ; SOURCE LINE # 1492
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5480              ANL     A,#080H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 6004              JZ      ?C0133
000F 7F01              MOV     R7,#01H
0011 8002              SJMP    ?C0134
0013         ?C0133:
0013 7F00              MOV     R7,#00H
0015         ?C0134:
                                           ; SOURCE LINE # 1493
0015         ?C0135:
0015 22                RET     
             ; FUNCTION CyXTAL_ReadStatus (END)

             ; FUNCTION CyXTAL_EnableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1513
                                           ; SOURCE LINE # 1514
                                           ; SOURCE LINE # 1515
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4440              ORL     A,#040H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 81  

000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1516
000B 22                RET     
             ; FUNCTION CyXTAL_EnableFaultRecovery (END)

             ; FUNCTION CyXTAL_DisableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1535
                                           ; SOURCE LINE # 1536
                                           ; SOURCE LINE # 1537
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54BF              ANL     A,#0BFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1538
000B 22                RET     
             ; FUNCTION CyXTAL_DisableFaultRecovery (END)

             ; FUNCTION _CyXTAL_SetStartup (BEGIN)
                                           ; SOURCE LINE # 1561
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1562
                                           ; SOURCE LINE # 1563
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 541F              ANL     A,#01FH
000D FF                MOV     R7,A
000E 904212            MOV     DPTR,#04212H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54E0              ANL     A,#0E0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904212            MOV     DPTR,#04212H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1565
001F 22                RET     
             ; FUNCTION _CyXTAL_SetStartup (END)

             ; FUNCTION _CyXTAL_SetFbVoltage (BEGIN)
                                           ; SOURCE LINE # 1585
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1586
                                           ; SOURCE LINE # 1587
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 540F              ANL     A,#0FH
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 82  

000D FF                MOV     R7,A
000E 904213            MOV     DPTR,#04213H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54F0              ANL     A,#0F0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904213            MOV     DPTR,#04213H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1589
001F 22                RET     
             ; FUNCTION _CyXTAL_SetFbVoltage (END)

             ; FUNCTION _CyXTAL_SetWdVoltage (BEGIN)
                                           ; SOURCE LINE # 1608
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1609
                                           ; SOURCE LINE # 1611
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 5470              ANL     A,#070H
0012 FF                MOV     R7,A
0013 904213            MOV     DPTR,#04213H
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 548F              ANL     A,#08FH
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904213            MOV     DPTR,#04213H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1612
0024 22                RET     
             ; FUNCTION _CyXTAL_SetWdVoltage (END)

             ; FUNCTION _?CyHalt (BEGIN)
                                           ; SOURCE LINE # 1629
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1631
                                           ; SOURCE LINE # 1632
                                           ; SOURCE LINE # 1634
0008         ?C0141:
                                           ; SOURCE LINE # 1641
0008 9046EA            MOV     DPTR,#046EAH
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 83  

000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1643
000E 900001            MOV     DPTR,#01H
0011 120000      E     LCALL   ?C?ADDXBP
0014 22                RET     
             ; FUNCTION _?CyHalt (END)

             ; FUNCTION CySoftwareReset (BEGIN)
                                           ; SOURCE LINE # 1660
                                           ; SOURCE LINE # 1661
                                           ; SOURCE LINE # 1662
0000 9046F6            MOV     DPTR,#046F6H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1663
000B 22                RET     
             ; FUNCTION CySoftwareReset (END)

             ; FUNCTION _?CyDelay (BEGIN)
                                           ; SOURCE LINE # 1686
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
0009         ?C0144:
                                           ; SOURCE LINE # 1688
0009 850083      E     MOV     DPH,?C_XBP
000C 850082      E     MOV     DPL,?C_XBP+01H
000F 120000      E     LCALL   ?C?LLDXDATA
0012 D3                SETB    C
0013 EF                MOV     A,R7
0014 9400              SUBB    A,#00H
0016 EE                MOV     A,R6
0017 9480              SUBB    A,#080H
0019 402F              JC      ?C0145
                                           ; SOURCE LINE # 1689
                                           ; SOURCE LINE # 1694
001B 900000      R     MOV     DPTR,#cydelay_32k_ms
001E 120000      E     LCALL   ?C?LLDXDATA
0021 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1695
0024 850083      E     MOV     DPH,?C_XBP
0027 850082      E     MOV     DPL,?C_XBP+01H
002A C083              PUSH    DPH
002C C082              PUSH    DPL
002E 120000      E     LCALL   ?C?LLDXDATA
0031 EF                MOV     A,R7
0032 2400              ADD     A,#00H
0034 FF                MOV     R7,A
0035 EE                MOV     A,R6
0036 3480              ADDC    A,#080H
0038 FE                MOV     R6,A
0039 ED                MOV     A,R5
003A 34FF              ADDC    A,#0FFH
003C FD                MOV     R5,A
003D EC                MOV     A,R4
003E 34FF              ADDC    A,#0FFH
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 84  

0040 FC                MOV     R4,A
0041 D082              POP     DPL
0043 D083              POP     DPH
0045 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1696
0048 80BF              SJMP    ?C0144
004A         ?C0145:
                                           ; SOURCE LINE # 1698
004A 900000      R     MOV     DPTR,#cydelay_freq_khz
004D 120000      E     LCALL   ?C?LLDXDATA
0050 850083      E     MOV     DPH,?C_XBP
0053 850082      E     MOV     DPL,?C_XBP+01H
0056 120000      E     LCALL   ?C?LLDXDATA0
0059 120000      E     LCALL   ?C?LMUL
005C 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1699
005F 900004            MOV     DPTR,#04H
0062 120000      E     LCALL   ?C?ADDXBP
0065 22                RET     
             ; FUNCTION _?CyDelay (END)

             ; FUNCTION _?CyDelayFreq (BEGIN)
                                           ; SOURCE LINE # 1757
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1759
0009 850083      E     MOV     DPH,?C_XBP
000C 850082      E     MOV     DPL,?C_XBP+01H
000F 120000      E     LCALL   ?C?LLDXDATA
0012 EF                MOV     A,R7
0013 4E                ORL     A,R6
0014 6011              JZ      ?C0147
                                           ; SOURCE LINE # 1760
                                           ; SOURCE LINE # 1761
0016 850083      E     MOV     DPH,?C_XBP
0019 850082      E     MOV     DPL,?C_XBP+01H
001C 120000      E     LCALL   ?C?LLDXDATA
001F 900000      R     MOV     DPTR,#cydelay_freq_hz
0022 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1762
0025 800E              SJMP    ?C0148
0027         ?C0147:
                                           ; SOURCE LINE # 1764
                                           ; SOURCE LINE # 1765
0027 7F00              MOV     R7,#00H
0029 7E90              MOV     R6,#090H
002B 7DD0              MOV     R5,#0D0H
002D 7C03              MOV     R4,#03H
002F 900000      R     MOV     DPTR,#cydelay_freq_hz
0032 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1766
0035         ?C0148:
                                           ; SOURCE LINE # 1768
0035 900000      R     MOV     DPTR,#cydelay_freq_hz
0038 120000      E     LCALL   ?C?LLDXDATA
003B EF                MOV     A,R7
003C 243F              ADD     A,#03FH
003E FF                MOV     R7,A
003F EE                MOV     A,R6
0040 3442              ADDC    A,#042H
0042 FE                MOV     R6,A
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 85  

0043 ED                MOV     A,R5
0044 340F              ADDC    A,#0FH
0046 FD                MOV     R5,A
0047 EC                MOV     A,R4
0048 3400              ADDC    A,#00H
004A FC                MOV     R4,A
004B 7B40              MOV     R3,#040H
004D 7A42              MOV     R2,#042H
004F 790F              MOV     R1,#0FH
0051 7800              MOV     R0,#00H
0053 120000      E     LCALL   ?C?ULDIV
0056 900000      R     MOV     DPTR,#cydelay_freq_mhz
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1769
005B 900000      R     MOV     DPTR,#cydelay_freq_hz
005E 120000      E     LCALL   ?C?LLDXDATA
0061 EF                MOV     A,R7
0062 24E7              ADD     A,#0E7H
0064 FF                MOV     R7,A
0065 EE                MOV     A,R6
0066 3403              ADDC    A,#03H
0068 FE                MOV     R6,A
0069 ED                MOV     A,R5
006A 3400              ADDC    A,#00H
006C FD                MOV     R5,A
006D EC                MOV     A,R4
006E 3400              ADDC    A,#00H
0070 FC                MOV     R4,A
0071 7BE8              MOV     R3,#0E8H
0073 7A03              MOV     R2,#03H
0075 7900              MOV     R1,#00H
0077 7800              MOV     R0,#00H
0079 120000      E     LCALL   ?C?ULDIV
007C 900000      R     MOV     DPTR,#cydelay_freq_khz
007F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1770
0082 7F00              MOV     R7,#00H
0084 7E80              MOV     R6,#080H
0086 7D00              MOV     R5,#00H
0088 7C00              MOV     R4,#00H
008A 900000      R     MOV     DPTR,#cydelay_freq_khz
008D 120000      E     LCALL   ?C?LLDXDATA0
0090 120000      E     LCALL   ?C?LMUL
0093 900000      R     MOV     DPTR,#cydelay_32k_ms
0096 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1771
0099 900004            MOV     DPTR,#04H
009C 120000      E     LCALL   ?C?ADDXBP
009F 22                RET     
             ; FUNCTION _?CyDelayFreq (END)

             ; FUNCTION _CyWdtStart (BEGIN)
                                           ; SOURCE LINE # 1820
0000 900000      R     MOV     DPTR,#ticks
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#lpMode
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1821
                                           ; SOURCE LINE # 1823
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 86  

000A 900000      R     MOV     DPTR,#ticks
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 5403              ANL     A,#03H
0012 FF                MOV     R7,A
0013 904383            MOV     DPTR,#04383H
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 54FC              ANL     A,#0FCH
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904383            MOV     DPTR,#04383H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1826
0024 904383            MOV     DPTR,#04383H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4480              ORL     A,#080H
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1827
002F 904383            MOV     DPTR,#04383H
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 547F              ANL     A,#07FH
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1831
003A 900000      R     MOV     DPTR,#lpMode
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 C4                SWAP    A
0041 33                RLC     A
0042 54E0              ANL     A,#0E0H
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 5460              ANL     A,#060H
0048 FF                MOV     R7,A
0049 904383            MOV     DPTR,#04383H
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E EE                MOV     A,R6
004F 549F              ANL     A,#09FH
0051 FE                MOV     R6,A
0052 EF                MOV     A,R7
0053 4E                ORL     A,R6
0054 FF                MOV     R7,A
0055 904383            MOV     DPTR,#04383H
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1834
005A 904383            MOV     DPTR,#04383H
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 87  

005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 4410              ORL     A,#010H
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1835
0065 22                RET     
             ; FUNCTION _CyWdtStart (END)

             ; FUNCTION CyWdtClear (BEGIN)
                                           ; SOURCE LINE # 1852
                                           ; SOURCE LINE # 1853
                                           ; SOURCE LINE # 1854
0000 904384            MOV     DPTR,#04384H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1855
0006 22                RET     
             ; FUNCTION CyWdtClear (END)

             ; FUNCTION _CyVdLvDigitEnable (BEGIN)
                                           ; SOURCE LINE # 1880
0000 900000      R     MOV     DPTR,#reset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#threshold
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1881
                                           ; SOURCE LINE # 1882
000A 9044C8            MOV     DPTR,#044C8H
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1884
0010 9046F7            MOV     DPTR,#046F7H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 54BF              ANL     A,#0BFH
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1887
001B 9046F4            MOV     DPTR,#046F4H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 54F0              ANL     A,#0F0H
0023 FF                MOV     R7,A
0024 900000      R     MOV     DPTR,#threshold
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 EE                MOV     A,R6
002A 540F              ANL     A,#0FH
002C FE                MOV     R6,A
002D EE                MOV     A,R6
002E 4F                ORL     A,R7
002F FF                MOV     R7,A
0030 9046F4            MOV     DPTR,#046F4H
0033 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 88  

0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1888
0035 9046F5            MOV     DPTR,#046F5H
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 4401              ORL     A,#01H
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1891
0040 7F01              MOV     R7,#01H
0042 7E00              MOV     R6,#00H
0044 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1893
0047 9046FA            MOV     DPTR,#046FAH
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
                                           ; SOURCE LINE # 1895
004C 900000      R     MOV     DPTR,#reset
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 600D              JZ      ?C0152
                                           ; SOURCE LINE # 1896
                                           ; SOURCE LINE # 1897
0054 9046F7            MOV     DPTR,#046F7H
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 4440              ORL     A,#040H
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1898
005F 800B              SJMP    ?C0153
0061         ?C0152:
                                           ; SOURCE LINE # 1900
                                           ; SOURCE LINE # 1901
0061 9046F7            MOV     DPTR,#046F7H
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 EF                MOV     A,R7
0067 54BF              ANL     A,#0BFH
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1902
006C         ?C0153:
                                           ; SOURCE LINE # 1904
006C 9044D8            MOV     DPTR,#044D8H
006F 7401              MOV     A,#01H
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1905
0072 9044C0            MOV     DPTR,#044C0H
0075 7401              MOV     A,#01H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1906
0078 22                RET     
             ; FUNCTION _CyVdLvDigitEnable (END)

             ; FUNCTION _CyVdLvAnalogEnable (BEGIN)
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 89  

                                           ; SOURCE LINE # 1930
0000 900000      R     MOV     DPTR,#reset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#threshold
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1931
                                           ; SOURCE LINE # 1932
000A 9044C8            MOV     DPTR,#044C8H
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1934
0010 9046F7            MOV     DPTR,#046F7H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 547F              ANL     A,#07FH
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1936
001B 900000      R     MOV     DPTR,#threshold
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 C4                SWAP    A
0022 54F0              ANL     A,#0F0H
0024 FF                MOV     R7,A
0025 9046F4            MOV     DPTR,#046F4H
0028 E0                MOVX    A,@DPTR
0029 FE                MOV     R6,A
002A EE                MOV     A,R6
002B 540F              ANL     A,#0FH
002D FE                MOV     R6,A
002E EF                MOV     A,R7
002F 4E                ORL     A,R6
0030 FF                MOV     R7,A
0031 9046F4            MOV     DPTR,#046F4H
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1937
0036 9046F5            MOV     DPTR,#046F5H
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 4402              ORL     A,#02H
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1940
0041 7F01              MOV     R7,#01H
0043 7E00              MOV     R6,#00H
0045 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1942
0048 9046FA            MOV     DPTR,#046FAH
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
                                           ; SOURCE LINE # 1944
004D 900000      R     MOV     DPTR,#reset
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 90  

0052 EF                MOV     A,R7
0053 600D              JZ      ?C0155
                                           ; SOURCE LINE # 1945
                                           ; SOURCE LINE # 1946
0055 9046F7            MOV     DPTR,#046F7H
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B 4480              ORL     A,#080H
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1947
0060 800B              SJMP    ?C0156
0062         ?C0155:
                                           ; SOURCE LINE # 1949
                                           ; SOURCE LINE # 1950
0062 9046F7            MOV     DPTR,#046F7H
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 547F              ANL     A,#07FH
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1951
006D         ?C0156:
                                           ; SOURCE LINE # 1953
006D 9044D8            MOV     DPTR,#044D8H
0070 7401              MOV     A,#01H
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1954
0073 9044C0            MOV     DPTR,#044C0H
0076 7401              MOV     A,#01H
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1955
0079 22                RET     
             ; FUNCTION _CyVdLvAnalogEnable (END)

             ; FUNCTION CyVdLvDigitDisable (BEGIN)
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1974
                                           ; SOURCE LINE # 1975
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1977
000B 9046F7            MOV     DPTR,#046F7H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54BF              ANL     A,#0BFH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
0016         ?C0158:
                                           ; SOURCE LINE # 1979
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 91  

0016 9046FA            MOV     DPTR,#046FAH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 5407              ANL     A,#07H
001E FF                MOV     R7,A
001F 7E00              MOV     R6,#00H
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 70F1              JNZ     ?C0158
                                           ; SOURCE LINE # 1980
                                           ; SOURCE LINE # 1982
0025         ?C0159:
                                           ; SOURCE LINE # 1983
0025         ?C0160:
0025 22                RET     
             ; FUNCTION CyVdLvDigitDisable (END)

             ; FUNCTION CyVdLvAnalogDisable (BEGIN)
                                           ; SOURCE LINE # 2001
                                           ; SOURCE LINE # 2002
                                           ; SOURCE LINE # 2003
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2005
000B 9046F7            MOV     DPTR,#046F7H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 547F              ANL     A,#07FH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
0016         ?C0161:
                                           ; SOURCE LINE # 2007
0016 9046FA            MOV     DPTR,#046FAH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 5407              ANL     A,#07H
001E FF                MOV     R7,A
001F 7E00              MOV     R6,#00H
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 70F1              JNZ     ?C0161
                                           ; SOURCE LINE # 2008
                                           ; SOURCE LINE # 2010
0025         ?C0162:
                                           ; SOURCE LINE # 2011
0025         ?C0163:
0025 22                RET     
             ; FUNCTION CyVdLvAnalogDisable (END)

             ; FUNCTION CyVdHvAnalogEnable (BEGIN)
                                           ; SOURCE LINE # 2029
                                           ; SOURCE LINE # 2030
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 92  

                                           ; SOURCE LINE # 2031
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2033
0006 9046F7            MOV     DPTR,#046F7H
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B EF                MOV     A,R7
000C 547F              ANL     A,#07FH
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2035
0011 9046F5            MOV     DPTR,#046F5H
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 4404              ORL     A,#04H
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2038
001C 7F01              MOV     R7,#01H
001E 7E00              MOV     R6,#00H
0020 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 2040
0023 9046FA            MOV     DPTR,#046FAH
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 2042
0028 9044D8            MOV     DPTR,#044D8H
002B 7401              MOV     A,#01H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2043
002E 9044C0            MOV     DPTR,#044C0H
0031 7401              MOV     A,#01H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2044
0034 22                RET     
             ; FUNCTION CyVdHvAnalogEnable (END)

             ; FUNCTION CyVdHvAnalogDisable (BEGIN)
                                           ; SOURCE LINE # 2062
                                           ; SOURCE LINE # 2063
                                           ; SOURCE LINE # 2064
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2065
000B 22                RET     
             ; FUNCTION CyVdHvAnalogDisable (END)

             ; FUNCTION _CyVdStickyStatus (BEGIN)
                                           ; SOURCE LINE # 2088
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 93  

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2089
                                           ; SOURCE LINE # 2092
0005 9046FA            MOV     DPTR,#046FAH
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#status
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2093
000F 9046FA            MOV     DPTR,#046FAH
0012 C083              PUSH    DPH
0014 C082              PUSH    DPL
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#mask
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E F4                CPL     A
001F FE                MOV     R6,A
0020 EF                MOV     A,R7
0021 5E                ANL     A,R6
0022 FF                MOV     R7,A
0023 D082              POP     DPL
0025 D083              POP     DPH
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2095
0029 900000      R     MOV     DPTR,#status
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 2096
002E         ?C0166:
002E 22                RET     
             ; FUNCTION _CyVdStickyStatus (END)

             ; FUNCTION CyVdRealTimeStatus (BEGIN)
                                           ; SOURCE LINE # 2117
                                           ; SOURCE LINE # 2118
                                           ; SOURCE LINE # 2122
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2123
0008 9046FC            MOV     DPTR,#046FCH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 900000      R     MOV     DPTR,#vdFlagsState
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2124
0012 900000      R     MOV     DPTR,#interruptState
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 2126
001A 900000      R     MOV     DPTR,#vdFlagsState
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
                                           ; SOURCE LINE # 2127
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 94  

001F         ?C0167:
001F 22                RET     
             ; FUNCTION CyVdRealTimeStatus (END)

             ; FUNCTION CyDisableInts (BEGIN)
                                           ; SOURCE LINE # 2144
                                           ; SOURCE LINE # 2145
                                           ; SOURCE LINE # 2149
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2154
0008 9044C8            MOV     DPTR,#044C8H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D E4                CLR     A
000E FC                MOV     R4,A
000F FD                MOV     R5,A
0010 FE                MOV     R6,A
0011 900000      R     MOV     DPTR,#intState
0014 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2155
0017 900000      R     MOV     DPTR,#intState
001A 120000      E     LCALL   ?C?LLDXDATA
001D C004              PUSH    AR4
001F C005              PUSH    AR5
0021 C006              PUSH    AR6
0023 C007              PUSH    AR7
0025 9044C9            MOV     DPTR,#044C9H
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A E4                CLR     A
002B FC                MOV     R4,A
002C FD                MOV     R5,A
002D FE                MOV     R6,A
002E 7808              MOV     R0,#08H
0030 120000      E     LCALL   ?C?LSHL
0033 A804              MOV     R0,AR4
0035 A905              MOV     R1,AR5
0037 AA06              MOV     R2,AR6
0039 AB07              MOV     R3,AR7
003B D007              POP     AR7
003D D006              POP     AR6
003F D005              POP     AR5
0041 D004              POP     AR4
0043 120000      E     LCALL   ?C?LOR
0046 900000      R     MOV     DPTR,#intState
0049 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2156
004C 900000      R     MOV     DPTR,#intState
004F 120000      E     LCALL   ?C?LLDXDATA
0052 C004              PUSH    AR4
0054 C005              PUSH    AR5
0056 C006              PUSH    AR6
0058 C007              PUSH    AR7
005A 9044CA            MOV     DPTR,#044CAH
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F E4                CLR     A
0060 FC                MOV     R4,A
0061 FD                MOV     R5,A
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 95  

0062 FE                MOV     R6,A
0063 7810              MOV     R0,#010H
0065 120000      E     LCALL   ?C?LSHL
0068 A804              MOV     R0,AR4
006A A905              MOV     R1,AR5
006C AA06              MOV     R2,AR6
006E AB07              MOV     R3,AR7
0070 D007              POP     AR7
0072 D006              POP     AR6
0074 D005              POP     AR5
0076 D004              POP     AR4
0078 120000      E     LCALL   ?C?LOR
007B 900000      R     MOV     DPTR,#intState
007E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2157
0081 900000      R     MOV     DPTR,#intState
0084 120000      E     LCALL   ?C?LLDXDATA
0087 C004              PUSH    AR4
0089 C005              PUSH    AR5
008B C006              PUSH    AR6
008D C007              PUSH    AR7
008F 9044CB            MOV     DPTR,#044CBH
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 E4                CLR     A
0095 FC                MOV     R4,A
0096 FD                MOV     R5,A
0097 FE                MOV     R6,A
0098 7818              MOV     R0,#018H
009A 120000      E     LCALL   ?C?LSHL
009D A804              MOV     R0,AR4
009F A905              MOV     R1,AR5
00A1 AA06              MOV     R2,AR6
00A3 AB07              MOV     R3,AR7
00A5 D007              POP     AR7
00A7 D006              POP     AR6
00A9 D005              POP     AR5
00AB D004              POP     AR4
00AD 120000      E     LCALL   ?C?LOR
00B0 900000      R     MOV     DPTR,#intState
00B3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2161
00B6 9044C8            MOV     DPTR,#044C8H
00B9 74FF              MOV     A,#0FFH
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2162
00BC 9044C9            MOV     DPTR,#044C9H
00BF 74FF              MOV     A,#0FFH
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2163
00C2 9044CA            MOV     DPTR,#044CAH
00C5 74FF              MOV     A,#0FFH
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2164
00C8 9044CB            MOV     DPTR,#044CBH
00CB 74FF              MOV     A,#0FFH
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2176
00CE 900000      R     MOV     DPTR,#interruptState
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3 120000      E     LCALL   _CyExitCriticalSection
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 96  

                                           ; SOURCE LINE # 2178
00D6 900000      R     MOV     DPTR,#intState
00D9 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 2179
00DC         ?C0168:
00DC 22                RET     
             ; FUNCTION CyDisableInts (END)

             ; FUNCTION _CyEnableInts (BEGIN)
                                           ; SOURCE LINE # 2196
0000 900000      R     MOV     DPTR,#mask
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2197
                                           ; SOURCE LINE # 2201
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2206
000E 900000      R     MOV     DPTR,#mask
0011 120000      E     LCALL   ?C?LLDXDATA
0014 7818              MOV     R0,#018H
0016 120000      E     LCALL   ?C?ULSHR
0019 9044C3            MOV     DPTR,#044C3H
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2207
001E 900000      R     MOV     DPTR,#mask
0021 120000      E     LCALL   ?C?LLDXDATA
0024 7810              MOV     R0,#010H
0026 120000      E     LCALL   ?C?ULSHR
0029 9044C2            MOV     DPTR,#044C2H
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2208
002E 900000      R     MOV     DPTR,#mask
0031 120000      E     LCALL   ?C?LLDXDATA
0034 7808              MOV     R0,#08H
0036 120000      E     LCALL   ?C?ULSHR
0039 9044C1            MOV     DPTR,#044C1H
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2209
003E 900000      R     MOV     DPTR,#mask
0041 120000      E     LCALL   ?C?LLDXDATA
0044 9044C0            MOV     DPTR,#044C0H
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2217
0049 900000      R     MOV     DPTR,#interruptState
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 2219
0051 22                RET     
             ; FUNCTION _CyEnableInts (END)

             ; FUNCTION _CyIntSetVector (BEGIN)
                                           ; SOURCE LINE # 2500
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 97  

0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2501
                                           ; SOURCE LINE # 2502
                                           ; SOURCE LINE # 2504
000D 900000      R     MOV     DPTR,#number
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 D3                SETB    C
0014 941F              SUBB    A,#01FH
0016 5003              JNC     ?C0171
0018 D3                SETB    C
0019 8001              SJMP    ?C0172
001B         ?C0171:
001B C3                CLR     C
001C         ?C0172:
001C 4005              JC      ?C0170
001E 7F00              MOV     R7,#00H
0020 120000      R     LCALL   _?CyHalt
0023         ?C0170:
                                           ; SOURCE LINE # 2507
0023 900000      R     MOV     DPTR,#number
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 541F              ANL     A,#01FH
002B FF                MOV     R7,A
002C 7E00              MOV     R6,#00H
002E EF                MOV     A,R7
002F 25E0              ADD     A,ACC
0031 FF                MOV     R7,A
0032 EE                MOV     A,R6
0033 33                RLC     A
0034 FE                MOV     R6,A
0035 EF                MOV     A,R7
0036 2400              ADD     A,#00H
0038 FF                MOV     R7,A
0039 EE                MOV     A,R6
003A 3444              ADDC    A,#044H
003C FE                MOV     R6,A
003D AA06              MOV     R2,AR6
003F A907              MOV     R1,AR7
0041 7B01              MOV     R3,#01H
0043 120000      E     LCALL   _cyread16_nodpx
0046 900000      R     MOV     DPTR,#oldIsr
0049 EE                MOV     A,R6
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2511
004E 900000      R     MOV     DPTR,#number
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 7E02              MOV     R6,#02H
0055 EF                MOV     A,R7
0056 8EF0              MOV     B,R6
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 98  

0058 A4                MUL     AB
0059 FF                MOV     R7,A
005A AEF0              MOV     R6,B
005C EF                MOV     A,R7
005D 2400              ADD     A,#00H
005F FF                MOV     R7,A
0060 EE                MOV     A,R6
0061 3444              ADDC    A,#044H
0063 FE                MOV     R6,A
0064 AA06              MOV     R2,AR6
0066 A907              MOV     R1,AR7
0068 7B01              MOV     R3,#01H
006A 900000      R     MOV     DPTR,#address
006D E0                MOVX    A,@DPTR
006E FE                MOV     R6,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 AD07              MOV     R5,AR7
0074 AC06              MOV     R4,AR6
0076 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 2513
0079 900000      R     MOV     DPTR,#oldIsr
007C E0                MOVX    A,@DPTR
007D FE                MOV     R6,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
                                           ; SOURCE LINE # 2514
0081         ?C0173:
0081 22                RET     
             ; FUNCTION _CyIntSetVector (END)

             ; FUNCTION _CyIntGetVector (BEGIN)
                                           ; SOURCE LINE # 2531
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2532
                                           ; SOURCE LINE # 2533
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0175
0010 D3                SETB    C
0011 8001              SJMP    ?C0176
0013         ?C0175:
0013 C3                CLR     C
0014         ?C0176:
0014 4005              JC      ?C0174
0016 7F00              MOV     R7,#00H
0018 120000      R     LCALL   _?CyHalt
001B         ?C0174:
                                           ; SOURCE LINE # 2535
001B 900000      R     MOV     DPTR,#number
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 541F              ANL     A,#01FH
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 99  

0023 FF                MOV     R7,A
0024 7E00              MOV     R6,#00H
0026 EF                MOV     A,R7
0027 25E0              ADD     A,ACC
0029 FF                MOV     R7,A
002A EE                MOV     A,R6
002B 33                RLC     A
002C FE                MOV     R6,A
002D EF                MOV     A,R7
002E 2400              ADD     A,#00H
0030 FF                MOV     R7,A
0031 EE                MOV     A,R6
0032 3444              ADDC    A,#044H
0034 FE                MOV     R6,A
0035 AA06              MOV     R2,AR6
0037 A907              MOV     R1,AR7
0039 7B01              MOV     R3,#01H
003B 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 2537
003E         ?C0177:
003E 22                RET     
             ; FUNCTION _CyIntGetVector (END)

             ; FUNCTION _CyIntSetPriority (BEGIN)
                                           ; SOURCE LINE # 2555
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#priority
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2556
                                           ; SOURCE LINE # 2557
000A 900000      R     MOV     DPTR,#priority
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9407              SUBB    A,#07H
0013 5003              JNC     ?C0179
0015 D3                SETB    C
0016 8001              SJMP    ?C0180
0018         ?C0179:
0018 C3                CLR     C
0019         ?C0180:
0019 4005              JC      ?C0178
001B 7F00              MOV     R7,#00H
001D 120000      R     LCALL   _?CyHalt
0020         ?C0178:
                                           ; SOURCE LINE # 2559
0020 900000      R     MOV     DPTR,#number
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 D3                SETB    C
0027 941F              SUBB    A,#01FH
0029 5003              JNC     ?C0182
002B D3                SETB    C
002C 8001              SJMP    ?C0183
002E         ?C0182:
002E C3                CLR     C
002F         ?C0183:
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 100 

002F 4005              JC      ?C0181
0031 7F00              MOV     R7,#00H
0033 120000      R     LCALL   _?CyHalt
0036         ?C0181:
                                           ; SOURCE LINE # 2561
0036 900000      R     MOV     DPTR,#priority
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 5407              ANL     A,#07H
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 75F020            MOV     B,#020H
0045 A4                MUL     AB
0046 FF                MOV     R7,A
0047 AEF0              MOV     R6,B
0049 900000      R     MOV     DPTR,#number
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E EE                MOV     A,R6
004F 541F              ANL     A,#01FH
0051 FE                MOV     R6,A
0052 7480              MOV     A,#080H
0054 2E                ADD     A,R6
0055 F582              MOV     DPL,A
0057 E4                CLR     A
0058 3444              ADDC    A,#044H
005A F583              MOV     DPH,A
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2563
005E 22                RET     
             ; FUNCTION _CyIntSetPriority (END)

             ; FUNCTION _CyIntGetPriority (BEGIN)
                                           ; SOURCE LINE # 2580
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2581
                                           ; SOURCE LINE # 2582
                                           ; SOURCE LINE # 2584
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0186
0010 D3                SETB    C
0011 8001              SJMP    ?C0187
0013         ?C0186:
0013 C3                CLR     C
0014         ?C0187:
0014 4005              JC      ?C0185
0016 7F00              MOV     R7,#00H
0018 120000      R     LCALL   _?CyHalt
001B         ?C0185:
                                           ; SOURCE LINE # 2586
001B 900000      R     MOV     DPTR,#number
001E E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 101 

001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 541F              ANL     A,#01FH
0023 FF                MOV     R7,A
0024 7480              MOV     A,#080H
0026 2F                ADD     A,R7
0027 F582              MOV     DPL,A
0029 E4                CLR     A
002A 3444              ADDC    A,#044H
002C F583              MOV     DPH,A
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 C4                SWAP    A
0032 13                RRC     A
0033 5407              ANL     A,#07H
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#priority
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2588
003B 900000      R     MOV     DPTR,#priority
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
                                           ; SOURCE LINE # 2589
0040         ?C0188:
0040 22                RET     
             ; FUNCTION _CyIntGetPriority (END)

             ; FUNCTION _CyIntGetState (BEGIN)
                                           ; SOURCE LINE # 2606
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2607
                                           ; SOURCE LINE # 2608
                                           ; SOURCE LINE # 2610
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0190
0010 D3                SETB    C
0011 8001              SJMP    ?C0191
0013         ?C0190:
0013 C3                CLR     C
0014         ?C0191:
0014 4005              JC      ?C0189
0016 7F00              MOV     R7,#00H
0018 120000      R     LCALL   _?CyHalt
001B         ?C0189:
                                           ; SOURCE LINE # 2613
001B 900000      R     MOV     DPTR,#number
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 541F              ANL     A,#01FH
0023 FF                MOV     R7,A
0024 7E00              MOV     R6,#00H
0026 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 102 

0027 7803              MOV     R0,#03H
0029         ?C0195:
0029 CE                XCH     A,R6
002A C3                CLR     C
002B 13                RRC     A
002C CE                XCH     A,R6
002D 13                RRC     A
002E D8F9              DJNZ    R0,?C0195
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 24C0              ADD     A,#0C0H
0034 FF                MOV     R7,A
0035 EE                MOV     A,R6
0036 3444              ADDC    A,#044H
0038 FE                MOV     R6,A
0039 900000      R     MOV     DPTR,#stateReg
003C EE                MOV     A,R6
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2616
0041 900000      R     MOV     DPTR,#number
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 5407              ANL     A,#07H
0049 FF                MOV     R7,A
004A 7401              MOV     A,#01H
004C A807              MOV     R0,AR7
004E 08                INC     R0
004F 8002              SJMP    ?C0197
0051         ?C0196:
0051 C3                CLR     C
0052 33                RLC     A
0053         ?C0197:
0053 D8FC              DJNZ    R0,?C0196
0055 FF                MOV     R7,A
0056 900000      R     MOV     DPTR,#stateReg
0059 E0                MOVX    A,@DPTR
005A FC                MOV     R4,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D FD                MOV     R5,A
005E 8D82              MOV     DPL,R5
0060 8C83              MOV     DPH,R4
0062 E0                MOVX    A,@DPTR
0063 FE                MOV     R6,A
0064 EF                MOV     A,R7
0065 5E                ANL     A,R6
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 6004              JZ      ?C0192
006A 7F01              MOV     R7,#01H
006C 8002              SJMP    ?C0193
006E         ?C0192:
006E 7F00              MOV     R7,#00H
0070         ?C0193:
                                           ; SOURCE LINE # 2617
0070         ?C0194:
0070 22                RET     
             ; FUNCTION _CyIntGetState (END)
C51 COMPILER V9.51   CYLIB                                                                 09/04/2014 17:45:51 PAGE 103 




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4260    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     14      82
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
