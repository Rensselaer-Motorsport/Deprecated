C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\cyfitter_cfg.lst) CD DB 
                    -NOIP OT(2,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 3.0 SP1
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  25          
  26          
  27          #if defined(__C51__) || defined(__CX51__)
  28                  #define CYPACKED
  29                  #define CYPACKED_ATTR
  30                  #define CYALIGNED
  31                  
  32              #define CY_CFG_UNUSED
  33                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  34          
  35          
  36          
  37                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  38                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  39                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  40          #else
                      #error Unsupported toolchain
              #endif
  43          
  44          
  45          
  46          /* Clock startup error codes                                                   */
  47          #define CYCLOCKSTART_NO_ERROR    0u
  48          #define CYCLOCKSTART_XTAL_ERROR  1u
  49          #define CYCLOCKSTART_32KHZ_ERROR 2u
  50          #define CYCLOCKSTART_PLL_ERROR   3u
  51          
  52          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  53          /*******************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 2   

  54          * Function Name: CyClockStartupError
  55          ********************************************************************************
  56          * Summary:
  57          *  If an error is encountered during clock configuration (crystal startup error,
  58          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  59          *  the customer, this function will stop in an infinite loop.
  60          *
  61          * Parameters:
  62          *   void
  63          *
  64          * Return:
  65          *   void
  66          *
  67          *******************************************************************************/
  68          CY_CFG_UNUSED
  69          static void CyClockStartupError(uint8 errorCode);
  70          CY_CFG_UNUSED
  71          static void CyClockStartupError(uint8 errorCode)
  72          {
  73   1          /* To remove the compiler warning if errorCode not used.                */
  74   1          errorCode = errorCode;
  75   1      
  76   1          /* `#START CyClockStartupError` */
  77   1      
  78   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  79   1          /* we will end up here to allow the customer to implement something to  */
  80   1          /* deal with the clock condition.                                       */
  81   1      
  82   1          /* `#END` */
  83   1      
  84   1          /* If nothing else, stop here since the clocks have not started         */
  85   1          /* correctly.                                                           */
  86   1          while(1) {}
  87   1      }
  88          #endif
  89          
  90          
  91          /*******************************************************************************
  92          * Function Name: ClockSetup
  93          ********************************************************************************
  94          *
  95          * Summary:
  96          *  Performs the initialization of all of the clocks in the device based on the
  97          *  settings in the Clock tab of the DWR.  This includes enabling the requested
  98          *  clocks and setting the necessary dividers to produce the desired frequency. 
  99          *
 100          * Parameters:
 101          *  void
 102          *
 103          * Return:
 104          *  void
 105          *
 106          *******************************************************************************/
 107          static void ClockSetup(void);
 108          static void ClockSetup(void)
 109          {
 110   1              uint32 timeout;
 111   1              uint8 pllLock;
 112   1      
 113   1      
 114   1              /* Configure ILO based on settings from Clock DWR */
 115   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 3   

 116   1      
 117   1              /* Configure IMO based on settings from Clock DWR */
 118   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 119   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 120   1      
 121   1              /* Configure PLL based on settings from Clock DWR */
 122   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0818u);
 123   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 124   1              /* Wait up to 250us for the PLL to lock */
 125   1              pllLock = 0u;
 126   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 127   1              { 
 128   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 129   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 130   2              }
 131   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 132   1              if (timeout == 0u)
 133   1              {
 134   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 135   2              }
 136   1      
 137   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 138   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 139   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 140   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 141   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 142   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 143   1      
 144   1              /* Configure USB Clock based on settings from Clock DWR */
 145   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 146   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 147   1      }
 148          
 149          
 150          /* Analog API Functions */
 151          
 152          
 153          /*******************************************************************************
 154          * Function Name: AnalogSetDefault
 155          ********************************************************************************
 156          *
 157          * Summary:
 158          *  Sets up the analog portions of the chip to default values based on chip
 159          *  configuration options from the project.
 160          *
 161          * Parameters:
 162          *  void
 163          *
 164          * Return:
 165          *  void
 166          *
 167          *******************************************************************************/
 168          static void AnalogSetDefault(void);
 169          static void AnalogSetDefault(void)
 170          {
 171   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 172   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 173   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 174   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 175   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 4   

 176          
 177          
 178          /*******************************************************************************
 179          * Function Name: SetAnalogRoutingPumps
 180          ********************************************************************************
 181          *
 182          * Summary:
 183          * Enables or disables the analog pumps feeding analog routing switches.
 184          * Intended to be called at startup, based on the Vdda system configuration;
 185          * may be called during operation when the user informs us that the Vdda voltage
 186          * crossed the pump threshold.
 187          *
 188          * Parameters:
 189          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 190          *
 191          * Return:
 192          *  void
 193          *
 194          *******************************************************************************/
 195          void SetAnalogRoutingPumps(uint8 enabled)
 196          {
 197   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 198   1              if (enabled != 0u)
 199   1              {
 200   2                      regValue |= 0x00u;
 201   2              }
 202   1              else
 203   1              {
 204   2                      regValue &= (uint8)~0x00u;
 205   2              }
 206   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 207   1      }
 208          
 209          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 210          
 211          
 212          /*******************************************************************************
 213          * Function Name: cyfitter_cfg
 214          ********************************************************************************
 215          * Summary:
 216          *  This function is called by the start-up code for the selected device. It
 217          *  performs all of the necessary device configuration based on the design
 218          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 219          *  as Clocks and Pins as well as any component configuration that is necessary.
 220          *
 221          * Parameters:  
 222          *   void
 223          *
 224          * Return:
 225          *   void
 226          *
 227          *******************************************************************************/
 228          
 229          void cyfitter_cfg(void)
 230          {
 231   1              /* IOPINS0_8 Address: CYREG_PRT15_DR Size (bytes): 10 */
 232   1              static const uint8 CYCODE BS_IOPINS0_8_VAL[] = {
 233   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0xC0u, 0x00u};
 234   1      
 235   1              /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 236   1              static const uint8 CYCODE BS_IOPINS0_1_VAL[] = {
 237   1                      0x00u, 0x04u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 5   

 238   1      
 239   1              /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 240   1              static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
 241   1                      0x00u, 0x7Fu, 0x7Fu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 242   1      
 243   1      
 244   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 245   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 246   1              /* Setup clocks based on selections from Clock DWR */
 247   1              ClockSetup();
 248   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 249   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 250   1      
 251   1              {
 252   2                      static const uint8 CYCODE cfg_byte_table[] = {
 253   2                              0x0Cu,
 254   2                              0x00u, 0x45u, 0x01u, /* Base address 0x004500 */
 255   2                              /* CYDEV_PICU_INTTYPE_PICU15_BASE */
 256   2                              0x7Eu, 0x02u, 
 257   2                              0x00u, 0x52u, 0x01u, /* Base address 0x005200 */
 258   2                              /* CYDEV_PRTDSI_PRT15_BASE */
 259   2                              0x7Cu, 0x40u, 
 260   2                              0x01u, 0x17u, 0x02u, /* Base address 0x011700 */
 261   2                              /* CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u */
 262   2                              0xEAu, 0x02u, 0xEEu, 0x0Au, 
 263   2                              0x01u, 0x19u, 0x02u, /* Base address 0x011900 */
 264   2                              /* CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u */
 265   2                              0xEAu, 0x02u, 0xEEu, 0x0Au, 
 266   2                              0x01u, 0x40u, 0x03u, /* Base address 0x014000 */
 267   2                              /* CYDEV_UCFG_DSI0_BASE */
 268   2                              0x33u, 0x81u, 0x36u, 0x40u, 
 269   2                              /* CYDEV_UCFG_DSI0_BASE + 0x00000080u */
 270   2                              0xCCu, 0x70u, 
 271   2                              0x01u, 0x41u, 0x03u, /* Base address 0x014100 */
 272   2                              /* CYDEV_UCFG_DSI1_BASE + 0x00000080u */
 273   2                              0x9Fu, 0x01u, 0xA6u, 0x40u, 0xA7u, 0x80u, 
 274   2                              0x01u, 0x42u, 0x03u, /* Base address 0x014200 */
 275   2                              /* CYDEV_UCFG_DSI2_BASE + 0x00000080u */
 276   2                              0x9Fu, 0x01u, 0xA6u, 0x40u, 0xA7u, 0x80u, 
 277   2                              0x01u, 0x43u, 0x03u, /* Base address 0x014300 */
 278   2                              /* CYDEV_UCFG_DSI3_BASE + 0x00000080u */
 279   2                              0x9Fu, 0x01u, 0xA6u, 0x40u, 0xA7u, 0x80u, 
 280   2                              0x01u, 0x47u, 0x04u, /* Base address 0x014700 */
 281   2                              /* CYDEV_UCFG_DSI7_BASE */
 282   2                              0x08u, 0x08u, 0x0Bu, 0x04u, 0x0Fu, 0x40u, 
 283   2                              /* CYDEV_UCFG_DSI7_BASE + 0x00000080u */
 284   2                              0xC2u, 0x0Eu, 
 285   2                              0x01u, 0x48u, 0x04u, /* Base address 0x014800 */
 286   2                              /* CYDEV_UCFG_DSI8_BASE + 0x00000080u */
 287   2                              0xAEu, 0x40u, 0xAFu, 0x81u, 0xEAu, 0x40u, 0xEEu, 0x50u, 
 288   2                              0x01u, 0x4Cu, 0x02u, /* Base address 0x014C00 */
 289   2                              /* CYDEV_UCFG_DSI12_BASE + 0x00000080u */
 290   2                              0xACu, 0x08u, 0xAFu, 0x44u, 
 291   2                              0x01u, 0x51u, 0x01u, /* Base address 0x015100 */
 292   2                              /* CYREG_IDMUX_IRQ_CTL0 */
 293   2                              0x00u, 0x2Au, 
 294   2                      };
 295   2                      /* BYTES: 95 */
 296   2      
 297   2      
 298   2                      CYPACKED typedef struct {
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 6   

 299   2                              void CYFAR *address;
 300   2                              uint16 size;
 301   2                      } CYPACKED_ATTR cfg_memset_t;
 302   2      
 303   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 304   2                              /* address, size */
 305   2                              {(void CYFAR *)(CYREG_PRT0_DR), 16u},
 306   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 307   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 308   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 309   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 310   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 311   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 312   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 313   2                      };
 314   2      
 315   2                      uint8 CYDATA i;
 316   2      
 317   2                      /* Zero out critical memory blocks before beginning configuration */
 318   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 319   2                      {
 320   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 321   3                              CYMEMZERO(ms->address, ms->size);
 322   3                      }
 323   2      
 324   2                      cfg_write_bytes_code(cfg_byte_table);
 325   2      
 326   2                      /* Enable digital routing */
 327   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 328   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 329   2      
 330   2                      /* Enable UDB array */
 331   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 332   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 333   2              }
 334   1      
 335   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 336   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT15_DR), (const void CYCODE *)(BS_IOPINS0_8_VAL), 10u);
 337   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT1_DM0), (const void CYCODE *)(BS_IOPINS0_1_VAL), 8u);
 338   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (const void CYCODE *)(BS_IOPINS0_2_VAL), 8u);
 339   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 340   1      
 341   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 342   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 343   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 344   1              {
 345   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 346   2              }
 347   1      
 348   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL0_UDB_TEST_3), 0x40u);
 349   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL1_UDB_TEST_3), 0x40u);
 350   1      
 351   1              /* Perform basic analog initialization to defaults */
 352   1              AnalogSetDefault();
 353   1      
 354   1              /* Configure alternate active mode */
 355   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 356   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 7   

             -~0x02u);        /* Disable CPU */
 357   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 71
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 86
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 115
0000 904300            MOV     DPTR,#04300H
0003 7406              MOV     A,#06H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
0006 904200            MOV     DPTR,#04200H
0009 7452              MOV     A,#052H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
000C 7B0C              MOV     R3,#0CH
000E 7A01              MOV     R2,#01H
0010 790F              MOV     R1,#0FH
0012 120000      E     LCALL   _cyread8
0015 9046A1            MOV     DPTR,#046A1H
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
001A 7B00              MOV     R3,#00H
001C 7A42              MOV     R2,#042H
001E 7922              MOV     R1,#022H
0020 7D18              MOV     R5,#018H
0022 7C08              MOV     R4,#08H
0024 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 123
0027 7B00              MOV     R3,#00H
0029 7A42              MOV     R2,#042H
002B 7920              MOV     R1,#020H
002D 7D51              MOV     R5,#051H
002F 7C12              MOV     R4,#012H
0031 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 125
0034 900000      R     MOV     DPTR,#pllLock
0037 E4                CLR     A
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0039 7F19              MOV     R7,#019H
003B 7E00              MOV     R6,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 9   

003D 7D00              MOV     R5,#00H
003F 7C00              MOV     R4,#00H
0041 900000      R     MOV     DPTR,#timeout
0044 120000      E     LCALL   ?C?LSTXDATA
0047         ?C0004:
0047 900000      R     MOV     DPTR,#timeout
004A 120000      E     LCALL   ?C?LLDXDATA
004D D3                SETB    C
004E EF                MOV     A,R7
004F 9400              SUBB    A,#00H
0051 EE                MOV     A,R6
0052 9400              SUBB    A,#00H
0054 404E              JC      ?C0005
0056 900000      R     MOV     DPTR,#pllLock
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 6403              XRL     A,#03H
005E 6044              JZ      ?C0005
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
0060 904225            MOV     DPTR,#04225H
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 5401              ANL     A,#01H
0068 FF                MOV     R7,A
0069 7E00              MOV     R6,#00H
006B 900000      R     MOV     DPTR,#pllLock
006E E0                MOVX    A,@DPTR
006F FE                MOV     R6,A
0070 EE                MOV     A,R6
0071 25E0              ADD     A,ACC
0073 FE                MOV     R6,A
0074 EE                MOV     A,R6
0075 4F                ORL     A,R7
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 5403              ANL     A,#03H
007A FF                MOV     R7,A
007B 900000      R     MOV     DPTR,#pllLock
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0080 7FE0              MOV     R7,#0E0H
0082 7E01              MOV     R6,#01H
0084 7D00              MOV     R5,#00H
0086 7C00              MOV     R4,#00H
0088 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 130
008B 900000      R     MOV     DPTR,#timeout
008E 120000      E     LCALL   ?C?LLDXDATA
0091 7BFF              MOV     R3,#0FFH
0093 7AFF              MOV     R2,#0FFH
0095 79FF              MOV     R1,#0FFH
0097 78FF              MOV     R0,#0FFH
0099 120000      E     LCALL   ?C?LADD
009C 900000      R     MOV     DPTR,#timeout
009F 120000      E     LCALL   ?C?LSTXDATA
00A2 80A3              SJMP    ?C0004
00A4         ?C0005:
                                           ; SOURCE LINE # 132
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 10  

00A4 900000      R     MOV     DPTR,#timeout
00A7 120000      E     LCALL   ?C?LLDXDATA
00AA EF                MOV     A,R7
00AB 4E                ORL     A,R6
00AC 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
00AE 7F03              MOV     R7,#03H
00B0 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 135
00B3         ?C0007:
                                           ; SOURCE LINE # 138
00B3 7B00              MOV     R3,#00H
00B5 7A40              MOV     R2,#040H
00B7 7904              MOV     R1,#04H
00B9 7D00              MOV     R5,#00H
00BB 7C01              MOV     R4,#01H
00BD 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 139
00C0 904004            MOV     DPTR,#04004H
00C3 7407              MOV     A,#07H
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
00C6 904006            MOV     DPTR,#04006H
00C9 E4                CLR     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
00CB 904008            MOV     DPTR,#04008H
00CE 7448              MOV     A,#048H
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
00D1 904004            MOV     DPTR,#04004H
00D4 E4                CLR     A
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
00D6 904009            MOV     DPTR,#04009H
00D9 E4                CLR     A
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
00DB 904001            MOV     DPTR,#04001H
00DE 7402              MOV     A,#02H
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
00E1 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 11  

0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 195
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0010
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0025 800E              SJMP    ?C0011
0027         ?C0010:
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 12  

0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0035         ?C0011:
                                           ; SOURCE LINE # 206
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 245
0000 904800            MOV     DPTR,#04800H
0003 74C0              MOV     A,#0C0H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0006 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 249
0009 7B00              MOV     R3,#00H
000B 7A46              MOV     R2,#046H
000D 79E8              MOV     R1,#0E8H
000F 120000      E     LCALL   _cyread8
0012 EF                MOV     A,R7
0013 4405              ORL     A,#05H
0015 FD                MOV     R5,A
0016 7B00              MOV     R3,#00H
0018 7A46              MOV     R2,#046H
001A 79E8              MOV     R1,#0E8H
001C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 318
001F 750000      R     MOV     i,#00H
0022         ?C0013:
0022 E500        R     MOV     A,i
0024 C3                CLR     C
0025 9408              SUBB    A,#08H
0027 503A              JNC     ?C0014
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0029 AF00        R     MOV     R7,i
002B EF                MOV     A,R7
002C 75F005            MOV     B,#05H
002F A4                MUL     AB
0030 2400        R     ADD     A,#LOW cfg_memset_list
0032 F582              MOV     DPL,A
0034 E4                CLR     A
0035 3400        R     ADDC    A,#HIGH cfg_memset_list
0037 F583              MOV     DPH,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 13  

0039 AF82              MOV     R7,DPL
003B AE83              MOV     R6,DPH
003D 8E00        R     MOV     ms,R6
003F 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 321
0041 AE00        R     MOV     R6,ms
0043 AF00        R     MOV     R7,ms+01H
0045 8F82              MOV     DPL,R7
0047 8E83              MOV     DPH,R6
0049 120000      E     LCALL   ?C?PLDCODE
004C AE00        R     MOV     R6,ms
004E AF00        R     MOV     R7,ms+01H
0050 8F82              MOV     DPL,R7
0052 8E83              MOV     DPH,R6
0054 7403              MOV     A,#03H
0056 93                MOVC    A,@A+DPTR
0057 FC                MOV     R4,A
0058 7404              MOV     A,#04H
005A 93                MOVC    A,@A+DPTR
005B FD                MOV     R5,A
005C 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 322
005F 0500        R     INC     i
0061 80BF              SJMP    ?C0013
0063         ?C0014:
                                           ; SOURCE LINE # 324
0063 7E00        R     MOV     R6,#HIGH cfg_byte_table
0065 7F00        R     MOV     R7,#LOW cfg_byte_table
0067 120000      E     LCALL   _cfg_write_bytes_code
                                           ; SOURCE LINE # 327
006A 7B01              MOV     R3,#01H
006C 7A50              MOV     R2,#050H
006E 7903              MOV     R1,#03H
0070 120000      E     LCALL   _cyread8
0073 EF                MOV     A,R7
0074 4402              ORL     A,#02H
0076 FD                MOV     R5,A
0077 7B01              MOV     R3,#01H
0079 7A50              MOV     R2,#050H
007B 7903              MOV     R1,#03H
007D 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 328
0080 7B01              MOV     R3,#01H
0082 7A50              MOV     R2,#050H
0084 7913              MOV     R1,#013H
0086 120000      E     LCALL   _cyread8
0089 EF                MOV     A,R7
008A 4402              ORL     A,#02H
008C FD                MOV     R5,A
008D 7B01              MOV     R3,#01H
008F 7A50              MOV     R2,#050H
0091 7913              MOV     R1,#013H
0093 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 331
0096 9043A0            MOV     DPTR,#043A0H
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B EF                MOV     A,R7
009C 4440              ORL     A,#040H
009E FF                MOV     R7,A
009F 9043A0            MOV     DPTR,#043A0H
00A2 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 14  

00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
00A4 9043C2            MOV     DPTR,#043C2H
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 EF                MOV     A,R7
00AA 4410              ORL     A,#010H
00AC FF                MOV     R7,A
00AD 9043C2            MOV     DPTR,#043C2H
00B0 EF                MOV     A,R7
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 336
00B2 7C00        R     MOV     R4,#HIGH BS_IOPINS0_8_VAL
00B4 7D00        R     MOV     R5,#LOW BS_IOPINS0_8_VAL
00B6 7B00              MOV     R3,#00H
00B8 7A51              MOV     R2,#051H
00BA 79F0              MOV     R1,#0F0H
00BC 7F0A              MOV     R7,#0AH
00BE 7E00              MOV     R6,#00H
00C0 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 337
00C3 7C00        R     MOV     R4,#HIGH BS_IOPINS0_1_VAL
00C5 7D00        R     MOV     R5,#LOW BS_IOPINS0_1_VAL
00C7 7B00              MOV     R3,#00H
00C9 7A51              MOV     R2,#051H
00CB 7912              MOV     R1,#012H
00CD 7F08              MOV     R7,#08H
00CF 7E00              MOV     R6,#00H
00D1 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 338
00D4 7C00        R     MOV     R4,#HIGH BS_IOPINS0_2_VAL
00D6 7D00        R     MOV     R5,#LOW BS_IOPINS0_2_VAL
00D8 7B00              MOV     R3,#00H
00DA 7A51              MOV     R2,#051H
00DC 7922              MOV     R1,#022H
00DE 7F08              MOV     R7,#08H
00E0 7E00              MOV     R6,#00H
00E2 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 339
00E5 9044F4            MOV     DPTR,#044F4H
00E8 7401              MOV     A,#01H
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
00EB 904322            MOV     DPTR,#04322H
00EE E0                MOVX    A,@DPTR
00EF FF                MOV     R7,A
00F0 EF                MOV     A,R7
00F1 4408              ORL     A,#08H
00F3 FF                MOV     R7,A
00F4 904322            MOV     DPTR,#04322H
00F7 EF                MOV     A,R7
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
00F9 9046EC            MOV     DPTR,#046ECH
00FC E0                MOVX    A,@DPTR
00FD FF                MOV     R7,A
00FE EF                MOV     A,R7
00FF C3                CLR     C
0100 9405              SUBB    A,#05H
0102 5006              JNC     ?C0016
                                           ; SOURCE LINE # 344
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 15  

                                           ; SOURCE LINE # 345
0104 904689            MOV     DPTR,#04689H
0107 743A              MOV     A,#03AH
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
010A         ?C0016:
                                           ; SOURCE LINE # 348
010A 7B01              MOV     R3,#01H
010C 7A50              MOV     R2,#050H
010E 7907              MOV     R1,#07H
0110 7D40              MOV     R5,#040H
0112 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 349
0115 7B01              MOV     R3,#01H
0117 7A50              MOV     R2,#050H
0119 7917              MOV     R1,#017H
011B 7D40              MOV     R5,#040H
011D 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 352
0120 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 355
0123 7B00              MOV     R3,#00H
0125 7A43              MOV     R2,#043H
0127 79A0              MOV     R1,#0A0H
0129 C003              PUSH    AR3
012B C002              PUSH    AR2
012D C001              PUSH    AR1
012F 7B00              MOV     R3,#00H
0131 7A43              MOV     R2,#043H
0133 79B0              MOV     R1,#0B0H
0135 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0138 120000      E     LCALL   ?C?PSTXDATA
013B D001              POP     AR1
013D D002              POP     AR2
013F D003              POP     AR3
0141 7F0E              MOV     R7,#0EH
0143 7E00              MOV     R6,#00H
0145 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 356
0148 9043B0            MOV     DPTR,#043B0H
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D EF                MOV     A,R7
014E 54FD              ANL     A,#0FDH
0150 FF                MOV     R7,A
0151 EF                MOV     A,R7
0152 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
0153 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    702    ----
   CONSTANT SIZE    =    161    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/04/2014 17:45:42 PAGE 16  

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
